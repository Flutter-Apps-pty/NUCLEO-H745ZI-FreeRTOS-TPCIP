
FreetosTCPIP_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018300  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  080185a0  080185a0  000285a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018868  08018868  00028868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018870  08018870  00028870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018874  08018874  00028874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  08018878  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000064d0  24000098  08018910  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006568  08018910  00036568  2**0
                  ALLOC
  9 .lwip_sec     000437e0  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 11 .debug_info   00057294  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007ece  00000000  00000000  0008735a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000036b8  00000000  00000000  0008f228  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003448  00000000  00000000  000928e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00044714  00000000  00000000  00095d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00028e20  00000000  00000000  000da43c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001b384d  00000000  00000000  0010325c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002b6aa9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000fc58  00000000  00000000  002b6b24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018588 	.word	0x08018588

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08018588 	.word	0x08018588

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <SystemInit+0x104>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a3e      	ldr	r2, [pc, #248]	; (8000794 <SystemInit+0x104>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <SystemInit+0x104>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <SystemInit+0x104>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b0:	4b39      	ldr	r3, [pc, #228]	; (8000798 <SystemInit+0x108>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d807      	bhi.n	80006cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <SystemInit+0x108>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	4a34      	ldr	r2, [pc, #208]	; (8000798 <SystemInit+0x108>)
 80006c6:	f043 0307 	orr.w	r3, r3, #7
 80006ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <SystemInit+0x10c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <SystemInit+0x10c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d8:	4b30      	ldr	r3, [pc, #192]	; (800079c <SystemInit+0x10c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <SystemInit+0x10c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	492e      	ldr	r1, [pc, #184]	; (800079c <SystemInit+0x10c>)
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <SystemInit+0x110>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemInit+0x108>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d907      	bls.n	8000706 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemInit+0x108>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <SystemInit+0x108>)
 8000700:	f043 0307 	orr.w	r3, r3, #7
 8000704:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemInit+0x10c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemInit+0x10c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemInit+0x10c>)
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <SystemInit+0x114>)
 800071c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemInit+0x10c>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemInit+0x118>)
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemInit+0x10c>)
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x11c>)
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <SystemInit+0x10c>)
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <SystemInit+0x11c>)
 8000734:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <SystemInit+0x10c>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <SystemInit+0x10c>)
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <SystemInit+0x11c>)
 8000740:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <SystemInit+0x10c>)
 8000744:	2200      	movs	r2, #0
 8000746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <SystemInit+0x10c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <SystemInit+0x10c>)
 800074e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x10c>)
 8000756:	2200      	movs	r2, #0
 8000758:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <SystemInit+0x120>)
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <SystemInit+0x120>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <SystemInit+0x124>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x128>)
 800076c:	4013      	ands	r3, r2
 800076e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000772:	d202      	bcs.n	800077a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x12c>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x130>)
 800077c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000780:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SystemInit+0x104>)
 8000784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000788:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	52002000 	.word	0x52002000
 800079c:	58024400 	.word	0x58024400
 80007a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a4:	02020200 	.word	0x02020200
 80007a8:	01ff0000 	.word	0x01ff0000
 80007ac:	01010280 	.word	0x01010280
 80007b0:	580000c0 	.word	0x580000c0
 80007b4:	5c001000 	.word	0x5c001000
 80007b8:	ffff0000 	.word	0xffff0000
 80007bc:	51008108 	.word	0x51008108
 80007c0:	52004000 	.word	0x52004000

080007c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007cc:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <SCB_EnableICache+0x3c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007dc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <SCB_EnableICache+0x3c>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <SCB_EnableICache+0x3c>)
 80007e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <SCB_EnableDCache+0x7c>)
 800080c:	2200      	movs	r2, #0
 800080e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000812:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <SCB_EnableDCache+0x7c>)
 8000818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800081c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	0b5b      	lsrs	r3, r3, #13
 8000822:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000826:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	08db      	lsrs	r3, r3, #3
 800082c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000830:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	015a      	lsls	r2, r3, #5
 8000836:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800083a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000840:	490f      	ldr	r1, [pc, #60]	; (8000880 <SCB_EnableDCache+0x7c>)
 8000842:	4313      	orrs	r3, r2
 8000844:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	60ba      	str	r2, [r7, #8]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1ef      	bne.n	8000832 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	60fa      	str	r2, [r7, #12]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1e5      	bne.n	8000828 <SCB_EnableDCache+0x24>
 800085c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <SCB_EnableDCache+0x7c>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <SCB_EnableDCache+0x7c>)
 8000866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800086a:	6153      	str	r3, [r2, #20]
 800086c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000870:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 800088a:	f000 fc31 	bl	80010f0 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 800088e:	f7ff ff99 	bl	80007c4 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000892:	f7ff ffb7 	bl	8000804 <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800089a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800089c:	bf00      	nop
 800089e:	4b32      	ldr	r3, [pc, #200]	; (8000968 <main+0xe4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d004      	beq.n	80008b4 <main+0x30>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	dcf4      	bgt.n	800089e <main+0x1a>
	if ( timeout < 0 )
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da01      	bge.n	80008be <main+0x3a>
	{
		Error_Handler();
 80008ba:	f000 fc8e 	bl	80011da <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008be:	f001 f8fb 	bl	8001ab8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008c2:	f000 f863 	bl	800098c <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80008c6:	4b28      	ldr	r3, [pc, #160]	; (8000968 <main+0xe4>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a26      	ldr	r2, [pc, #152]	; (8000968 <main+0xe4>)
 80008ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b24      	ldr	r3, [pc, #144]	; (8000968 <main+0xe4>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f006 f903 	bl	8006af0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80008ea:	2100      	movs	r1, #0
 80008ec:	2000      	movs	r0, #0
 80008ee:	f006 f919 	bl	8006b24 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80008f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f6:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008f8:	bf00      	nop
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <main+0xe4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d104      	bne.n	8000910 <main+0x8c>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	607a      	str	r2, [r7, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	dcf4      	bgt.n	80008fa <main+0x76>
	if ( timeout < 0 )
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	da01      	bge.n	800091a <main+0x96>
	{
		Error_Handler();
 8000916:	f000 fc60 	bl	80011da <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800091a:	f000 fae1 	bl	8000ee0 <MX_GPIO_Init>
	MX_BDMA_Init();
 800091e:	f000 fa97 	bl	8000e50 <MX_BDMA_Init>
	MX_DMA_Init();
 8000922:	f000 fab5 	bl	8000e90 <MX_DMA_Init>
	MX_USART3_UART_Init();
 8000926:	f000 fa15 	bl	8000d54 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800092a:	f000 fa5f 	bl	8000dec <MX_USB_OTG_FS_PCD_Init>
	MX_ADC3_Init();
 800092e:	f000 f937 	bl	8000ba0 <MX_ADC3_Init>
	MX_DAC1_Init();
 8000932:	f000 f99b 	bl	8000c6c <MX_DAC1_Init>
	MX_TIM6_Init();
 8000936:	f000 f9d7 	bl	8000ce8 <MX_TIM6_Init>
	//  MX_ETH_Init();
	/* USER CODE BEGIN 2 */
	/* Initialise the RTOS’s TCP/IP stack.  The tasks that use the network
  are created in the vApplicationIPNetworkEventHook() hook function
  below.  The hook function is called when the network connects. */
	FreeRTOS_IPInit( ucIPAddress,
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <main+0xe8>)
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <main+0xec>)
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <main+0xf0>)
 8000942:	490d      	ldr	r1, [pc, #52]	; (8000978 <main+0xf4>)
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <main+0xf8>)
 8000946:	f00f f929 	bl	800fb9c <FreeRTOS_IPInit>
			ucGatewayAddress,
			ucDNSServerAddress,
			ucMACAddress );

	/* Start the task that executes on the M7 core. */
	xTaskCreate( prvM7CoreTasks, 			/* Function that implements the task. */
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <main+0xfc>)
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	2300      	movs	r3, #0
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2300      	movs	r3, #0
 8000954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000958:	490a      	ldr	r1, [pc, #40]	; (8000984 <main+0x100>)
 800095a:	480b      	ldr	r0, [pc, #44]	; (8000988 <main+0x104>)
 800095c:	f00c fa88 	bl	800ce70 <xTaskCreate>
			tskIDLE_PRIORITY, 			/* Task priority. */
			&xM7AMPTask );				/* Task handle, used to unblock task from interrupt. */


	/* Start scheduler */
	vTaskStartScheduler();
 8000960:	f00c fc02 	bl	800d168 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000964:	e7fe      	b.n	8000964 <main+0xe0>
 8000966:	bf00      	nop
 8000968:	58024400 	.word	0x58024400
 800096c:	24000008 	.word	0x24000008
 8000970:	0801873c 	.word	0x0801873c
 8000974:	08018738 	.word	0x08018738
 8000978:	08018734 	.word	0x08018734
 800097c:	08018730 	.word	0x08018730
 8000980:	240000b4 	.word	0x240000b4
 8000984:	080185a0 	.word	0x080185a0
 8000988:	08000fdd 	.word	0x08000fdd

0800098c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0cc      	sub	sp, #304	; 0x130
 8000990:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000996:	224c      	movs	r2, #76	; 0x4c
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f016 fc93 	bl	80172c6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009a4:	2220      	movs	r2, #32
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f016 fc8c 	bl	80172c6 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	4618      	mov	r0, r3
 80009b4:	23bc      	movs	r3, #188	; 0xbc
 80009b6:	461a      	mov	r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	f016 fc84 	bl	80172c6 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009be:	2004      	movs	r0, #4
 80009c0:	f006 fa0c 	bl	8006ddc <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	4b71      	ldr	r3, [pc, #452]	; (8000b90 <SystemClock_Config+0x204>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a70      	ldr	r2, [pc, #448]	; (8000b90 <SystemClock_Config+0x204>)
 80009d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b6e      	ldr	r3, [pc, #440]	; (8000b90 <SystemClock_Config+0x204>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	4b6c      	ldr	r3, [pc, #432]	; (8000b94 <SystemClock_Config+0x208>)
 80009e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e6:	4a6b      	ldr	r2, [pc, #428]	; (8000b94 <SystemClock_Config+0x208>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009ee:	4b69      	ldr	r3, [pc, #420]	; (8000b94 <SystemClock_Config+0x208>)
 80009f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f2:	f003 0201 	and.w	r2, r3, #1
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009fe:	bf00      	nop
 8000a00:	4b63      	ldr	r3, [pc, #396]	; (8000b90 <SystemClock_Config+0x204>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a0c:	d1f8      	bne.n	8000a00 <SystemClock_Config+0x74>
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a0e:	4b62      	ldr	r3, [pc, #392]	; (8000b98 <SystemClock_Config+0x20c>)
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	f023 0303 	bic.w	r3, r3, #3
 8000a16:	4a60      	ldr	r2, [pc, #384]	; (8000b98 <SystemClock_Config+0x20c>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 120;
 8000a3e:	2378      	movs	r3, #120	; 0x78
 8000a40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a56:	230c      	movs	r3, #12
 8000a58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f006 fa1f 	bl	8006eb0 <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0xf0>
	{
		Error_Handler();
 8000a78:	f000 fbaf 	bl	80011da <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	233f      	movs	r3, #63	; 0x3f
 8000a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a82:	2303      	movs	r3, #3
 8000a84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a94:	2340      	movs	r3, #64	; 0x40
 8000a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a9a:	2340      	movs	r3, #64	; 0x40
 8000a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aa8:	2340      	movs	r3, #64	; 0x40
 8000aaa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f006 fe0b 	bl	80076d0 <HAL_RCC_ClockConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x138>
	{
		Error_Handler();
 8000ac0:	f000 fb8b 	bl	80011da <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	4a34      	ldr	r2, [pc, #208]	; (8000b9c <SystemClock_Config+0x210>)
 8000aca:	601a      	str	r2, [r3, #0]
			|RCC_PERIPHCLK_USB;
	PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	605a      	str	r2, [r3, #4]
	PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	2213      	movs	r2, #19
 8000ada:	609a      	str	r2, [r3, #8]
	PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	60da      	str	r2, [r3, #12]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	2202      	movs	r2, #2
 8000aea:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	2202      	movs	r2, #2
 8000af2:	615a      	str	r2, [r3, #20]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	22c0      	movs	r2, #192	; 0xc0
 8000afa:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	2220      	movs	r2, #32
 8000b02:	61da      	str	r2, [r3, #28]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
	PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2201      	movs	r2, #1
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
	PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	2218      	movs	r2, #24
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	2202      	movs	r2, #2
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	2204      	movs	r2, #4
 8000b2a:	631a      	str	r2, [r3, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	2202      	movs	r2, #2
 8000b32:	635a      	str	r2, [r3, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000b3c:	639a      	str	r2, [r3, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	2200      	movs	r2, #0
 8000b44:	63da      	str	r2, [r3, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	641a      	str	r2, [r3, #64]	; 0x40
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	2200      	movs	r2, #0
 8000b54:	675a      	str	r2, [r3, #116]	; 0x74
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	4618      	mov	r0, r3
 8000b72:	f007 f973 	bl	8007e5c <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x1f4>
	{
		Error_Handler();
 8000b7c:	f000 fb2d 	bl	80011da <Error_Handler>
	}
	/** Enable USB Voltage detector
	 */
	HAL_PWREx_EnableUSBVoltageDetector();
 8000b80:	f006 f986 	bl	8006e90 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000b84:	bf00      	nop
 8000b86:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	58024800 	.word	0x58024800
 8000b94:	58000400 	.word	0x58000400
 8000b98:	58024400 	.word	0x58024400
 8000b9c:	000c0002 	.word	0x000c0002

08000ba0 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Common config
	 */
	hadc3.Instance = ADC3;
 8000bb8:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000bba:	4a2a      	ldr	r2, [pc, #168]	; (8000c64 <MX_ADC3_Init+0xc4>)
 8000bbc:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bbe:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	611a      	str	r2, [r3, #16]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	751a      	strb	r2, [r3, #20]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	755a      	strb	r2, [r3, #21]
	hadc3.Init.NbrOfConversion = 1;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	771a      	strb	r2, [r3, #28]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.OversamplingMode = DISABLE;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c14:	4812      	ldr	r0, [pc, #72]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000c16:	f001 f98f 	bl	8001f38 <HAL_ADC_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC3_Init+0x84>
	{
		Error_Handler();
 8000c20:	f000 fadb 	bl	80011da <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_ADC3_Init+0xc8>)
 8000c26:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c28:	2306      	movs	r3, #6
 8000c2a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c30:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c34:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c36:	2304      	movs	r3, #4
 8000c38:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	777b      	strb	r3, [r7, #29]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_ADC3_Init+0xc0>)
 8000c48:	f001 fb16 	bl	8002278 <HAL_ADC_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_ADC3_Init+0xb6>
	{
		Error_Handler();
 8000c52:	f000 fac2 	bl	80011da <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2400636c 	.word	0x2400636c
 8000c64:	58026000 	.word	0x58026000
 8000c68:	04300002 	.word	0x04300002

08000c6c <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2224      	movs	r2, #36	; 0x24
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f016 fb24 	bl	80172c6 <memset>
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_DAC1_Init+0x74>)
 8000c80:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <MX_DAC1_Init+0x78>)
 8000c82:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c84:	4816      	ldr	r0, [pc, #88]	; (8000ce0 <MX_DAC1_Init+0x74>)
 8000c86:	f002 f86f 	bl	8002d68 <HAL_DAC_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_DAC1_Init+0x28>
	{
		Error_Handler();
 8000c90:	f000 faa3 	bl	80011da <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MX_DAC1_Init+0x74>)
 8000cb0:	f002 f8e0 	bl	8002e74 <HAL_DAC_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_DAC1_Init+0x52>
	{
		Error_Handler();
 8000cba:	f000 fa8e 	bl	80011da <Error_Handler>
	}
	/** DAC channel OUT2 config
	 */
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	613b      	str	r3, [r7, #16]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2210      	movs	r2, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_DAC1_Init+0x74>)
 8000cca:	f002 f8d3 	bl	8002e74 <HAL_DAC_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_DAC1_Init+0x6c>
	{
		Error_Handler();
 8000cd4:	f000 fa81 	bl	80011da <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	24005dd4 	.word	0x24005dd4
 8000ce4:	40007400 	.word	0x40007400

08000ce8 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_TIM6_Init+0x64>)
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <MX_TIM6_Init+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 100;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_TIM6_Init+0x64>)
 8000d00:	2264      	movs	r2, #100	; 0x64
 8000d02:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_TIM6_Init+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 100;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <MX_TIM6_Init+0x64>)
 8000d0c:	2264      	movs	r2, #100	; 0x64
 8000d0e:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_TIM6_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <MX_TIM6_Init+0x64>)
 8000d18:	f008 ff64 	bl	8009be4 <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 8000d22:	f000 fa5a 	bl	80011da <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_TIM6_Init+0x64>)
 8000d34:	f009 f9c6 	bl	800a0c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 8000d3e:	f000 fa4c 	bl	80011da <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	240063d0 	.word	0x240063d0
 8000d50:	40001000 	.word	0x40001000

08000d54 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d5a:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <MX_USART3_UART_Init+0x94>)
 8000d5c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d64:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d9c:	4811      	ldr	r0, [pc, #68]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000d9e:	f009 fa37 	bl	800a210 <HAL_UART_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8000da8:	f000 fa17 	bl	80011da <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dac:	2100      	movs	r1, #0
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000db0:	f00a fa67 	bl	800b282 <HAL_UARTEx_SetTxFifoThreshold>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART3_UART_Init+0x6a>
	{
		Error_Handler();
 8000dba:	f000 fa0e 	bl	80011da <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4808      	ldr	r0, [pc, #32]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000dc2:	f00a fa9c 	bl	800b2fe <HAL_UARTEx_SetRxFifoThreshold>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 8000dcc:	f000 fa05 	bl	80011da <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_USART3_UART_Init+0x90>)
 8000dd2:	f00a fa1d 	bl	800b210 <HAL_UARTEx_DisableFifoMode>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8000ddc:	f000 f9fd 	bl	80011da <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	24005de8 	.word	0x24005de8
 8000de8:	40004800 	.word	0x40004800

08000dec <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df2:	4a16      	ldr	r2, [pc, #88]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000df4:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df8:	2209      	movs	r2, #9
 8000dfa:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dfe:	2202      	movs	r2, #2
 8000e00:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e34:	f005 fe8a 	bl	8006b4c <HAL_PCD_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_USB_OTG_FS_PCD_Init+0x56>
	{
		Error_Handler();
 8000e3e:	f000 f9cc 	bl	80011da <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	24005e74 	.word	0x24005e74
 8000e4c:	40080000 	.word	0x40080000

08000e50 <MX_BDMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_BDMA_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_BDMA_CLK_ENABLE();
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <MX_BDMA_Init+0x3c>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <MX_BDMA_Init+0x3c>)
 8000e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_BDMA_Init+0x3c>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* BDMA_Channel0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2081      	movs	r0, #129	; 0x81
 8000e7a:	f001 fec1 	bl	8002c00 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000e7e:	2081      	movs	r0, #129	; 0x81
 8000e80:	f001 fed8 	bl	8002c34 <HAL_NVIC_EnableIRQ>

}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	58024400 	.word	0x58024400

08000e90 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_DMA_Init+0x4c>)
 8000e98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <MX_DMA_Init+0x4c>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <MX_DMA_Init+0x4c>)
 8000ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	200b      	movs	r0, #11
 8000eba:	f001 fea1 	bl	8002c00 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ebe:	200b      	movs	r0, #11
 8000ec0:	f001 feb8 	bl	8002c34 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	200c      	movs	r0, #12
 8000eca:	f001 fe99 	bl	8002c00 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ece:	200c      	movs	r0, #12
 8000ed0:	f001 feb0 	bl	8002c34 <HAL_NVIC_EnableIRQ>

}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	58024400 	.word	0x58024400

08000ee0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	4a2e      	ldr	r2, [pc, #184]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a18      	ldr	r2, [pc, #96]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_GPIO_Init+0xc8>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]

}
 8000f9a:	bf00      	nop
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	58024400 	.word	0x58024400

08000fac <ulApplicationGetNextSequenceNumber>:

/* USER CODE BEGIN 4 */
uint32_t ulApplicationGetNextSequenceNumber( uint32_t ulSourceAddress,
		uint16_t usSourcePort,
		uint32_t ulDestinationAddress,
		uint16_t usDestinationPort ){
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	460b      	mov	r3, r1
 8000fba:	817b      	strh	r3, [r7, #10]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	813b      	strh	r3, [r7, #8]
	//todo this is not correct is just to get the thing to compile
	static uint32_t counter = 0;
	return counter++;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <ulApplicationGetNextSequenceNumber+0x2c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	4904      	ldr	r1, [pc, #16]	; (8000fd8 <ulApplicationGetNextSequenceNumber+0x2c>)
 8000fc8:	600a      	str	r2, [r1, #0]

}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	240000b8 	.word	0x240000b8

08000fdc <prvM7CoreTasks>:
void prvM7CoreTasks( void *pvParameters ){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b098      	sub	sp, #96	; 0x60
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
	Socket_t xSocket;
	struct freertos_sockaddr xDestinationAddress;
	uint8_t cString[ 50 ];
	uint32_t ulCount = 0UL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	657b      	str	r3, [r7, #84]	; 0x54
	const TickType_t x1000ms = 1000UL / portTICK_PERIOD_MS;
 8000fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fec:	653b      	str	r3, [r7, #80]	; 0x50

	/* Send strings to port 10000 on IP address 192.168.0.50. */
	xDestinationAddress.sin_addr = FreeRTOS_inet_addr( "192.168.0.25" );
 8000fee:	4823      	ldr	r0, [pc, #140]	; (800107c <prvM7CoreTasks+0xa0>)
 8000ff0:	f010 fdd0 	bl	8011b94 <FreeRTOS_inet_addr>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	647b      	str	r3, [r7, #68]	; 0x44
	xDestinationAddress.sin_port = FreeRTOS_htons( 10000 );
 8000ff8:	f241 0327 	movw	r3, #4135	; 0x1027
 8000ffc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	/* Create the socket. */
	xSocket = FreeRTOS_socket( FREERTOS_AF_INET,
 8001000:	2211      	movs	r2, #17
 8001002:	2102      	movs	r1, #2
 8001004:	2002      	movs	r0, #2
 8001006:	f00f fef3 	bl	8010df0 <FreeRTOS_socket>
 800100a:	64f8      	str	r0, [r7, #76]	; 0x4c
			FREERTOS_SOCK_DGRAM,/*FREERTOS_SOCK_DGRAM for UDP.*/
			FREERTOS_IPPROTO_UDP );

	/* Check the socket was created. */
	configASSERT( xSocket != FREERTOS_INVALID_SOCKET );
 800100c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800100e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001012:	d10b      	bne.n	800102c <prvM7CoreTasks+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001018:	b672      	cpsid	i
 800101a:	f383 8811 	msr	BASEPRI, r3
 800101e:	f3bf 8f6f 	isb	sy
 8001022:	f3bf 8f4f 	dsb	sy
 8001026:	b662      	cpsie	i
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
 800102a:	e7fe      	b.n	800102a <prvM7CoreTasks+0x4e>

	/* NOTE: FreeRTOS_bind() is not called.  This will only work if
	   ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is set to 1 in FreeRTOSIPConfig.h. */
	for(;;){
		printf("Hello\r\n");
 800102c:	4814      	ldr	r0, [pc, #80]	; (8001080 <prvM7CoreTasks+0xa4>)
 800102e:	f016 f9c7 	bl	80173c0 <puts>
		sprintf( cString,
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001038:	4912      	ldr	r1, [pc, #72]	; (8001084 <prvM7CoreTasks+0xa8>)
 800103a:	4618      	mov	r0, r3
 800103c:	f016 fa30 	bl	80174a0 <siprintf>

		/* Send the string to the UDP socket.  ulFlags is set to 0, so the standard
	       semantics are used.  That means the data from cString[] is copied
	       into a network buffer inside FreeRTOS_sendto(), and cString[] can be
	       reused as soon as FreeRTOS_sendto() has returned. */
		printf("length of packet %d\r\n", FreeRTOS_sendto( xSocket,
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f94b 	bl	80002e0 <strlen>
 800104a:	4602      	mov	r2, r0
 800104c:	f107 010c 	add.w	r1, r7, #12
 8001050:	2308      	movs	r3, #8
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2300      	movs	r3, #0
 800105c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800105e:	f010 f812 	bl	8011086 <FreeRTOS_sendto>
 8001062:	4603      	mov	r3, r0
 8001064:	4619      	mov	r1, r3
 8001066:	4808      	ldr	r0, [pc, #32]	; (8001088 <prvM7CoreTasks+0xac>)
 8001068:	f016 f936 	bl	80172d8 <iprintf>
				0,
				&xDestinationAddress,
				sizeof( xDestinationAddress ) ));


		ulCount++;
 800106c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800106e:	3301      	adds	r3, #1
 8001070:	657b      	str	r3, [r7, #84]	; 0x54

		/* Wait until it is time to send again. */
		vTaskDelay( x1000ms );
 8001072:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001074:	f00c f842 	bl	800d0fc <vTaskDelay>
		printf("Hello\r\n");
 8001078:	e7d8      	b.n	800102c <prvM7CoreTasks+0x50>
 800107a:	bf00      	nop
 800107c:	080185ac 	.word	0x080185ac
 8001080:	080185bc 	.word	0x080185bc
 8001084:	080185c4 	.word	0x080185c4
 8001088:	080185e8 	.word	0x080185e8

0800108c <pcApplicationHostnameHook>:
	}

}
const char *pcApplicationHostnameHook( void ){
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
	return "ECAMStmDevice";
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <pcApplicationHostnameHook+0x10>)
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	08018600 	.word	0x08018600

080010a0 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	static BaseType_t xTasksAlreadyCreated = pdFALSE;

	/* Both eNetworkUp and eNetworkDown events can be processed here. */
	if( eNetworkEvent == eNetworkUp )
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d106      	bne.n	80010be <vApplicationIPNetworkEventHook+0x1e>
	{
		/* Create the tasks that use the TCP/IP stack if they have not already
        been created. */
		if( xTasksAlreadyCreated == pdFALSE )
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <vApplicationIPNetworkEventHook+0x2c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <vApplicationIPNetworkEventHook+0x1e>
			/*
			 * For convenience, tasks that use FreeRTOS+TCP can be created here
			 * to ensure they are not created before the network is usable.
			 */

			xTasksAlreadyCreated = pdTRUE;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <vApplicationIPNetworkEventHook+0x2c>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	601a      	str	r2, [r3, #0]
		}
	}
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	240000bc 	.word	0x240000bc

080010d0 <xApplicationGetRandomNumber>:
BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 80010d8:	f016 f97a 	bl	80173d0 <rand>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 80010e4:	2301      	movs	r3, #1
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]

	  /* Disables the MPU */
	  HAL_MPU_Disable();
 8001102:	f001 fda5 	bl	8002c50 <HAL_MPU_Disable>
	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001106:	2301      	movs	r3, #1
 8001108:	703b      	strb	r3, [r7, #0]
	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800110a:	2300      	movs	r3, #0
 800110c:	707b      	strb	r3, [r7, #1]
	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800110e:	2300      	movs	r3, #0
 8001110:	707b      	strb	r3, [r7, #1]
	  MPU_InitStruct.BaseAddress = 0x30040000;
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <MPU_Config+0xc4>)
 8001114:	607b      	str	r3, [r7, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001116:	230d      	movs	r3, #13
 8001118:	723b      	strb	r3, [r7, #8]
	  MPU_InitStruct.SubRegionDisable = 0x0;
 800111a:	2300      	movs	r3, #0
 800111c:	727b      	strb	r3, [r7, #9]
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800111e:	2301      	movs	r3, #1
 8001120:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001122:	2303      	movs	r3, #3
 8001124:	72fb      	strb	r3, [r7, #11]
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	733b      	strb	r3, [r7, #12]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	737b      	strb	r3, [r7, #13]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001136:	463b      	mov	r3, r7
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fdbd 	bl	8002cb8 <HAL_MPU_ConfigRegion>
	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800113e:	2301      	movs	r3, #1
 8001140:	703b      	strb	r3, [r7, #0]
	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001142:	2301      	movs	r3, #1
 8001144:	707b      	strb	r3, [r7, #1]
	  MPU_InitStruct.BaseAddress = 0x30044000;
 8001146:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MPU_Config+0xc8>)
 8001148:	607b      	str	r3, [r7, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800114a:	230d      	movs	r3, #13
 800114c:	723b      	strb	r3, [r7, #8]
	  MPU_InitStruct.SubRegionDisable = 0x0;
 800114e:	2300      	movs	r3, #0
 8001150:	727b      	strb	r3, [r7, #9]
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001152:	2300      	movs	r3, #0
 8001154:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001156:	2303      	movs	r3, #3
 8001158:	72fb      	strb	r3, [r7, #11]
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	733b      	strb	r3, [r7, #12]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	737b      	strb	r3, [r7, #13]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001162:	2301      	movs	r3, #1
 8001164:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800116a:	463b      	mov	r3, r7
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fda3 	bl	8002cb8 <HAL_MPU_ConfigRegion>
	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001172:	2301      	movs	r3, #1
 8001174:	703b      	strb	r3, [r7, #0]
	  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001176:	2302      	movs	r3, #2
 8001178:	707b      	strb	r3, [r7, #1]
	  MPU_InitStruct.BaseAddress = 0x30040000;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MPU_Config+0xc4>)
 800117c:	607b      	str	r3, [r7, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800117e:	2307      	movs	r3, #7
 8001180:	723b      	strb	r3, [r7, #8]
	  MPU_InitStruct.SubRegionDisable = 0x0;
 8001182:	2300      	movs	r3, #0
 8001184:	727b      	strb	r3, [r7, #9]
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001186:	2300      	movs	r3, #0
 8001188:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800118a:	2303      	movs	r3, #3
 800118c:	72fb      	strb	r3, [r7, #11]
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	733b      	strb	r3, [r7, #12]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	737b      	strb	r3, [r7, #13]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800119a:	2301      	movs	r3, #1
 800119c:	73fb      	strb	r3, [r7, #15]

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800119e:	463b      	mov	r3, r7
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 fd89 	bl	8002cb8 <HAL_MPU_ConfigRegion>
	  /* Enables the MPU */
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011a6:	2004      	movs	r0, #4
 80011a8:	f001 fd68 	bl	8002c7c <HAL_MPU_Enable>

}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	30040000 	.word	0x30040000
 80011b8:	30044000 	.word	0x30044000

080011bc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011cc:	d101      	bne.n	80011d2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80011ce:	f000 fcaf 	bl	8001b30 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_MspInit+0x30>)
 80011f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011f4:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x30>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x30>)
 8001200:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	58024400 	.word	0x58024400

0800121c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <HAL_ADC_MspInit+0xbc>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d150      	bne.n	80012d0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_ADC_MspInit+0xc0>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a29      	ldr	r2, [pc, #164]	; (80012dc <HAL_ADC_MspInit+0xc0>)
 8001236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b27      	ldr	r3, [pc, #156]	; (80012dc <HAL_ADC_MspInit+0xc0>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_ADC_MspInit+0xc0>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	4a22      	ldr	r2, [pc, #136]	; (80012dc <HAL_ADC_MspInit+0xc0>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <HAL_ADC_MspInit+0xc0>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC3_C     ------> ADC3_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800126a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800126e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001272:	f000 fcbf 	bl	8001bf4 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_ADC_MspInit+0xc4>)
 8001278:	4a1a      	ldr	r2, [pc, #104]	; (80012e4 <HAL_ADC_MspInit+0xc8>)
 800127a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_ADC_MspInit+0xc4>)
 800127e:	2211      	movs	r2, #17
 8001280:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_ADC_MspInit+0xc4>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_ADC_MspInit+0xc4>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_ADC_MspInit+0xc4>)
 8001290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001294:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_ADC_MspInit+0xc4>)
 8001298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800129c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_ADC_MspInit+0xc4>)
 80012a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_ADC_MspInit+0xc4>)
 80012a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ac:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_ADC_MspInit+0xc4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80012b4:	480a      	ldr	r0, [pc, #40]	; (80012e0 <HAL_ADC_MspInit+0xc4>)
 80012b6:	f001 ff17 	bl	80030e8 <HAL_DMA_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80012c0:	f7ff ff8b 	bl	80011da <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_ADC_MspInit+0xc4>)
 80012c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <HAL_ADC_MspInit+0xc4>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	58026000 	.word	0x58026000
 80012dc:	58024400 	.word	0x58024400
 80012e0:	240062f4 	.word	0x240062f4
 80012e4:	58025408 	.word	0x58025408

080012e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a4c      	ldr	r2, [pc, #304]	; (8001438 <HAL_DAC_MspInit+0x150>)
 8001306:	4293      	cmp	r3, r2
 8001308:	f040 8092 	bne.w	8001430 <HAL_DAC_MspInit+0x148>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800130c:	4b4b      	ldr	r3, [pc, #300]	; (800143c <HAL_DAC_MspInit+0x154>)
 800130e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001312:	4a4a      	ldr	r2, [pc, #296]	; (800143c <HAL_DAC_MspInit+0x154>)
 8001314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001318:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800131c:	4b47      	ldr	r3, [pc, #284]	; (800143c <HAL_DAC_MspInit+0x154>)
 800131e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b44      	ldr	r3, [pc, #272]	; (800143c <HAL_DAC_MspInit+0x154>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	4a42      	ldr	r2, [pc, #264]	; (800143c <HAL_DAC_MspInit+0x154>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133a:	4b40      	ldr	r3, [pc, #256]	; (800143c <HAL_DAC_MspInit+0x154>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001348:	2330      	movs	r3, #48	; 0x30
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134c:	2303      	movs	r3, #3
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4839      	ldr	r0, [pc, #228]	; (8001440 <HAL_DAC_MspInit+0x158>)
 800135c:	f005 fa18 	bl	8006790 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001360:	4b38      	ldr	r3, [pc, #224]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 8001362:	4a39      	ldr	r2, [pc, #228]	; (8001448 <HAL_DAC_MspInit+0x160>)
 8001364:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001366:	4b37      	ldr	r3, [pc, #220]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 8001368:	2243      	movs	r2, #67	; 0x43
 800136a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800136c:	4b35      	ldr	r3, [pc, #212]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 800136e:	2240      	movs	r2, #64	; 0x40
 8001370:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 800137a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 8001382:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001386:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001388:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 800138a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800138e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 8001392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001396:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800139e:	4b29      	ldr	r3, [pc, #164]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80013a4:	4827      	ldr	r0, [pc, #156]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 80013a6:	f001 fe9f 	bl	80030e8 <HAL_DMA_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 80013b0:	f7ff ff13 	bl	80011da <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a23      	ldr	r2, [pc, #140]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	4a22      	ldr	r2, [pc, #136]	; (8001444 <HAL_DAC_MspInit+0x15c>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <HAL_DAC_MspInit+0x164>)
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <HAL_DAC_MspInit+0x168>)
 80013c4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <HAL_DAC_MspInit+0x164>)
 80013c8:	2244      	movs	r2, #68	; 0x44
 80013ca:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_DAC_MspInit+0x164>)
 80013ce:	2240      	movs	r2, #64	; 0x40
 80013d0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <HAL_DAC_MspInit+0x164>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <HAL_DAC_MspInit+0x164>)
 80013da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013de:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <HAL_DAC_MspInit+0x164>)
 80013e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_DAC_MspInit+0x164>)
 80013ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ee:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_DAC_MspInit+0x164>)
 80013f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_DAC_MspInit+0x164>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_DAC_MspInit+0x164>)
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001404:	4811      	ldr	r0, [pc, #68]	; (800144c <HAL_DAC_MspInit+0x164>)
 8001406:	f001 fe6f 	bl	80030e8 <HAL_DMA_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001410:	f7ff fee3 	bl	80011da <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a0d      	ldr	r2, [pc, #52]	; (800144c <HAL_DAC_MspInit+0x164>)
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_DAC_MspInit+0x164>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	2036      	movs	r0, #54	; 0x36
 8001426:	f001 fbeb 	bl	8002c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800142a:	2036      	movs	r0, #54	; 0x36
 800142c:	f001 fc02 	bl	8002c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40007400 	.word	0x40007400
 800143c:	58024400 	.word	0x58024400
 8001440:	58020000 	.word	0x58020000
 8001444:	2400627c 	.word	0x2400627c
 8001448:	40020010 	.word	0x40020010
 800144c:	24005d5c 	.word	0x24005d5c
 8001450:	40020028 	.word	0x40020028

08001454 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a65      	ldr	r2, [pc, #404]	; (8001608 <HAL_ETH_MspInit+0x1b4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	f040 80c3 	bne.w	80015fe <HAL_ETH_MspInit+0x1aa>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001478:	4b64      	ldr	r3, [pc, #400]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 800147a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800147e:	4a63      	ldr	r2, [pc, #396]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 8001480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001484:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001488:	4b60      	ldr	r3, [pc, #384]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 800148a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800148e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001492:	623b      	str	r3, [r7, #32]
 8001494:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001496:	4b5d      	ldr	r3, [pc, #372]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 8001498:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800149c:	4a5b      	ldr	r2, [pc, #364]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 800149e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014a6:	4b59      	ldr	r3, [pc, #356]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 80014a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80014b4:	4b55      	ldr	r3, [pc, #340]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 80014b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ba:	4a54      	ldr	r2, [pc, #336]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014c4:	4b51      	ldr	r3, [pc, #324]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 80014c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b4e      	ldr	r3, [pc, #312]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	4a4c      	ldr	r2, [pc, #304]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e2:	4b4a      	ldr	r3, [pc, #296]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b46      	ldr	r3, [pc, #280]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	4a45      	ldr	r2, [pc, #276]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001500:	4b42      	ldr	r3, [pc, #264]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b3f      	ldr	r3, [pc, #252]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	4a3d      	ldr	r2, [pc, #244]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151e:	4b3b      	ldr	r3, [pc, #236]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800152c:	4b37      	ldr	r3, [pc, #220]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	4a36      	ldr	r2, [pc, #216]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 8001534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153c:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_ETH_MspInit+0x1b8>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800154a:	2332      	movs	r3, #50	; 0x32
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800155a:	230b      	movs	r3, #11
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	482a      	ldr	r0, [pc, #168]	; (8001610 <HAL_ETH_MspInit+0x1bc>)
 8001566:	f005 f913 	bl	8006790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800156a:	2386      	movs	r3, #134	; 0x86
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800157a:	230b      	movs	r3, #11
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	4823      	ldr	r0, [pc, #140]	; (8001614 <HAL_ETH_MspInit+0x1c0>)
 8001586:	f005 f903 	bl	8006790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800158a:	2301      	movs	r3, #1
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800159a:	230b      	movs	r3, #11
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	481c      	ldr	r0, [pc, #112]	; (8001618 <HAL_ETH_MspInit+0x1c4>)
 80015a6:	f005 f8f3 	bl	8006790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015bc:	230b      	movs	r3, #11
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4814      	ldr	r0, [pc, #80]	; (8001618 <HAL_ETH_MspInit+0x1c4>)
 80015c8:	f005 f8e2 	bl	8006790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80015cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015de:	230b      	movs	r3, #11
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <HAL_ETH_MspInit+0x1c8>)
 80015ea:	f005 f8d1 	bl	8006790 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2105      	movs	r1, #5
 80015f2:	203d      	movs	r0, #61	; 0x3d
 80015f4:	f001 fb04 	bl	8002c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80015f8:	203d      	movs	r0, #61	; 0x3d
 80015fa:	f001 fb1b 	bl	8002c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3738      	adds	r7, #56	; 0x38
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40028000 	.word	0x40028000
 800160c:	58024400 	.word	0x58024400
 8001610:	58020800 	.word	0x58020800
 8001614:	58020000 	.word	0x58020000
 8001618:	58020400 	.word	0x58020400
 800161c:	58021800 	.word	0x58021800

08001620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_TIM_Base_MspInit+0x48>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d116      	bne.n	8001660 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_TIM_Base_MspInit+0x4c>)
 8001634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001638:	4a0c      	ldr	r2, [pc, #48]	; (800166c <HAL_TIM_Base_MspInit+0x4c>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_TIM_Base_MspInit+0x4c>)
 8001644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	2036      	movs	r0, #54	; 0x36
 8001656:	f001 fad3 	bl	8002c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800165a:	2036      	movs	r0, #54	; 0x36
 800165c:	f001 faea 	bl	8002c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40001000 	.word	0x40001000
 800166c:	58024400 	.word	0x58024400

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1a      	ldr	r2, [pc, #104]	; (80016f8 <HAL_UART_MspInit+0x88>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12e      	bne.n	80016f0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <HAL_UART_MspInit+0x8c>)
 8001694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001698:	4a18      	ldr	r2, [pc, #96]	; (80016fc <HAL_UART_MspInit+0x8c>)
 800169a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_UART_MspInit+0x8c>)
 80016a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_UART_MspInit+0x8c>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b6:	4a11      	ldr	r2, [pc, #68]	; (80016fc <HAL_UART_MspInit+0x8c>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_UART_MspInit+0x8c>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016e0:	2307      	movs	r3, #7
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <HAL_UART_MspInit+0x90>)
 80016ec:	f005 f850 	bl	8006790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40004800 	.word	0x40004800
 80016fc:	58024400 	.word	0x58024400
 8001700:	58020c00 	.word	0x58020c00

08001704 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <HAL_PCD_MspInit+0xa4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d13b      	bne.n	800179e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_PCD_MspInit+0xa8>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172c:	4a1f      	ldr	r2, [pc, #124]	; (80017ac <HAL_PCD_MspInit+0xa8>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <HAL_PCD_MspInit+0xa8>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001744:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001756:	230a      	movs	r3, #10
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4813      	ldr	r0, [pc, #76]	; (80017b0 <HAL_PCD_MspInit+0xac>)
 8001762:	f005 f815 	bl	8006790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	480d      	ldr	r0, [pc, #52]	; (80017b0 <HAL_PCD_MspInit+0xac>)
 800177c:	f005 f808 	bl	8006790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_PCD_MspInit+0xa8>)
 8001782:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_PCD_MspInit+0xa8>)
 8001788:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800178c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_PCD_MspInit+0xa8>)
 8001792:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40080000 	.word	0x40080000
 80017ac:	58024400 	.word	0x58024400
 80017b0:	58020000 	.word	0x58020000

080017b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08e      	sub	sp, #56	; 0x38
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	201c      	movs	r0, #28
 80017ca:	f001 fa19 	bl	8002c00 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017ce:	201c      	movs	r0, #28
 80017d0:	f001 fa30 	bl	8002c34 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_InitTick+0xa8>)
 80017d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017da:	4a20      	ldr	r2, [pc, #128]	; (800185c <HAL_InitTick+0xa8>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_InitTick+0xa8>)
 80017e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017f2:	f107 020c 	add.w	r2, r7, #12
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f006 faeb 	bl	8007dd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001802:	f006 fabd 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 8001806:	4603      	mov	r3, r0
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_InitTick+0xac>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	0c9b      	lsrs	r3, r3, #18
 8001816:	3b01      	subs	r3, #1
 8001818:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0xb0>)
 800181c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001820:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_InitTick+0xb0>)
 8001824:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001828:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_InitTick+0xb0>)
 800182c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800182e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_InitTick+0xb0>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_InitTick+0xb0>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <HAL_InitTick+0xb0>)
 800183e:	f008 f9d1 	bl	8009be4 <HAL_TIM_Base_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d104      	bne.n	8001852 <HAL_InitTick+0x9e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001848:	4806      	ldr	r0, [pc, #24]	; (8001864 <HAL_InitTick+0xb0>)
 800184a:	f008 fa23 	bl	8009c94 <HAL_TIM_Base_Start_IT>
 800184e:	4603      	mov	r3, r0
 8001850:	e000      	b.n	8001854 <HAL_InitTick+0xa0>
  }

  /* Return function status */
  return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3738      	adds	r7, #56	; 0x38
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	58024400 	.word	0x58024400
 8001860:	431bde83 	.word	0x431bde83
 8001864:	240064c0 	.word	0x240064c0

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <DMA1_Stream0_IRQHandler+0x10>)
 80018a2:	f001 ff7d 	bl	80037a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2400627c 	.word	0x2400627c

080018b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <DMA1_Stream1_IRQHandler+0x10>)
 80018b6:	f001 ff73 	bl	80037a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	24005d5c 	.word	0x24005d5c

080018c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <TIM2_IRQHandler+0x10>)
 80018ca:	f008 fa19 	bl	8009d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	240064c0 	.word	0x240064c0

080018d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <TIM6_DAC_IRQHandler+0x14>)
 80018de:	f001 fa65 	bl	8002dac <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80018e2:	4803      	ldr	r0, [pc, #12]	; (80018f0 <TIM6_DAC_IRQHandler+0x18>)
 80018e4:	f008 fa0c 	bl	8009d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	24005dd4 	.word	0x24005dd4
 80018f0:	240063d0 	.word	0x240063d0

080018f4 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <BDMA_Channel0_IRQHandler+0x10>)
 80018fa:	f001 ff51 	bl	80037a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	240062f4 	.word	0x240062f4

08001908 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e00a      	b.n	8001930 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800191a:	f3af 8000 	nop.w
 800191e:	4601      	mov	r1, r0
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	60ba      	str	r2, [r7, #8]
 8001926:	b2ca      	uxtb	r2, r1
 8001928:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf0      	blt.n	800191a <_read+0x12>
	}

return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e010      	b.n	8001978 <_write+0x34>
	{
		HAL_UART_Transmit(&huart3, (uint8_t *)ptr, 1, 0xFFFF);
 8001956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195a:	2201      	movs	r2, #1
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	480b      	ldr	r0, [pc, #44]	; (800198c <_write+0x48>)
 8001960:	f008 fca6 	bl	800a2b0 <HAL_UART_Transmit>
		__io_putchar(*ptr++);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	dbea      	blt.n	8001956 <_write+0x12>
	}
	return len;
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	24005de8 	.word	0x24005de8

08001990 <_close>:


int _close(int file)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	return -1;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b8:	605a      	str	r2, [r3, #4]
	return 0;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_isatty>:

int _isatty(int file)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	return 1;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019de:	b480      	push	{r7}
 80019e0:	b085      	sub	sp, #20
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
	return 0;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a00:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <_sbrk+0x5c>)
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <_sbrk+0x60>)
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x64>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <_sbrk+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d207      	bcs.n	8001a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a28:	f015 fbf0 	bl	801720c <__errno>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	230c      	movs	r3, #12
 8001a30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e009      	b.n	8001a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <_sbrk+0x64>)
 8001a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	24080000 	.word	0x24080000
 8001a58:	00000400 	.word	0x00000400
 8001a5c:	240000c0 	.word	0x240000c0
 8001a60:	24006568 	.word	0x24006568

08001a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a9c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a68:	f7fe fe12 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a6e:	e003      	b.n	8001a78 <LoopCopyDataInit>

08001a70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001a72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a76:	3104      	adds	r1, #4

08001a78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a78:	480a      	ldr	r0, [pc, #40]	; (8001aa4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001a7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a80:	d3f6      	bcc.n	8001a70 <CopyDataInit>
  ldr  r2, =_sbss
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001a84:	e002      	b.n	8001a8c <LoopFillZerobss>

08001a86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a88:	f842 3b04 	str.w	r3, [r2], #4

08001a8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001a8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a90:	d3f9      	bcc.n	8001a86 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8001a92:	f015 fbc1 	bl	8017218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a96:	f7fe fef5 	bl	8000884 <main>
  bx  lr    
 8001a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a9c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001aa0:	08018878 	.word	0x08018878
  ldr  r0, =_sdata
 8001aa4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001aa8:	24000098 	.word	0x24000098
  ldr  r2, =_sbss
 8001aac:	24000098 	.word	0x24000098
  ldr  r3, = _ebss
 8001ab0:	24006568 	.word	0x24006568

08001ab4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC3_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abe:	2003      	movs	r0, #3
 8001ac0:	f001 f893 	bl	8002bea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ac4:	f005 ffba 	bl	8007a3c <HAL_RCC_GetSysClockFreq>
 8001ac8:	4601      	mov	r1, r0
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_Init+0x68>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <HAL_Init+0x6c>)
 8001ad6:	5cd3      	ldrb	r3, [r2, r3]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	fa21 f303 	lsr.w	r3, r1, r3
 8001ae0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_Init+0x68>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <HAL_Init+0x6c>)
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <HAL_Init+0x70>)
 8001afa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001afc:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <HAL_Init+0x74>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7ff fe56 	bl	80017b4 <HAL_InitTick>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e002      	b.n	8001b18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b12:	f7ff fb69 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	58024400 	.word	0x58024400
 8001b24:	08018720 	.word	0x08018720
 8001b28:	24000004 	.word	0x24000004
 8001b2c:	24000000 	.word	0x24000000

08001b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x20>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_IncTick+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <HAL_IncTick+0x24>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	24000014 	.word	0x24000014
 8001b54:	2400650c 	.word	0x2400650c

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_GetTick+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	2400650c 	.word	0x2400650c

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff ffee 	bl	8001b58 <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d005      	beq.n	8001b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_Delay+0x40>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b96:	bf00      	nop
 8001b98:	f7ff ffde 	bl	8001b58 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d8f7      	bhi.n	8001b98 <HAL_Delay+0x28>
  {
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	24000014 	.word	0x24000014

08001bb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_GetREVID+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0c1b      	lsrs	r3, r3, #16
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	5c001000 	.word	0x5c001000

08001bcc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001bdc:	4904      	ldr	r1, [pc, #16]	; (8001bf0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	58000400 	.word	0x58000400

08001bf4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	401a      	ands	r2, r3
 8001c08:	4904      	ldr	r1, [pc, #16]	; (8001c1c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	58000400 	.word	0x58000400

08001c20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	609a      	str	r2, [r3, #8]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3360      	adds	r3, #96	; 0x60
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	611a      	str	r2, [r3, #16]
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b087      	sub	sp, #28
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3360      	adds	r3, #96	; 0x60
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]
  }
}
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3330      	adds	r3, #48	; 0x30
 8001d40:	461a      	mov	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	4413      	add	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	211f      	movs	r1, #31
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	401a      	ands	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	0e9b      	lsrs	r3, r3, #26
 8001d68:	f003 011f 	and.w	r1, r3, #31
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	431a      	orrs	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3314      	adds	r3, #20
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	0e5b      	lsrs	r3, r3, #25
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	0d1b      	lsrs	r3, r3, #20
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	2107      	movs	r1, #7
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	0d1b      	lsrs	r3, r3, #20
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dd2:	bf00      	nop
 8001dd4:	371c      	adds	r7, #28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0318 	and.w	r3, r3, #24
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e04:	40d9      	lsrs	r1, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	400b      	ands	r3, r1
 8001e0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	000fffff 	.word	0x000fffff

08001e28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6093      	str	r3, [r2, #8]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	5fffffc0 	.word	0x5fffffc0

08001e4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e60:	d101      	bne.n	8001e66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	6fffffc0 	.word	0x6fffffc0

08001e9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001eb0:	d101      	bne.n	8001eb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <LL_ADC_IsEnabled+0x18>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <LL_ADC_IsEnabled+0x1a>
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d101      	bne.n	8001f02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d101      	bne.n	8001f28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e18e      	b.n	8002270 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff f95b 	bl	800121c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff67 	bl	8001e4c <LL_ADC_IsDeepPowerDownEnabled>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff4d 	bl	8001e28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff82 	bl	8001e9c <LL_ADC_IsInternalRegulatorEnabled>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d113      	bne.n	8001fc6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ff66 	bl	8001e74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001fa8:	4b9a      	ldr	r3, [pc, #616]	; (8002214 <HAL_ADC_Init+0x2dc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	4a9a      	ldr	r2, [pc, #616]	; (8002218 <HAL_ADC_Init+0x2e0>)
 8001fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb4:	099b      	lsrs	r3, r3, #6
 8001fb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fb8:	e002      	b.n	8001fc0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f9      	bne.n	8001fba <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff66 	bl	8001e9c <LL_ADC_IsInternalRegulatorEnabled>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f043 0210 	orr.w	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff77 	bl	8001eea <LL_ADC_REG_IsConversionOngoing>
 8001ffc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 8129 	bne.w	800225e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 8125 	bne.w	800225e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800201c:	f043 0202 	orr.w	r2, r3, #2
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff4b 	bl	8001ec4 <LL_ADC_IsEnabled>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d136      	bne.n	80020a2 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a78      	ldr	r2, [pc, #480]	; (800221c <HAL_ADC_Init+0x2e4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_ADC_Init+0x110>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a77      	ldr	r2, [pc, #476]	; (8002220 <HAL_ADC_Init+0x2e8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d10e      	bne.n	8002066 <HAL_ADC_Init+0x12e>
 8002048:	4874      	ldr	r0, [pc, #464]	; (800221c <HAL_ADC_Init+0x2e4>)
 800204a:	f7ff ff3b 	bl	8001ec4 <LL_ADC_IsEnabled>
 800204e:	4604      	mov	r4, r0
 8002050:	4873      	ldr	r0, [pc, #460]	; (8002220 <HAL_ADC_Init+0x2e8>)
 8002052:	f7ff ff37 	bl	8001ec4 <LL_ADC_IsEnabled>
 8002056:	4603      	mov	r3, r0
 8002058:	4323      	orrs	r3, r4
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf0c      	ite	eq
 800205e:	2301      	moveq	r3, #1
 8002060:	2300      	movne	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	e008      	b.n	8002078 <HAL_ADC_Init+0x140>
 8002066:	486f      	ldr	r0, [pc, #444]	; (8002224 <HAL_ADC_Init+0x2ec>)
 8002068:	f7ff ff2c 	bl	8001ec4 <LL_ADC_IsEnabled>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d012      	beq.n	80020a2 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a66      	ldr	r2, [pc, #408]	; (800221c <HAL_ADC_Init+0x2e4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_ADC_Init+0x158>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a65      	ldr	r2, [pc, #404]	; (8002220 <HAL_ADC_Init+0x2e8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_ADC_Init+0x15c>
 8002090:	4a65      	ldr	r2, [pc, #404]	; (8002228 <HAL_ADC_Init+0x2f0>)
 8002092:	e000      	b.n	8002096 <HAL_ADC_Init+0x15e>
 8002094:	4a65      	ldr	r2, [pc, #404]	; (800222c <HAL_ADC_Init+0x2f4>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4619      	mov	r1, r3
 800209c:	4610      	mov	r0, r2
 800209e:	f7ff fdbf 	bl	8001c20 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80020a2:	f7ff fd87 	bl	8001bb4 <HAL_GetREVID>
 80020a6:	4602      	mov	r2, r0
 80020a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d914      	bls.n	80020da <HAL_ADC_Init+0x1a2>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d110      	bne.n	80020da <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7d5b      	ldrb	r3, [r3, #21]
 80020bc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020c2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020c8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7f1b      	ldrb	r3, [r3, #28]
 80020ce:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020d0:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020d2:	f043 030c 	orr.w	r3, r3, #12
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	e00d      	b.n	80020f6 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7d5b      	ldrb	r3, [r3, #21]
 80020de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7f1b      	ldrb	r3, [r3, #28]
 80020f0:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7f1b      	ldrb	r3, [r3, #28]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d106      	bne.n	800210c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	3b01      	subs	r3, #1
 8002104:	045b      	lsls	r3, r3, #17
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2b00      	cmp	r3, #0
 8002112:	d009      	beq.n	8002128 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	4b40      	ldr	r3, [pc, #256]	; (8002230 <HAL_ADC_Init+0x2f8>)
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	430b      	orrs	r3, r1
 800213a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fed2 	bl	8001eea <LL_ADC_REG_IsConversionOngoing>
 8002146:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fedf 	bl	8001f10 <LL_ADC_INJ_IsConversionOngoing>
 8002152:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d14a      	bne.n	80021f0 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d147      	bne.n	80021f0 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7d1b      	ldrb	r3, [r3, #20]
 8002164:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_ADC_Init+0x2fc>)
 8002176:	4013      	ands	r3, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	69b9      	ldr	r1, [r7, #24]
 800217e:	430b      	orrs	r3, r1
 8002180:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002188:	2b01      	cmp	r3, #1
 800218a:	d11b      	bne.n	80021c4 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <HAL_ADC_Init+0x300>)
 800219a:	4013      	ands	r3, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0411      	lsls	r1, r2, #16
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021a8:	4311      	orrs	r1, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021ae:	4311      	orrs	r1, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021b4:	430a      	orrs	r2, r1
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	611a      	str	r2, [r3, #16]
 80021c2:	e007      	b.n	80021d4 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fb58 	bl	80028a0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d121      	bne.n	800223c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f023 010f 	bic.w	r1, r3, #15
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	1e5a      	subs	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
 8002210:	e01c      	b.n	800224c <HAL_ADC_Init+0x314>
 8002212:	bf00      	nop
 8002214:	24000000 	.word	0x24000000
 8002218:	053e2d63 	.word	0x053e2d63
 800221c:	40022000 	.word	0x40022000
 8002220:	40022100 	.word	0x40022100
 8002224:	58026000 	.word	0x58026000
 8002228:	40022300 	.word	0x40022300
 800222c:	58026300 	.word	0x58026300
 8002230:	fff0c003 	.word	0xfff0c003
 8002234:	ffffbffc 	.word	0xffffbffc
 8002238:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 020f 	bic.w	r2, r2, #15
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	f023 0303 	bic.w	r3, r3, #3
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	655a      	str	r2, [r3, #84]	; 0x54
 800225c:	e007      	b.n	800226e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f043 0210 	orr.w	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800226e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3724      	adds	r7, #36	; 0x24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}

08002278 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b099      	sub	sp, #100	; 0x64
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a99      	ldr	r2, [pc, #612]	; (80024f8 <HAL_ADC_ConfigChannel+0x280>)
 8002292:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x2a>
 800229e:	2302      	movs	r3, #2
 80022a0:	e2e6      	b.n	8002870 <HAL_ADC_ConfigChannel+0x5f8>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fe1b 	bl	8001eea <LL_ADC_REG_IsConversionOngoing>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 82cb 	bne.w	8002852 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d108      	bne.n	80022da <HAL_ADC_ConfigChannel+0x62>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0e9b      	lsrs	r3, r3, #26
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	2201      	movs	r2, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	e00f      	b.n	80022fa <HAL_ADC_ConfigChannel+0x82>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	2201      	movs	r2, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	69d1      	ldr	r1, [r2, #28]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	430b      	orrs	r3, r1
 8002306:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	f7ff fd0b 	bl	8001d30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fde3 	bl	8001eea <LL_ADC_REG_IsConversionOngoing>
 8002324:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fdf0 	bl	8001f10 <LL_ADC_INJ_IsConversionOngoing>
 8002330:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 80b3 	bne.w	80024a0 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800233a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 80af 	bne.w	80024a0 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6819      	ldr	r1, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	461a      	mov	r2, r3
 8002350:	f7ff fd1a 	bl	8001d88 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002354:	4b69      	ldr	r3, [pc, #420]	; (80024fc <HAL_ADC_ConfigChannel+0x284>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800235c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002360:	d10b      	bne.n	800237a <HAL_ADC_ConfigChannel+0x102>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	e01d      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x13e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10b      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x128>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	e00a      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x13e>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d027      	beq.n	8002410 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6919      	ldr	r1, [r3, #16]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ce:	f7ff fc5b 	bl	8001c88 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6919      	ldr	r1, [r3, #16]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	7e5b      	ldrb	r3, [r3, #25]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x170>
 80023e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80023e6:	e000      	b.n	80023ea <HAL_ADC_ConfigChannel+0x172>
 80023e8:	2300      	movs	r3, #0
 80023ea:	461a      	mov	r2, r3
 80023ec:	f7ff fc85 	bl	8001cfa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6919      	ldr	r1, [r3, #16]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	7e1b      	ldrb	r3, [r3, #24]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d102      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x18e>
 8002400:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002404:	e000      	b.n	8002408 <HAL_ADC_ConfigChannel+0x190>
 8002406:	2300      	movs	r3, #0
 8002408:	461a      	mov	r2, r3
 800240a:	f7ff fc5d 	bl	8001cc8 <LL_ADC_SetDataRightShift>
 800240e:	e047      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002416:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	069b      	lsls	r3, r3, #26
 8002420:	429a      	cmp	r2, r3
 8002422:	d107      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002432:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800243a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	069b      	lsls	r3, r3, #26
 8002444:	429a      	cmp	r2, r3
 8002446:	d107      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002456:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800245e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	069b      	lsls	r3, r3, #26
 8002468:	429a      	cmp	r2, r3
 800246a:	d107      	bne.n	800247c <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800247a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002482:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	069b      	lsls	r3, r3, #26
 800248c:	429a      	cmp	r2, r3
 800248e:	d107      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800249e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fd0d 	bl	8001ec4 <LL_ADC_IsEnabled>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 81d9 	bne.w	8002864 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6819      	ldr	r1, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	461a      	mov	r2, r3
 80024c0:	f7ff fc8e 	bl	8001de0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <HAL_ADC_ConfigChannel+0x280>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	f040 8101 	bne.w	80026d2 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10f      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x288>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	3301      	adds	r3, #1
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	2b09      	cmp	r3, #9
 80024ee:	bf94      	ite	ls
 80024f0:	2301      	movls	r3, #1
 80024f2:	2300      	movhi	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	e016      	b.n	8002526 <HAL_ADC_ConfigChannel+0x2ae>
 80024f8:	47ff0000 	.word	0x47ff0000
 80024fc:	5c001000 	.word	0x5c001000
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	3301      	adds	r3, #1
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	2b09      	cmp	r3, #9
 800251e:	bf94      	ite	ls
 8002520:	2301      	movls	r3, #1
 8002522:	2300      	movhi	r3, #0
 8002524:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002526:	2b00      	cmp	r3, #0
 8002528:	d064      	beq.n	80025f4 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002532:	2b00      	cmp	r3, #0
 8002534:	d107      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x2ce>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0e9b      	lsrs	r3, r3, #26
 800253c:	3301      	adds	r3, #1
 800253e:	069b      	lsls	r3, r3, #26
 8002540:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002544:	e00e      	b.n	8002564 <HAL_ADC_ConfigChannel+0x2ec>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3301      	adds	r3, #1
 800255e:	069b      	lsls	r3, r3, #26
 8002560:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x30c>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	3301      	adds	r3, #1
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	e010      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x32e>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	ea42 0103 	orr.w	r1, r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10a      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x354>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0e9b      	lsrs	r3, r3, #26
 80025bc:	3301      	adds	r3, #1
 80025be:	f003 021f 	and.w	r2, r3, #31
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	051b      	lsls	r3, r3, #20
 80025ca:	e011      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x378>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f0:	430b      	orrs	r3, r1
 80025f2:	e069      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d107      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x398>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0e9b      	lsrs	r3, r3, #26
 8002606:	3301      	adds	r3, #1
 8002608:	069b      	lsls	r3, r3, #26
 800260a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800260e:	e00e      	b.n	800262e <HAL_ADC_ConfigChannel+0x3b6>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	61fb      	str	r3, [r7, #28]
  return result;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3301      	adds	r3, #1
 8002628:	069b      	lsls	r3, r3, #26
 800262a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_ADC_ConfigChannel+0x3d6>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0e9b      	lsrs	r3, r3, #26
 8002640:	3301      	adds	r3, #1
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	e010      	b.n	8002670 <HAL_ADC_ConfigChannel+0x3f8>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	617b      	str	r3, [r7, #20]
  return result;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	3301      	adds	r3, #1
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	ea42 0103 	orr.w	r1, r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <HAL_ADC_ConfigChannel+0x424>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	3301      	adds	r3, #1
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	3b1e      	subs	r3, #30
 8002694:	051b      	lsls	r3, r3, #20
 8002696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800269a:	e014      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x44e>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	60fb      	str	r3, [r7, #12]
  return result;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	3b1e      	subs	r3, #30
 80026c0:	051b      	lsls	r3, r3, #20
 80026c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c6:	430b      	orrs	r3, r1
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f7ff fb5b 	bl	8001d88 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f280 80c4 	bge.w	8002864 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a65      	ldr	r2, [pc, #404]	; (8002878 <HAL_ADC_ConfigChannel+0x600>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d004      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x478>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a64      	ldr	r2, [pc, #400]	; (800287c <HAL_ADC_ConfigChannel+0x604>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x47c>
 80026f0:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_ADC_ConfigChannel+0x608>)
 80026f2:	e000      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x47e>
 80026f4:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_ADC_ConfigChannel+0x60c>)
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fab8 	bl	8001c6c <LL_ADC_GetCommonPathInternalCh>
 80026fc:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a5d      	ldr	r2, [pc, #372]	; (8002878 <HAL_ADC_ConfigChannel+0x600>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d004      	beq.n	8002712 <HAL_ADC_ConfigChannel+0x49a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a5b      	ldr	r2, [pc, #364]	; (800287c <HAL_ADC_ConfigChannel+0x604>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10e      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x4b8>
 8002712:	4859      	ldr	r0, [pc, #356]	; (8002878 <HAL_ADC_ConfigChannel+0x600>)
 8002714:	f7ff fbd6 	bl	8001ec4 <LL_ADC_IsEnabled>
 8002718:	4604      	mov	r4, r0
 800271a:	4858      	ldr	r0, [pc, #352]	; (800287c <HAL_ADC_ConfigChannel+0x604>)
 800271c:	f7ff fbd2 	bl	8001ec4 <LL_ADC_IsEnabled>
 8002720:	4603      	mov	r3, r0
 8002722:	4323      	orrs	r3, r4
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e008      	b.n	8002742 <HAL_ADC_ConfigChannel+0x4ca>
 8002730:	4855      	ldr	r0, [pc, #340]	; (8002888 <HAL_ADC_ConfigChannel+0x610>)
 8002732:	f7ff fbc7 	bl	8001ec4 <LL_ADC_IsEnabled>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d07b      	beq.n	800283e <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a50      	ldr	r2, [pc, #320]	; (800288c <HAL_ADC_ConfigChannel+0x614>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d12e      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x536>
 8002750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d129      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a4a      	ldr	r2, [pc, #296]	; (8002888 <HAL_ADC_ConfigChannel+0x610>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d17f      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a43      	ldr	r2, [pc, #268]	; (8002878 <HAL_ADC_ConfigChannel+0x600>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_ADC_ConfigChannel+0x500>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a42      	ldr	r2, [pc, #264]	; (800287c <HAL_ADC_ConfigChannel+0x604>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_ADC_ConfigChannel+0x504>
 8002778:	4a41      	ldr	r2, [pc, #260]	; (8002880 <HAL_ADC_ConfigChannel+0x608>)
 800277a:	e000      	b.n	800277e <HAL_ADC_ConfigChannel+0x506>
 800277c:	4a41      	ldr	r2, [pc, #260]	; (8002884 <HAL_ADC_ConfigChannel+0x60c>)
 800277e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002780:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002784:	4619      	mov	r1, r3
 8002786:	4610      	mov	r0, r2
 8002788:	f7ff fa5d 	bl	8001c46 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800278c:	4b40      	ldr	r3, [pc, #256]	; (8002890 <HAL_ADC_ConfigChannel+0x618>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	4a40      	ldr	r2, [pc, #256]	; (8002894 <HAL_ADC_ConfigChannel+0x61c>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800279e:	e002      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f9      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ac:	e05a      	b.n	8002864 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a39      	ldr	r2, [pc, #228]	; (8002898 <HAL_ADC_ConfigChannel+0x620>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d11e      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x57e>
 80027b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d119      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a30      	ldr	r2, [pc, #192]	; (8002888 <HAL_ADC_ConfigChannel+0x610>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d14b      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a29      	ldr	r2, [pc, #164]	; (8002878 <HAL_ADC_ConfigChannel+0x600>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x568>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a28      	ldr	r2, [pc, #160]	; (800287c <HAL_ADC_ConfigChannel+0x604>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x56c>
 80027e0:	4a27      	ldr	r2, [pc, #156]	; (8002880 <HAL_ADC_ConfigChannel+0x608>)
 80027e2:	e000      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x56e>
 80027e4:	4a27      	ldr	r2, [pc, #156]	; (8002884 <HAL_ADC_ConfigChannel+0x60c>)
 80027e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f7ff fa29 	bl	8001c46 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f4:	e036      	b.n	8002864 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a28      	ldr	r2, [pc, #160]	; (800289c <HAL_ADC_ConfigChannel+0x624>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d131      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x5ec>
 8002800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d12c      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1e      	ldr	r2, [pc, #120]	; (8002888 <HAL_ADC_ConfigChannel+0x610>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d127      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a17      	ldr	r2, [pc, #92]	; (8002878 <HAL_ADC_ConfigChannel+0x600>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_ADC_ConfigChannel+0x5b0>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_ADC_ConfigChannel+0x604>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x5b4>
 8002828:	4a15      	ldr	r2, [pc, #84]	; (8002880 <HAL_ADC_ConfigChannel+0x608>)
 800282a:	e000      	b.n	800282e <HAL_ADC_ConfigChannel+0x5b6>
 800282c:	4a15      	ldr	r2, [pc, #84]	; (8002884 <HAL_ADC_ConfigChannel+0x60c>)
 800282e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002830:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002834:	4619      	mov	r1, r3
 8002836:	4610      	mov	r0, r2
 8002838:	f7ff fa05 	bl	8001c46 <LL_ADC_SetCommonPathInternalCh>
 800283c:	e012      	b.n	8002864 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	f043 0220 	orr.w	r2, r3, #32
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002850:	e008      	b.n	8002864 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	f043 0220 	orr.w	r2, r3, #32
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800286c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002870:	4618      	mov	r0, r3
 8002872:	3764      	adds	r7, #100	; 0x64
 8002874:	46bd      	mov	sp, r7
 8002876:	bd90      	pop	{r4, r7, pc}
 8002878:	40022000 	.word	0x40022000
 800287c:	40022100 	.word	0x40022100
 8002880:	40022300 	.word	0x40022300
 8002884:	58026300 	.word	0x58026300
 8002888:	58026000 	.word	0x58026000
 800288c:	cb840000 	.word	0xcb840000
 8002890:	24000000 	.word	0x24000000
 8002894:	053e2d63 	.word	0x053e2d63
 8002898:	c7520000 	.word	0xc7520000
 800289c:	cfb80000 	.word	0xcfb80000

080028a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a70      	ldr	r2, [pc, #448]	; (8002a70 <ADC_ConfigureBoostMode+0x1d0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d004      	beq.n	80028bc <ADC_ConfigureBoostMode+0x1c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6f      	ldr	r2, [pc, #444]	; (8002a74 <ADC_ConfigureBoostMode+0x1d4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d109      	bne.n	80028d0 <ADC_ConfigureBoostMode+0x30>
 80028bc:	4b6e      	ldr	r3, [pc, #440]	; (8002a78 <ADC_ConfigureBoostMode+0x1d8>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e008      	b.n	80028e2 <ADC_ConfigureBoostMode+0x42>
 80028d0:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <ADC_ConfigureBoostMode+0x1dc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d01a      	beq.n	800291c <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80028e6:	f005 fa1b 	bl	8007d20 <HAL_RCC_GetHCLKFreq>
 80028ea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028f4:	d006      	beq.n	8002904 <ADC_ConfigureBoostMode+0x64>
 80028f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028fa:	d00b      	beq.n	8002914 <ADC_ConfigureBoostMode+0x74>
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002900:	d000      	beq.n	8002904 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002902:	e05d      	b.n	80029c0 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	60fb      	str	r3, [r7, #12]
        break;
 8002912:	e055      	b.n	80029c0 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	60fb      	str	r3, [r7, #12]
        break;
 800291a:	e051      	b.n	80029c0 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800291c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002920:	f006 f98a 	bl	8008c38 <HAL_RCCEx_GetPeriphCLKFreq>
 8002924:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800292e:	d02a      	beq.n	8002986 <ADC_ConfigureBoostMode+0xe6>
 8002930:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002934:	d813      	bhi.n	800295e <ADC_ConfigureBoostMode+0xbe>
 8002936:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800293a:	d024      	beq.n	8002986 <ADC_ConfigureBoostMode+0xe6>
 800293c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002940:	d806      	bhi.n	8002950 <ADC_ConfigureBoostMode+0xb0>
 8002942:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002946:	d01e      	beq.n	8002986 <ADC_ConfigureBoostMode+0xe6>
 8002948:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800294c:	d01b      	beq.n	8002986 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800294e:	e037      	b.n	80029c0 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002954:	d017      	beq.n	8002986 <ADC_ConfigureBoostMode+0xe6>
 8002956:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800295a:	d014      	beq.n	8002986 <ADC_ConfigureBoostMode+0xe6>
        break;
 800295c:	e030      	b.n	80029c0 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 800295e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002962:	d021      	beq.n	80029a8 <ADC_ConfigureBoostMode+0x108>
 8002964:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002968:	d806      	bhi.n	8002978 <ADC_ConfigureBoostMode+0xd8>
 800296a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800296e:	d013      	beq.n	8002998 <ADC_ConfigureBoostMode+0xf8>
 8002970:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002974:	d014      	beq.n	80029a0 <ADC_ConfigureBoostMode+0x100>
        break;
 8002976:	e023      	b.n	80029c0 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002978:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800297c:	d018      	beq.n	80029b0 <ADC_ConfigureBoostMode+0x110>
 800297e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002982:	d019      	beq.n	80029b8 <ADC_ConfigureBoostMode+0x118>
        break;
 8002984:	e01c      	b.n	80029c0 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	0c9b      	lsrs	r3, r3, #18
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	fbb2 f3f3 	udiv	r3, r2, r3
 8002994:	60fb      	str	r3, [r7, #12]
        break;
 8002996:	e013      	b.n	80029c0 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	60fb      	str	r3, [r7, #12]
        break;
 800299e:	e00f      	b.n	80029c0 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	60fb      	str	r3, [r7, #12]
        break;
 80029a6:	e00b      	b.n	80029c0 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	099b      	lsrs	r3, r3, #6
 80029ac:	60fb      	str	r3, [r7, #12]
        break;
 80029ae:	e007      	b.n	80029c0 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	09db      	lsrs	r3, r3, #7
 80029b4:	60fb      	str	r3, [r7, #12]
        break;
 80029b6:	e003      	b.n	80029c0 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	60fb      	str	r3, [r7, #12]
        break;
 80029be:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80029c0:	f7ff f8f8 	bl	8001bb4 <HAL_GetREVID>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f241 0303 	movw	r3, #4099	; 0x1003
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d815      	bhi.n	80029fa <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a2b      	ldr	r2, [pc, #172]	; (8002a80 <ADC_ConfigureBoostMode+0x1e0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d908      	bls.n	80029e8 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e4:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80029e6:	e03e      	b.n	8002a66 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f6:	609a      	str	r2, [r3, #8]
}
 80029f8:	e035      	b.n	8002a66 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a20      	ldr	r2, [pc, #128]	; (8002a84 <ADC_ConfigureBoostMode+0x1e4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d808      	bhi.n	8002a1a <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a16:	609a      	str	r2, [r3, #8]
}
 8002a18:	e025      	b.n	8002a66 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4a1a      	ldr	r2, [pc, #104]	; (8002a88 <ADC_ConfigureBoostMode+0x1e8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d80a      	bhi.n	8002a38 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a34:	609a      	str	r2, [r3, #8]
}
 8002a36:	e016      	b.n	8002a66 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <ADC_ConfigureBoostMode+0x1ec>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d80a      	bhi.n	8002a56 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a52:	609a      	str	r2, [r3, #8]
}
 8002a54:	e007      	b.n	8002a66 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002a64:	609a      	str	r2, [r3, #8]
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40022100 	.word	0x40022100
 8002a78:	40022300 	.word	0x40022300
 8002a7c:	58026300 	.word	0x58026300
 8002a80:	01312d00 	.word	0x01312d00
 8002a84:	005f5e10 	.word	0x005f5e10
 8002a88:	00bebc20 	.word	0x00bebc20
 8002a8c:	017d7840 	.word	0x017d7840

08002a90 <__NVIC_SetPriorityGrouping>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aac:	4013      	ands	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002abe:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	60d3      	str	r3, [r2, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00
 8002ad4:	05fa0000 	.word	0x05fa0000

08002ad8 <__NVIC_GetPriorityGrouping>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 0307 	and.w	r3, r3, #7
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_EnableIRQ>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	db0b      	blt.n	8002b1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	4907      	ldr	r1, [pc, #28]	; (8002b2c <__NVIC_EnableIRQ+0x38>)
 8002b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2001      	movs	r0, #1
 8002b16:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000e100 	.word	0xe000e100

08002b30 <__NVIC_SetPriority>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	db0a      	blt.n	8002b5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	490c      	ldr	r1, [pc, #48]	; (8002b7c <__NVIC_SetPriority+0x4c>)
 8002b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	440b      	add	r3, r1
 8002b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b58:	e00a      	b.n	8002b70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4908      	ldr	r1, [pc, #32]	; (8002b80 <__NVIC_SetPriority+0x50>)
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	3b04      	subs	r3, #4
 8002b68:	0112      	lsls	r2, r2, #4
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	761a      	strb	r2, [r3, #24]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000e100 	.word	0xe000e100
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <NVIC_EncodePriority>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f1c3 0307 	rsb	r3, r3, #7
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	bf28      	it	cs
 8002ba2:	2304      	movcs	r3, #4
 8002ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d902      	bls.n	8002bb4 <NVIC_EncodePriority+0x30>
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3b03      	subs	r3, #3
 8002bb2:	e000      	b.n	8002bb6 <NVIC_EncodePriority+0x32>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	43d9      	mvns	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	4313      	orrs	r3, r2
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3724      	adds	r7, #36	; 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ff4c 	bl	8002a90 <__NVIC_SetPriorityGrouping>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c0e:	f7ff ff63 	bl	8002ad8 <__NVIC_GetPriorityGrouping>
 8002c12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	6978      	ldr	r0, [r7, #20]
 8002c1a:	f7ff ffb3 	bl	8002b84 <NVIC_EncodePriority>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ff82 	bl	8002b30 <__NVIC_SetPriority>
}
 8002c2c:	bf00      	nop
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ff56 	bl	8002af4 <__NVIC_EnableIRQ>
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002c54:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_MPU_Disable+0x24>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	4a05      	ldr	r2, [pc, #20]	; (8002c74 <HAL_MPU_Disable+0x24>)
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c62:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <HAL_MPU_Disable+0x28>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	605a      	str	r2, [r3, #4]
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00
 8002c78:	e000ed90 	.word	0xe000ed90

08002c7c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c84:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <HAL_MPU_Enable+0x34>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_MPU_Enable+0x38>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <HAL_MPU_Enable+0x38>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c9e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000ed90 	.word	0xe000ed90
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	785a      	ldrb	r2, [r3, #1]
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_MPU_ConfigRegion+0x84>)
 8002cc6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d029      	beq.n	8002d24 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002cd0:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <HAL_MPU_ConfigRegion+0x84>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7b1b      	ldrb	r3, [r3, #12]
 8002cdc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7adb      	ldrb	r3, [r3, #11]
 8002ce2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ce4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7a9b      	ldrb	r3, [r3, #10]
 8002cea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002cec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	7b5b      	ldrb	r3, [r3, #13]
 8002cf2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002cf4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7b9b      	ldrb	r3, [r3, #14]
 8002cfa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002cfc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	7bdb      	ldrb	r3, [r3, #15]
 8002d02:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	7a5b      	ldrb	r3, [r3, #9]
 8002d0a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7a1b      	ldrb	r3, [r3, #8]
 8002d12:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d14:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	7812      	ldrb	r2, [r2, #0]
 8002d1a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d1c:	4a07      	ldr	r2, [pc, #28]	; (8002d3c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d1e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d20:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002d22:	e005      	b.n	8002d30 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_MPU_ConfigRegion+0x84>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002d2a:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <HAL_MPU_ConfigRegion+0x84>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed90 	.word	0xe000ed90

08002d40 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_GetCurrentCPUID+0x24>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	2b07      	cmp	r3, #7
 8002d50:	d101      	bne.n	8002d56 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e000      	b.n	8002d58 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002d56:	2301      	movs	r3, #1
  }
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e014      	b.n	8002da4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	791b      	ldrb	r3, [r3, #4]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe faac 	bl	80012e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc2:	d120      	bne.n	8002e06 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd2:	d118      	bne.n	8002e06 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dfe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f82d 	bl	8002e60 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e14:	d120      	bne.n	8002e58 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e24:	d118      	bne.n	8002e58 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f043 0202 	orr.w	r2, r3, #2
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002e50:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f93e 	bl	80030d4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	795b      	ldrb	r3, [r3, #5]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_DAC_ConfigChannel+0x18>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e11d      	b.n	80030c8 <HAL_DAC_ConfigChannel+0x254>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2202      	movs	r2, #2
 8002e96:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d174      	bne.n	8002f8a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ea0:	f7fe fe5a 	bl	8001b58 <HAL_GetTick>
 8002ea4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d134      	bne.n	8002f16 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002eac:	e011      	b.n	8002ed2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002eae:	f7fe fe53 	bl	8001b58 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d90a      	bls.n	8002ed2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f043 0208 	orr.w	r2, r3, #8
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2203      	movs	r2, #3
 8002ecc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0fa      	b.n	80030c8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed8:	4b7d      	ldr	r3, [pc, #500]	; (80030d0 <HAL_DAC_ConfigChannel+0x25c>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1e6      	bne.n	8002eae <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f7fe fe45 	bl	8001b70 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	6992      	ldr	r2, [r2, #24]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40
 8002ef0:	e01e      	b.n	8002f30 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ef2:	f7fe fe31 	bl	8001b58 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d90a      	bls.n	8002f16 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f043 0208 	orr.w	r2, r3, #8
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e0d8      	b.n	80030c8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	dbe8      	blt.n	8002ef2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002f20:	2001      	movs	r0, #1
 8002f22:	f7fe fe25 	bl	8001b70 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	6992      	ldr	r2, [r2, #24]
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	ea02 0103 	and.w	r1, r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	409a      	lsls	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	21ff      	movs	r1, #255	; 0xff
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	ea02 0103 	and.w	r1, r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6a1a      	ldr	r2, [r3, #32]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	409a      	lsls	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d11d      	bne.n	8002fce <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	221f      	movs	r2, #31
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4013      	ands	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2207      	movs	r2, #7
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e00f      	b.n	8003018 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d102      	bne.n	8003006 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003000:	2301      	movs	r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
 8003004:	e008      	b.n	8003018 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800300e:	2301      	movs	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	e001      	b.n	8003018 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4313      	orrs	r3, r2
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	400a      	ands	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4013      	ands	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	22c0      	movs	r2, #192	; 0xc0
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43da      	mvns	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	400a      	ands	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20008000 	.word	0x20008000

080030d4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7fe fd32 	bl	8001b58 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e316      	b.n	800372e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a66      	ldr	r2, [pc, #408]	; (80032a0 <HAL_DMA_Init+0x1b8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d04a      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a65      	ldr	r2, [pc, #404]	; (80032a4 <HAL_DMA_Init+0x1bc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d045      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a63      	ldr	r2, [pc, #396]	; (80032a8 <HAL_DMA_Init+0x1c0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d040      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a62      	ldr	r2, [pc, #392]	; (80032ac <HAL_DMA_Init+0x1c4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d03b      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a60      	ldr	r2, [pc, #384]	; (80032b0 <HAL_DMA_Init+0x1c8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d036      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a5f      	ldr	r2, [pc, #380]	; (80032b4 <HAL_DMA_Init+0x1cc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d031      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a5d      	ldr	r2, [pc, #372]	; (80032b8 <HAL_DMA_Init+0x1d0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d02c      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a5c      	ldr	r2, [pc, #368]	; (80032bc <HAL_DMA_Init+0x1d4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d027      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a5a      	ldr	r2, [pc, #360]	; (80032c0 <HAL_DMA_Init+0x1d8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d022      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a59      	ldr	r2, [pc, #356]	; (80032c4 <HAL_DMA_Init+0x1dc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d01d      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a57      	ldr	r2, [pc, #348]	; (80032c8 <HAL_DMA_Init+0x1e0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d018      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a56      	ldr	r2, [pc, #344]	; (80032cc <HAL_DMA_Init+0x1e4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d013      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a54      	ldr	r2, [pc, #336]	; (80032d0 <HAL_DMA_Init+0x1e8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00e      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a53      	ldr	r2, [pc, #332]	; (80032d4 <HAL_DMA_Init+0x1ec>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a51      	ldr	r2, [pc, #324]	; (80032d8 <HAL_DMA_Init+0x1f0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_DMA_Init+0xb8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a50      	ldr	r2, [pc, #320]	; (80032dc <HAL_DMA_Init+0x1f4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d101      	bne.n	80031a4 <HAL_DMA_Init+0xbc>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <HAL_DMA_Init+0xbe>
 80031a4:	2300      	movs	r3, #0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 813b 	beq.w	8003422 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a37      	ldr	r2, [pc, #220]	; (80032a0 <HAL_DMA_Init+0x1b8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d04a      	beq.n	800325c <HAL_DMA_Init+0x174>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a36      	ldr	r2, [pc, #216]	; (80032a4 <HAL_DMA_Init+0x1bc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d045      	beq.n	800325c <HAL_DMA_Init+0x174>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a34      	ldr	r2, [pc, #208]	; (80032a8 <HAL_DMA_Init+0x1c0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d040      	beq.n	800325c <HAL_DMA_Init+0x174>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a33      	ldr	r2, [pc, #204]	; (80032ac <HAL_DMA_Init+0x1c4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d03b      	beq.n	800325c <HAL_DMA_Init+0x174>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a31      	ldr	r2, [pc, #196]	; (80032b0 <HAL_DMA_Init+0x1c8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d036      	beq.n	800325c <HAL_DMA_Init+0x174>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a30      	ldr	r2, [pc, #192]	; (80032b4 <HAL_DMA_Init+0x1cc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d031      	beq.n	800325c <HAL_DMA_Init+0x174>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2e      	ldr	r2, [pc, #184]	; (80032b8 <HAL_DMA_Init+0x1d0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d02c      	beq.n	800325c <HAL_DMA_Init+0x174>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a2d      	ldr	r2, [pc, #180]	; (80032bc <HAL_DMA_Init+0x1d4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d027      	beq.n	800325c <HAL_DMA_Init+0x174>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2b      	ldr	r2, [pc, #172]	; (80032c0 <HAL_DMA_Init+0x1d8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d022      	beq.n	800325c <HAL_DMA_Init+0x174>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <HAL_DMA_Init+0x1dc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d01d      	beq.n	800325c <HAL_DMA_Init+0x174>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a28      	ldr	r2, [pc, #160]	; (80032c8 <HAL_DMA_Init+0x1e0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d018      	beq.n	800325c <HAL_DMA_Init+0x174>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a27      	ldr	r2, [pc, #156]	; (80032cc <HAL_DMA_Init+0x1e4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d013      	beq.n	800325c <HAL_DMA_Init+0x174>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a25      	ldr	r2, [pc, #148]	; (80032d0 <HAL_DMA_Init+0x1e8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00e      	beq.n	800325c <HAL_DMA_Init+0x174>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a24      	ldr	r2, [pc, #144]	; (80032d4 <HAL_DMA_Init+0x1ec>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_DMA_Init+0x174>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <HAL_DMA_Init+0x1f0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_DMA_Init+0x174>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a21      	ldr	r2, [pc, #132]	; (80032dc <HAL_DMA_Init+0x1f4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d108      	bne.n	800326e <HAL_DMA_Init+0x186>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e007      	b.n	800327e <HAL_DMA_Init+0x196>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800327e:	e02f      	b.n	80032e0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003280:	f7fe fc6a 	bl	8001b58 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b05      	cmp	r3, #5
 800328c:	d928      	bls.n	80032e0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2203      	movs	r2, #3
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e246      	b.n	800372e <HAL_DMA_Init+0x646>
 80032a0:	40020010 	.word	0x40020010
 80032a4:	40020028 	.word	0x40020028
 80032a8:	40020040 	.word	0x40020040
 80032ac:	40020058 	.word	0x40020058
 80032b0:	40020070 	.word	0x40020070
 80032b4:	40020088 	.word	0x40020088
 80032b8:	400200a0 	.word	0x400200a0
 80032bc:	400200b8 	.word	0x400200b8
 80032c0:	40020410 	.word	0x40020410
 80032c4:	40020428 	.word	0x40020428
 80032c8:	40020440 	.word	0x40020440
 80032cc:	40020458 	.word	0x40020458
 80032d0:	40020470 	.word	0x40020470
 80032d4:	40020488 	.word	0x40020488
 80032d8:	400204a0 	.word	0x400204a0
 80032dc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1c8      	bne.n	8003280 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4b83      	ldr	r3, [pc, #524]	; (8003508 <HAL_DMA_Init+0x420>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003306:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003312:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	2b04      	cmp	r3, #4
 8003332:	d107      	bne.n	8003344 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	4313      	orrs	r3, r2
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003344:	4b71      	ldr	r3, [pc, #452]	; (800350c <HAL_DMA_Init+0x424>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b71      	ldr	r3, [pc, #452]	; (8003510 <HAL_DMA_Init+0x428>)
 800334a:	4013      	ands	r3, r2
 800334c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003350:	d328      	bcc.n	80033a4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b28      	cmp	r3, #40	; 0x28
 8003358:	d903      	bls.n	8003362 <HAL_DMA_Init+0x27a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b2e      	cmp	r3, #46	; 0x2e
 8003360:	d917      	bls.n	8003392 <HAL_DMA_Init+0x2aa>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b3e      	cmp	r3, #62	; 0x3e
 8003368:	d903      	bls.n	8003372 <HAL_DMA_Init+0x28a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b42      	cmp	r3, #66	; 0x42
 8003370:	d90f      	bls.n	8003392 <HAL_DMA_Init+0x2aa>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b46      	cmp	r3, #70	; 0x46
 8003378:	d903      	bls.n	8003382 <HAL_DMA_Init+0x29a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b48      	cmp	r3, #72	; 0x48
 8003380:	d907      	bls.n	8003392 <HAL_DMA_Init+0x2aa>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b4e      	cmp	r3, #78	; 0x4e
 8003388:	d905      	bls.n	8003396 <HAL_DMA_Init+0x2ae>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b52      	cmp	r3, #82	; 0x52
 8003390:	d801      	bhi.n	8003396 <HAL_DMA_Init+0x2ae>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_DMA_Init+0x2b0>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0307 	bic.w	r3, r3, #7
 80033ba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d117      	bne.n	80033fe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00e      	beq.n	80033fe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f001 f9b9 	bl	8004758 <DMA_CheckFifoParam>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2240      	movs	r2, #64	; 0x40
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e197      	b.n	800372e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f001 f8f4 	bl	80045f4 <DMA_CalcBaseAndBitshift>
 800340c:	4603      	mov	r3, r0
 800340e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	223f      	movs	r2, #63	; 0x3f
 800341a:	409a      	lsls	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	e0cd      	b.n	80035be <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a3b      	ldr	r2, [pc, #236]	; (8003514 <HAL_DMA_Init+0x42c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d022      	beq.n	8003472 <HAL_DMA_Init+0x38a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a39      	ldr	r2, [pc, #228]	; (8003518 <HAL_DMA_Init+0x430>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01d      	beq.n	8003472 <HAL_DMA_Init+0x38a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a38      	ldr	r2, [pc, #224]	; (800351c <HAL_DMA_Init+0x434>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d018      	beq.n	8003472 <HAL_DMA_Init+0x38a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a36      	ldr	r2, [pc, #216]	; (8003520 <HAL_DMA_Init+0x438>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_DMA_Init+0x38a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a35      	ldr	r2, [pc, #212]	; (8003524 <HAL_DMA_Init+0x43c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00e      	beq.n	8003472 <HAL_DMA_Init+0x38a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a33      	ldr	r2, [pc, #204]	; (8003528 <HAL_DMA_Init+0x440>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d009      	beq.n	8003472 <HAL_DMA_Init+0x38a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a32      	ldr	r2, [pc, #200]	; (800352c <HAL_DMA_Init+0x444>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d004      	beq.n	8003472 <HAL_DMA_Init+0x38a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a30      	ldr	r2, [pc, #192]	; (8003530 <HAL_DMA_Init+0x448>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <HAL_DMA_Init+0x38e>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_DMA_Init+0x390>
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8097 	beq.w	80035ac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a24      	ldr	r2, [pc, #144]	; (8003514 <HAL_DMA_Init+0x42c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d021      	beq.n	80034cc <HAL_DMA_Init+0x3e4>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a22      	ldr	r2, [pc, #136]	; (8003518 <HAL_DMA_Init+0x430>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01c      	beq.n	80034cc <HAL_DMA_Init+0x3e4>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a21      	ldr	r2, [pc, #132]	; (800351c <HAL_DMA_Init+0x434>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d017      	beq.n	80034cc <HAL_DMA_Init+0x3e4>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1f      	ldr	r2, [pc, #124]	; (8003520 <HAL_DMA_Init+0x438>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d012      	beq.n	80034cc <HAL_DMA_Init+0x3e4>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <HAL_DMA_Init+0x43c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00d      	beq.n	80034cc <HAL_DMA_Init+0x3e4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <HAL_DMA_Init+0x440>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d008      	beq.n	80034cc <HAL_DMA_Init+0x3e4>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1b      	ldr	r2, [pc, #108]	; (800352c <HAL_DMA_Init+0x444>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d003      	beq.n	80034cc <HAL_DMA_Init+0x3e4>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a19      	ldr	r2, [pc, #100]	; (8003530 <HAL_DMA_Init+0x448>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_DMA_Init+0x44c>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	d020      	beq.n	8003538 <HAL_DMA_Init+0x450>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d102      	bne.n	8003504 <HAL_DMA_Init+0x41c>
 80034fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003502:	e01a      	b.n	800353a <HAL_DMA_Init+0x452>
 8003504:	2300      	movs	r3, #0
 8003506:	e018      	b.n	800353a <HAL_DMA_Init+0x452>
 8003508:	fe10803f 	.word	0xfe10803f
 800350c:	5c001000 	.word	0x5c001000
 8003510:	ffff0000 	.word	0xffff0000
 8003514:	58025408 	.word	0x58025408
 8003518:	5802541c 	.word	0x5802541c
 800351c:	58025430 	.word	0x58025430
 8003520:	58025444 	.word	0x58025444
 8003524:	58025458 	.word	0x58025458
 8003528:	5802546c 	.word	0x5802546c
 800352c:	58025480 	.word	0x58025480
 8003530:	58025494 	.word	0x58025494
 8003534:	fffe000f 	.word	0xfffe000f
 8003538:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68d2      	ldr	r2, [r2, #12]
 800353e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003540:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003548:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003550:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003558:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003560:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003568:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	4b6e      	ldr	r3, [pc, #440]	; (8003738 <HAL_DMA_Init+0x650>)
 8003580:	4413      	add	r3, r2
 8003582:	4a6e      	ldr	r2, [pc, #440]	; (800373c <HAL_DMA_Init+0x654>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	009a      	lsls	r2, r3, #2
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f001 f82f 	bl	80045f4 <DMA_CalcBaseAndBitshift>
 8003596:	4603      	mov	r3, r0
 8003598:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2201      	movs	r2, #1
 80035a4:	409a      	lsls	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	e008      	b.n	80035be <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2203      	movs	r2, #3
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0b7      	b.n	800372e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5f      	ldr	r2, [pc, #380]	; (8003740 <HAL_DMA_Init+0x658>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d072      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a5d      	ldr	r2, [pc, #372]	; (8003744 <HAL_DMA_Init+0x65c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d06d      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a5c      	ldr	r2, [pc, #368]	; (8003748 <HAL_DMA_Init+0x660>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d068      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a5a      	ldr	r2, [pc, #360]	; (800374c <HAL_DMA_Init+0x664>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d063      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a59      	ldr	r2, [pc, #356]	; (8003750 <HAL_DMA_Init+0x668>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d05e      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a57      	ldr	r2, [pc, #348]	; (8003754 <HAL_DMA_Init+0x66c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d059      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a56      	ldr	r2, [pc, #344]	; (8003758 <HAL_DMA_Init+0x670>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d054      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a54      	ldr	r2, [pc, #336]	; (800375c <HAL_DMA_Init+0x674>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d04f      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a53      	ldr	r2, [pc, #332]	; (8003760 <HAL_DMA_Init+0x678>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d04a      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a51      	ldr	r2, [pc, #324]	; (8003764 <HAL_DMA_Init+0x67c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d045      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a50      	ldr	r2, [pc, #320]	; (8003768 <HAL_DMA_Init+0x680>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d040      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a4e      	ldr	r2, [pc, #312]	; (800376c <HAL_DMA_Init+0x684>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d03b      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a4d      	ldr	r2, [pc, #308]	; (8003770 <HAL_DMA_Init+0x688>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d036      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a4b      	ldr	r2, [pc, #300]	; (8003774 <HAL_DMA_Init+0x68c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d031      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a4a      	ldr	r2, [pc, #296]	; (8003778 <HAL_DMA_Init+0x690>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d02c      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a48      	ldr	r2, [pc, #288]	; (800377c <HAL_DMA_Init+0x694>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d027      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a47      	ldr	r2, [pc, #284]	; (8003780 <HAL_DMA_Init+0x698>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d022      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a45      	ldr	r2, [pc, #276]	; (8003784 <HAL_DMA_Init+0x69c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01d      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a44      	ldr	r2, [pc, #272]	; (8003788 <HAL_DMA_Init+0x6a0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d018      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a42      	ldr	r2, [pc, #264]	; (800378c <HAL_DMA_Init+0x6a4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a41      	ldr	r2, [pc, #260]	; (8003790 <HAL_DMA_Init+0x6a8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a3f      	ldr	r2, [pc, #252]	; (8003794 <HAL_DMA_Init+0x6ac>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a3e      	ldr	r2, [pc, #248]	; (8003798 <HAL_DMA_Init+0x6b0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_DMA_Init+0x5c6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a3c      	ldr	r2, [pc, #240]	; (800379c <HAL_DMA_Init+0x6b4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_DMA_Init+0x5ca>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_DMA_Init+0x5cc>
 80036b2:	2300      	movs	r3, #0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d032      	beq.n	800371e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f001 f8c9 	bl	8004850 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b80      	cmp	r3, #128	; 0x80
 80036c4:	d102      	bne.n	80036cc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d010      	beq.n	800370c <HAL_DMA_Init+0x624>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d80c      	bhi.n	800370c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f001 f946 	bl	8004984 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	e008      	b.n	800371e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	a7fdabf8 	.word	0xa7fdabf8
 800373c:	cccccccd 	.word	0xcccccccd
 8003740:	40020010 	.word	0x40020010
 8003744:	40020028 	.word	0x40020028
 8003748:	40020040 	.word	0x40020040
 800374c:	40020058 	.word	0x40020058
 8003750:	40020070 	.word	0x40020070
 8003754:	40020088 	.word	0x40020088
 8003758:	400200a0 	.word	0x400200a0
 800375c:	400200b8 	.word	0x400200b8
 8003760:	40020410 	.word	0x40020410
 8003764:	40020428 	.word	0x40020428
 8003768:	40020440 	.word	0x40020440
 800376c:	40020458 	.word	0x40020458
 8003770:	40020470 	.word	0x40020470
 8003774:	40020488 	.word	0x40020488
 8003778:	400204a0 	.word	0x400204a0
 800377c:	400204b8 	.word	0x400204b8
 8003780:	58025408 	.word	0x58025408
 8003784:	5802541c 	.word	0x5802541c
 8003788:	58025430 	.word	0x58025430
 800378c:	58025444 	.word	0x58025444
 8003790:	58025458 	.word	0x58025458
 8003794:	5802546c 	.word	0x5802546c
 8003798:	58025480 	.word	0x58025480
 800379c:	58025494 	.word	0x58025494

080037a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	; 0x28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037ac:	4b67      	ldr	r3, [pc, #412]	; (800394c <HAL_DMA_IRQHandler+0x1ac>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a67      	ldr	r2, [pc, #412]	; (8003950 <HAL_DMA_IRQHandler+0x1b0>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	0a9b      	lsrs	r3, r3, #10
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a5f      	ldr	r2, [pc, #380]	; (8003954 <HAL_DMA_IRQHandler+0x1b4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d04a      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a5d      	ldr	r2, [pc, #372]	; (8003958 <HAL_DMA_IRQHandler+0x1b8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d045      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a5c      	ldr	r2, [pc, #368]	; (800395c <HAL_DMA_IRQHandler+0x1bc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d040      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a5a      	ldr	r2, [pc, #360]	; (8003960 <HAL_DMA_IRQHandler+0x1c0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d03b      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a59      	ldr	r2, [pc, #356]	; (8003964 <HAL_DMA_IRQHandler+0x1c4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d036      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a57      	ldr	r2, [pc, #348]	; (8003968 <HAL_DMA_IRQHandler+0x1c8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d031      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_DMA_IRQHandler+0x1cc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d02c      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a54      	ldr	r2, [pc, #336]	; (8003970 <HAL_DMA_IRQHandler+0x1d0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d027      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a53      	ldr	r2, [pc, #332]	; (8003974 <HAL_DMA_IRQHandler+0x1d4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d022      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a51      	ldr	r2, [pc, #324]	; (8003978 <HAL_DMA_IRQHandler+0x1d8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a50      	ldr	r2, [pc, #320]	; (800397c <HAL_DMA_IRQHandler+0x1dc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d018      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4e      	ldr	r2, [pc, #312]	; (8003980 <HAL_DMA_IRQHandler+0x1e0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4d      	ldr	r2, [pc, #308]	; (8003984 <HAL_DMA_IRQHandler+0x1e4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00e      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a4b      	ldr	r2, [pc, #300]	; (8003988 <HAL_DMA_IRQHandler+0x1e8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a4a      	ldr	r2, [pc, #296]	; (800398c <HAL_DMA_IRQHandler+0x1ec>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a48      	ldr	r2, [pc, #288]	; (8003990 <HAL_DMA_IRQHandler+0x1f0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_DMA_IRQHandler+0xd6>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_DMA_IRQHandler+0xd8>
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 842b 	beq.w	80040d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	2208      	movs	r2, #8
 8003888:	409a      	lsls	r2, r3
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80a2 	beq.w	80039d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2e      	ldr	r2, [pc, #184]	; (8003954 <HAL_DMA_IRQHandler+0x1b4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d04a      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2d      	ldr	r2, [pc, #180]	; (8003958 <HAL_DMA_IRQHandler+0x1b8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d045      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2b      	ldr	r2, [pc, #172]	; (800395c <HAL_DMA_IRQHandler+0x1bc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d040      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2a      	ldr	r2, [pc, #168]	; (8003960 <HAL_DMA_IRQHandler+0x1c0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d03b      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a28      	ldr	r2, [pc, #160]	; (8003964 <HAL_DMA_IRQHandler+0x1c4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d036      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a27      	ldr	r2, [pc, #156]	; (8003968 <HAL_DMA_IRQHandler+0x1c8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d031      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a25      	ldr	r2, [pc, #148]	; (800396c <HAL_DMA_IRQHandler+0x1cc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d02c      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a24      	ldr	r2, [pc, #144]	; (8003970 <HAL_DMA_IRQHandler+0x1d0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d027      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a22      	ldr	r2, [pc, #136]	; (8003974 <HAL_DMA_IRQHandler+0x1d4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d022      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a21      	ldr	r2, [pc, #132]	; (8003978 <HAL_DMA_IRQHandler+0x1d8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d01d      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1f      	ldr	r2, [pc, #124]	; (800397c <HAL_DMA_IRQHandler+0x1dc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d018      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <HAL_DMA_IRQHandler+0x1e0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <HAL_DMA_IRQHandler+0x1e4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00e      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <HAL_DMA_IRQHandler+0x1e8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d009      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <HAL_DMA_IRQHandler+0x1ec>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a18      	ldr	r2, [pc, #96]	; (8003990 <HAL_DMA_IRQHandler+0x1f0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d12f      	bne.n	8003994 <HAL_DMA_IRQHandler+0x1f4>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	bf14      	ite	ne
 8003942:	2301      	movne	r3, #1
 8003944:	2300      	moveq	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	e02e      	b.n	80039a8 <HAL_DMA_IRQHandler+0x208>
 800394a:	bf00      	nop
 800394c:	24000000 	.word	0x24000000
 8003950:	1b4e81b5 	.word	0x1b4e81b5
 8003954:	40020010 	.word	0x40020010
 8003958:	40020028 	.word	0x40020028
 800395c:	40020040 	.word	0x40020040
 8003960:	40020058 	.word	0x40020058
 8003964:	40020070 	.word	0x40020070
 8003968:	40020088 	.word	0x40020088
 800396c:	400200a0 	.word	0x400200a0
 8003970:	400200b8 	.word	0x400200b8
 8003974:	40020410 	.word	0x40020410
 8003978:	40020428 	.word	0x40020428
 800397c:	40020440 	.word	0x40020440
 8003980:	40020458 	.word	0x40020458
 8003984:	40020470 	.word	0x40020470
 8003988:	40020488 	.word	0x40020488
 800398c:	400204a0 	.word	0x400204a0
 8003990:	400204b8 	.word	0x400204b8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d015      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0204 	bic.w	r2, r2, #4
 80039ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2208      	movs	r2, #8
 80039c6:	409a      	lsls	r2, r3
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	f043 0201 	orr.w	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	fa22 f303 	lsr.w	r3, r2, r3
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d06e      	beq.n	8003acc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a69      	ldr	r2, [pc, #420]	; (8003b98 <HAL_DMA_IRQHandler+0x3f8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d04a      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a67      	ldr	r2, [pc, #412]	; (8003b9c <HAL_DMA_IRQHandler+0x3fc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d045      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a66      	ldr	r2, [pc, #408]	; (8003ba0 <HAL_DMA_IRQHandler+0x400>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d040      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a64      	ldr	r2, [pc, #400]	; (8003ba4 <HAL_DMA_IRQHandler+0x404>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d03b      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a63      	ldr	r2, [pc, #396]	; (8003ba8 <HAL_DMA_IRQHandler+0x408>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d036      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a61      	ldr	r2, [pc, #388]	; (8003bac <HAL_DMA_IRQHandler+0x40c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d031      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a60      	ldr	r2, [pc, #384]	; (8003bb0 <HAL_DMA_IRQHandler+0x410>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d02c      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a5e      	ldr	r2, [pc, #376]	; (8003bb4 <HAL_DMA_IRQHandler+0x414>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d027      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5d      	ldr	r2, [pc, #372]	; (8003bb8 <HAL_DMA_IRQHandler+0x418>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5b      	ldr	r2, [pc, #364]	; (8003bbc <HAL_DMA_IRQHandler+0x41c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01d      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5a      	ldr	r2, [pc, #360]	; (8003bc0 <HAL_DMA_IRQHandler+0x420>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_DMA_IRQHandler+0x424>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a57      	ldr	r2, [pc, #348]	; (8003bc8 <HAL_DMA_IRQHandler+0x428>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a55      	ldr	r2, [pc, #340]	; (8003bcc <HAL_DMA_IRQHandler+0x42c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a54      	ldr	r2, [pc, #336]	; (8003bd0 <HAL_DMA_IRQHandler+0x430>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a52      	ldr	r2, [pc, #328]	; (8003bd4 <HAL_DMA_IRQHandler+0x434>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x304>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e003      	b.n	8003aac <HAL_DMA_IRQHandler+0x30c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2201      	movs	r2, #1
 8003aba:	409a      	lsls	r2, r3
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac4:	f043 0202 	orr.w	r2, r3, #2
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 808f 	beq.w	8003c00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a2c      	ldr	r2, [pc, #176]	; (8003b98 <HAL_DMA_IRQHandler+0x3f8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d04a      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2a      	ldr	r2, [pc, #168]	; (8003b9c <HAL_DMA_IRQHandler+0x3fc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d045      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a29      	ldr	r2, [pc, #164]	; (8003ba0 <HAL_DMA_IRQHandler+0x400>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d040      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a27      	ldr	r2, [pc, #156]	; (8003ba4 <HAL_DMA_IRQHandler+0x404>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d03b      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a26      	ldr	r2, [pc, #152]	; (8003ba8 <HAL_DMA_IRQHandler+0x408>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d036      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a24      	ldr	r2, [pc, #144]	; (8003bac <HAL_DMA_IRQHandler+0x40c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d031      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <HAL_DMA_IRQHandler+0x410>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d02c      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <HAL_DMA_IRQHandler+0x414>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d027      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a20      	ldr	r2, [pc, #128]	; (8003bb8 <HAL_DMA_IRQHandler+0x418>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d022      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <HAL_DMA_IRQHandler+0x41c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01d      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <HAL_DMA_IRQHandler+0x420>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d018      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <HAL_DMA_IRQHandler+0x424>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1a      	ldr	r2, [pc, #104]	; (8003bc8 <HAL_DMA_IRQHandler+0x428>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00e      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <HAL_DMA_IRQHandler+0x42c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <HAL_DMA_IRQHandler+0x430>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d004      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <HAL_DMA_IRQHandler+0x434>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d12a      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x438>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e023      	b.n	8003be0 <HAL_DMA_IRQHandler+0x440>
 8003b98:	40020010 	.word	0x40020010
 8003b9c:	40020028 	.word	0x40020028
 8003ba0:	40020040 	.word	0x40020040
 8003ba4:	40020058 	.word	0x40020058
 8003ba8:	40020070 	.word	0x40020070
 8003bac:	40020088 	.word	0x40020088
 8003bb0:	400200a0 	.word	0x400200a0
 8003bb4:	400200b8 	.word	0x400200b8
 8003bb8:	40020410 	.word	0x40020410
 8003bbc:	40020428 	.word	0x40020428
 8003bc0:	40020440 	.word	0x40020440
 8003bc4:	40020458 	.word	0x40020458
 8003bc8:	40020470 	.word	0x40020470
 8003bcc:	40020488 	.word	0x40020488
 8003bd0:	400204a0 	.word	0x400204a0
 8003bd4:	400204b8 	.word	0x400204b8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	2204      	movs	r2, #4
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2210      	movs	r2, #16
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80a6 	beq.w	8003d62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a85      	ldr	r2, [pc, #532]	; (8003e30 <HAL_DMA_IRQHandler+0x690>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d04a      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a83      	ldr	r2, [pc, #524]	; (8003e34 <HAL_DMA_IRQHandler+0x694>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d045      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a82      	ldr	r2, [pc, #520]	; (8003e38 <HAL_DMA_IRQHandler+0x698>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d040      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a80      	ldr	r2, [pc, #512]	; (8003e3c <HAL_DMA_IRQHandler+0x69c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d03b      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7f      	ldr	r2, [pc, #508]	; (8003e40 <HAL_DMA_IRQHandler+0x6a0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d036      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a7d      	ldr	r2, [pc, #500]	; (8003e44 <HAL_DMA_IRQHandler+0x6a4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d031      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a7c      	ldr	r2, [pc, #496]	; (8003e48 <HAL_DMA_IRQHandler+0x6a8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d02c      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a7a      	ldr	r2, [pc, #488]	; (8003e4c <HAL_DMA_IRQHandler+0x6ac>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d027      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a79      	ldr	r2, [pc, #484]	; (8003e50 <HAL_DMA_IRQHandler+0x6b0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d022      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a77      	ldr	r2, [pc, #476]	; (8003e54 <HAL_DMA_IRQHandler+0x6b4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01d      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a76      	ldr	r2, [pc, #472]	; (8003e58 <HAL_DMA_IRQHandler+0x6b8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d018      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a74      	ldr	r2, [pc, #464]	; (8003e5c <HAL_DMA_IRQHandler+0x6bc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d013      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a73      	ldr	r2, [pc, #460]	; (8003e60 <HAL_DMA_IRQHandler+0x6c0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00e      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a71      	ldr	r2, [pc, #452]	; (8003e64 <HAL_DMA_IRQHandler+0x6c4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d009      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a70      	ldr	r2, [pc, #448]	; (8003e68 <HAL_DMA_IRQHandler+0x6c8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a6e      	ldr	r2, [pc, #440]	; (8003e6c <HAL_DMA_IRQHandler+0x6cc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d10a      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x52c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e009      	b.n	8003ce0 <HAL_DMA_IRQHandler+0x540>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf14      	ite	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	2300      	moveq	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d03e      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2210      	movs	r2, #16
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d018      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d108      	bne.n	8003d22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d024      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
 8003d20:	e01f      	b.n	8003d62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01b      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4798      	blx	r3
 8003d32:	e016      	b.n	8003d62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d107      	bne.n	8003d52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0208 	bic.w	r2, r2, #8
 8003d50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8110 	beq.w	8003f98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <HAL_DMA_IRQHandler+0x690>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d04a      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <HAL_DMA_IRQHandler+0x694>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d045      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <HAL_DMA_IRQHandler+0x698>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d040      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a28      	ldr	r2, [pc, #160]	; (8003e3c <HAL_DMA_IRQHandler+0x69c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d03b      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <HAL_DMA_IRQHandler+0x6a0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d036      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <HAL_DMA_IRQHandler+0x6a4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d031      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <HAL_DMA_IRQHandler+0x6a8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d02c      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <HAL_DMA_IRQHandler+0x6ac>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d027      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <HAL_DMA_IRQHandler+0x6b0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d022      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <HAL_DMA_IRQHandler+0x6b4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d01d      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <HAL_DMA_IRQHandler+0x6b8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d018      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <HAL_DMA_IRQHandler+0x6bc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <HAL_DMA_IRQHandler+0x6c0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00e      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <HAL_DMA_IRQHandler+0x6c4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d009      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <HAL_DMA_IRQHandler+0x6c8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d004      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a16      	ldr	r2, [pc, #88]	; (8003e6c <HAL_DMA_IRQHandler+0x6cc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d12b      	bne.n	8003e70 <HAL_DMA_IRQHandler+0x6d0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bf14      	ite	ne
 8003e26:	2301      	movne	r3, #1
 8003e28:	2300      	moveq	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	e02a      	b.n	8003e84 <HAL_DMA_IRQHandler+0x6e4>
 8003e2e:	bf00      	nop
 8003e30:	40020010 	.word	0x40020010
 8003e34:	40020028 	.word	0x40020028
 8003e38:	40020040 	.word	0x40020040
 8003e3c:	40020058 	.word	0x40020058
 8003e40:	40020070 	.word	0x40020070
 8003e44:	40020088 	.word	0x40020088
 8003e48:	400200a0 	.word	0x400200a0
 8003e4c:	400200b8 	.word	0x400200b8
 8003e50:	40020410 	.word	0x40020410
 8003e54:	40020428 	.word	0x40020428
 8003e58:	40020440 	.word	0x40020440
 8003e5c:	40020458 	.word	0x40020458
 8003e60:	40020470 	.word	0x40020470
 8003e64:	40020488 	.word	0x40020488
 8003e68:	400204a0 	.word	0x400204a0
 8003e6c:	400204b8 	.word	0x400204b8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf14      	ite	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	2300      	moveq	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8087 	beq.w	8003f98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	2220      	movs	r2, #32
 8003e94:	409a      	lsls	r2, r3
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d139      	bne.n	8003f1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0216 	bic.w	r2, r2, #22
 8003eb4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_DMA_IRQHandler+0x736>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0208 	bic.w	r2, r2, #8
 8003ee4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	223f      	movs	r2, #63	; 0x3f
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 834a 	beq.w	80045a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
          }
          return;
 8003f18:	e344      	b.n	80045a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d018      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d108      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d02c      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
 8003f46:	e027      	b.n	8003f98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d023      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
 8003f58:	e01e      	b.n	8003f98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10f      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0210 	bic.w	r2, r2, #16
 8003f76:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8306 	beq.w	80045ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8088 	beq.w	80040c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a7a      	ldr	r2, [pc, #488]	; (80041a8 <HAL_DMA_IRQHandler+0xa08>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d04a      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a79      	ldr	r2, [pc, #484]	; (80041ac <HAL_DMA_IRQHandler+0xa0c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d045      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a77      	ldr	r2, [pc, #476]	; (80041b0 <HAL_DMA_IRQHandler+0xa10>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d040      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a76      	ldr	r2, [pc, #472]	; (80041b4 <HAL_DMA_IRQHandler+0xa14>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d03b      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a74      	ldr	r2, [pc, #464]	; (80041b8 <HAL_DMA_IRQHandler+0xa18>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d036      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a73      	ldr	r2, [pc, #460]	; (80041bc <HAL_DMA_IRQHandler+0xa1c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d031      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a71      	ldr	r2, [pc, #452]	; (80041c0 <HAL_DMA_IRQHandler+0xa20>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d02c      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a70      	ldr	r2, [pc, #448]	; (80041c4 <HAL_DMA_IRQHandler+0xa24>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d027      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a6e      	ldr	r2, [pc, #440]	; (80041c8 <HAL_DMA_IRQHandler+0xa28>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d022      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a6d      	ldr	r2, [pc, #436]	; (80041cc <HAL_DMA_IRQHandler+0xa2c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d01d      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a6b      	ldr	r2, [pc, #428]	; (80041d0 <HAL_DMA_IRQHandler+0xa30>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d018      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a6a      	ldr	r2, [pc, #424]	; (80041d4 <HAL_DMA_IRQHandler+0xa34>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a68      	ldr	r2, [pc, #416]	; (80041d8 <HAL_DMA_IRQHandler+0xa38>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00e      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a67      	ldr	r2, [pc, #412]	; (80041dc <HAL_DMA_IRQHandler+0xa3c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d009      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a65      	ldr	r2, [pc, #404]	; (80041e0 <HAL_DMA_IRQHandler+0xa40>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d004      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a64      	ldr	r2, [pc, #400]	; (80041e4 <HAL_DMA_IRQHandler+0xa44>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d108      	bne.n	800406a <HAL_DMA_IRQHandler+0x8ca>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	e007      	b.n	800407a <HAL_DMA_IRQHandler+0x8da>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3301      	adds	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004082:	429a      	cmp	r2, r3
 8004084:	d307      	bcc.n	8004096 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f2      	bne.n	800407a <HAL_DMA_IRQHandler+0x8da>
 8004094:	e000      	b.n	8004098 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004096:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d004      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2203      	movs	r2, #3
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80040b6:	e003      	b.n	80040c0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8272 	beq.w	80045ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
 80040d2:	e26c      	b.n	80045ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a43      	ldr	r2, [pc, #268]	; (80041e8 <HAL_DMA_IRQHandler+0xa48>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d022      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a42      	ldr	r2, [pc, #264]	; (80041ec <HAL_DMA_IRQHandler+0xa4c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d01d      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a40      	ldr	r2, [pc, #256]	; (80041f0 <HAL_DMA_IRQHandler+0xa50>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d018      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a3f      	ldr	r2, [pc, #252]	; (80041f4 <HAL_DMA_IRQHandler+0xa54>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a3d      	ldr	r2, [pc, #244]	; (80041f8 <HAL_DMA_IRQHandler+0xa58>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3c      	ldr	r2, [pc, #240]	; (80041fc <HAL_DMA_IRQHandler+0xa5c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d009      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a3a      	ldr	r2, [pc, #232]	; (8004200 <HAL_DMA_IRQHandler+0xa60>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a39      	ldr	r2, [pc, #228]	; (8004204 <HAL_DMA_IRQHandler+0xa64>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <HAL_DMA_IRQHandler+0x988>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_DMA_IRQHandler+0x98a>
 8004128:	2300      	movs	r3, #0
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 823f 	beq.w	80045ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2204      	movs	r2, #4
 8004142:	409a      	lsls	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80cd 	beq.w	80042e8 <HAL_DMA_IRQHandler+0xb48>
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80c7 	beq.w	80042e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	2204      	movs	r2, #4
 8004164:	409a      	lsls	r2, r3
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d049      	beq.n	8004208 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8210 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004190:	e20a      	b.n	80045a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8206 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041a4:	e200      	b.n	80045a8 <HAL_DMA_IRQHandler+0xe08>
 80041a6:	bf00      	nop
 80041a8:	40020010 	.word	0x40020010
 80041ac:	40020028 	.word	0x40020028
 80041b0:	40020040 	.word	0x40020040
 80041b4:	40020058 	.word	0x40020058
 80041b8:	40020070 	.word	0x40020070
 80041bc:	40020088 	.word	0x40020088
 80041c0:	400200a0 	.word	0x400200a0
 80041c4:	400200b8 	.word	0x400200b8
 80041c8:	40020410 	.word	0x40020410
 80041cc:	40020428 	.word	0x40020428
 80041d0:	40020440 	.word	0x40020440
 80041d4:	40020458 	.word	0x40020458
 80041d8:	40020470 	.word	0x40020470
 80041dc:	40020488 	.word	0x40020488
 80041e0:	400204a0 	.word	0x400204a0
 80041e4:	400204b8 	.word	0x400204b8
 80041e8:	58025408 	.word	0x58025408
 80041ec:	5802541c 	.word	0x5802541c
 80041f0:	58025430 	.word	0x58025430
 80041f4:	58025444 	.word	0x58025444
 80041f8:	58025458 	.word	0x58025458
 80041fc:	5802546c 	.word	0x5802546c
 8004200:	58025480 	.word	0x58025480
 8004204:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d160      	bne.n	80042d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a8c      	ldr	r2, [pc, #560]	; (8004448 <HAL_DMA_IRQHandler+0xca8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d04a      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a8a      	ldr	r2, [pc, #552]	; (800444c <HAL_DMA_IRQHandler+0xcac>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d045      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a89      	ldr	r2, [pc, #548]	; (8004450 <HAL_DMA_IRQHandler+0xcb0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d040      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a87      	ldr	r2, [pc, #540]	; (8004454 <HAL_DMA_IRQHandler+0xcb4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d03b      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a86      	ldr	r2, [pc, #536]	; (8004458 <HAL_DMA_IRQHandler+0xcb8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d036      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a84      	ldr	r2, [pc, #528]	; (800445c <HAL_DMA_IRQHandler+0xcbc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d031      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a83      	ldr	r2, [pc, #524]	; (8004460 <HAL_DMA_IRQHandler+0xcc0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d02c      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a81      	ldr	r2, [pc, #516]	; (8004464 <HAL_DMA_IRQHandler+0xcc4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d027      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a80      	ldr	r2, [pc, #512]	; (8004468 <HAL_DMA_IRQHandler+0xcc8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d022      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a7e      	ldr	r2, [pc, #504]	; (800446c <HAL_DMA_IRQHandler+0xccc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01d      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a7d      	ldr	r2, [pc, #500]	; (8004470 <HAL_DMA_IRQHandler+0xcd0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d018      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a7b      	ldr	r2, [pc, #492]	; (8004474 <HAL_DMA_IRQHandler+0xcd4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a7a      	ldr	r2, [pc, #488]	; (8004478 <HAL_DMA_IRQHandler+0xcd8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00e      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a78      	ldr	r2, [pc, #480]	; (800447c <HAL_DMA_IRQHandler+0xcdc>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d009      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a77      	ldr	r2, [pc, #476]	; (8004480 <HAL_DMA_IRQHandler+0xce0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a75      	ldr	r2, [pc, #468]	; (8004484 <HAL_DMA_IRQHandler+0xce4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d108      	bne.n	80042c4 <HAL_DMA_IRQHandler+0xb24>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0208 	bic.w	r2, r2, #8
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e007      	b.n	80042d4 <HAL_DMA_IRQHandler+0xb34>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0204 	bic.w	r2, r2, #4
 80042d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8165 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042e6:	e15f      	b.n	80045a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2202      	movs	r2, #2
 80042f2:	409a      	lsls	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80c5 	beq.w	8004488 <HAL_DMA_IRQHandler+0xce8>
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80bf 	beq.w	8004488 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2202      	movs	r2, #2
 8004314:	409a      	lsls	r2, r3
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d018      	beq.n	8004356 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 813a 	beq.w	80045ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004340:	e134      	b.n	80045ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8130 	beq.w	80045ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004354:	e12a      	b.n	80045ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d168      	bne.n	8004432 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a38      	ldr	r2, [pc, #224]	; (8004448 <HAL_DMA_IRQHandler+0xca8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d04a      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a37      	ldr	r2, [pc, #220]	; (800444c <HAL_DMA_IRQHandler+0xcac>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d045      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a35      	ldr	r2, [pc, #212]	; (8004450 <HAL_DMA_IRQHandler+0xcb0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d040      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a34      	ldr	r2, [pc, #208]	; (8004454 <HAL_DMA_IRQHandler+0xcb4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d03b      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a32      	ldr	r2, [pc, #200]	; (8004458 <HAL_DMA_IRQHandler+0xcb8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d036      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a31      	ldr	r2, [pc, #196]	; (800445c <HAL_DMA_IRQHandler+0xcbc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d031      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2f      	ldr	r2, [pc, #188]	; (8004460 <HAL_DMA_IRQHandler+0xcc0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d02c      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2e      	ldr	r2, [pc, #184]	; (8004464 <HAL_DMA_IRQHandler+0xcc4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d027      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2c      	ldr	r2, [pc, #176]	; (8004468 <HAL_DMA_IRQHandler+0xcc8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d022      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a2b      	ldr	r2, [pc, #172]	; (800446c <HAL_DMA_IRQHandler+0xccc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d01d      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a29      	ldr	r2, [pc, #164]	; (8004470 <HAL_DMA_IRQHandler+0xcd0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d018      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a28      	ldr	r2, [pc, #160]	; (8004474 <HAL_DMA_IRQHandler+0xcd4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d013      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a26      	ldr	r2, [pc, #152]	; (8004478 <HAL_DMA_IRQHandler+0xcd8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a25      	ldr	r2, [pc, #148]	; (800447c <HAL_DMA_IRQHandler+0xcdc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a23      	ldr	r2, [pc, #140]	; (8004480 <HAL_DMA_IRQHandler+0xce0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_DMA_IRQHandler+0xc60>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a22      	ldr	r2, [pc, #136]	; (8004484 <HAL_DMA_IRQHandler+0xce4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d108      	bne.n	8004412 <HAL_DMA_IRQHandler+0xc72>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0214 	bic.w	r2, r2, #20
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	e007      	b.n	8004422 <HAL_DMA_IRQHandler+0xc82>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 020a 	bic.w	r2, r2, #10
 8004420:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80b8 	beq.w	80045ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004444:	e0b2      	b.n	80045ac <HAL_DMA_IRQHandler+0xe0c>
 8004446:	bf00      	nop
 8004448:	40020010 	.word	0x40020010
 800444c:	40020028 	.word	0x40020028
 8004450:	40020040 	.word	0x40020040
 8004454:	40020058 	.word	0x40020058
 8004458:	40020070 	.word	0x40020070
 800445c:	40020088 	.word	0x40020088
 8004460:	400200a0 	.word	0x400200a0
 8004464:	400200b8 	.word	0x400200b8
 8004468:	40020410 	.word	0x40020410
 800446c:	40020428 	.word	0x40020428
 8004470:	40020440 	.word	0x40020440
 8004474:	40020458 	.word	0x40020458
 8004478:	40020470 	.word	0x40020470
 800447c:	40020488 	.word	0x40020488
 8004480:	400204a0 	.word	0x400204a0
 8004484:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	2208      	movs	r2, #8
 8004492:	409a      	lsls	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8088 	beq.w	80045ae <HAL_DMA_IRQHandler+0xe0e>
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 8082 	beq.w	80045ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a41      	ldr	r2, [pc, #260]	; (80045b4 <HAL_DMA_IRQHandler+0xe14>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d04a      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a3f      	ldr	r2, [pc, #252]	; (80045b8 <HAL_DMA_IRQHandler+0xe18>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d045      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a3e      	ldr	r2, [pc, #248]	; (80045bc <HAL_DMA_IRQHandler+0xe1c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d040      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a3c      	ldr	r2, [pc, #240]	; (80045c0 <HAL_DMA_IRQHandler+0xe20>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d03b      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a3b      	ldr	r2, [pc, #236]	; (80045c4 <HAL_DMA_IRQHandler+0xe24>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d036      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a39      	ldr	r2, [pc, #228]	; (80045c8 <HAL_DMA_IRQHandler+0xe28>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d031      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a38      	ldr	r2, [pc, #224]	; (80045cc <HAL_DMA_IRQHandler+0xe2c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d02c      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a36      	ldr	r2, [pc, #216]	; (80045d0 <HAL_DMA_IRQHandler+0xe30>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d027      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a35      	ldr	r2, [pc, #212]	; (80045d4 <HAL_DMA_IRQHandler+0xe34>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d022      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a33      	ldr	r2, [pc, #204]	; (80045d8 <HAL_DMA_IRQHandler+0xe38>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01d      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a32      	ldr	r2, [pc, #200]	; (80045dc <HAL_DMA_IRQHandler+0xe3c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d018      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a30      	ldr	r2, [pc, #192]	; (80045e0 <HAL_DMA_IRQHandler+0xe40>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2f      	ldr	r2, [pc, #188]	; (80045e4 <HAL_DMA_IRQHandler+0xe44>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2d      	ldr	r2, [pc, #180]	; (80045e8 <HAL_DMA_IRQHandler+0xe48>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a2c      	ldr	r2, [pc, #176]	; (80045ec <HAL_DMA_IRQHandler+0xe4c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a2a      	ldr	r2, [pc, #168]	; (80045f0 <HAL_DMA_IRQHandler+0xe50>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d108      	bne.n	800455c <HAL_DMA_IRQHandler+0xdbc>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 021c 	bic.w	r2, r2, #28
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e007      	b.n	800456c <HAL_DMA_IRQHandler+0xdcc>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 020e 	bic.w	r2, r2, #14
 800456a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	f003 031f 	and.w	r3, r3, #31
 8004574:	2201      	movs	r2, #1
 8004576:	409a      	lsls	r2, r3
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4798      	blx	r3
 80045a2:	e004      	b.n	80045ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80045a4:	bf00      	nop
 80045a6:	e002      	b.n	80045ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045a8:	bf00      	nop
 80045aa:	e000      	b.n	80045ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80045ae:	3728      	adds	r7, #40	; 0x28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40020010 	.word	0x40020010
 80045b8:	40020028 	.word	0x40020028
 80045bc:	40020040 	.word	0x40020040
 80045c0:	40020058 	.word	0x40020058
 80045c4:	40020070 	.word	0x40020070
 80045c8:	40020088 	.word	0x40020088
 80045cc:	400200a0 	.word	0x400200a0
 80045d0:	400200b8 	.word	0x400200b8
 80045d4:	40020410 	.word	0x40020410
 80045d8:	40020428 	.word	0x40020428
 80045dc:	40020440 	.word	0x40020440
 80045e0:	40020458 	.word	0x40020458
 80045e4:	40020470 	.word	0x40020470
 80045e8:	40020488 	.word	0x40020488
 80045ec:	400204a0 	.word	0x400204a0
 80045f0:	400204b8 	.word	0x400204b8

080045f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a42      	ldr	r2, [pc, #264]	; (800470c <DMA_CalcBaseAndBitshift+0x118>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d04a      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a41      	ldr	r2, [pc, #260]	; (8004710 <DMA_CalcBaseAndBitshift+0x11c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d045      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a3f      	ldr	r2, [pc, #252]	; (8004714 <DMA_CalcBaseAndBitshift+0x120>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d040      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a3e      	ldr	r2, [pc, #248]	; (8004718 <DMA_CalcBaseAndBitshift+0x124>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d03b      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a3c      	ldr	r2, [pc, #240]	; (800471c <DMA_CalcBaseAndBitshift+0x128>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d036      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a3b      	ldr	r2, [pc, #236]	; (8004720 <DMA_CalcBaseAndBitshift+0x12c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d031      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a39      	ldr	r2, [pc, #228]	; (8004724 <DMA_CalcBaseAndBitshift+0x130>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d02c      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a38      	ldr	r2, [pc, #224]	; (8004728 <DMA_CalcBaseAndBitshift+0x134>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d027      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a36      	ldr	r2, [pc, #216]	; (800472c <DMA_CalcBaseAndBitshift+0x138>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d022      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a35      	ldr	r2, [pc, #212]	; (8004730 <DMA_CalcBaseAndBitshift+0x13c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d01d      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a33      	ldr	r2, [pc, #204]	; (8004734 <DMA_CalcBaseAndBitshift+0x140>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d018      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a32      	ldr	r2, [pc, #200]	; (8004738 <DMA_CalcBaseAndBitshift+0x144>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d013      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a30      	ldr	r2, [pc, #192]	; (800473c <DMA_CalcBaseAndBitshift+0x148>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00e      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2f      	ldr	r2, [pc, #188]	; (8004740 <DMA_CalcBaseAndBitshift+0x14c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d009      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2d      	ldr	r2, [pc, #180]	; (8004744 <DMA_CalcBaseAndBitshift+0x150>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a2c      	ldr	r2, [pc, #176]	; (8004748 <DMA_CalcBaseAndBitshift+0x154>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d101      	bne.n	80046a0 <DMA_CalcBaseAndBitshift+0xac>
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <DMA_CalcBaseAndBitshift+0xae>
 80046a0:	2300      	movs	r3, #0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d024      	beq.n	80046f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	3b10      	subs	r3, #16
 80046ae:	4a27      	ldr	r2, [pc, #156]	; (800474c <DMA_CalcBaseAndBitshift+0x158>)
 80046b0:	fba2 2303 	umull	r2, r3, r2, r3
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	4a24      	ldr	r2, [pc, #144]	; (8004750 <DMA_CalcBaseAndBitshift+0x15c>)
 80046c0:	5cd3      	ldrb	r3, [r2, r3]
 80046c2:	461a      	mov	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d908      	bls.n	80046e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <DMA_CalcBaseAndBitshift+0x160>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	1d1a      	adds	r2, r3, #4
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	659a      	str	r2, [r3, #88]	; 0x58
 80046de:	e00d      	b.n	80046fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <DMA_CalcBaseAndBitshift+0x160>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6593      	str	r3, [r2, #88]	; 0x58
 80046ee:	e005      	b.n	80046fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	40020010 	.word	0x40020010
 8004710:	40020028 	.word	0x40020028
 8004714:	40020040 	.word	0x40020040
 8004718:	40020058 	.word	0x40020058
 800471c:	40020070 	.word	0x40020070
 8004720:	40020088 	.word	0x40020088
 8004724:	400200a0 	.word	0x400200a0
 8004728:	400200b8 	.word	0x400200b8
 800472c:	40020410 	.word	0x40020410
 8004730:	40020428 	.word	0x40020428
 8004734:	40020440 	.word	0x40020440
 8004738:	40020458 	.word	0x40020458
 800473c:	40020470 	.word	0x40020470
 8004740:	40020488 	.word	0x40020488
 8004744:	400204a0 	.word	0x400204a0
 8004748:	400204b8 	.word	0x400204b8
 800474c:	aaaaaaab 	.word	0xaaaaaaab
 8004750:	08018740 	.word	0x08018740
 8004754:	fffffc00 	.word	0xfffffc00

08004758 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d120      	bne.n	80047ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	2b03      	cmp	r3, #3
 8004772:	d858      	bhi.n	8004826 <DMA_CheckFifoParam+0xce>
 8004774:	a201      	add	r2, pc, #4	; (adr r2, 800477c <DMA_CheckFifoParam+0x24>)
 8004776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477a:	bf00      	nop
 800477c:	0800478d 	.word	0x0800478d
 8004780:	0800479f 	.word	0x0800479f
 8004784:	0800478d 	.word	0x0800478d
 8004788:	08004827 	.word	0x08004827
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d048      	beq.n	800482a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800479c:	e045      	b.n	800482a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047a6:	d142      	bne.n	800482e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047ac:	e03f      	b.n	800482e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b6:	d123      	bne.n	8004800 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d838      	bhi.n	8004832 <DMA_CheckFifoParam+0xda>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <DMA_CheckFifoParam+0x70>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	080047d9 	.word	0x080047d9
 80047cc:	080047df 	.word	0x080047df
 80047d0:	080047d9 	.word	0x080047d9
 80047d4:	080047f1 	.word	0x080047f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
        break;
 80047dc:	e030      	b.n	8004840 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d025      	beq.n	8004836 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047ee:	e022      	b.n	8004836 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047f8:	d11f      	bne.n	800483a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047fe:	e01c      	b.n	800483a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	2b02      	cmp	r3, #2
 8004806:	d902      	bls.n	800480e <DMA_CheckFifoParam+0xb6>
 8004808:	2b03      	cmp	r3, #3
 800480a:	d003      	beq.n	8004814 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800480c:	e018      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
        break;
 8004812:	e015      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00e      	beq.n	800483e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
    break;
 8004824:	e00b      	b.n	800483e <DMA_CheckFifoParam+0xe6>
        break;
 8004826:	bf00      	nop
 8004828:	e00a      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
        break;
 800482a:	bf00      	nop
 800482c:	e008      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
        break;
 800482e:	bf00      	nop
 8004830:	e006      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
        break;
 8004832:	bf00      	nop
 8004834:	e004      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
        break;
 8004836:	bf00      	nop
 8004838:	e002      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
        break;
 800483a:	bf00      	nop
 800483c:	e000      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
    break;
 800483e:	bf00      	nop
    }
  }

  return status;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop

08004850 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a38      	ldr	r2, [pc, #224]	; (8004944 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d022      	beq.n	80048ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a36      	ldr	r2, [pc, #216]	; (8004948 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01d      	beq.n	80048ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a35      	ldr	r2, [pc, #212]	; (800494c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d018      	beq.n	80048ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a33      	ldr	r2, [pc, #204]	; (8004950 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a32      	ldr	r2, [pc, #200]	; (8004954 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00e      	beq.n	80048ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a30      	ldr	r2, [pc, #192]	; (8004958 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d009      	beq.n	80048ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a2f      	ldr	r2, [pc, #188]	; (800495c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2d      	ldr	r2, [pc, #180]	; (8004960 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d101      	bne.n	80048b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80048b2:	2300      	movs	r3, #0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01a      	beq.n	80048ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	3b08      	subs	r3, #8
 80048c0:	4a28      	ldr	r2, [pc, #160]	; (8004964 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	091b      	lsrs	r3, r3, #4
 80048c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4b26      	ldr	r3, [pc, #152]	; (8004968 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	461a      	mov	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a24      	ldr	r2, [pc, #144]	; (800496c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80048dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	2201      	movs	r2, #1
 80048e6:	409a      	lsls	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80048ec:	e024      	b.n	8004938 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	3b10      	subs	r3, #16
 80048f6:	4a1e      	ldr	r2, [pc, #120]	; (8004970 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4a1c      	ldr	r2, [pc, #112]	; (8004974 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d806      	bhi.n	8004916 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4a1b      	ldr	r2, [pc, #108]	; (8004978 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d902      	bls.n	8004916 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3308      	adds	r3, #8
 8004914:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4b18      	ldr	r3, [pc, #96]	; (800497c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	461a      	mov	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a16      	ldr	r2, [pc, #88]	; (8004980 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004928:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	2201      	movs	r2, #1
 8004932:	409a      	lsls	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004938:	bf00      	nop
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	58025408 	.word	0x58025408
 8004948:	5802541c 	.word	0x5802541c
 800494c:	58025430 	.word	0x58025430
 8004950:	58025444 	.word	0x58025444
 8004954:	58025458 	.word	0x58025458
 8004958:	5802546c 	.word	0x5802546c
 800495c:	58025480 	.word	0x58025480
 8004960:	58025494 	.word	0x58025494
 8004964:	cccccccd 	.word	0xcccccccd
 8004968:	16009600 	.word	0x16009600
 800496c:	58025880 	.word	0x58025880
 8004970:	aaaaaaab 	.word	0xaaaaaaab
 8004974:	400204b8 	.word	0x400204b8
 8004978:	4002040f 	.word	0x4002040f
 800497c:	10008200 	.word	0x10008200
 8004980:	40020880 	.word	0x40020880

08004984 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d04a      	beq.n	8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b08      	cmp	r3, #8
 800499e:	d847      	bhi.n	8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a25      	ldr	r2, [pc, #148]	; (8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d022      	beq.n	80049f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a24      	ldr	r2, [pc, #144]	; (8004a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d01d      	beq.n	80049f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a21      	ldr	r2, [pc, #132]	; (8004a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d101      	bne.n	80049f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4b17      	ldr	r3, [pc, #92]	; (8004a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	461a      	mov	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004a0c:	671a      	str	r2, [r3, #112]	; 0x70
 8004a0e:	e009      	b.n	8004a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a11      	ldr	r2, [pc, #68]	; (8004a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004a22:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	2201      	movs	r2, #1
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004a30:	bf00      	nop
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	58025408 	.word	0x58025408
 8004a40:	5802541c 	.word	0x5802541c
 8004a44:	58025430 	.word	0x58025430
 8004a48:	58025444 	.word	0x58025444
 8004a4c:	58025458 	.word	0x58025458
 8004a50:	5802546c 	.word	0x5802546c
 8004a54:	58025480 	.word	0x58025480
 8004a58:	58025494 	.word	0x58025494
 8004a5c:	1600963f 	.word	0x1600963f
 8004a60:	58025940 	.word	0x58025940
 8004a64:	1000823f 	.word	0x1000823f
 8004a68:	40020940 	.word	0x40020940

08004a6c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e0c6      	b.n	8004c0c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fc fce4 	bl	8001454 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2223      	movs	r2, #35	; 0x23
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a92:	4b60      	ldr	r3, [pc, #384]	; (8004c14 <HAL_ETH_Init+0x1a8>)
 8004a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a98:	4a5e      	ldr	r2, [pc, #376]	; (8004c14 <HAL_ETH_Init+0x1a8>)
 8004a9a:	f043 0302 	orr.w	r3, r3, #2
 8004a9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004aa2:	4b5c      	ldr	r3, [pc, #368]	; (8004c14 <HAL_ETH_Init+0x1a8>)
 8004aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	7a1b      	ldrb	r3, [r3, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d103      	bne.n	8004ac0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f7fd f887 	bl	8001bcc <HAL_SYSCFG_ETHInterfaceSelect>
 8004abe:	e003      	b.n	8004ac8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004ac0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004ac4:	f7fd f882 	bl	8001bcc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ade:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ae0:	f7fd f83a 	bl	8001b58 <HAL_GetTick>
 8004ae4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004ae6:	e00f      	b.n	8004b08 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004ae8:	f7fd f836 	bl	8001b58 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004af6:	d907      	bls.n	8004b08 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2204      	movs	r2, #4
 8004afc:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	22e0      	movs	r2, #224	; 0xe0
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e081      	b.n	8004c0c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e6      	bne.n	8004ae8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f001 fae8 	bl	80060f0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004b20:	f003 f8fe 	bl	8007d20 <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b3c      	ldr	r3, [pc, #240]	; (8004c18 <HAL_ETH_Init+0x1ac>)
 8004b28:	fba3 2302 	umull	r2, r3, r3, r2
 8004b2c:	0c9a      	lsrs	r2, r3, #18
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3a01      	subs	r2, #1
 8004b34:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f001 fa3b 	bl	8005fb4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004b54:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004b58:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	22e0      	movs	r2, #224	; 0xe0
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e04a      	b.n	8004c0c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	f241 1308 	movw	r3, #4360	; 0x1108
 8004b7e:	4413      	add	r3, r2
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b26      	ldr	r3, [pc, #152]	; (8004c1c <HAL_ETH_Init+0x1b0>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6952      	ldr	r2, [r2, #20]
 8004b8a:	0052      	lsls	r2, r2, #1
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	6809      	ldr	r1, [r1, #0]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	f241 1308 	movw	r3, #4360	; 0x1108
 8004b96:	440b      	add	r3, r1
 8004b98:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f001 fb00 	bl	80061a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f001 fb44 	bl	800622e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	3305      	adds	r3, #5
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	021a      	lsls	r2, r3, #8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	3303      	adds	r3, #3
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	061a      	lsls	r2, r3, #24
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	3302      	adds	r3, #2
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	3301      	adds	r3, #1
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004be4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004bf2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004bf4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2210      	movs	r2, #16
 8004c02:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2210      	movs	r2, #16
 8004c08:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	58024400 	.word	0x58024400
 8004c18:	431bde83 	.word	0x431bde83
 8004c1c:	ffff8001 	.word	0xffff8001

08004c20 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	330a      	adds	r3, #10
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_ETH_DescAssignMemory+0x28>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d904      	bls.n	8004c52 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e021      	b.n	8004c96 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cae:	2b10      	cmp	r3, #16
 8004cb0:	d174      	bne.n	8004d9c <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2223      	movs	r2, #35	; 0x23
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e00f      	b.n	8004cde <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	330a      	adds	r3, #10
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d9ec      	bls.n	8004cbe <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0202 	orr.w	r2, r2, #2
 8004cf8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	f241 1304 	movw	r3, #4356	; 0x1104
 8004d26:	4413      	add	r3, r2
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6811      	ldr	r1, [r2, #0]
 8004d2e:	f043 0201 	orr.w	r2, r3, #1
 8004d32:	f241 1304 	movw	r3, #4356	; 0x1104
 8004d36:	440b      	add	r3, r1
 8004d38:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d42:	4413      	add	r3, r2
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6811      	ldr	r1, [r2, #0]
 8004d4a:	f043 0201 	orr.w	r2, r3, #1
 8004d4e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d52:	440b      	add	r3, r1
 8004d54:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8004d68:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004d6c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	f241 1334 	movw	r3, #4404	; 0x1134
 8004d76:	4413      	add	r3, r2
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6811      	ldr	r1, [r2, #0]
 8004d7e:	f24d 0241 	movw	r2, #53313	; 0xd041
 8004d82:	431a      	orrs	r2, r3
 8004d84:	f241 1334 	movw	r3, #4404	; 0x1134
 8004d88:	440b      	add	r3, r1
 8004d8a:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2210      	movs	r2, #16
 8004d90:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2222      	movs	r2, #34	; 0x22
 8004d96:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d067      	beq.n	8004e8c <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2223      	movs	r2, #35	; 0x23
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	f241 1334 	movw	r3, #4404	; 0x1134
 8004dca:	4413      	add	r3, r2
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6811      	ldr	r1, [r2, #0]
 8004dd2:	4a32      	ldr	r2, [pc, #200]	; (8004e9c <HAL_ETH_Stop_IT+0xf0>)
 8004dd4:	401a      	ands	r2, r3
 8004dd6:	f241 1334 	movw	r3, #4404	; 0x1134
 8004dda:	440b      	add	r3, r1
 8004ddc:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	f241 1304 	movw	r3, #4356	; 0x1104
 8004de6:	4413      	add	r3, r2
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6811      	ldr	r1, [r2, #0]
 8004dee:	f023 0201 	bic.w	r2, r3, #1
 8004df2:	f241 1304 	movw	r3, #4356	; 0x1104
 8004df6:	440b      	add	r3, r1
 8004df8:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	f241 1308 	movw	r3, #4360	; 0x1108
 8004e02:	4413      	add	r3, r2
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6811      	ldr	r1, [r2, #0]
 8004e0a:	f023 0201 	bic.w	r2, r3, #1
 8004e0e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004e12:	440b      	add	r3, r1
 8004e14:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0201 	bic.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0202 	bic.w	r2, r2, #2
 8004e48:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	e00f      	b.n	8004e70 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	330a      	adds	r3, #10
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d9ec      	bls.n	8004e50 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2210      	movs	r2, #16
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2210      	movs	r2, #16
 8004e86:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	ffff2fbe 	.word	0xffff2fbe

08004ea0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d107      	bne.n	8004ec2 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb6:	f043 0201 	orr.w	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e073      	b.n	8004faa <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	2b10      	cmp	r3, #16
 8004ec8:	d16e      	bne.n	8004fa8 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f001 fa0a 	bl	80062e8 <ETH_Prepare_Tx_Descriptors>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	f043 0202 	orr.w	r2, r3, #2
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e05f      	b.n	8004faa <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3206      	adds	r2, #6
 8004ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	629a      	str	r2, [r3, #40]	; 0x28
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d904      	bls.n	8004f14 <HAL_ETH_Transmit+0x74>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	1f1a      	subs	r2, r3, #4
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	3106      	adds	r1, #6
 8004f20:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004f24:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004f28:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8004f2a:	f7fc fe15 	bl	8001b58 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8004f30:	e034      	b.n	8004f9c <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d011      	beq.n	8004f68 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f48:	f043 0208 	orr.w	r2, r3, #8
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	22e0      	movs	r2, #224	; 0xe0
 8004f62:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e020      	b.n	8004faa <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	d015      	beq.n	8004f9c <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8004f70:	f7fc fdf2 	bl	8001b58 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d302      	bcc.n	8004f86 <HAL_ETH_Transmit+0xe6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8a:	f043 0204 	orr.w	r2, r3, #4
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	22e0      	movs	r2, #224	; 0xe0
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e006      	b.n	8004faa <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	dbc6      	blt.n	8004f32 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b089      	sub	sp, #36	; 0x24
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	332c      	adds	r3, #44	; 0x2c
 8004fbe:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fce:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d06b      	beq.n	80050bc <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e0ce      	b.n	8005186 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3301      	adds	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d036      	beq.n	8005068 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	3301      	adds	r3, #1
 800500e:	61fb      	str	r3, [r7, #28]
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	2b03      	cmp	r3, #3
 8005014:	d902      	bls.n	800501c <HAL_ETH_IsRxDataAvailable+0x6a>
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3b04      	subs	r3, #4
 800501a:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005024:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	db11      	blt.n	8005052 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2201      	movs	r2, #1
 800503e:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	3301      	adds	r3, #1
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	2b03      	cmp	r3, #3
 800504a:	d902      	bls.n	8005052 <HAL_ETH_IsRxDataAvailable+0xa0>
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	3b04      	subs	r3, #4
 8005050:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8005064:	2301      	movs	r3, #1
 8005066:	e08e      	b.n	8005186 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d012      	beq.n	800509a <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8005078:	2301      	movs	r3, #1
 800507a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	3301      	adds	r3, #1
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d902      	bls.n	800508e <HAL_ETH_IsRxDataAvailable+0xdc>
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	3b04      	subs	r3, #4
 800508c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e010      	b.n	80050bc <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	3301      	adds	r3, #1
 800509e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	3301      	adds	r3, #1
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d902      	bls.n	80050b2 <HAL_ETH_IsRxDataAvailable+0x100>
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	3b04      	subs	r3, #4
 80050b0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ba:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	db02      	blt.n	80050ca <HAL_ETH_IsRxDataAvailable+0x118>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d98e      	bls.n	8004fe8 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d056      	beq.n	800517e <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e8:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e03b      	b.n	8005168 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050fe:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d009      	beq.n	800511c <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	3b01      	subs	r3, #1
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	429a      	cmp	r2, r3
 8005144:	d20d      	bcs.n	8005162 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3301      	adds	r3, #1
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	2b03      	cmp	r3, #3
 8005150:	d902      	bls.n	8005158 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3b04      	subs	r3, #4
 8005156:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005160:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	3301      	adds	r3, #1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	429a      	cmp	r2, r3
 800516e:	d3bf      	bcc.n	80050f0 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6819      	ldr	r1, [r3, #0]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	f241 1328 	movw	r3, #4392	; 0x1128
 800517a:	440b      	add	r3, r1
 800517c:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2200      	movs	r2, #0
 8005182:	619a      	str	r2, [r3, #24]

  return 0;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3724      	adds	r7, #36	; 0x24
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b08a      	sub	sp, #40	; 0x28
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	332c      	adds	r3, #44	; 0x2c
 80051a0:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b4:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e07d      	b.n	80052c6 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10f      	bne.n	80051f2 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff feed 	bl	8004fb2 <HAL_ETH_IsRxDataAvailable>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e071      	b.n	80052c6 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	e031      	b.n	800525c <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	461a      	mov	r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	461a      	mov	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005232:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	3301      	adds	r3, #1
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	2b03      	cmp	r3, #3
 800523e:	d902      	bls.n	8005246 <HAL_ETH_GetRxDataBuffer+0xb4>
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	3b04      	subs	r3, #4
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524e:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	3301      	adds	r3, #1
 800525a:	623b      	str	r3, [r7, #32]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	3b01      	subs	r3, #1
 8005262:	6a3a      	ldr	r2, [r7, #32]
 8005264:	429a      	cmp	r2, r3
 8005266:	d3c7      	bcc.n	80051f8 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	461a      	mov	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	429a      	cmp	r2, r3
 8005288:	d803      	bhi.n	8005292 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	605a      	str	r2, [r3, #4]
 8005290:	e018      	b.n	80052c4 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d012      	beq.n	80052c0 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695a      	ldr	r2, [r3, #20]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	461a      	mov	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	1ad2      	subs	r2, r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	605a      	str	r2, [r3, #4]
 80052be:	e001      	b.n	80052c4 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3728      	adds	r7, #40	; 0x28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b086      	sub	sp, #24
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	332c      	adds	r3, #44	; 0x2c
 80052dc:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d107      	bne.n	80052fc <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff fe60 	bl	8004fb2 <HAL_ETH_IsRxDataAvailable>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e017      	b.n	800532c <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	699a      	ldr	r2, [r3, #24]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	4413      	add	r3, r2
 8005304:	3b01      	subs	r3, #1
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b03      	cmp	r3, #3
 800530c:	d902      	bls.n	8005314 <HAL_ETH_GetRxDataLength+0x46>
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	3b04      	subs	r3, #4
 8005312:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531c:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8005334:	b480      	push	{r7}
 8005336:	b089      	sub	sp, #36	; 0x24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	332c      	adds	r3, #44	; 0x2c
 8005340:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005350:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e057      	b.n	8005414 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	3301      	adds	r3, #1
 8005370:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	e03b      	b.n	80053f0 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005386:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	695a      	ldr	r2, [r3, #20]
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d20d      	bcs.n	80053ea <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	3301      	adds	r3, #1
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d902      	bls.n	80053e0 <HAL_ETH_BuildRxDescriptors+0xac>
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	3b04      	subs	r3, #4
 80053de:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e8:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	3301      	adds	r3, #1
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d3bf      	bcc.n	8005378 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6819      	ldr	r1, [r3, #0]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	f241 1328 	movw	r3, #4392	; 0x1128
 8005402:	440b      	add	r3, r1
 8005404:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3724      	adds	r7, #36	; 0x24
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d113      	bne.n	8005462 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	f241 1334 	movw	r3, #4404	; 0x1134
 8005442:	4413      	add	r3, r2
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d109      	bne.n	8005462 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f011 feae 	bl	80171b0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800545c:	f248 0240 	movw	r2, #32832	; 0x8040
 8005460:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b01      	cmp	r3, #1
 8005472:	d113      	bne.n	800549c <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	f241 1334 	movw	r3, #4404	; 0x1134
 800547c:	4413      	add	r3, r2
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	d109      	bne.n	800549c <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f8c7 	bl	800561c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005496:	f248 0201 	movw	r2, #32769	; 0x8001
 800549a:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ae:	d149      	bne.n	8005544 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	f241 1334 	movw	r3, #4404	; 0x1134
 80054b8:	4413      	add	r3, r2
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054c4:	d13e      	bne.n	8005544 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ca:	f043 0208 	orr.w	r2, r3, #8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e4:	d11b      	bne.n	800551e <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	f241 1302 	movw	r3, #4354	; 0x1102
 80054f4:	4013      	ands	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	f241 1334 	movw	r3, #4404	; 0x1134
 8005502:	4413      	add	r3, r2
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6811      	ldr	r1, [r2, #0]
 800550a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800550e:	f241 1334 	movw	r3, #4404	; 0x1134
 8005512:	440b      	add	r3, r1
 8005514:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	22e0      	movs	r2, #224	; 0xe0
 800551a:	655a      	str	r2, [r3, #84]	; 0x54
 800551c:	e00f      	b.n	800553e <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005538:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 800553c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f876 	bl	8005630 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800554c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005550:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005554:	d10e      	bne.n	8005574 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	22e0      	movs	r2, #224	; 0xe0
 8005566:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f86b 	bl	8005644 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	2b10      	cmp	r3, #16
 8005582:	d10d      	bne.n	80055a0 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800558c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f85f 	bl	8005658 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d10d      	bne.n	80055cc <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055b8:	f003 020f 	and.w	r2, r3, #15
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f853 	bl	800566c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80055cc:	f7fd fbb8 	bl	8002d40 <HAL_GetCurrentCPUID>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d10d      	bne.n	80055f2 <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80055d6:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <HAL_ETH_IRQHandler+0x1f4>)
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d014      	beq.n	800560c <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <HAL_ETH_IRQHandler+0x1f4>)
 80055e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80055e8:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f848 	bl	8005680 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 80055f0:	e00c      	b.n	800560c <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <HAL_ETH_IRQHandler+0x1f8>)
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d006      	beq.n	800560c <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_ETH_IRQHandler+0x1f8>)
 8005600:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005604:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f83a 	bl	8005680 <HAL_ETH_WakeUpCallback>
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	58000080 	.word	0x58000080
 8005618:	580000c0 	.word	0x580000c0

0800561c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e03e      	b.n	8005734 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056be:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	055b      	lsls	r3, r3, #21
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f043 030c 	orr.w	r3, r3, #12
 80056e2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80056f6:	f7fc fa2f 	bl	8001b58 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80056fc:	e009      	b.n	8005712 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80056fe:	f7fc fa2b 	bl	8001b58 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800570c:	d901      	bls.n	8005712 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e010      	b.n	8005734 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1ed      	bne.n	80056fe <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800572a:	b29b      	uxth	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e03c      	b.n	80057d8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005766:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	055b      	lsls	r3, r3, #21
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 030c 	bic.w	r3, r3, #12
 800578a:	f043 0304 	orr.w	r3, r3, #4
 800578e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f043 0301 	orr.w	r3, r3, #1
 8005796:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	b29a      	uxth	r2, r3
 800579c:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <HAL_ETH_WritePHYRegister+0xa4>)
 800579e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80057a2:	4a0f      	ldr	r2, [pc, #60]	; (80057e0 <HAL_ETH_WritePHYRegister+0xa4>)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80057aa:	f7fc f9d5 	bl	8001b58 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80057b0:	e009      	b.n	80057c6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80057b2:	f7fc f9d1 	bl	8001b58 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057c0:	d901      	bls.n	80057c6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e008      	b.n	80057d8 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1ed      	bne.n	80057b2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40028000 	.word	0x40028000

080057e4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e1c3      	b.n	8005b80 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 020c 	and.w	r2, r3, #12
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	2b00      	cmp	r3, #0
 8005812:	bf14      	ite	ne
 8005814:	2301      	movne	r3, #1
 8005816:	2300      	moveq	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583a:	2b00      	cmp	r3, #0
 800583c:	bf0c      	ite	eq
 800583e:	2301      	moveq	r3, #1
 8005840:	2300      	movne	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005856:	2b00      	cmp	r3, #0
 8005858:	bf14      	ite	ne
 800585a:	2301      	movne	r3, #1
 800585c:	2300      	moveq	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588a:	2b00      	cmp	r3, #0
 800588c:	bf14      	ite	ne
 800588e:	2301      	movne	r3, #1
 8005890:	2300      	moveq	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	461a      	mov	r2, r3
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bf14      	ite	ne
 80058de:	2301      	movne	r3, #1
 80058e0:	2300      	moveq	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	bf0c      	ite	eq
 80058f8:	2301      	moveq	r3, #1
 80058fa:	2300      	movne	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800590e:	2b00      	cmp	r3, #0
 8005910:	bf0c      	ite	eq
 8005912:	2301      	moveq	r3, #1
 8005914:	2300      	movne	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005928:	2b00      	cmp	r3, #0
 800592a:	bf14      	ite	ne
 800592c:	2301      	movne	r3, #1
 800592e:	2300      	moveq	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	461a      	mov	r2, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005942:	2b00      	cmp	r3, #0
 8005944:	bf14      	ite	ne
 8005946:	2301      	movne	r3, #1
 8005948:	2300      	moveq	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800595c:	2b00      	cmp	r3, #0
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005976:	2b00      	cmp	r3, #0
 8005978:	bf14      	ite	ne
 800597a:	2301      	movne	r3, #1
 800597c:	2300      	moveq	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bf14      	ite	ne
 80059a2:	2301      	movne	r3, #1
 80059a4:	2300      	moveq	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bf0c      	ite	eq
 80059d8:	2301      	moveq	r3, #1
 80059da:	2300      	movne	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bf14      	ite	ne
 8005a10:	2301      	movne	r3, #1
 8005a12:	2300      	moveq	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bf14      	ite	ne
 8005a2c:	2301      	movne	r3, #1
 8005a2e:	2300      	moveq	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	0e5b      	lsrs	r3, r3, #25
 8005a42:	f003 021f 	and.w	r2, r3, #31
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 020f 	and.w	r2, r3, #15
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bf14      	ite	ne
 8005a82:	2301      	movne	r3, #1
 8005a84:	2300      	moveq	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	2300      	movne	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac0:	0c1b      	lsrs	r3, r3, #16
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bf14      	ite	ne
 8005ad8:	2301      	movne	r3, #1
 8005ada:	2300      	moveq	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bf14      	ite	ne
 8005af6:	2301      	movne	r3, #1
 8005af8:	2300      	moveq	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005b0c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005b1c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	bf14      	ite	ne
 8005b34:	2301      	movne	r3, #1
 8005b36:	2300      	moveq	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	bf14      	ite	ne
 8005b52:	2301      	movne	r3, #1
 8005b54:	2300      	moveq	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bf0c      	ite	eq
 8005b70:	2301      	moveq	r3, #1
 8005b72:	2300      	movne	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e00a      	b.n	8005bb6 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba4:	2b10      	cmp	r3, #16
 8005ba6:	d105      	bne.n	8005bb4 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f860 	bl	8005c70 <ETH_SetMACConfig>

    return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e000      	b.n	8005bb6 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
  }
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bd0:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005bd8:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005bda:	f002 f8a1 	bl	8007d20 <HAL_RCC_GetHCLKFreq>
 8005bde:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4a1e      	ldr	r2, [pc, #120]	; (8005c5c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d908      	bls.n	8005bfa <HAL_ETH_SetMDIOClockRange+0x3a>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4a1d      	ldr	r2, [pc, #116]	; (8005c60 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d804      	bhi.n	8005bfa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e027      	b.n	8005c4a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d908      	bls.n	8005c14 <HAL_ETH_SetMDIOClockRange+0x54>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d804      	bhi.n	8005c14 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	e01a      	b.n	8005c4a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4a13      	ldr	r2, [pc, #76]	; (8005c64 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d903      	bls.n	8005c24 <HAL_ETH_SetMDIOClockRange+0x64>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4a12      	ldr	r2, [pc, #72]	; (8005c68 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d911      	bls.n	8005c48 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4a10      	ldr	r2, [pc, #64]	; (8005c68 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d908      	bls.n	8005c3e <HAL_ETH_SetMDIOClockRange+0x7e>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4a0f      	ldr	r2, [pc, #60]	; (8005c6c <HAL_ETH_SetMDIOClockRange+0xac>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d804      	bhi.n	8005c3e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	e005      	b.n	8005c4a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	e000      	b.n	8005c4a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005c48:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005c54:	bf00      	nop
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	01312cff 	.word	0x01312cff
 8005c60:	02160ebf 	.word	0x02160ebf
 8005c64:	039386ff 	.word	0x039386ff
 8005c68:	05f5e0ff 	.word	0x05f5e0ff
 8005c6c:	08f0d17f 	.word	0x08f0d17f

08005c70 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005c82:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	791b      	ldrb	r3, [r3, #4]
 8005c88:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005c8a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	7b1b      	ldrb	r3, [r3, #12]
 8005c90:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005c92:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	7b5b      	ldrb	r3, [r3, #13]
 8005c98:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005c9a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	7b9b      	ldrb	r3, [r3, #14]
 8005ca0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005ca2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	7bdb      	ldrb	r3, [r3, #15]
 8005ca8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005caa:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	7c12      	ldrb	r2, [r2, #16]
 8005cb0:	2a00      	cmp	r2, #0
 8005cb2:	d102      	bne.n	8005cba <ETH_SetMACConfig+0x4a>
 8005cb4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005cb8:	e000      	b.n	8005cbc <ETH_SetMACConfig+0x4c>
 8005cba:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005cbc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	7c52      	ldrb	r2, [r2, #17]
 8005cc2:	2a00      	cmp	r2, #0
 8005cc4:	d102      	bne.n	8005ccc <ETH_SetMACConfig+0x5c>
 8005cc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cca:	e000      	b.n	8005cce <ETH_SetMACConfig+0x5e>
 8005ccc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005cce:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	7c9b      	ldrb	r3, [r3, #18]
 8005cd4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005cd6:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005cdc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005ce2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	7f1b      	ldrb	r3, [r3, #28]
 8005ce8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005cea:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	7f5b      	ldrb	r3, [r3, #29]
 8005cf0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005cf2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	7f92      	ldrb	r2, [r2, #30]
 8005cf8:	2a00      	cmp	r2, #0
 8005cfa:	d102      	bne.n	8005d02 <ETH_SetMACConfig+0x92>
 8005cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d00:	e000      	b.n	8005d04 <ETH_SetMACConfig+0x94>
 8005d02:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005d04:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	7fdb      	ldrb	r3, [r3, #31]
 8005d0a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005d0c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	d102      	bne.n	8005d1e <ETH_SetMACConfig+0xae>
 8005d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d1c:	e000      	b.n	8005d20 <ETH_SetMACConfig+0xb0>
 8005d1e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005d20:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005d26:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d2e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005d30:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	4b56      	ldr	r3, [pc, #344]	; (8005e9c <ETH_SetMACConfig+0x22c>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6812      	ldr	r2, [r2, #0]
 8005d48:	68f9      	ldr	r1, [r7, #12]
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d52:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d5a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005d5c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d64:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005d66:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d6e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005d70:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005d78:	2a00      	cmp	r2, #0
 8005d7a:	d102      	bne.n	8005d82 <ETH_SetMACConfig+0x112>
 8005d7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d80:	e000      	b.n	8005d84 <ETH_SetMACConfig+0x114>
 8005d82:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005d84:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	4b42      	ldr	r3, [pc, #264]	; (8005ea0 <ETH_SetMACConfig+0x230>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	68f9      	ldr	r1, [r7, #12]
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005da8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	4b3a      	ldr	r3, [pc, #232]	; (8005ea4 <ETH_SetMACConfig+0x234>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	68f9      	ldr	r1, [r7, #12]
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005dcc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005dd2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	d101      	bne.n	8005de2 <ETH_SetMACConfig+0x172>
 8005dde:	2280      	movs	r2, #128	; 0x80
 8005de0:	e000      	b.n	8005de4 <ETH_SetMACConfig+0x174>
 8005de2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005de4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dea:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005df6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6812      	ldr	r2, [r2, #0]
 8005e00:	68f9      	ldr	r1, [r7, #12]
 8005e02:	430b      	orrs	r3, r1
 8005e04:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005e0c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005e14:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	f023 0103 	bic.w	r1, r3, #3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005e3a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	d101      	bne.n	8005e5e <ETH_SetMACConfig+0x1ee>
 8005e5a:	2240      	movs	r2, #64	; 0x40
 8005e5c:	e000      	b.n	8005e60 <ETH_SetMACConfig+0x1f0>
 8005e5e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005e60:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005e68:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005e6a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005e72:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005e80:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	00048083 	.word	0x00048083
 8005ea0:	c0f88000 	.word	0xc0f88000
 8005ea4:	fffffef0 	.word	0xfffffef0

08005ea8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	4b38      	ldr	r3, [pc, #224]	; (8005fa0 <ETH_SetDMAConfig+0xf8>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	6812      	ldr	r2, [r2, #0]
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	6809      	ldr	r1, [r1, #0]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005ece:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	791b      	ldrb	r3, [r3, #4]
 8005ed4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005eda:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	7b1b      	ldrb	r3, [r3, #12]
 8005ee0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	f241 0304 	movw	r3, #4100	; 0x1004
 8005eee:	4413      	add	r3, r2
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	4b2c      	ldr	r3, [pc, #176]	; (8005fa4 <ETH_SetDMAConfig+0xfc>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6811      	ldr	r1, [r2, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	431a      	orrs	r2, r3
 8005efe:	f241 0304 	movw	r3, #4100	; 0x1004
 8005f02:	440b      	add	r3, r1
 8005f04:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	7b5b      	ldrb	r3, [r3, #13]
 8005f0a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <ETH_SetDMAConfig+0x100>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6811      	ldr	r1, [r2, #0]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005f2e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	7d1b      	ldrb	r3, [r3, #20]
 8005f38:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005f3a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	7f5b      	ldrb	r3, [r3, #29]
 8005f40:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	f241 1304 	movw	r3, #4356	; 0x1104
 8005f4e:	4413      	add	r3, r2
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	4b16      	ldr	r3, [pc, #88]	; (8005fac <ETH_SetDMAConfig+0x104>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6811      	ldr	r1, [r2, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005f62:	440b      	add	r3, r1
 8005f64:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	7f1b      	ldrb	r3, [r3, #28]
 8005f6a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	f241 1308 	movw	r3, #4360	; 0x1108
 8005f7c:	4413      	add	r3, r2
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <ETH_SetDMAConfig+0x108>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6811      	ldr	r1, [r2, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	f241 1308 	movw	r3, #4360	; 0x1108
 8005f90:	440b      	add	r3, r1
 8005f92:	601a      	str	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	ffff87fd 	.word	0xffff87fd
 8005fa4:	ffff2ffe 	.word	0xffff2ffe
 8005fa8:	fffec000 	.word	0xfffec000
 8005fac:	ffc0efef 	.word	0xffc0efef
 8005fb0:	7fc0ffff 	.word	0x7fc0ffff

08005fb4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b0a4      	sub	sp, #144	; 0x90
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ff4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006000:	2300      	movs	r3, #0
 8006002:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006006:	2300      	movs	r3, #0
 8006008:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800600c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006010:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006012:	2300      	movs	r3, #0
 8006014:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006018:	2300      	movs	r3, #0
 800601a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006022:	2300      	movs	r3, #0
 8006024:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006028:	2300      	movs	r3, #0
 800602a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800602e:	2300      	movs	r3, #0
 8006030:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006032:	2300      	movs	r3, #0
 8006034:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006036:	2300      	movs	r3, #0
 8006038:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800603a:	2300      	movs	r3, #0
 800603c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006040:	2300      	movs	r3, #0
 8006042:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006046:	2301      	movs	r3, #1
 8006048:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800604c:	2320      	movs	r3, #32
 800604e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006058:	2300      	movs	r3, #0
 800605a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800605e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006068:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800606a:	2300      	movs	r3, #0
 800606c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006070:	2302      	movs	r3, #2
 8006072:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006076:	2300      	movs	r3, #0
 8006078:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800607c:	2300      	movs	r3, #0
 800607e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006082:	2300      	movs	r3, #0
 8006084:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800608e:	2300      	movs	r3, #0
 8006090:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff fde6 	bl	8005c70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80060a4:	2301      	movs	r3, #1
 80060a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80060a8:	2301      	movs	r3, #1
 80060aa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80060b6:	2300      	movs	r3, #0
 80060b8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80060be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80060c2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80060c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80060cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80060d4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80060d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80060da:	f107 0308 	add.w	r3, r7, #8
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff fee1 	bl	8005ea8 <ETH_SetDMAConfig>
}
 80060e6:	bf00      	nop
 80060e8:	3790      	adds	r7, #144	; 0x90
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006100:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006108:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800610a:	f001 fe09 	bl	8007d20 <HAL_RCC_GetHCLKFreq>
 800610e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	4a1e      	ldr	r2, [pc, #120]	; (800618c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d908      	bls.n	800612a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4a1d      	ldr	r2, [pc, #116]	; (8006190 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d804      	bhi.n	800612a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	e027      	b.n	800617a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	4a18      	ldr	r2, [pc, #96]	; (8006190 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d908      	bls.n	8006144 <ETH_MAC_MDIO_ClkConfig+0x54>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	4a17      	ldr	r2, [pc, #92]	; (8006194 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d804      	bhi.n	8006144 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	e01a      	b.n	800617a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4a13      	ldr	r2, [pc, #76]	; (8006194 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d903      	bls.n	8006154 <ETH_MAC_MDIO_ClkConfig+0x64>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4a12      	ldr	r2, [pc, #72]	; (8006198 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d911      	bls.n	8006178 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4a10      	ldr	r2, [pc, #64]	; (8006198 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d908      	bls.n	800616e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4a0f      	ldr	r2, [pc, #60]	; (800619c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d804      	bhi.n	800616e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e005      	b.n	800617a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	e000      	b.n	800617a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006178:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006184:	bf00      	nop
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	01312cff 	.word	0x01312cff
 8006190:	02160ebf 	.word	0x02160ebf
 8006194:	039386ff 	.word	0x039386ff
 8006198:	05f5e0ff 	.word	0x05f5e0ff
 800619c:	08f0d17f 	.word	0x08f0d17f

080061a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e01d      	b.n	80061ea <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68d9      	ldr	r1, [r3, #12]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4613      	mov	r3, r2
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	4413      	add	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	440b      	add	r3, r1
 80061be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2200      	movs	r2, #0
 80061ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2200      	movs	r2, #0
 80061d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2200      	movs	r2, #0
 80061d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	3206      	adds	r2, #6
 80061e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3301      	adds	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d9de      	bls.n	80061ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	f241 132c 	movw	r3, #4396	; 0x112c
 80061fe:	4413      	add	r3, r2
 8006200:	2203      	movs	r2, #3
 8006202:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68d9      	ldr	r1, [r3, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	f241 1314 	movw	r3, #4372	; 0x1114
 8006210:	4413      	add	r3, r2
 8006212:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006220:	601a      	str	r2, [r3, #0]
}
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	e024      	b.n	8006286 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6919      	ldr	r1, [r3, #16]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4613      	mov	r3, r2
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4413      	add	r3, r2
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	440b      	add	r3, r1
 800624c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2200      	movs	r2, #0
 800625e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2200      	movs	r2, #0
 8006264:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2200      	movs	r2, #0
 800626a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2200      	movs	r2, #0
 8006270:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	330a      	adds	r3, #10
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b03      	cmp	r3, #3
 800628a:	d9d7      	bls.n	800623c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	f241 1330 	movw	r3, #4400	; 0x1130
 80062b2:	4413      	add	r3, r2
 80062b4:	2203      	movs	r2, #3
 80062b6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6919      	ldr	r1, [r3, #16]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80062c4:	4413      	add	r3, r2
 80062c6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	f241 1328 	movw	r3, #4392	; 0x1128
 80062d8:	4413      	add	r3, r2
 80062da:	6019      	str	r1, [r3, #0]
}
 80062dc:	bf00      	nop
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b08d      	sub	sp, #52	; 0x34
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3318      	adds	r3, #24
 80062f8:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8006306:	2300      	movs	r3, #0
 8006308:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800630e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006312:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006326:	d101      	bne.n	800632c <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8006328:	2302      	movs	r3, #2
 800632a:	e223      	b.n	8006774 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d044      	beq.n	80063c2 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	4b72      	ldr	r3, [pc, #456]	; (8006508 <ETH_Prepare_Tx_Descriptors+0x220>)
 800633e:	4013      	ands	r3, r2
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006344:	431a      	orrs	r2, r3
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006364:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0308 	and.w	r3, r3, #8
 800636e:	2b00      	cmp	r3, #0
 8006370:	d027      	beq.n	80063c2 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	b29a      	uxth	r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	041b      	lsls	r3, r3, #16
 800637e:	431a      	orrs	r2, r3
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	431a      	orrs	r2, r3
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80063b0:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80063c0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0310 	and.w	r3, r3, #16
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00e      	beq.n	80063ec <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	4b4e      	ldr	r3, [pc, #312]	; (800650c <ETH_Prepare_Tx_Descriptors+0x224>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	6992      	ldr	r2, [r2, #24]
 80063da:	431a      	orrs	r2, r3
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d105      	bne.n	8006404 <ETH_Prepare_Tx_Descriptors+0x11c>
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b00      	cmp	r3, #0
 8006402:	d030      	beq.n	8006466 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	3301      	adds	r3, #1
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	2b03      	cmp	r3, #3
 8006426:	d902      	bls.n	800642e <ETH_Prepare_Tx_Descriptors+0x146>
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	3b04      	subs	r3, #4
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006436:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	3301      	adds	r3, #1
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800644a:	d10c      	bne.n	8006466 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8006462:	2302      	movs	r3, #2
 8006464:	e186      	b.n	8006774 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	3301      	adds	r3, #1
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	461a      	mov	r2, r3
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	4b24      	ldr	r3, [pc, #144]	; (800650c <ETH_Prepare_Tx_Descriptors+0x224>)
 800647c:	4013      	ands	r3, r2
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	6852      	ldr	r2, [r2, #4]
 8006482:	431a      	orrs	r2, r3
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d012      	beq.n	80064b6 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	4b1a      	ldr	r3, [pc, #104]	; (8006510 <ETH_Prepare_Tx_Descriptors+0x228>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	6852      	ldr	r2, [r2, #4]
 80064ac:	0412      	lsls	r2, r2, #16
 80064ae:	431a      	orrs	r2, r3
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	e008      	b.n	80064c8 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	2200      	movs	r2, #0
 80064ba:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	4b13      	ldr	r3, [pc, #76]	; (8006510 <ETH_Prepare_Tx_Descriptors+0x228>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d021      	beq.n	8006518 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	04db      	lsls	r3, r3, #19
 80064e2:	431a      	orrs	r2, r3
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	4b09      	ldr	r3, [pc, #36]	; (8006514 <ETH_Prepare_Tx_Descriptors+0x22c>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	69d2      	ldr	r2, [r2, #28]
 80064f4:	431a      	orrs	r2, r3
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	60da      	str	r2, [r3, #12]
 8006506:	e02e      	b.n	8006566 <ETH_Prepare_Tx_Descriptors+0x27e>
 8006508:	ffff0000 	.word	0xffff0000
 800650c:	ffffc000 	.word	0xffffc000
 8006510:	c000ffff 	.word	0xc000ffff
 8006514:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	4b98      	ldr	r3, [pc, #608]	; (8006780 <ETH_Prepare_Tx_Descriptors+0x498>)
 800651e:	4013      	ands	r3, r2
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	6852      	ldr	r2, [r2, #4]
 8006524:	431a      	orrs	r2, r3
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d008      	beq.n	8006548 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	431a      	orrs	r2, r3
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0320 	and.w	r3, r3, #32
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	431a      	orrs	r2, r3
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b00      	cmp	r3, #0
 8006570:	d008      	beq.n	8006584 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	431a      	orrs	r2, r3
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80c0 	beq.w	8006736 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80065c8:	e0b5      	b.n	8006736 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	3301      	adds	r3, #1
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d902      	bls.n	80065e8 <ETH_Prepare_Tx_Descriptors+0x300>
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	3b04      	subs	r3, #4
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800660a:	d126      	bne.n	800665a <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006618:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800661a:	2300      	movs	r3, #0
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
 800661e:	e016      	b.n	800664e <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	3301      	adds	r3, #1
 8006630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	2b03      	cmp	r3, #3
 8006636:	d902      	bls.n	800663e <ETH_Prepare_Tx_Descriptors+0x356>
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	3b04      	subs	r3, #4
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006646:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	3301      	adds	r3, #1
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
 800664e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	429a      	cmp	r2, r3
 8006654:	d3e4      	bcc.n	8006620 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8006656:	2302      	movs	r3, #2
 8006658:	e08c      	b.n	8006774 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	3301      	adds	r3, #1
 800665e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	4b43      	ldr	r3, [pc, #268]	; (8006784 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8006676:	4013      	ands	r3, r2
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	6852      	ldr	r2, [r2, #4]
 800667c:	431a      	orrs	r2, r3
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d012      	beq.n	80066b0 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	4b3a      	ldr	r3, [pc, #232]	; (8006788 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80066a0:	4013      	ands	r3, r2
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	6852      	ldr	r2, [r2, #4]
 80066a6:	0412      	lsls	r2, r2, #16
 80066a8:	431a      	orrs	r2, r3
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	609a      	str	r2, [r3, #8]
 80066ae:	e008      	b.n	80066c2 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	2200      	movs	r2, #0
 80066b4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	4b33      	ldr	r3, [pc, #204]	; (8006788 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80066bc:	4013      	ands	r3, r2
 80066be:	6a3a      	ldr	r2, [r7, #32]
 80066c0:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0310 	and.w	r3, r3, #16
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00f      	beq.n	80066ee <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	4b2e      	ldr	r3, [pc, #184]	; (800678c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80066d4:	4013      	ands	r3, r2
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	69d2      	ldr	r2, [r2, #28]
 80066da:	431a      	orrs	r2, r3
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	60da      	str	r2, [r3, #12]
 80066ec:	e017      	b.n	800671e <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	4b23      	ldr	r3, [pc, #140]	; (8006780 <ETH_Prepare_Tx_Descriptors+0x498>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	6852      	ldr	r2, [r2, #4]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	431a      	orrs	r2, r3
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f47f af45 	bne.w	80065ca <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d006      	beq.n	8006754 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	609a      	str	r2, [r3, #8]
 8006752:	e005      	b.n	8006760 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006770:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3734      	adds	r7, #52	; 0x34
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	ffff8000 	.word	0xffff8000
 8006784:	ffffc000 	.word	0xffffc000
 8006788:	c000ffff 	.word	0xc000ffff
 800678c:	fffc0000 	.word	0xfffc0000

08006790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006790:	b480      	push	{r7}
 8006792:	b089      	sub	sp, #36	; 0x24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800679a:	2300      	movs	r3, #0
 800679c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800679e:	4b89      	ldr	r3, [pc, #548]	; (80069c4 <HAL_GPIO_Init+0x234>)
 80067a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80067a2:	e194      	b.n	8006ace <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	2101      	movs	r1, #1
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	fa01 f303 	lsl.w	r3, r1, r3
 80067b0:	4013      	ands	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 8186 	beq.w	8006ac8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d00b      	beq.n	80067dc <HAL_GPIO_Init+0x4c>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d007      	beq.n	80067dc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80067d0:	2b11      	cmp	r3, #17
 80067d2:	d003      	beq.n	80067dc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b12      	cmp	r3, #18
 80067da:	d130      	bne.n	800683e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	2203      	movs	r2, #3
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	43db      	mvns	r3, r3
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	4013      	ands	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	4313      	orrs	r3, r2
 8006804:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006812:	2201      	movs	r2, #1
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	43db      	mvns	r3, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4013      	ands	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	091b      	lsrs	r3, r3, #4
 8006828:	f003 0201 	and.w	r2, r3, #1
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	4313      	orrs	r3, r2
 8006836:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	2203      	movs	r2, #3
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	43db      	mvns	r3, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4013      	ands	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	fa02 f303 	lsl.w	r3, r2, r3
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	4313      	orrs	r3, r2
 8006866:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d003      	beq.n	800687e <HAL_GPIO_Init+0xee>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b12      	cmp	r3, #18
 800687c:	d123      	bne.n	80068c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	08da      	lsrs	r2, r3, #3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3208      	adds	r2, #8
 8006886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	220f      	movs	r2, #15
 8006896:	fa02 f303 	lsl.w	r3, r2, r3
 800689a:	43db      	mvns	r3, r3
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	4013      	ands	r3, r2
 80068a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	691a      	ldr	r2, [r3, #16]
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	fa02 f303 	lsl.w	r3, r2, r3
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	08da      	lsrs	r2, r3, #3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3208      	adds	r2, #8
 80068c0:	69b9      	ldr	r1, [r7, #24]
 80068c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	2203      	movs	r2, #3
 80068d2:	fa02 f303 	lsl.w	r3, r2, r3
 80068d6:	43db      	mvns	r3, r3
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	4013      	ands	r3, r2
 80068dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f003 0203 	and.w	r2, r3, #3
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	fa02 f303 	lsl.w	r3, r2, r3
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 80e0 	beq.w	8006ac8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006908:	4b2f      	ldr	r3, [pc, #188]	; (80069c8 <HAL_GPIO_Init+0x238>)
 800690a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800690e:	4a2e      	ldr	r2, [pc, #184]	; (80069c8 <HAL_GPIO_Init+0x238>)
 8006910:	f043 0302 	orr.w	r3, r3, #2
 8006914:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006918:	4b2b      	ldr	r3, [pc, #172]	; (80069c8 <HAL_GPIO_Init+0x238>)
 800691a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006926:	4a29      	ldr	r2, [pc, #164]	; (80069cc <HAL_GPIO_Init+0x23c>)
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	089b      	lsrs	r3, r3, #2
 800692c:	3302      	adds	r3, #2
 800692e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	220f      	movs	r2, #15
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	43db      	mvns	r3, r3
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	4013      	ands	r3, r2
 8006948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a20      	ldr	r2, [pc, #128]	; (80069d0 <HAL_GPIO_Init+0x240>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d052      	beq.n	80069f8 <HAL_GPIO_Init+0x268>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a1f      	ldr	r2, [pc, #124]	; (80069d4 <HAL_GPIO_Init+0x244>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d031      	beq.n	80069be <HAL_GPIO_Init+0x22e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1e      	ldr	r2, [pc, #120]	; (80069d8 <HAL_GPIO_Init+0x248>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d02b      	beq.n	80069ba <HAL_GPIO_Init+0x22a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1d      	ldr	r2, [pc, #116]	; (80069dc <HAL_GPIO_Init+0x24c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d025      	beq.n	80069b6 <HAL_GPIO_Init+0x226>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1c      	ldr	r2, [pc, #112]	; (80069e0 <HAL_GPIO_Init+0x250>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d01f      	beq.n	80069b2 <HAL_GPIO_Init+0x222>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1b      	ldr	r2, [pc, #108]	; (80069e4 <HAL_GPIO_Init+0x254>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d019      	beq.n	80069ae <HAL_GPIO_Init+0x21e>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a1a      	ldr	r2, [pc, #104]	; (80069e8 <HAL_GPIO_Init+0x258>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d013      	beq.n	80069aa <HAL_GPIO_Init+0x21a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a19      	ldr	r2, [pc, #100]	; (80069ec <HAL_GPIO_Init+0x25c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00d      	beq.n	80069a6 <HAL_GPIO_Init+0x216>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <HAL_GPIO_Init+0x260>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d007      	beq.n	80069a2 <HAL_GPIO_Init+0x212>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <HAL_GPIO_Init+0x264>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d101      	bne.n	800699e <HAL_GPIO_Init+0x20e>
 800699a:	2309      	movs	r3, #9
 800699c:	e02d      	b.n	80069fa <HAL_GPIO_Init+0x26a>
 800699e:	230a      	movs	r3, #10
 80069a0:	e02b      	b.n	80069fa <HAL_GPIO_Init+0x26a>
 80069a2:	2308      	movs	r3, #8
 80069a4:	e029      	b.n	80069fa <HAL_GPIO_Init+0x26a>
 80069a6:	2307      	movs	r3, #7
 80069a8:	e027      	b.n	80069fa <HAL_GPIO_Init+0x26a>
 80069aa:	2306      	movs	r3, #6
 80069ac:	e025      	b.n	80069fa <HAL_GPIO_Init+0x26a>
 80069ae:	2305      	movs	r3, #5
 80069b0:	e023      	b.n	80069fa <HAL_GPIO_Init+0x26a>
 80069b2:	2304      	movs	r3, #4
 80069b4:	e021      	b.n	80069fa <HAL_GPIO_Init+0x26a>
 80069b6:	2303      	movs	r3, #3
 80069b8:	e01f      	b.n	80069fa <HAL_GPIO_Init+0x26a>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e01d      	b.n	80069fa <HAL_GPIO_Init+0x26a>
 80069be:	2301      	movs	r3, #1
 80069c0:	e01b      	b.n	80069fa <HAL_GPIO_Init+0x26a>
 80069c2:	bf00      	nop
 80069c4:	58000080 	.word	0x58000080
 80069c8:	58024400 	.word	0x58024400
 80069cc:	58000400 	.word	0x58000400
 80069d0:	58020000 	.word	0x58020000
 80069d4:	58020400 	.word	0x58020400
 80069d8:	58020800 	.word	0x58020800
 80069dc:	58020c00 	.word	0x58020c00
 80069e0:	58021000 	.word	0x58021000
 80069e4:	58021400 	.word	0x58021400
 80069e8:	58021800 	.word	0x58021800
 80069ec:	58021c00 	.word	0x58021c00
 80069f0:	58022000 	.word	0x58022000
 80069f4:	58022400 	.word	0x58022400
 80069f8:	2300      	movs	r3, #0
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	f002 0203 	and.w	r2, r2, #3
 8006a00:	0092      	lsls	r2, r2, #2
 8006a02:	4093      	lsls	r3, r2
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a0a:	4938      	ldr	r1, [pc, #224]	; (8006aec <HAL_GPIO_Init+0x35c>)
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	089b      	lsrs	r3, r3, #2
 8006a10:	3302      	adds	r3, #2
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	43db      	mvns	r3, r3
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	4013      	ands	r3, r2
 8006a26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	43db      	mvns	r3, r3
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	43db      	mvns	r3, r3
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	43db      	mvns	r3, r3
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	3301      	adds	r3, #1
 8006acc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f47f ae63 	bne.w	80067a4 <HAL_GPIO_Init+0x14>
  }
}
 8006ade:	bf00      	nop
 8006ae0:	3724      	adds	r7, #36	; 0x24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	58000400 	.word	0x58000400

08006af0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006af8:	4a08      	ldr	r2, [pc, #32]	; (8006b1c <HAL_HSEM_FastTake+0x2c>)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3320      	adds	r3, #32
 8006afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b02:	4a07      	ldr	r2, [pc, #28]	; (8006b20 <HAL_HSEM_FastTake+0x30>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d101      	bne.n	8006b0c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e000      	b.n	8006b0e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	58026400 	.word	0x58026400
 8006b20:	80000300 	.word	0x80000300

08006b24 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006b2e:	4906      	ldr	r1, [pc, #24]	; (8006b48 <HAL_HSEM_Release+0x24>)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	58026400 	.word	0x58026400

08006b4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4e:	b08f      	sub	sp, #60	; 0x3c
 8006b50:	af0a      	add	r7, sp, #40	; 0x28
 8006b52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e116      	b.n	8006d8c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d106      	bne.n	8006b7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7fa fdc3 	bl	8001704 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2203      	movs	r2, #3
 8006b82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d102      	bne.n	8006b98 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f004 fcb7 	bl	800b510 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	687e      	ldr	r6, [r7, #4]
 8006baa:	466d      	mov	r5, sp
 8006bac:	f106 0410 	add.w	r4, r6, #16
 8006bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006bbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8006bc0:	1d33      	adds	r3, r6, #4
 8006bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bc4:	6838      	ldr	r0, [r7, #0]
 8006bc6:	f004 fc41 	bl	800b44c <USB_CoreInit>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0d7      	b.n	8006d8c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2100      	movs	r1, #0
 8006be2:	4618      	mov	r0, r3
 8006be4:	f004 fca5 	bl	800b532 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]
 8006bec:	e04a      	b.n	8006c84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006bee:	7bfa      	ldrb	r2, [r7, #15]
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	1a9b      	subs	r3, r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	333d      	adds	r3, #61	; 0x3d
 8006bfe:	2201      	movs	r2, #1
 8006c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c02:	7bfa      	ldrb	r2, [r7, #15]
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	1a9b      	subs	r3, r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	333c      	adds	r3, #60	; 0x3c
 8006c12:	7bfa      	ldrb	r2, [r7, #15]
 8006c14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c16:	7bfa      	ldrb	r2, [r7, #15]
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	b298      	uxth	r0, r3
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	440b      	add	r3, r1
 8006c28:	3342      	adds	r3, #66	; 0x42
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c2e:	7bfa      	ldrb	r2, [r7, #15]
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	1a9b      	subs	r3, r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	333f      	adds	r3, #63	; 0x3f
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c42:	7bfa      	ldrb	r2, [r7, #15]
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	4613      	mov	r3, r2
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	1a9b      	subs	r3, r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	440b      	add	r3, r1
 8006c50:	3344      	adds	r3, #68	; 0x44
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c56:	7bfa      	ldrb	r2, [r7, #15]
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	00db      	lsls	r3, r3, #3
 8006c5e:	1a9b      	subs	r3, r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	440b      	add	r3, r1
 8006c64:	3348      	adds	r3, #72	; 0x48
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c6a:	7bfa      	ldrb	r2, [r7, #15]
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	1a9b      	subs	r3, r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	440b      	add	r3, r1
 8006c78:	3350      	adds	r3, #80	; 0x50
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	3301      	adds	r3, #1
 8006c82:	73fb      	strb	r3, [r7, #15]
 8006c84:	7bfa      	ldrb	r2, [r7, #15]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d3af      	bcc.n	8006bee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c8e:	2300      	movs	r3, #0
 8006c90:	73fb      	strb	r3, [r7, #15]
 8006c92:	e044      	b.n	8006d1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c94:	7bfa      	ldrb	r2, [r7, #15]
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006caa:	7bfa      	ldrb	r2, [r7, #15]
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	1a9b      	subs	r3, r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006cbc:	7bfa      	ldrb	r2, [r7, #15]
 8006cbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006cc0:	7bfa      	ldrb	r2, [r7, #15]
 8006cc2:	6879      	ldr	r1, [r7, #4]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	1a9b      	subs	r3, r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006cd6:	7bfa      	ldrb	r2, [r7, #15]
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	1a9b      	subs	r3, r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	440b      	add	r3, r1
 8006ce4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006cec:	7bfa      	ldrb	r2, [r7, #15]
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d02:	7bfa      	ldrb	r2, [r7, #15]
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	4613      	mov	r3, r2
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	1a9b      	subs	r3, r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	440b      	add	r3, r1
 8006d10:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	73fb      	strb	r3, [r7, #15]
 8006d1e:	7bfa      	ldrb	r2, [r7, #15]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d3b5      	bcc.n	8006c94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	603b      	str	r3, [r7, #0]
 8006d2e:	687e      	ldr	r6, [r7, #4]
 8006d30:	466d      	mov	r5, sp
 8006d32:	f106 0410 	add.w	r4, r6, #16
 8006d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d42:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d46:	1d33      	adds	r3, r6, #4
 8006d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d4a:	6838      	ldr	r0, [r7, #0]
 8006d4c:	f004 fc1c 	bl	800b588 <USB_DevInit>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d005      	beq.n	8006d62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e014      	b.n	8006d8c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d102      	bne.n	8006d80 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f80a 	bl	8006d94 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f004 fdbe 	bl	800b906 <USB_DevDisconnect>

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dc2:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <HAL_PCDEx_ActivateLPM+0x44>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	10000003 	.word	0x10000003

08006ddc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006de4:	4b29      	ldr	r3, [pc, #164]	; (8006e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	2b06      	cmp	r3, #6
 8006dee:	d00a      	beq.n	8006e06 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006df0:	4b26      	ldr	r3, [pc, #152]	; (8006e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d001      	beq.n	8006e02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e040      	b.n	8006e84 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e03e      	b.n	8006e84 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e06:	4b21      	ldr	r3, [pc, #132]	; (8006e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006e0e:	491f      	ldr	r1, [pc, #124]	; (8006e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e16:	f7fa fe9f 	bl	8001b58 <HAL_GetTick>
 8006e1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e1c:	e009      	b.n	8006e32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e1e:	f7fa fe9b 	bl	8001b58 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e2c:	d901      	bls.n	8006e32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e028      	b.n	8006e84 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e32:	4b16      	ldr	r3, [pc, #88]	; (8006e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e3e:	d1ee      	bne.n	8006e1e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b1e      	cmp	r3, #30
 8006e44:	d008      	beq.n	8006e58 <HAL_PWREx_ConfigSupply+0x7c>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b2e      	cmp	r3, #46	; 0x2e
 8006e4a:	d005      	beq.n	8006e58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b1d      	cmp	r3, #29
 8006e50:	d002      	beq.n	8006e58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b2d      	cmp	r3, #45	; 0x2d
 8006e56:	d114      	bne.n	8006e82 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006e58:	f7fa fe7e 	bl	8001b58 <HAL_GetTick>
 8006e5c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006e5e:	e009      	b.n	8006e74 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e60:	f7fa fe7a 	bl	8001b58 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e6e:	d901      	bls.n	8006e74 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e007      	b.n	8006e84 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e80:	d1ee      	bne.n	8006e60 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	58024800 	.word	0x58024800

08006e90 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	4a04      	ldr	r2, [pc, #16]	; (8006eac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e9e:	60d3      	str	r3, [r2, #12]
}
 8006ea0:	bf00      	nop
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	58024800 	.word	0x58024800

08006eb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08c      	sub	sp, #48	; 0x30
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e3ff      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 8087 	beq.w	8006fde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ed0:	4b99      	ldr	r3, [pc, #612]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006eda:	4b97      	ldr	r3, [pc, #604]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d007      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x46>
 8006ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee8:	2b18      	cmp	r3, #24
 8006eea:	d110      	bne.n	8006f0e <HAL_RCC_OscConfig+0x5e>
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d10b      	bne.n	8006f0e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ef6:	4b90      	ldr	r3, [pc, #576]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d06c      	beq.n	8006fdc <HAL_RCC_OscConfig+0x12c>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d168      	bne.n	8006fdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e3d9      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f16:	d106      	bne.n	8006f26 <HAL_RCC_OscConfig+0x76>
 8006f18:	4b87      	ldr	r3, [pc, #540]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a86      	ldr	r2, [pc, #536]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	e02e      	b.n	8006f84 <HAL_RCC_OscConfig+0xd4>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10c      	bne.n	8006f48 <HAL_RCC_OscConfig+0x98>
 8006f2e:	4b82      	ldr	r3, [pc, #520]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a81      	ldr	r2, [pc, #516]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	4b7f      	ldr	r3, [pc, #508]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a7e      	ldr	r2, [pc, #504]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	e01d      	b.n	8006f84 <HAL_RCC_OscConfig+0xd4>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f50:	d10c      	bne.n	8006f6c <HAL_RCC_OscConfig+0xbc>
 8006f52:	4b79      	ldr	r3, [pc, #484]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a78      	ldr	r2, [pc, #480]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	4b76      	ldr	r3, [pc, #472]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a75      	ldr	r2, [pc, #468]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f68:	6013      	str	r3, [r2, #0]
 8006f6a:	e00b      	b.n	8006f84 <HAL_RCC_OscConfig+0xd4>
 8006f6c:	4b72      	ldr	r3, [pc, #456]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a71      	ldr	r2, [pc, #452]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	4b6f      	ldr	r3, [pc, #444]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a6e      	ldr	r2, [pc, #440]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d013      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f8c:	f7fa fde4 	bl	8001b58 <HAL_GetTick>
 8006f90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f94:	f7fa fde0 	bl	8001b58 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b64      	cmp	r3, #100	; 0x64
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e38d      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fa6:	4b64      	ldr	r3, [pc, #400]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0f0      	beq.n	8006f94 <HAL_RCC_OscConfig+0xe4>
 8006fb2:	e014      	b.n	8006fde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb4:	f7fa fdd0 	bl	8001b58 <HAL_GetTick>
 8006fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fbc:	f7fa fdcc 	bl	8001b58 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b64      	cmp	r3, #100	; 0x64
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e379      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fce:	4b5a      	ldr	r3, [pc, #360]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f0      	bne.n	8006fbc <HAL_RCC_OscConfig+0x10c>
 8006fda:	e000      	b.n	8006fde <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 80ae 	beq.w	8007148 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fec:	4b52      	ldr	r3, [pc, #328]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ff4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ff6:	4b50      	ldr	r3, [pc, #320]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d007      	beq.n	8007012 <HAL_RCC_OscConfig+0x162>
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	2b18      	cmp	r3, #24
 8007006:	d13a      	bne.n	800707e <HAL_RCC_OscConfig+0x1ce>
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d135      	bne.n	800707e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007012:	4b49      	ldr	r3, [pc, #292]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0304 	and.w	r3, r3, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	d005      	beq.n	800702a <HAL_RCC_OscConfig+0x17a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e34b      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800702a:	f7fa fdc3 	bl	8001bb4 <HAL_GetREVID>
 800702e:	4602      	mov	r2, r0
 8007030:	f241 0303 	movw	r3, #4099	; 0x1003
 8007034:	429a      	cmp	r2, r3
 8007036:	d817      	bhi.n	8007068 <HAL_RCC_OscConfig+0x1b8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b40      	cmp	r3, #64	; 0x40
 800703e:	d108      	bne.n	8007052 <HAL_RCC_OscConfig+0x1a2>
 8007040:	4b3d      	ldr	r3, [pc, #244]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007048:	4a3b      	ldr	r2, [pc, #236]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 800704a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800704e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007050:	e07a      	b.n	8007148 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007052:	4b39      	ldr	r3, [pc, #228]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	031b      	lsls	r3, r3, #12
 8007060:	4935      	ldr	r1, [pc, #212]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007062:	4313      	orrs	r3, r2
 8007064:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007066:	e06f      	b.n	8007148 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007068:	4b33      	ldr	r3, [pc, #204]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	061b      	lsls	r3, r3, #24
 8007076:	4930      	ldr	r1, [pc, #192]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007078:	4313      	orrs	r3, r2
 800707a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800707c:	e064      	b.n	8007148 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d045      	beq.n	8007112 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007086:	4b2c      	ldr	r3, [pc, #176]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f023 0219 	bic.w	r2, r3, #25
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	4929      	ldr	r1, [pc, #164]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007094:	4313      	orrs	r3, r2
 8007096:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007098:	f7fa fd5e 	bl	8001b58 <HAL_GetTick>
 800709c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800709e:	e008      	b.n	80070b2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070a0:	f7fa fd5a 	bl	8001b58 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e307      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070b2:	4b21      	ldr	r3, [pc, #132]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0f0      	beq.n	80070a0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070be:	f7fa fd79 	bl	8001bb4 <HAL_GetREVID>
 80070c2:	4602      	mov	r2, r0
 80070c4:	f241 0303 	movw	r3, #4099	; 0x1003
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d817      	bhi.n	80070fc <HAL_RCC_OscConfig+0x24c>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	2b40      	cmp	r3, #64	; 0x40
 80070d2:	d108      	bne.n	80070e6 <HAL_RCC_OscConfig+0x236>
 80070d4:	4b18      	ldr	r3, [pc, #96]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80070dc:	4a16      	ldr	r2, [pc, #88]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 80070de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e2:	6053      	str	r3, [r2, #4]
 80070e4:	e030      	b.n	8007148 <HAL_RCC_OscConfig+0x298>
 80070e6:	4b14      	ldr	r3, [pc, #80]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	031b      	lsls	r3, r3, #12
 80070f4:	4910      	ldr	r1, [pc, #64]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	604b      	str	r3, [r1, #4]
 80070fa:	e025      	b.n	8007148 <HAL_RCC_OscConfig+0x298>
 80070fc:	4b0e      	ldr	r3, [pc, #56]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	061b      	lsls	r3, r3, #24
 800710a:	490b      	ldr	r1, [pc, #44]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 800710c:	4313      	orrs	r3, r2
 800710e:	604b      	str	r3, [r1, #4]
 8007110:	e01a      	b.n	8007148 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007112:	4b09      	ldr	r3, [pc, #36]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a08      	ldr	r2, [pc, #32]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007118:	f023 0301 	bic.w	r3, r3, #1
 800711c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711e:	f7fa fd1b 	bl	8001b58 <HAL_GetTick>
 8007122:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007124:	e00a      	b.n	800713c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007126:	f7fa fd17 	bl	8001b58 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	2b02      	cmp	r3, #2
 8007132:	d903      	bls.n	800713c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e2c4      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
 8007138:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800713c:	4ba4      	ldr	r3, [pc, #656]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1ee      	bne.n	8007126 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 80a9 	beq.w	80072a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007156:	4b9e      	ldr	r3, [pc, #632]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800715e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007160:	4b9b      	ldr	r3, [pc, #620]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d007      	beq.n	800717c <HAL_RCC_OscConfig+0x2cc>
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b18      	cmp	r3, #24
 8007170:	d13a      	bne.n	80071e8 <HAL_RCC_OscConfig+0x338>
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f003 0303 	and.w	r3, r3, #3
 8007178:	2b01      	cmp	r3, #1
 800717a:	d135      	bne.n	80071e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800717c:	4b94      	ldr	r3, [pc, #592]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <HAL_RCC_OscConfig+0x2e4>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	2b80      	cmp	r3, #128	; 0x80
 800718e:	d001      	beq.n	8007194 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e296      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007194:	f7fa fd0e 	bl	8001bb4 <HAL_GetREVID>
 8007198:	4602      	mov	r2, r0
 800719a:	f241 0303 	movw	r3, #4099	; 0x1003
 800719e:	429a      	cmp	r2, r3
 80071a0:	d817      	bhi.n	80071d2 <HAL_RCC_OscConfig+0x322>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d108      	bne.n	80071bc <HAL_RCC_OscConfig+0x30c>
 80071aa:	4b89      	ldr	r3, [pc, #548]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80071b2:	4a87      	ldr	r2, [pc, #540]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071ba:	e075      	b.n	80072a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071bc:	4b84      	ldr	r3, [pc, #528]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	069b      	lsls	r3, r3, #26
 80071ca:	4981      	ldr	r1, [pc, #516]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071d0:	e06a      	b.n	80072a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071d2:	4b7f      	ldr	r3, [pc, #508]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	061b      	lsls	r3, r3, #24
 80071e0:	497b      	ldr	r1, [pc, #492]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071e6:	e05f      	b.n	80072a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d042      	beq.n	8007276 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80071f0:	4b77      	ldr	r3, [pc, #476]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a76      	ldr	r2, [pc, #472]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fc:	f7fa fcac 	bl	8001b58 <HAL_GetTick>
 8007200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007204:	f7fa fca8 	bl	8001b58 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e255      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007216:	4b6e      	ldr	r3, [pc, #440]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f0      	beq.n	8007204 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007222:	f7fa fcc7 	bl	8001bb4 <HAL_GetREVID>
 8007226:	4602      	mov	r2, r0
 8007228:	f241 0303 	movw	r3, #4099	; 0x1003
 800722c:	429a      	cmp	r2, r3
 800722e:	d817      	bhi.n	8007260 <HAL_RCC_OscConfig+0x3b0>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	2b20      	cmp	r3, #32
 8007236:	d108      	bne.n	800724a <HAL_RCC_OscConfig+0x39a>
 8007238:	4b65      	ldr	r3, [pc, #404]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007240:	4a63      	ldr	r2, [pc, #396]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007242:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007246:	6053      	str	r3, [r2, #4]
 8007248:	e02e      	b.n	80072a8 <HAL_RCC_OscConfig+0x3f8>
 800724a:	4b61      	ldr	r3, [pc, #388]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	069b      	lsls	r3, r3, #26
 8007258:	495d      	ldr	r1, [pc, #372]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800725a:	4313      	orrs	r3, r2
 800725c:	604b      	str	r3, [r1, #4]
 800725e:	e023      	b.n	80072a8 <HAL_RCC_OscConfig+0x3f8>
 8007260:	4b5b      	ldr	r3, [pc, #364]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	061b      	lsls	r3, r3, #24
 800726e:	4958      	ldr	r1, [pc, #352]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007270:	4313      	orrs	r3, r2
 8007272:	60cb      	str	r3, [r1, #12]
 8007274:	e018      	b.n	80072a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007276:	4b56      	ldr	r3, [pc, #344]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a55      	ldr	r2, [pc, #340]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800727c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007282:	f7fa fc69 	bl	8001b58 <HAL_GetTick>
 8007286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800728a:	f7fa fc65 	bl	8001b58 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e212      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800729c:	4b4c      	ldr	r3, [pc, #304]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1f0      	bne.n	800728a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0308 	and.w	r3, r3, #8
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d036      	beq.n	8007322 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d019      	beq.n	80072f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072bc:	4b44      	ldr	r3, [pc, #272]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80072be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c0:	4a43      	ldr	r2, [pc, #268]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80072c2:	f043 0301 	orr.w	r3, r3, #1
 80072c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c8:	f7fa fc46 	bl	8001b58 <HAL_GetTick>
 80072cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072ce:	e008      	b.n	80072e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072d0:	f7fa fc42 	bl	8001b58 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e1ef      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072e2:	4b3b      	ldr	r3, [pc, #236]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80072e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0f0      	beq.n	80072d0 <HAL_RCC_OscConfig+0x420>
 80072ee:	e018      	b.n	8007322 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072f0:	4b37      	ldr	r3, [pc, #220]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80072f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f4:	4a36      	ldr	r2, [pc, #216]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80072f6:	f023 0301 	bic.w	r3, r3, #1
 80072fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fc:	f7fa fc2c 	bl	8001b58 <HAL_GetTick>
 8007300:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007304:	f7fa fc28 	bl	8001b58 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e1d5      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007316:	4b2e      	ldr	r3, [pc, #184]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f0      	bne.n	8007304 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b00      	cmp	r3, #0
 800732c:	d036      	beq.n	800739c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d019      	beq.n	800736a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007336:	4b26      	ldr	r3, [pc, #152]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a25      	ldr	r2, [pc, #148]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800733c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007340:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007342:	f7fa fc09 	bl	8001b58 <HAL_GetTick>
 8007346:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007348:	e008      	b.n	800735c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800734a:	f7fa fc05 	bl	8001b58 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d901      	bls.n	800735c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e1b2      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800735c:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d0f0      	beq.n	800734a <HAL_RCC_OscConfig+0x49a>
 8007368:	e018      	b.n	800739c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800736a:	4b19      	ldr	r3, [pc, #100]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a18      	ldr	r2, [pc, #96]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007374:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007376:	f7fa fbef 	bl	8001b58 <HAL_GetTick>
 800737a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800737c:	e008      	b.n	8007390 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800737e:	f7fa fbeb 	bl	8001b58 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b02      	cmp	r3, #2
 800738a:	d901      	bls.n	8007390 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e198      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1f0      	bne.n	800737e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8085 	beq.w	80074b4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073aa:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <HAL_RCC_OscConfig+0x524>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a09      	ldr	r2, [pc, #36]	; (80073d4 <HAL_RCC_OscConfig+0x524>)
 80073b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073b6:	f7fa fbcf 	bl	8001b58 <HAL_GetTick>
 80073ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073bc:	e00c      	b.n	80073d8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073be:	f7fa fbcb 	bl	8001b58 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b64      	cmp	r3, #100	; 0x64
 80073ca:	d905      	bls.n	80073d8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e178      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
 80073d0:	58024400 	.word	0x58024400
 80073d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073d8:	4b96      	ldr	r3, [pc, #600]	; (8007634 <HAL_RCC_OscConfig+0x784>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0ec      	beq.n	80073be <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d106      	bne.n	80073fa <HAL_RCC_OscConfig+0x54a>
 80073ec:	4b92      	ldr	r3, [pc, #584]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80073ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f0:	4a91      	ldr	r2, [pc, #580]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80073f2:	f043 0301 	orr.w	r3, r3, #1
 80073f6:	6713      	str	r3, [r2, #112]	; 0x70
 80073f8:	e02d      	b.n	8007456 <HAL_RCC_OscConfig+0x5a6>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10c      	bne.n	800741c <HAL_RCC_OscConfig+0x56c>
 8007402:	4b8d      	ldr	r3, [pc, #564]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007406:	4a8c      	ldr	r2, [pc, #560]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	6713      	str	r3, [r2, #112]	; 0x70
 800740e:	4b8a      	ldr	r3, [pc, #552]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	4a89      	ldr	r2, [pc, #548]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007414:	f023 0304 	bic.w	r3, r3, #4
 8007418:	6713      	str	r3, [r2, #112]	; 0x70
 800741a:	e01c      	b.n	8007456 <HAL_RCC_OscConfig+0x5a6>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	2b05      	cmp	r3, #5
 8007422:	d10c      	bne.n	800743e <HAL_RCC_OscConfig+0x58e>
 8007424:	4b84      	ldr	r3, [pc, #528]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007428:	4a83      	ldr	r2, [pc, #524]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800742a:	f043 0304 	orr.w	r3, r3, #4
 800742e:	6713      	str	r3, [r2, #112]	; 0x70
 8007430:	4b81      	ldr	r3, [pc, #516]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007434:	4a80      	ldr	r2, [pc, #512]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007436:	f043 0301 	orr.w	r3, r3, #1
 800743a:	6713      	str	r3, [r2, #112]	; 0x70
 800743c:	e00b      	b.n	8007456 <HAL_RCC_OscConfig+0x5a6>
 800743e:	4b7e      	ldr	r3, [pc, #504]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	4a7d      	ldr	r2, [pc, #500]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	6713      	str	r3, [r2, #112]	; 0x70
 800744a:	4b7b      	ldr	r3, [pc, #492]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744e:	4a7a      	ldr	r2, [pc, #488]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007450:	f023 0304 	bic.w	r3, r3, #4
 8007454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d015      	beq.n	800748a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800745e:	f7fa fb7b 	bl	8001b58 <HAL_GetTick>
 8007462:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007464:	e00a      	b.n	800747c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007466:	f7fa fb77 	bl	8001b58 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	f241 3288 	movw	r2, #5000	; 0x1388
 8007474:	4293      	cmp	r3, r2
 8007476:	d901      	bls.n	800747c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e122      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800747c:	4b6e      	ldr	r3, [pc, #440]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800747e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0ee      	beq.n	8007466 <HAL_RCC_OscConfig+0x5b6>
 8007488:	e014      	b.n	80074b4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748a:	f7fa fb65 	bl	8001b58 <HAL_GetTick>
 800748e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007490:	e00a      	b.n	80074a8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007492:	f7fa fb61 	bl	8001b58 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e10c      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074a8:	4b63      	ldr	r3, [pc, #396]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80074aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1ee      	bne.n	8007492 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 8101 	beq.w	80076c0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074be:	4b5e      	ldr	r3, [pc, #376]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074c6:	2b18      	cmp	r3, #24
 80074c8:	f000 80bc 	beq.w	8007644 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	f040 8095 	bne.w	8007600 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074d6:	4b58      	ldr	r3, [pc, #352]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a57      	ldr	r2, [pc, #348]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80074dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e2:	f7fa fb39 	bl	8001b58 <HAL_GetTick>
 80074e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074e8:	e008      	b.n	80074fc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ea:	f7fa fb35 	bl	8001b58 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e0e2      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074fc:	4b4e      	ldr	r3, [pc, #312]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1f0      	bne.n	80074ea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007508:	4b4b      	ldr	r3, [pc, #300]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800750a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800750c:	4b4b      	ldr	r3, [pc, #300]	; (800763c <HAL_RCC_OscConfig+0x78c>)
 800750e:	4013      	ands	r3, r2
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007518:	0112      	lsls	r2, r2, #4
 800751a:	430a      	orrs	r2, r1
 800751c:	4946      	ldr	r1, [pc, #280]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800751e:	4313      	orrs	r3, r2
 8007520:	628b      	str	r3, [r1, #40]	; 0x28
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007526:	3b01      	subs	r3, #1
 8007528:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007530:	3b01      	subs	r3, #1
 8007532:	025b      	lsls	r3, r3, #9
 8007534:	b29b      	uxth	r3, r3
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	3b01      	subs	r3, #1
 800753e:	041b      	lsls	r3, r3, #16
 8007540:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	3b01      	subs	r3, #1
 800754c:	061b      	lsls	r3, r3, #24
 800754e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007552:	4939      	ldr	r1, [pc, #228]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007554:	4313      	orrs	r3, r2
 8007556:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007558:	4b37      	ldr	r3, [pc, #220]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	4a36      	ldr	r2, [pc, #216]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800755e:	f023 0301 	bic.w	r3, r3, #1
 8007562:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007564:	4b34      	ldr	r3, [pc, #208]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007568:	4b35      	ldr	r3, [pc, #212]	; (8007640 <HAL_RCC_OscConfig+0x790>)
 800756a:	4013      	ands	r3, r2
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007570:	00d2      	lsls	r2, r2, #3
 8007572:	4931      	ldr	r1, [pc, #196]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007574:	4313      	orrs	r3, r2
 8007576:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007578:	4b2f      	ldr	r3, [pc, #188]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	f023 020c 	bic.w	r2, r3, #12
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	492c      	ldr	r1, [pc, #176]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007586:	4313      	orrs	r3, r2
 8007588:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800758a:	4b2b      	ldr	r3, [pc, #172]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	f023 0202 	bic.w	r2, r3, #2
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007596:	4928      	ldr	r1, [pc, #160]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007598:	4313      	orrs	r3, r2
 800759a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800759c:	4b26      	ldr	r3, [pc, #152]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	4a25      	ldr	r2, [pc, #148]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a8:	4b23      	ldr	r3, [pc, #140]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	4a22      	ldr	r2, [pc, #136]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075b4:	4b20      	ldr	r3, [pc, #128]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	4a1f      	ldr	r2, [pc, #124]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80075c0:	4b1d      	ldr	r3, [pc, #116]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	4a1c      	ldr	r2, [pc, #112]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075cc:	4b1a      	ldr	r3, [pc, #104]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a19      	ldr	r2, [pc, #100]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d8:	f7fa fabe 	bl	8001b58 <HAL_GetTick>
 80075dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075e0:	f7fa faba 	bl	8001b58 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e067      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075f2:	4b11      	ldr	r3, [pc, #68]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0f0      	beq.n	80075e0 <HAL_RCC_OscConfig+0x730>
 80075fe:	e05f      	b.n	80076c0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007600:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a0c      	ldr	r2, [pc, #48]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800760a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fa faa4 	bl	8001b58 <HAL_GetTick>
 8007610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007614:	f7fa faa0 	bl	8001b58 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e04d      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007626:	4b04      	ldr	r3, [pc, #16]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f0      	bne.n	8007614 <HAL_RCC_OscConfig+0x764>
 8007632:	e045      	b.n	80076c0 <HAL_RCC_OscConfig+0x810>
 8007634:	58024800 	.word	0x58024800
 8007638:	58024400 	.word	0x58024400
 800763c:	fffffc0c 	.word	0xfffffc0c
 8007640:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007644:	4b21      	ldr	r3, [pc, #132]	; (80076cc <HAL_RCC_OscConfig+0x81c>)
 8007646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007648:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800764a:	4b20      	ldr	r3, [pc, #128]	; (80076cc <HAL_RCC_OscConfig+0x81c>)
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b01      	cmp	r3, #1
 8007656:	d031      	beq.n	80076bc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f003 0203 	and.w	r2, r3, #3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007662:	429a      	cmp	r2, r3
 8007664:	d12a      	bne.n	80076bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	091b      	lsrs	r3, r3, #4
 800766a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007672:	429a      	cmp	r2, r3
 8007674:	d122      	bne.n	80076bc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007682:	429a      	cmp	r2, r3
 8007684:	d11a      	bne.n	80076bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	0a5b      	lsrs	r3, r3, #9
 800768a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007692:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007694:	429a      	cmp	r2, r3
 8007696:	d111      	bne.n	80076bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	0c1b      	lsrs	r3, r3, #16
 800769c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d108      	bne.n	80076bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	0e1b      	lsrs	r3, r3, #24
 80076ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d001      	beq.n	80076c0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3730      	adds	r7, #48	; 0x30
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	58024400 	.word	0x58024400

080076d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e19c      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076e4:	4b8a      	ldr	r3, [pc, #552]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d910      	bls.n	8007714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f2:	4b87      	ldr	r3, [pc, #540]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f023 020f 	bic.w	r2, r3, #15
 80076fa:	4985      	ldr	r1, [pc, #532]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	4313      	orrs	r3, r2
 8007700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007702:	4b83      	ldr	r3, [pc, #524]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d001      	beq.n	8007714 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e184      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d010      	beq.n	8007742 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	4b7b      	ldr	r3, [pc, #492]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800772c:	429a      	cmp	r2, r3
 800772e:	d908      	bls.n	8007742 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007730:	4b78      	ldr	r3, [pc, #480]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	4975      	ldr	r1, [pc, #468]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 800773e:	4313      	orrs	r3, r2
 8007740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b00      	cmp	r3, #0
 800774c:	d010      	beq.n	8007770 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695a      	ldr	r2, [r3, #20]
 8007752:	4b70      	ldr	r3, [pc, #448]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800775a:	429a      	cmp	r2, r3
 800775c:	d908      	bls.n	8007770 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800775e:	4b6d      	ldr	r3, [pc, #436]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	496a      	ldr	r1, [pc, #424]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 800776c:	4313      	orrs	r3, r2
 800776e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0310 	and.w	r3, r3, #16
 8007778:	2b00      	cmp	r3, #0
 800777a:	d010      	beq.n	800779e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699a      	ldr	r2, [r3, #24]
 8007780:	4b64      	ldr	r3, [pc, #400]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007788:	429a      	cmp	r2, r3
 800778a:	d908      	bls.n	800779e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800778c:	4b61      	ldr	r3, [pc, #388]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	495e      	ldr	r1, [pc, #376]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 800779a:	4313      	orrs	r3, r2
 800779c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d010      	beq.n	80077cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69da      	ldr	r2, [r3, #28]
 80077ae:	4b59      	ldr	r3, [pc, #356]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d908      	bls.n	80077cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80077ba:	4b56      	ldr	r3, [pc, #344]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	4953      	ldr	r1, [pc, #332]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d010      	beq.n	80077fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68da      	ldr	r2, [r3, #12]
 80077dc:	4b4d      	ldr	r3, [pc, #308]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d908      	bls.n	80077fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077e8:	4b4a      	ldr	r3, [pc, #296]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	f023 020f 	bic.w	r2, r3, #15
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	4947      	ldr	r1, [pc, #284]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d055      	beq.n	80078b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007806:	4b43      	ldr	r3, [pc, #268]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	4940      	ldr	r1, [pc, #256]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007814:	4313      	orrs	r3, r2
 8007816:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d107      	bne.n	8007830 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007820:	4b3c      	ldr	r3, [pc, #240]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d121      	bne.n	8007870 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e0f6      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b03      	cmp	r3, #3
 8007836:	d107      	bne.n	8007848 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007838:	4b36      	ldr	r3, [pc, #216]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d115      	bne.n	8007870 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e0ea      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d107      	bne.n	8007860 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007850:	4b30      	ldr	r3, [pc, #192]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007858:	2b00      	cmp	r3, #0
 800785a:	d109      	bne.n	8007870 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0de      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007860:	4b2c      	ldr	r3, [pc, #176]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e0d6      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007870:	4b28      	ldr	r3, [pc, #160]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	f023 0207 	bic.w	r2, r3, #7
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	4925      	ldr	r1, [pc, #148]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 800787e:	4313      	orrs	r3, r2
 8007880:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007882:	f7fa f969 	bl	8001b58 <HAL_GetTick>
 8007886:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007888:	e00a      	b.n	80078a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800788a:	f7fa f965 	bl	8001b58 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	f241 3288 	movw	r2, #5000	; 0x1388
 8007898:	4293      	cmp	r3, r2
 800789a:	d901      	bls.n	80078a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e0be      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078a0:	4b1c      	ldr	r3, [pc, #112]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d1eb      	bne.n	800788a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d010      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	4b14      	ldr	r3, [pc, #80]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d208      	bcs.n	80078e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078ce:	4b11      	ldr	r3, [pc, #68]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	f023 020f 	bic.w	r2, r3, #15
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	490e      	ldr	r1, [pc, #56]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d214      	bcs.n	8007918 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ee:	4b08      	ldr	r3, [pc, #32]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f023 020f 	bic.w	r2, r3, #15
 80078f6:	4906      	ldr	r1, [pc, #24]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078fe:	4b04      	ldr	r3, [pc, #16]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d005      	beq.n	8007918 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e086      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
 8007910:	52002000 	.word	0x52002000
 8007914:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d010      	beq.n	8007946 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	4b3f      	ldr	r3, [pc, #252]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007930:	429a      	cmp	r2, r3
 8007932:	d208      	bcs.n	8007946 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007934:	4b3c      	ldr	r3, [pc, #240]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	4939      	ldr	r1, [pc, #228]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007942:	4313      	orrs	r3, r2
 8007944:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d010      	beq.n	8007974 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	695a      	ldr	r2, [r3, #20]
 8007956:	4b34      	ldr	r3, [pc, #208]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800795e:	429a      	cmp	r2, r3
 8007960:	d208      	bcs.n	8007974 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007962:	4b31      	ldr	r3, [pc, #196]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	492e      	ldr	r1, [pc, #184]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007970:	4313      	orrs	r3, r2
 8007972:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b00      	cmp	r3, #0
 800797e:	d010      	beq.n	80079a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699a      	ldr	r2, [r3, #24]
 8007984:	4b28      	ldr	r3, [pc, #160]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800798c:	429a      	cmp	r2, r3
 800798e:	d208      	bcs.n	80079a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007990:	4b25      	ldr	r3, [pc, #148]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	4922      	ldr	r1, [pc, #136]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d010      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69da      	ldr	r2, [r3, #28]
 80079b2:	4b1d      	ldr	r3, [pc, #116]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d208      	bcs.n	80079d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80079be:	4b1a      	ldr	r3, [pc, #104]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	4917      	ldr	r1, [pc, #92]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80079d0:	f000 f834 	bl	8007a3c <HAL_RCC_GetSysClockFreq>
 80079d4:	4601      	mov	r1, r0
 80079d6:	4b14      	ldr	r3, [pc, #80]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	4a12      	ldr	r2, [pc, #72]	; (8007a2c <HAL_RCC_ClockConfig+0x35c>)
 80079e2:	5cd3      	ldrb	r3, [r2, r3]
 80079e4:	f003 031f 	and.w	r3, r3, #31
 80079e8:	fa21 f303 	lsr.w	r3, r1, r3
 80079ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079ee:	4b0e      	ldr	r3, [pc, #56]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	f003 030f 	and.w	r3, r3, #15
 80079f6:	4a0d      	ldr	r2, [pc, #52]	; (8007a2c <HAL_RCC_ClockConfig+0x35c>)
 80079f8:	5cd3      	ldrb	r3, [r2, r3]
 80079fa:	f003 031f 	and.w	r3, r3, #31
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	fa22 f303 	lsr.w	r3, r2, r3
 8007a04:	4a0a      	ldr	r2, [pc, #40]	; (8007a30 <HAL_RCC_ClockConfig+0x360>)
 8007a06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a08:	4a0a      	ldr	r2, [pc, #40]	; (8007a34 <HAL_RCC_ClockConfig+0x364>)
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007a0e:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <HAL_RCC_ClockConfig+0x368>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7f9 fece 	bl	80017b4 <HAL_InitTick>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	08018720 	.word	0x08018720
 8007a30:	24000004 	.word	0x24000004
 8007a34:	24000000 	.word	0x24000000
 8007a38:	24000010 	.word	0x24000010

08007a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b089      	sub	sp, #36	; 0x24
 8007a40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a42:	4baf      	ldr	r3, [pc, #700]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a4a:	2b18      	cmp	r3, #24
 8007a4c:	f200 814e 	bhi.w	8007cec <HAL_RCC_GetSysClockFreq+0x2b0>
 8007a50:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a56:	bf00      	nop
 8007a58:	08007abd 	.word	0x08007abd
 8007a5c:	08007ced 	.word	0x08007ced
 8007a60:	08007ced 	.word	0x08007ced
 8007a64:	08007ced 	.word	0x08007ced
 8007a68:	08007ced 	.word	0x08007ced
 8007a6c:	08007ced 	.word	0x08007ced
 8007a70:	08007ced 	.word	0x08007ced
 8007a74:	08007ced 	.word	0x08007ced
 8007a78:	08007ae3 	.word	0x08007ae3
 8007a7c:	08007ced 	.word	0x08007ced
 8007a80:	08007ced 	.word	0x08007ced
 8007a84:	08007ced 	.word	0x08007ced
 8007a88:	08007ced 	.word	0x08007ced
 8007a8c:	08007ced 	.word	0x08007ced
 8007a90:	08007ced 	.word	0x08007ced
 8007a94:	08007ced 	.word	0x08007ced
 8007a98:	08007ae9 	.word	0x08007ae9
 8007a9c:	08007ced 	.word	0x08007ced
 8007aa0:	08007ced 	.word	0x08007ced
 8007aa4:	08007ced 	.word	0x08007ced
 8007aa8:	08007ced 	.word	0x08007ced
 8007aac:	08007ced 	.word	0x08007ced
 8007ab0:	08007ced 	.word	0x08007ced
 8007ab4:	08007ced 	.word	0x08007ced
 8007ab8:	08007aef 	.word	0x08007aef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007abc:	4b90      	ldr	r3, [pc, #576]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d009      	beq.n	8007adc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ac8:	4b8d      	ldr	r3, [pc, #564]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	08db      	lsrs	r3, r3, #3
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	4a8c      	ldr	r2, [pc, #560]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007ada:	e10a      	b.n	8007cf2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007adc:	4b89      	ldr	r3, [pc, #548]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007ade:	61bb      	str	r3, [r7, #24]
    break;
 8007ae0:	e107      	b.n	8007cf2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007ae2:	4b89      	ldr	r3, [pc, #548]	; (8007d08 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007ae4:	61bb      	str	r3, [r7, #24]
    break;
 8007ae6:	e104      	b.n	8007cf2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007ae8:	4b88      	ldr	r3, [pc, #544]	; (8007d0c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007aea:	61bb      	str	r3, [r7, #24]
    break;
 8007aec:	e101      	b.n	8007cf2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007aee:	4b84      	ldr	r3, [pc, #528]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007af8:	4b81      	ldr	r3, [pc, #516]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	091b      	lsrs	r3, r3, #4
 8007afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b04:	4b7e      	ldr	r3, [pc, #504]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007b0e:	4b7c      	ldr	r3, [pc, #496]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b12:	08db      	lsrs	r3, r3, #3
 8007b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	fb02 f303 	mul.w	r3, r2, r3
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 80da 	beq.w	8007ce6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d05a      	beq.n	8007bee <HAL_RCC_GetSysClockFreq+0x1b2>
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d302      	bcc.n	8007b42 <HAL_RCC_GetSysClockFreq+0x106>
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d078      	beq.n	8007c32 <HAL_RCC_GetSysClockFreq+0x1f6>
 8007b40:	e099      	b.n	8007c76 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b42:	4b6f      	ldr	r3, [pc, #444]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d02d      	beq.n	8007baa <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b4e:	4b6c      	ldr	r3, [pc, #432]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	08db      	lsrs	r3, r3, #3
 8007b54:	f003 0303 	and.w	r3, r3, #3
 8007b58:	4a6a      	ldr	r2, [pc, #424]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b5e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	ee07 3a90 	vmov	s15, r3
 8007b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b78:	4b61      	ldr	r3, [pc, #388]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b80:	ee07 3a90 	vmov	s15, r3
 8007b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b88:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b8c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007d10 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007ba8:	e087      	b.n	8007cba <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	ee07 3a90 	vmov	s15, r3
 8007bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007d14 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bbc:	4b50      	ldr	r3, [pc, #320]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc4:	ee07 3a90 	vmov	s15, r3
 8007bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bd0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007d10 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bec:	e065      	b.n	8007cba <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	ee07 3a90 	vmov	s15, r3
 8007bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007d18 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c00:	4b3f      	ldr	r3, [pc, #252]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c08:	ee07 3a90 	vmov	s15, r3
 8007c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c10:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c14:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007d10 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c30:	e043      	b.n	8007cba <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	ee07 3a90 	vmov	s15, r3
 8007c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007d1c <HAL_RCC_GetSysClockFreq+0x2e0>
 8007c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c44:	4b2e      	ldr	r3, [pc, #184]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4c:	ee07 3a90 	vmov	s15, r3
 8007c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c54:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c58:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007d10 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c74:	e021      	b.n	8007cba <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	ee07 3a90 	vmov	s15, r3
 8007c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c80:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007d18 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c88:	4b1d      	ldr	r3, [pc, #116]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c90:	ee07 3a90 	vmov	s15, r3
 8007c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c98:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c9c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007d10 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cb8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	0a5b      	lsrs	r3, r3, #9
 8007cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cde:	ee17 3a90 	vmov	r3, s15
 8007ce2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007ce4:	e005      	b.n	8007cf2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61bb      	str	r3, [r7, #24]
    break;
 8007cea:	e002      	b.n	8007cf2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007cec:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007cee:	61bb      	str	r3, [r7, #24]
    break;
 8007cf0:	bf00      	nop
  }

  return sysclockfreq;
 8007cf2:	69bb      	ldr	r3, [r7, #24]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3724      	adds	r7, #36	; 0x24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	58024400 	.word	0x58024400
 8007d04:	03d09000 	.word	0x03d09000
 8007d08:	003d0900 	.word	0x003d0900
 8007d0c:	007a1200 	.word	0x007a1200
 8007d10:	46000000 	.word	0x46000000
 8007d14:	4c742400 	.word	0x4c742400
 8007d18:	4a742400 	.word	0x4a742400
 8007d1c:	4af42400 	.word	0x4af42400

08007d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007d26:	f7ff fe89 	bl	8007a3c <HAL_RCC_GetSysClockFreq>
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	0a1b      	lsrs	r3, r3, #8
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	4a0f      	ldr	r2, [pc, #60]	; (8007d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d38:	5cd3      	ldrb	r3, [r2, r3]
 8007d3a:	f003 031f 	and.w	r3, r3, #31
 8007d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8007d42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d44:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	4a09      	ldr	r2, [pc, #36]	; (8007d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d4e:	5cd3      	ldrb	r3, [r2, r3]
 8007d50:	f003 031f 	and.w	r3, r3, #31
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5a:	4a07      	ldr	r2, [pc, #28]	; (8007d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d5e:	4a07      	ldr	r2, [pc, #28]	; (8007d7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007d64:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d66:	681b      	ldr	r3, [r3, #0]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	58024400 	.word	0x58024400
 8007d74:	08018720 	.word	0x08018720
 8007d78:	24000004 	.word	0x24000004
 8007d7c:	24000000 	.word	0x24000000

08007d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007d84:	f7ff ffcc 	bl	8007d20 <HAL_RCC_GetHCLKFreq>
 8007d88:	4601      	mov	r1, r0
 8007d8a:	4b06      	ldr	r3, [pc, #24]	; (8007da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	091b      	lsrs	r3, r3, #4
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	4a04      	ldr	r2, [pc, #16]	; (8007da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d96:	5cd3      	ldrb	r3, [r2, r3]
 8007d98:	f003 031f 	and.w	r3, r3, #31
 8007d9c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	58024400 	.word	0x58024400
 8007da8:	08018720 	.word	0x08018720

08007dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007db0:	f7ff ffb6 	bl	8007d20 <HAL_RCC_GetHCLKFreq>
 8007db4:	4601      	mov	r1, r0
 8007db6:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	0a1b      	lsrs	r3, r3, #8
 8007dbc:	f003 0307 	and.w	r3, r3, #7
 8007dc0:	4a04      	ldr	r2, [pc, #16]	; (8007dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007dc2:	5cd3      	ldrb	r3, [r2, r3]
 8007dc4:	f003 031f 	and.w	r3, r3, #31
 8007dc8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	58024400 	.word	0x58024400
 8007dd4:	08018720 	.word	0x08018720

08007dd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	223f      	movs	r2, #63	; 0x3f
 8007de6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007de8:	4b1a      	ldr	r3, [pc, #104]	; (8007e54 <HAL_RCC_GetClockConfig+0x7c>)
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f003 0207 	and.w	r2, r3, #7
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007df4:	4b17      	ldr	r3, [pc, #92]	; (8007e54 <HAL_RCC_GetClockConfig+0x7c>)
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007e00:	4b14      	ldr	r3, [pc, #80]	; (8007e54 <HAL_RCC_GetClockConfig+0x7c>)
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	f003 020f 	and.w	r2, r3, #15
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007e0c:	4b11      	ldr	r3, [pc, #68]	; (8007e54 <HAL_RCC_GetClockConfig+0x7c>)
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007e18:	4b0e      	ldr	r3, [pc, #56]	; (8007e54 <HAL_RCC_GetClockConfig+0x7c>)
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007e24:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <HAL_RCC_GetClockConfig+0x7c>)
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007e30:	4b08      	ldr	r3, [pc, #32]	; (8007e54 <HAL_RCC_GetClockConfig+0x7c>)
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e3c:	4b06      	ldr	r3, [pc, #24]	; (8007e58 <HAL_RCC_GetClockConfig+0x80>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 020f 	and.w	r2, r3, #15
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	601a      	str	r2, [r3, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	58024400 	.word	0x58024400
 8007e58:	52002000 	.word	0x52002000

08007e5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e64:	2300      	movs	r3, #0
 8007e66:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e68:	2300      	movs	r3, #0
 8007e6a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d03d      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e80:	d013      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e86:	d802      	bhi.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d007      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007e8c:	e01f      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007e8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e92:	d013      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007e94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e98:	d01c      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007e9a:	e018      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e9c:	4baf      	ldr	r3, [pc, #700]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	4aae      	ldr	r2, [pc, #696]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ea8:	e015      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3304      	adds	r3, #4
 8007eae:	2102      	movs	r1, #2
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f001 fd33 	bl	800991c <RCCEx_PLL2_Config>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007eba:	e00c      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3324      	adds	r3, #36	; 0x24
 8007ec0:	2102      	movs	r1, #2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f001 fddc 	bl	8009a80 <RCCEx_PLL3_Config>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ecc:	e003      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed2:	e000      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed6:	7dfb      	ldrb	r3, [r7, #23]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d109      	bne.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007edc:	4b9f      	ldr	r3, [pc, #636]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee8:	499c      	ldr	r1, [pc, #624]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	650b      	str	r3, [r1, #80]	; 0x50
 8007eee:	e001      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d03d      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d826      	bhi.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007f08:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0e:	bf00      	nop
 8007f10:	08007f25 	.word	0x08007f25
 8007f14:	08007f33 	.word	0x08007f33
 8007f18:	08007f45 	.word	0x08007f45
 8007f1c:	08007f5d 	.word	0x08007f5d
 8007f20:	08007f5d 	.word	0x08007f5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f24:	4b8d      	ldr	r3, [pc, #564]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	4a8c      	ldr	r2, [pc, #560]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f30:	e015      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3304      	adds	r3, #4
 8007f36:	2100      	movs	r1, #0
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f001 fcef 	bl	800991c <RCCEx_PLL2_Config>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f42:	e00c      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3324      	adds	r3, #36	; 0x24
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 fd98 	bl	8009a80 <RCCEx_PLL3_Config>
 8007f50:	4603      	mov	r3, r0
 8007f52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f54:	e003      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	75fb      	strb	r3, [r7, #23]
      break;
 8007f5a:	e000      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d109      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f64:	4b7d      	ldr	r3, [pc, #500]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f68:	f023 0207 	bic.w	r2, r3, #7
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f70:	497a      	ldr	r1, [pc, #488]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	650b      	str	r3, [r1, #80]	; 0x50
 8007f76:	e001      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d03e      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8c:	2b80      	cmp	r3, #128	; 0x80
 8007f8e:	d01c      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007f90:	2b80      	cmp	r3, #128	; 0x80
 8007f92:	d804      	bhi.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d008      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007f98:	2b40      	cmp	r3, #64	; 0x40
 8007f9a:	d00d      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007f9c:	e01e      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8007fa0:	d01f      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa6:	d01e      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007fa8:	e018      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007faa:	4b6c      	ldr	r3, [pc, #432]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	4a6b      	ldr	r2, [pc, #428]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007fb6:	e017      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 fcac 	bl	800991c <RCCEx_PLL2_Config>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007fc8:	e00e      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3324      	adds	r3, #36	; 0x24
 8007fce:	2100      	movs	r1, #0
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f001 fd55 	bl	8009a80 <RCCEx_PLL3_Config>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007fda:	e005      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe0:	e002      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007fe2:	bf00      	nop
 8007fe4:	e000      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007fee:	4b5b      	ldr	r3, [pc, #364]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffa:	4958      	ldr	r1, [pc, #352]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	650b      	str	r3, [r1, #80]	; 0x50
 8008000:	e001      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800800e:	2b00      	cmp	r3, #0
 8008010:	d044      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800801c:	d01f      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800801e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008022:	d805      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00a      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800802c:	d00e      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800802e:	e01f      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8008030:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008034:	d01f      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8008036:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800803a:	d01e      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800803c:	e018      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800803e:	4b47      	ldr	r3, [pc, #284]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	4a46      	ldr	r2, [pc, #280]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008048:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800804a:	e017      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3304      	adds	r3, #4
 8008050:	2100      	movs	r1, #0
 8008052:	4618      	mov	r0, r3
 8008054:	f001 fc62 	bl	800991c <RCCEx_PLL2_Config>
 8008058:	4603      	mov	r3, r0
 800805a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800805c:	e00e      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3324      	adds	r3, #36	; 0x24
 8008062:	2100      	movs	r1, #0
 8008064:	4618      	mov	r0, r3
 8008066:	f001 fd0b 	bl	8009a80 <RCCEx_PLL3_Config>
 800806a:	4603      	mov	r3, r0
 800806c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800806e:	e005      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	75fb      	strb	r3, [r7, #23]
      break;
 8008074:	e002      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008076:	bf00      	nop
 8008078:	e000      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800807a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008082:	4b36      	ldr	r3, [pc, #216]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008086:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008090:	4932      	ldr	r1, [pc, #200]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008092:	4313      	orrs	r3, r2
 8008094:	658b      	str	r3, [r1, #88]	; 0x58
 8008096:	e001      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d044      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80080ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080b2:	d01f      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80080b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080b8:	d805      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80080be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080c2:	d00e      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80080c4:	e01f      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80080c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080ca:	d01f      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80080cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080d0:	d01e      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80080d2:	e018      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d4:	4b21      	ldr	r3, [pc, #132]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	4a20      	ldr	r2, [pc, #128]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080e0:	e017      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3304      	adds	r3, #4
 80080e6:	2100      	movs	r1, #0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 fc17 	bl	800991c <RCCEx_PLL2_Config>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80080f2:	e00e      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3324      	adds	r3, #36	; 0x24
 80080f8:	2100      	movs	r1, #0
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 fcc0 	bl	8009a80 <RCCEx_PLL3_Config>
 8008100:	4603      	mov	r3, r0
 8008102:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008104:	e005      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	75fb      	strb	r3, [r7, #23]
      break;
 800810a:	e002      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800810c:	bf00      	nop
 800810e:	e000      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10a      	bne.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008118:	4b10      	ldr	r3, [pc, #64]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800811a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008126:	490d      	ldr	r1, [pc, #52]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008128:	4313      	orrs	r3, r2
 800812a:	658b      	str	r3, [r1, #88]	; 0x58
 800812c:	e001      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812e:	7dfb      	ldrb	r3, [r7, #23]
 8008130:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d035      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008142:	2b10      	cmp	r3, #16
 8008144:	d00c      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8008146:	2b10      	cmp	r3, #16
 8008148:	d802      	bhi.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d01b      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800814e:	e017      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008150:	2b20      	cmp	r3, #32
 8008152:	d00c      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008154:	2b30      	cmp	r3, #48	; 0x30
 8008156:	d018      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008158:	e012      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800815a:	bf00      	nop
 800815c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008160:	4baf      	ldr	r3, [pc, #700]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	4aae      	ldr	r2, [pc, #696]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800816a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800816c:	e00e      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3304      	adds	r3, #4
 8008172:	2102      	movs	r1, #2
 8008174:	4618      	mov	r0, r3
 8008176:	f001 fbd1 	bl	800991c <RCCEx_PLL2_Config>
 800817a:	4603      	mov	r3, r0
 800817c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800817e:	e005      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	75fb      	strb	r3, [r7, #23]
      break;
 8008184:	e002      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008186:	bf00      	nop
 8008188:	e000      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800818a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d109      	bne.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008192:	4ba3      	ldr	r3, [pc, #652]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008196:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800819e:	49a0      	ldr	r1, [pc, #640]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80081a4:	e001      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
 80081a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d042      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081be:	d01f      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80081c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c4:	d805      	bhi.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80081ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ce:	d00e      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x392>
 80081d0:	e01f      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80081d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081d6:	d01f      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80081d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081dc:	d01e      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80081de:	e018      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e0:	4b8f      	ldr	r3, [pc, #572]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	4a8e      	ldr	r2, [pc, #568]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80081ec:	e017      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3304      	adds	r3, #4
 80081f2:	2100      	movs	r1, #0
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 fb91 	bl	800991c <RCCEx_PLL2_Config>
 80081fa:	4603      	mov	r3, r0
 80081fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80081fe:	e00e      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3324      	adds	r3, #36	; 0x24
 8008204:	2100      	movs	r1, #0
 8008206:	4618      	mov	r0, r3
 8008208:	f001 fc3a 	bl	8009a80 <RCCEx_PLL3_Config>
 800820c:	4603      	mov	r3, r0
 800820e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008210:	e005      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	75fb      	strb	r3, [r7, #23]
      break;
 8008216:	e002      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008218:	bf00      	nop
 800821a:	e000      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800821c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800821e:	7dfb      	ldrb	r3, [r7, #23]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008224:	4b7e      	ldr	r3, [pc, #504]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008228:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008230:	497b      	ldr	r1, [pc, #492]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008232:	4313      	orrs	r3, r2
 8008234:	650b      	str	r3, [r1, #80]	; 0x50
 8008236:	e001      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d042      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008250:	d01b      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008256:	d805      	bhi.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d022      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800825c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008260:	d00a      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008262:	e01b      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008268:	d01d      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800826a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800826e:	d01c      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008270:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008274:	d01b      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008276:	e011      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3304      	adds	r3, #4
 800827c:	2101      	movs	r1, #1
 800827e:	4618      	mov	r0, r3
 8008280:	f001 fb4c 	bl	800991c <RCCEx_PLL2_Config>
 8008284:	4603      	mov	r3, r0
 8008286:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008288:	e012      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	3324      	adds	r3, #36	; 0x24
 800828e:	2101      	movs	r1, #1
 8008290:	4618      	mov	r0, r3
 8008292:	f001 fbf5 	bl	8009a80 <RCCEx_PLL3_Config>
 8008296:	4603      	mov	r3, r0
 8008298:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800829a:	e009      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	75fb      	strb	r3, [r7, #23]
      break;
 80082a0:	e006      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80082a2:	bf00      	nop
 80082a4:	e004      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80082a6:	bf00      	nop
 80082a8:	e002      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80082aa:	bf00      	nop
 80082ac:	e000      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80082ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d109      	bne.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80082b6:	4b5a      	ldr	r3, [pc, #360]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082c2:	4957      	ldr	r1, [pc, #348]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	650b      	str	r3, [r1, #80]	; 0x50
 80082c8:	e001      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d044      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082e4:	d01b      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80082e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ea:	d805      	bhi.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d022      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80082f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082f4:	d00a      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80082f6:	e01b      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80082f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082fc:	d01d      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80082fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008302:	d01c      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008304:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008308:	d01b      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800830a:	e011      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3304      	adds	r3, #4
 8008310:	2101      	movs	r1, #1
 8008312:	4618      	mov	r0, r3
 8008314:	f001 fb02 	bl	800991c <RCCEx_PLL2_Config>
 8008318:	4603      	mov	r3, r0
 800831a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800831c:	e012      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3324      	adds	r3, #36	; 0x24
 8008322:	2101      	movs	r1, #1
 8008324:	4618      	mov	r0, r3
 8008326:	f001 fbab 	bl	8009a80 <RCCEx_PLL3_Config>
 800832a:	4603      	mov	r3, r0
 800832c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800832e:	e009      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	75fb      	strb	r3, [r7, #23]
      break;
 8008334:	e006      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008336:	bf00      	nop
 8008338:	e004      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800833a:	bf00      	nop
 800833c:	e002      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800833e:	bf00      	nop
 8008340:	e000      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008344:	7dfb      	ldrb	r3, [r7, #23]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10a      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800834a:	4b35      	ldr	r3, [pc, #212]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800834c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008358:	4931      	ldr	r1, [pc, #196]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800835a:	4313      	orrs	r3, r2
 800835c:	658b      	str	r3, [r1, #88]	; 0x58
 800835e:	e001      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d02d      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008378:	d005      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800837a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800837e:	d009      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d013      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008384:	e00f      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008386:	4b26      	ldr	r3, [pc, #152]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838a:	4a25      	ldr	r2, [pc, #148]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800838c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008390:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008392:	e00c      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	3304      	adds	r3, #4
 8008398:	2101      	movs	r1, #1
 800839a:	4618      	mov	r0, r3
 800839c:	f001 fabe 	bl	800991c <RCCEx_PLL2_Config>
 80083a0:	4603      	mov	r3, r0
 80083a2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80083a4:	e003      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	75fb      	strb	r3, [r7, #23]
      break;
 80083aa:	e000      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80083ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d109      	bne.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80083b4:	4b1a      	ldr	r3, [pc, #104]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c0:	4917      	ldr	r1, [pc, #92]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	650b      	str	r3, [r1, #80]	; 0x50
 80083c6:	e001      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d035      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d81b      	bhi.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083e0:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	08008425 	.word	0x08008425
 80083ec:	080083f9 	.word	0x080083f9
 80083f0:	08008407 	.word	0x08008407
 80083f4:	08008425 	.word	0x08008425
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083f8:	4b09      	ldr	r3, [pc, #36]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	4a08      	ldr	r2, [pc, #32]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008404:	e00f      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	3304      	adds	r3, #4
 800840a:	2102      	movs	r1, #2
 800840c:	4618      	mov	r0, r3
 800840e:	f001 fa85 	bl	800991c <RCCEx_PLL2_Config>
 8008412:	4603      	mov	r3, r0
 8008414:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008416:	e006      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	75fb      	strb	r3, [r7, #23]
      break;
 800841c:	e003      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800841e:	bf00      	nop
 8008420:	58024400 	.word	0x58024400
      break;
 8008424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008426:	7dfb      	ldrb	r3, [r7, #23]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d109      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800842c:	4bba      	ldr	r3, [pc, #744]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800842e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008430:	f023 0203 	bic.w	r2, r3, #3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008438:	49b7      	ldr	r1, [pc, #732]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800843a:	4313      	orrs	r3, r2
 800843c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800843e:	e001      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008440:	7dfb      	ldrb	r3, [r7, #23]
 8008442:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 8086 	beq.w	800855e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008452:	4bb2      	ldr	r3, [pc, #712]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4ab1      	ldr	r2, [pc, #708]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800845c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800845e:	f7f9 fb7b 	bl	8001b58 <HAL_GetTick>
 8008462:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008464:	e009      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008466:	f7f9 fb77 	bl	8001b58 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b64      	cmp	r3, #100	; 0x64
 8008472:	d902      	bls.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	75fb      	strb	r3, [r7, #23]
        break;
 8008478:	e005      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800847a:	4ba8      	ldr	r3, [pc, #672]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008482:	2b00      	cmp	r3, #0
 8008484:	d0ef      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d166      	bne.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800848c:	4ba2      	ldr	r3, [pc, #648]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800848e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008496:	4053      	eors	r3, r2
 8008498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800849c:	2b00      	cmp	r3, #0
 800849e:	d013      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084a0:	4b9d      	ldr	r3, [pc, #628]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084a8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084aa:	4b9b      	ldr	r3, [pc, #620]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ae:	4a9a      	ldr	r2, [pc, #616]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084b6:	4b98      	ldr	r3, [pc, #608]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ba:	4a97      	ldr	r2, [pc, #604]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80084c2:	4a95      	ldr	r2, [pc, #596]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d2:	d115      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d4:	f7f9 fb40 	bl	8001b58 <HAL_GetTick>
 80084d8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084da:	e00b      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084dc:	f7f9 fb3c 	bl	8001b58 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d902      	bls.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	75fb      	strb	r3, [r7, #23]
            break;
 80084f2:	e005      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084f4:	4b88      	ldr	r3, [pc, #544]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0ed      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d126      	bne.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800850c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008514:	d10d      	bne.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008516:	4b80      	ldr	r3, [pc, #512]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008524:	0919      	lsrs	r1, r3, #4
 8008526:	4b7e      	ldr	r3, [pc, #504]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008528:	400b      	ands	r3, r1
 800852a:	497b      	ldr	r1, [pc, #492]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800852c:	4313      	orrs	r3, r2
 800852e:	610b      	str	r3, [r1, #16]
 8008530:	e005      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008532:	4b79      	ldr	r3, [pc, #484]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	4a78      	ldr	r2, [pc, #480]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008538:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800853c:	6113      	str	r3, [r2, #16]
 800853e:	4b76      	ldr	r3, [pc, #472]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800854c:	4972      	ldr	r1, [pc, #456]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800854e:	4313      	orrs	r3, r2
 8008550:	670b      	str	r3, [r1, #112]	; 0x70
 8008552:	e004      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008554:	7dfb      	ldrb	r3, [r7, #23]
 8008556:	75bb      	strb	r3, [r7, #22]
 8008558:	e001      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d07d      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800856e:	2b28      	cmp	r3, #40	; 0x28
 8008570:	d866      	bhi.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	08008647 	.word	0x08008647
 800857c:	08008641 	.word	0x08008641
 8008580:	08008641 	.word	0x08008641
 8008584:	08008641 	.word	0x08008641
 8008588:	08008641 	.word	0x08008641
 800858c:	08008641 	.word	0x08008641
 8008590:	08008641 	.word	0x08008641
 8008594:	08008641 	.word	0x08008641
 8008598:	0800861d 	.word	0x0800861d
 800859c:	08008641 	.word	0x08008641
 80085a0:	08008641 	.word	0x08008641
 80085a4:	08008641 	.word	0x08008641
 80085a8:	08008641 	.word	0x08008641
 80085ac:	08008641 	.word	0x08008641
 80085b0:	08008641 	.word	0x08008641
 80085b4:	08008641 	.word	0x08008641
 80085b8:	0800862f 	.word	0x0800862f
 80085bc:	08008641 	.word	0x08008641
 80085c0:	08008641 	.word	0x08008641
 80085c4:	08008641 	.word	0x08008641
 80085c8:	08008641 	.word	0x08008641
 80085cc:	08008641 	.word	0x08008641
 80085d0:	08008641 	.word	0x08008641
 80085d4:	08008641 	.word	0x08008641
 80085d8:	08008647 	.word	0x08008647
 80085dc:	08008641 	.word	0x08008641
 80085e0:	08008641 	.word	0x08008641
 80085e4:	08008641 	.word	0x08008641
 80085e8:	08008641 	.word	0x08008641
 80085ec:	08008641 	.word	0x08008641
 80085f0:	08008641 	.word	0x08008641
 80085f4:	08008641 	.word	0x08008641
 80085f8:	08008647 	.word	0x08008647
 80085fc:	08008641 	.word	0x08008641
 8008600:	08008641 	.word	0x08008641
 8008604:	08008641 	.word	0x08008641
 8008608:	08008641 	.word	0x08008641
 800860c:	08008641 	.word	0x08008641
 8008610:	08008641 	.word	0x08008641
 8008614:	08008641 	.word	0x08008641
 8008618:	08008647 	.word	0x08008647
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3304      	adds	r3, #4
 8008620:	2101      	movs	r1, #1
 8008622:	4618      	mov	r0, r3
 8008624:	f001 f97a 	bl	800991c <RCCEx_PLL2_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800862c:	e00c      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3324      	adds	r3, #36	; 0x24
 8008632:	2101      	movs	r1, #1
 8008634:	4618      	mov	r0, r3
 8008636:	f001 fa23 	bl	8009a80 <RCCEx_PLL3_Config>
 800863a:	4603      	mov	r3, r0
 800863c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800863e:	e003      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	75fb      	strb	r3, [r7, #23]
      break;
 8008644:	e000      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d109      	bne.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800864e:	4b32      	ldr	r3, [pc, #200]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008652:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800865a:	492f      	ldr	r1, [pc, #188]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800865c:	4313      	orrs	r3, r2
 800865e:	654b      	str	r3, [r1, #84]	; 0x54
 8008660:	e001      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d037      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008676:	2b05      	cmp	r3, #5
 8008678:	d820      	bhi.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x860>
 800867a:	a201      	add	r2, pc, #4	; (adr r2, 8008680 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	080086c3 	.word	0x080086c3
 8008684:	08008699 	.word	0x08008699
 8008688:	080086ab 	.word	0x080086ab
 800868c:	080086c3 	.word	0x080086c3
 8008690:	080086c3 	.word	0x080086c3
 8008694:	080086c3 	.word	0x080086c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	3304      	adds	r3, #4
 800869c:	2101      	movs	r1, #1
 800869e:	4618      	mov	r0, r3
 80086a0:	f001 f93c 	bl	800991c <RCCEx_PLL2_Config>
 80086a4:	4603      	mov	r3, r0
 80086a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80086a8:	e00c      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3324      	adds	r3, #36	; 0x24
 80086ae:	2101      	movs	r1, #1
 80086b0:	4618      	mov	r0, r3
 80086b2:	f001 f9e5 	bl	8009a80 <RCCEx_PLL3_Config>
 80086b6:	4603      	mov	r3, r0
 80086b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80086ba:	e003      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	75fb      	strb	r3, [r7, #23]
      break;
 80086c0:	e000      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80086c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d109      	bne.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80086ca:	4b13      	ldr	r3, [pc, #76]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80086cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ce:	f023 0207 	bic.w	r2, r3, #7
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d6:	4910      	ldr	r1, [pc, #64]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	654b      	str	r3, [r1, #84]	; 0x54
 80086dc:	e001      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d040      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f4:	2b05      	cmp	r3, #5
 80086f6:	d827      	bhi.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80086f8:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	0800874f 	.word	0x0800874f
 8008704:	08008725 	.word	0x08008725
 8008708:	08008737 	.word	0x08008737
 800870c:	0800874f 	.word	0x0800874f
 8008710:	0800874f 	.word	0x0800874f
 8008714:	0800874f 	.word	0x0800874f
 8008718:	58024400 	.word	0x58024400
 800871c:	58024800 	.word	0x58024800
 8008720:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3304      	adds	r3, #4
 8008728:	2101      	movs	r1, #1
 800872a:	4618      	mov	r0, r3
 800872c:	f001 f8f6 	bl	800991c <RCCEx_PLL2_Config>
 8008730:	4603      	mov	r3, r0
 8008732:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008734:	e00c      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3324      	adds	r3, #36	; 0x24
 800873a:	2101      	movs	r1, #1
 800873c:	4618      	mov	r0, r3
 800873e:	f001 f99f 	bl	8009a80 <RCCEx_PLL3_Config>
 8008742:	4603      	mov	r3, r0
 8008744:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008746:	e003      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	75fb      	strb	r3, [r7, #23]
      break;
 800874c:	e000      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800874e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10a      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008756:	4bb2      	ldr	r3, [pc, #712]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875a:	f023 0207 	bic.w	r2, r3, #7
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008764:	49ae      	ldr	r1, [pc, #696]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008766:	4313      	orrs	r3, r2
 8008768:	658b      	str	r3, [r1, #88]	; 0x58
 800876a:	e001      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0320 	and.w	r3, r3, #32
 8008778:	2b00      	cmp	r3, #0
 800877a:	d044      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008786:	d01b      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800878c:	d805      	bhi.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d022      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008796:	d00a      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008798:	e01b      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800879a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879e:	d01d      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x980>
 80087a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087a4:	d01c      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80087a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087aa:	d01b      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80087ac:	e011      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3304      	adds	r3, #4
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 f8b1 	bl	800991c <RCCEx_PLL2_Config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80087be:	e012      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3324      	adds	r3, #36	; 0x24
 80087c4:	2102      	movs	r1, #2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f001 f95a 	bl	8009a80 <RCCEx_PLL3_Config>
 80087cc:	4603      	mov	r3, r0
 80087ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80087d0:	e009      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	75fb      	strb	r3, [r7, #23]
      break;
 80087d6:	e006      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80087d8:	bf00      	nop
 80087da:	e004      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80087dc:	bf00      	nop
 80087de:	e002      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80087e0:	bf00      	nop
 80087e2:	e000      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80087e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087ec:	4b8c      	ldr	r3, [pc, #560]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087fa:	4989      	ldr	r1, [pc, #548]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	654b      	str	r3, [r1, #84]	; 0x54
 8008800:	e001      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880e:	2b00      	cmp	r3, #0
 8008810:	d044      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800881c:	d01b      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800881e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008822:	d805      	bhi.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8008824:	2b00      	cmp	r3, #0
 8008826:	d022      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800882c:	d00a      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800882e:	e01b      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008834:	d01d      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008836:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800883a:	d01c      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800883c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008840:	d01b      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008842:	e011      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3304      	adds	r3, #4
 8008848:	2100      	movs	r1, #0
 800884a:	4618      	mov	r0, r3
 800884c:	f001 f866 	bl	800991c <RCCEx_PLL2_Config>
 8008850:	4603      	mov	r3, r0
 8008852:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008854:	e012      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	3324      	adds	r3, #36	; 0x24
 800885a:	2102      	movs	r1, #2
 800885c:	4618      	mov	r0, r3
 800885e:	f001 f90f 	bl	8009a80 <RCCEx_PLL3_Config>
 8008862:	4603      	mov	r3, r0
 8008864:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008866:	e009      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	75fb      	strb	r3, [r7, #23]
      break;
 800886c:	e006      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800886e:	bf00      	nop
 8008870:	e004      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008872:	bf00      	nop
 8008874:	e002      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008876:	bf00      	nop
 8008878:	e000      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800887a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008882:	4b67      	ldr	r3, [pc, #412]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008886:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008890:	4963      	ldr	r1, [pc, #396]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008892:	4313      	orrs	r3, r2
 8008894:	658b      	str	r3, [r1, #88]	; 0x58
 8008896:	e001      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d044      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088b2:	d01b      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80088b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088b8:	d805      	bhi.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d022      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80088be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c2:	d00a      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80088c4:	e01b      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80088c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ca:	d01d      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80088cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80088d0:	d01c      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80088d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80088d6:	d01b      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80088d8:	e011      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3304      	adds	r3, #4
 80088de:	2100      	movs	r1, #0
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 f81b 	bl	800991c <RCCEx_PLL2_Config>
 80088e6:	4603      	mov	r3, r0
 80088e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80088ea:	e012      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3324      	adds	r3, #36	; 0x24
 80088f0:	2102      	movs	r1, #2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 f8c4 	bl	8009a80 <RCCEx_PLL3_Config>
 80088f8:	4603      	mov	r3, r0
 80088fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80088fc:	e009      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	75fb      	strb	r3, [r7, #23]
      break;
 8008902:	e006      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008904:	bf00      	nop
 8008906:	e004      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008908:	bf00      	nop
 800890a:	e002      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800890c:	bf00      	nop
 800890e:	e000      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008918:	4b41      	ldr	r3, [pc, #260]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800891a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008926:	493e      	ldr	r1, [pc, #248]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008928:	4313      	orrs	r3, r2
 800892a:	658b      	str	r3, [r1, #88]	; 0x58
 800892c:	e001      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01a      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008948:	d10a      	bne.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3324      	adds	r3, #36	; 0x24
 800894e:	2102      	movs	r1, #2
 8008950:	4618      	mov	r0, r3
 8008952:	f001 f895 	bl	8009a80 <RCCEx_PLL3_Config>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008960:	4b2f      	ldr	r3, [pc, #188]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008964:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800896e:	492c      	ldr	r1, [pc, #176]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008970:	4313      	orrs	r3, r2
 8008972:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0310 	and.w	r3, r3, #16
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01a      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800898a:	d10a      	bne.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3324      	adds	r3, #36	; 0x24
 8008990:	2102      	movs	r1, #2
 8008992:	4618      	mov	r0, r3
 8008994:	f001 f874 	bl	8009a80 <RCCEx_PLL3_Config>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80089a2:	4b1f      	ldr	r3, [pc, #124]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80089a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089b0:	491b      	ldr	r1, [pc, #108]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d032      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80089c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089cc:	d00d      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80089ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089d2:	d016      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d111      	bne.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3304      	adds	r3, #4
 80089dc:	2100      	movs	r1, #0
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 ff9c 	bl	800991c <RCCEx_PLL2_Config>
 80089e4:	4603      	mov	r3, r0
 80089e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80089e8:	e00c      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	3324      	adds	r3, #36	; 0x24
 80089ee:	2102      	movs	r1, #2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f001 f845 	bl	8009a80 <RCCEx_PLL3_Config>
 80089f6:	4603      	mov	r3, r0
 80089f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80089fa:	e003      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008a00:	e000      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8008a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10c      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a0a:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a18:	4901      	ldr	r1, [pc, #4]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8008a1e:	e003      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d02f      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a3e:	d00c      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008a40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a44:	d015      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8008a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a4a:	d10f      	bne.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a4c:	4b79      	ldr	r3, [pc, #484]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a50:	4a78      	ldr	r2, [pc, #480]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a58:	e00c      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3324      	adds	r3, #36	; 0x24
 8008a5e:	2101      	movs	r1, #1
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 f80d 	bl	8009a80 <RCCEx_PLL3_Config>
 8008a66:	4603      	mov	r3, r0
 8008a68:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a6a:	e003      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a70:	e000      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8008a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10a      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a7a:	4b6e      	ldr	r3, [pc, #440]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a88:	496a      	ldr	r1, [pc, #424]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	654b      	str	r3, [r1, #84]	; 0x54
 8008a8e:	e001      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d029      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aac:	d007      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008aae:	e00f      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab0:	4b60      	ldr	r3, [pc, #384]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	4a5f      	ldr	r2, [pc, #380]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008abc:	e00b      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	2102      	movs	r1, #2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 ff29 	bl	800991c <RCCEx_PLL2_Config>
 8008aca:	4603      	mov	r3, r0
 8008acc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008ace:	e002      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d109      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008adc:	4b55      	ldr	r3, [pc, #340]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae8:	4952      	ldr	r1, [pc, #328]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008aee:	e001      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af0:	7dfb      	ldrb	r3, [r7, #23]
 8008af2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00a      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3324      	adds	r3, #36	; 0x24
 8008b04:	2102      	movs	r1, #2
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 ffba 	bl	8009a80 <RCCEx_PLL3_Config>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d02f      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b2a:	d00c      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b30:	d802      	bhi.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d011      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008b36:	e00d      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b3c:	d00f      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b42:	d00e      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008b44:	e006      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b46:	4b3b      	ldr	r3, [pc, #236]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	4a3a      	ldr	r2, [pc, #232]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008b52:	e007      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	75fb      	strb	r3, [r7, #23]
      break;
 8008b58:	e004      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008b5a:	bf00      	nop
 8008b5c:	e002      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008b5e:	bf00      	nop
 8008b60:	e000      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b6a:	4b32      	ldr	r3, [pc, #200]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b76:	492f      	ldr	r1, [pc, #188]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	654b      	str	r3, [r1, #84]	; 0x54
 8008b7c:	e001      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d008      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b8e:	4b29      	ldr	r3, [pc, #164]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9a:	4926      	ldr	r1, [pc, #152]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d009      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008bac:	4b21      	ldr	r3, [pc, #132]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008bba:	491e      	ldr	r1, [pc, #120]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d008      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008bcc:	4b19      	ldr	r3, [pc, #100]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bd8:	4916      	ldr	r1, [pc, #88]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00d      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bea:	4b12      	ldr	r3, [pc, #72]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	4a11      	ldr	r2, [pc, #68]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bf4:	6113      	str	r3, [r2, #16]
 8008bf6:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bf8:	691a      	ldr	r2, [r3, #16]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008c00:	490c      	ldr	r1, [pc, #48]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	da08      	bge.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c0e:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c1a:	4906      	ldr	r1, [pc, #24]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008c20:	7dbb      	ldrb	r3, [r7, #22]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	e000      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	58024400 	.word	0x58024400

08008c38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b090      	sub	sp, #64	; 0x40
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c46:	d150      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008c48:	4ba1      	ldr	r3, [pc, #644]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c4c:	f003 0307 	and.w	r3, r3, #7
 8008c50:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d844      	bhi.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008c58:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5e:	bf00      	nop
 8008c60:	08008c75 	.word	0x08008c75
 8008c64:	08008c85 	.word	0x08008c85
 8008c68:	08008c95 	.word	0x08008c95
 8008c6c:	08008cdd 	.word	0x08008cdd
 8008c70:	08008ca5 	.word	0x08008ca5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fd03 	bl	8009684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c82:	e241      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c84:	f107 0318 	add.w	r3, r7, #24
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 fa63 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c92:	e239      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c94:	f107 030c 	add.w	r3, r7, #12
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fba7 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca2:	e231      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ca4:	4b8a      	ldr	r3, [pc, #552]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d102      	bne.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008cb4:	4b87      	ldr	r3, [pc, #540]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008cb8:	e226      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cc0:	d102      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008cc2:	4b85      	ldr	r3, [pc, #532]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc6:	e21f      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cce:	d102      	bne.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008cd0:	4b82      	ldr	r3, [pc, #520]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cd4:	e218      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cda:	e215      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008cdc:	4b80      	ldr	r3, [pc, #512]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ce0:	e212      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ce6:	bf00      	nop
 8008ce8:	e20e      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cf0:	d14f      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008cf2:	4b77      	ldr	r3, [pc, #476]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008cfa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	2b80      	cmp	r3, #128	; 0x80
 8008d00:	d01c      	beq.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008d02:	2b80      	cmp	r3, #128	; 0x80
 8008d04:	d804      	bhi.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d008      	beq.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008d0a:	2b40      	cmp	r3, #64	; 0x40
 8008d0c:	d00e      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008d0e:	e03c      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008d10:	2bc0      	cmp	r3, #192	; 0xc0
 8008d12:	d037      	beq.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d18:	d018      	beq.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008d1a:	e036      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 fcaf 	bl	8009684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d2a:	e1ed      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d2c:	f107 0318 	add.w	r3, r7, #24
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fa0f 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d3a:	e1e5      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d3c:	f107 030c 	add.w	r3, r7, #12
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 fb53 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d4a:	e1dd      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d4c:	4b60      	ldr	r3, [pc, #384]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d54:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d102      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008d5c:	4b5d      	ldr	r3, [pc, #372]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008d60:	e1d2      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d68:	d102      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008d6a:	4b5b      	ldr	r3, [pc, #364]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d6e:	e1cb      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d76:	d102      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008d78:	4b58      	ldr	r3, [pc, #352]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d7c:	e1c4      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d82:	e1c1      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d84:	4b56      	ldr	r3, [pc, #344]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d88:	e1be      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d8e:	bf00      	nop
 8008d90:	e1ba      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d98:	d153      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008d9a:	4b4d      	ldr	r3, [pc, #308]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008da2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008daa:	d01f      	beq.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008db0:	d805      	bhi.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00a      	beq.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dba:	d00f      	beq.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008dbc:	e03d      	b.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008dbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008dc2:	d037      	beq.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008dc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dc8:	d018      	beq.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008dca:	e036      	b.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 fc57 	bl	8009684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dda:	e195      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ddc:	f107 0318 	add.w	r3, r7, #24
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 f9b7 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dea:	e18d      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dec:	f107 030c 	add.w	r3, r7, #12
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 fafb 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dfa:	e185      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008dfc:	4b34      	ldr	r3, [pc, #208]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d102      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008e0c:	4b31      	ldr	r3, [pc, #196]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008e10:	e17a      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e18:	d102      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008e1a:	4b2f      	ldr	r3, [pc, #188]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e1e:	e173      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e26:	d102      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008e28:	4b2c      	ldr	r3, [pc, #176]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e2c:	e16c      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e32:	e169      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e34:	4b2a      	ldr	r3, [pc, #168]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e38:	e166      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e3e:	bf00      	nop
 8008e40:	e162      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e48:	d15d      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008e4a:	4b21      	ldr	r3, [pc, #132]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e4e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008e52:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e5a:	d01f      	beq.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e60:	d805      	bhi.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008e66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e6a:	d00f      	beq.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008e6c:	e047      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008e6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e72:	d041      	beq.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e78:	d018      	beq.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008e7a:	e040      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fbff 	bl	8009684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e8a:	e13d      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e8c:	f107 0318 	add.w	r3, r7, #24
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 f95f 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e9a:	e135      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e9c:	f107 030c 	add.w	r3, r7, #12
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 faa3 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eaa:	e12d      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008eac:	4b08      	ldr	r3, [pc, #32]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008eb4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d102      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008ebc:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008ec0:	e122      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ec8:	d10c      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008eca:	4b03      	ldr	r3, [pc, #12]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ece:	e11b      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008ed0:	58024400 	.word	0x58024400
 8008ed4:	03d09000 	.word	0x03d09000
 8008ed8:	003d0900 	.word	0x003d0900
 8008edc:	007a1200 	.word	0x007a1200
 8008ee0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eea:	d102      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008eec:	4b89      	ldr	r3, [pc, #548]	; (8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ef0:	e10a      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ef6:	e107      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ef8:	4b87      	ldr	r3, [pc, #540]	; (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008efc:	e104      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f02:	bf00      	nop
 8008f04:	e100      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f0c:	d153      	bne.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008f0e:	4b83      	ldr	r3, [pc, #524]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f12:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008f16:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f1e:	d01f      	beq.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f24:	d805      	bhi.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f2e:	d00f      	beq.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008f30:	e03d      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008f32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f36:	d037      	beq.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f3c:	d018      	beq.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008f3e:	e036      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fb9d 	bl	8009684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f4e:	e0db      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f50:	f107 0318 	add.w	r3, r7, #24
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 f8fd 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f5e:	e0d3      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f60:	f107 030c 	add.w	r3, r7, #12
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fa41 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f6e:	e0cb      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f70:	4b6a      	ldr	r3, [pc, #424]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f78:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d102      	bne.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008f80:	4b67      	ldr	r3, [pc, #412]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008f84:	e0c0      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f8c:	d102      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008f8e:	4b65      	ldr	r3, [pc, #404]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f92:	e0b9      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f9a:	d102      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008f9c:	4b5d      	ldr	r3, [pc, #372]	; (8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fa0:	e0b2      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fa6:	e0af      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fa8:	4b5b      	ldr	r3, [pc, #364]	; (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fac:	e0ac      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fb2:	bf00      	nop
 8008fb4:	e0a8      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fbc:	d13d      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008fbe:	4b57      	ldr	r3, [pc, #348]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008fc6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fce:	d00c      	beq.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008fd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fd4:	d011      	beq.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d12b      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fda:	f107 0318 	add.w	r3, r7, #24
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f8b8 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fe8:	e08e      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 f9fc 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff8:	e086      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ffa:	4b48      	ldr	r3, [pc, #288]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009002:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009006:	2b00      	cmp	r3, #0
 8009008:	d102      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800900a:	4b45      	ldr	r3, [pc, #276]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800900e:	e07b      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009016:	d102      	bne.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8009018:	4b42      	ldr	r3, [pc, #264]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800901a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800901c:	e074      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800901e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009024:	d102      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8009026:	4b3b      	ldr	r3, [pc, #236]	; (8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800902a:	e06d      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009030:	e06a      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009036:	bf00      	nop
 8009038:	e066      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009040:	d11f      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009042:	4b36      	ldr	r3, [pc, #216]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800904a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009056:	d008      	beq.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009058:	e00f      	b.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800905a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800905e:	4618      	mov	r0, r3
 8009060:	f000 fb10 	bl	8009684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009068:	e04e      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800906a:	f107 0318 	add.w	r3, r7, #24
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f870 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009078:	e046      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800907a:	2300      	movs	r3, #0
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800907e:	bf00      	nop
 8009080:	e042      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009088:	d13c      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800908a:	4b24      	ldr	r3, [pc, #144]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800908c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800908e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009092:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800909a:	d01e      	beq.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800909c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090a0:	d805      	bhi.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00d      	beq.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80090a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090aa:	d00e      	beq.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80090ac:	e026      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80090ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090b2:	d01d      	beq.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80090b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090b8:	d01d      	beq.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80090ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090be:	d014      	beq.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80090c0:	e01c      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80090c2:	f000 f831 	bl	8009128 <HAL_RCCEx_GetD3PCLK1Freq>
 80090c6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80090c8:	e01e      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ca:	f107 0318 	add.w	r3, r7, #24
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 f840 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090d8:	e016      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090da:	f107 030c 	add.w	r3, r7, #12
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 f984 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090e8:	e00e      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80090ea:	4b0d      	ldr	r3, [pc, #52]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ee:	e00b      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80090f0:	4b0c      	ldr	r3, [pc, #48]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f4:	e008      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80090f6:	4b07      	ldr	r3, [pc, #28]	; (8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090fa:	e005      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009100:	bf00      	nop
 8009102:	e001      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800910a:	4618      	mov	r0, r3
 800910c:	3740      	adds	r7, #64	; 0x40
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	007a1200 	.word	0x007a1200
 8009118:	00bb8000 	.word	0x00bb8000
 800911c:	58024400 	.word	0x58024400
 8009120:	03d09000 	.word	0x03d09000
 8009124:	003d0900 	.word	0x003d0900

08009128 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800912c:	f7fe fdf8 	bl	8007d20 <HAL_RCC_GetHCLKFreq>
 8009130:	4601      	mov	r1, r0
 8009132:	4b06      	ldr	r3, [pc, #24]	; (800914c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	091b      	lsrs	r3, r3, #4
 8009138:	f003 0307 	and.w	r3, r3, #7
 800913c:	4a04      	ldr	r2, [pc, #16]	; (8009150 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800913e:	5cd3      	ldrb	r3, [r2, r3]
 8009140:	f003 031f 	and.w	r3, r3, #31
 8009144:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009148:	4618      	mov	r0, r3
 800914a:	bd80      	pop	{r7, pc}
 800914c:	58024400 	.word	0x58024400
 8009150:	08018720 	.word	0x08018720

08009154 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009154:	b480      	push	{r7}
 8009156:	b089      	sub	sp, #36	; 0x24
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800915c:	4b9d      	ldr	r3, [pc, #628]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800915e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009160:	f003 0303 	and.w	r3, r3, #3
 8009164:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009166:	4b9b      	ldr	r3, [pc, #620]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916a:	0b1b      	lsrs	r3, r3, #12
 800916c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009170:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009172:	4b98      	ldr	r3, [pc, #608]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009176:	091b      	lsrs	r3, r3, #4
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800917e:	4b95      	ldr	r3, [pc, #596]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009182:	08db      	lsrs	r3, r3, #3
 8009184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	fb02 f303 	mul.w	r3, r2, r3
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009196:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 810a 	beq.w	80093b6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d05a      	beq.n	800925e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d302      	bcc.n	80091b2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d078      	beq.n	80092a2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80091b0:	e099      	b.n	80092e6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091b2:	4b88      	ldr	r3, [pc, #544]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d02d      	beq.n	800921a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091be:	4b85      	ldr	r3, [pc, #532]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	08db      	lsrs	r3, r3, #3
 80091c4:	f003 0303 	and.w	r3, r3, #3
 80091c8:	4a83      	ldr	r2, [pc, #524]	; (80093d8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80091ca:	fa22 f303 	lsr.w	r3, r2, r3
 80091ce:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	ee07 3a90 	vmov	s15, r3
 80091d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	ee07 3a90 	vmov	s15, r3
 80091e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091e8:	4b7a      	ldr	r3, [pc, #488]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80091ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f0:	ee07 3a90 	vmov	s15, r3
 80091f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80091fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800920c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009214:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009218:	e087      	b.n	800932a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	ee07 3a90 	vmov	s15, r3
 8009220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009224:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800922c:	4b69      	ldr	r3, [pc, #420]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800922e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009234:	ee07 3a90 	vmov	s15, r3
 8009238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800923c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009240:	eddf 5a66 	vldr	s11, [pc, #408]	; 80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800924c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009258:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800925c:	e065      	b.n	800932a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009268:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800926c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009270:	4b58      	ldr	r3, [pc, #352]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009278:	ee07 3a90 	vmov	s15, r3
 800927c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009280:	ed97 6a03 	vldr	s12, [r7, #12]
 8009284:	eddf 5a55 	vldr	s11, [pc, #340]	; 80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800928c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800929c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092a0:	e043      	b.n	800932a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	ee07 3a90 	vmov	s15, r3
 80092a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80092b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b4:	4b47      	ldr	r3, [pc, #284]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092bc:	ee07 3a90 	vmov	s15, r3
 80092c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80092c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80092cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092e4:	e021      	b.n	800932a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80092f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f8:	4b36      	ldr	r3, [pc, #216]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009300:	ee07 3a90 	vmov	s15, r3
 8009304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009308:	ed97 6a03 	vldr	s12, [r7, #12]
 800930c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009310:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800931c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009324:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009328:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800932a:	4b2a      	ldr	r3, [pc, #168]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932e:	0a5b      	lsrs	r3, r3, #9
 8009330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009334:	ee07 3a90 	vmov	s15, r3
 8009338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009340:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009344:	edd7 6a07 	vldr	s13, [r7, #28]
 8009348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800934c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009350:	ee17 2a90 	vmov	r2, s15
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009358:	4b1e      	ldr	r3, [pc, #120]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800935a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800936e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009372:	edd7 6a07 	vldr	s13, [r7, #28]
 8009376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800937a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800937e:	ee17 2a90 	vmov	r2, s15
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009386:	4b13      	ldr	r3, [pc, #76]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938a:	0e1b      	lsrs	r3, r3, #24
 800938c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009390:	ee07 3a90 	vmov	s15, r3
 8009394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800939c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80093a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ac:	ee17 2a90 	vmov	r2, s15
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80093b4:	e008      	b.n	80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	609a      	str	r2, [r3, #8]
}
 80093c8:	bf00      	nop
 80093ca:	3724      	adds	r7, #36	; 0x24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	58024400 	.word	0x58024400
 80093d8:	03d09000 	.word	0x03d09000
 80093dc:	46000000 	.word	0x46000000
 80093e0:	4c742400 	.word	0x4c742400
 80093e4:	4a742400 	.word	0x4a742400
 80093e8:	4af42400 	.word	0x4af42400

080093ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b089      	sub	sp, #36	; 0x24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093f4:	4b9d      	ldr	r3, [pc, #628]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80093f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f8:	f003 0303 	and.w	r3, r3, #3
 80093fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80093fe:	4b9b      	ldr	r3, [pc, #620]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009402:	0d1b      	lsrs	r3, r3, #20
 8009404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009408:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800940a:	4b98      	ldr	r3, [pc, #608]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	0a1b      	lsrs	r3, r3, #8
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009416:	4b95      	ldr	r3, [pc, #596]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941a:	08db      	lsrs	r3, r3, #3
 800941c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	fb02 f303 	mul.w	r3, r2, r3
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 810a 	beq.w	800964e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d05a      	beq.n	80094f6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009440:	2b01      	cmp	r3, #1
 8009442:	d302      	bcc.n	800944a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009444:	2b02      	cmp	r3, #2
 8009446:	d078      	beq.n	800953a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8009448:	e099      	b.n	800957e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800944a:	4b88      	ldr	r3, [pc, #544]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0320 	and.w	r3, r3, #32
 8009452:	2b00      	cmp	r3, #0
 8009454:	d02d      	beq.n	80094b2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009456:	4b85      	ldr	r3, [pc, #532]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	08db      	lsrs	r3, r3, #3
 800945c:	f003 0303 	and.w	r3, r3, #3
 8009460:	4a83      	ldr	r2, [pc, #524]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009462:	fa22 f303 	lsr.w	r3, r2, r3
 8009466:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	ee07 3a90 	vmov	s15, r3
 800946e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	ee07 3a90 	vmov	s15, r3
 8009478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009480:	4b7a      	ldr	r3, [pc, #488]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009488:	ee07 3a90 	vmov	s15, r3
 800948c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009490:	ed97 6a03 	vldr	s12, [r7, #12]
 8009494:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009674 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80094b0:	e087      	b.n	80095c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	ee07 3a90 	vmov	s15, r3
 80094b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009678 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80094c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c4:	4b69      	ldr	r3, [pc, #420]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094cc:	ee07 3a90 	vmov	s15, r3
 80094d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80094d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009674 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80094dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094f4:	e065      	b.n	80095c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009500:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800967c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009508:	4b58      	ldr	r3, [pc, #352]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800950a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009510:	ee07 3a90 	vmov	s15, r3
 8009514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009518:	ed97 6a03 	vldr	s12, [r7, #12]
 800951c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009674 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800952c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009534:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009538:	e043      	b.n	80095c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	ee07 3a90 	vmov	s15, r3
 8009540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009544:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009680 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954c:	4b47      	ldr	r3, [pc, #284]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800954e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009554:	ee07 3a90 	vmov	s15, r3
 8009558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009560:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009674 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009578:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800957c:	e021      	b.n	80095c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	ee07 3a90 	vmov	s15, r3
 8009584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009588:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800967c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800958c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009590:	4b36      	ldr	r3, [pc, #216]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009598:	ee07 3a90 	vmov	s15, r3
 800959c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80095a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009674 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80095a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095c0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80095c2:	4b2a      	ldr	r3, [pc, #168]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	0a5b      	lsrs	r3, r3, #9
 80095c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095cc:	ee07 3a90 	vmov	s15, r3
 80095d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80095e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095e8:	ee17 2a90 	vmov	r2, s15
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80095f0:	4b1e      	ldr	r3, [pc, #120]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f4:	0c1b      	lsrs	r3, r3, #16
 80095f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800960a:	edd7 6a07 	vldr	s13, [r7, #28]
 800960e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009616:	ee17 2a90 	vmov	r2, s15
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800961e:	4b13      	ldr	r3, [pc, #76]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009622:	0e1b      	lsrs	r3, r3, #24
 8009624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009628:	ee07 3a90 	vmov	s15, r3
 800962c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009638:	edd7 6a07 	vldr	s13, [r7, #28]
 800963c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009644:	ee17 2a90 	vmov	r2, s15
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800964c:	e008      	b.n	8009660 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	609a      	str	r2, [r3, #8]
}
 8009660:	bf00      	nop
 8009662:	3724      	adds	r7, #36	; 0x24
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	58024400 	.word	0x58024400
 8009670:	03d09000 	.word	0x03d09000
 8009674:	46000000 	.word	0x46000000
 8009678:	4c742400 	.word	0x4c742400
 800967c:	4a742400 	.word	0x4a742400
 8009680:	4af42400 	.word	0x4af42400

08009684 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009684:	b480      	push	{r7}
 8009686:	b089      	sub	sp, #36	; 0x24
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800968c:	4b9d      	ldr	r3, [pc, #628]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800968e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009690:	f003 0303 	and.w	r3, r3, #3
 8009694:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009696:	4b9b      	ldr	r3, [pc, #620]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969a:	091b      	lsrs	r3, r3, #4
 800969c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80096a2:	4b98      	ldr	r3, [pc, #608]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80096ac:	4b95      	ldr	r3, [pc, #596]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b0:	08db      	lsrs	r3, r3, #3
 80096b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	fb02 f303 	mul.w	r3, r2, r3
 80096bc:	ee07 3a90 	vmov	s15, r3
 80096c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f000 810a 	beq.w	80098e4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d05a      	beq.n	800978c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d302      	bcc.n	80096e0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d078      	beq.n	80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80096de:	e099      	b.n	8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096e0:	4b88      	ldr	r3, [pc, #544]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0320 	and.w	r3, r3, #32
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d02d      	beq.n	8009748 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096ec:	4b85      	ldr	r3, [pc, #532]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	08db      	lsrs	r3, r3, #3
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	4a84      	ldr	r2, [pc, #528]	; (8009908 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80096f8:	fa22 f303 	lsr.w	r3, r2, r3
 80096fc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	ee07 3a90 	vmov	s15, r3
 8009704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009716:	4b7b      	ldr	r3, [pc, #492]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009726:	ed97 6a03 	vldr	s12, [r7, #12]
 800972a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800990c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800972e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800973a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800973e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009742:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009746:	e087      	b.n	8009858 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009752:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8009756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800975a:	4b6a      	ldr	r3, [pc, #424]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800975c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976a:	ed97 6a03 	vldr	s12, [r7, #12]
 800976e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800990c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800977a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800977e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009786:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800978a:	e065      	b.n	8009858 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009796:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800979a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800979e:	4b59      	ldr	r3, [pc, #356]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a6:	ee07 3a90 	vmov	s15, r3
 80097aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80097b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800990c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80097b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097ce:	e043      	b.n	8009858 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	ee07 3a90 	vmov	s15, r3
 80097d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009918 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097e2:	4b48      	ldr	r3, [pc, #288]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ea:	ee07 3a90 	vmov	s15, r3
 80097ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80097f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800990c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80097fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800980a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800980e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009812:	e021      	b.n	8009858 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	ee07 3a90 	vmov	s15, r3
 800981a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009826:	4b37      	ldr	r3, [pc, #220]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982e:	ee07 3a90 	vmov	s15, r3
 8009832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009836:	ed97 6a03 	vldr	s12, [r7, #12]
 800983a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800990c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800983e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800984a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800984e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009852:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009856:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009858:	4b2a      	ldr	r3, [pc, #168]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985c:	0a5b      	lsrs	r3, r3, #9
 800985e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800986e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009872:	edd7 6a07 	vldr	s13, [r7, #28]
 8009876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800987a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800987e:	ee17 2a90 	vmov	r2, s15
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009886:	4b1f      	ldr	r3, [pc, #124]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988a:	0c1b      	lsrs	r3, r3, #16
 800988c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009890:	ee07 3a90 	vmov	s15, r3
 8009894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800989c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80098a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ac:	ee17 2a90 	vmov	r2, s15
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80098b4:	4b13      	ldr	r3, [pc, #76]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80098b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b8:	0e1b      	lsrs	r3, r3, #24
 80098ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80098d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098da:	ee17 2a90 	vmov	r2, s15
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80098e2:	e008      	b.n	80098f6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	609a      	str	r2, [r3, #8]
}
 80098f6:	bf00      	nop
 80098f8:	3724      	adds	r7, #36	; 0x24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	58024400 	.word	0x58024400
 8009908:	03d09000 	.word	0x03d09000
 800990c:	46000000 	.word	0x46000000
 8009910:	4c742400 	.word	0x4c742400
 8009914:	4a742400 	.word	0x4a742400
 8009918:	4af42400 	.word	0x4af42400

0800991c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800992a:	4b53      	ldr	r3, [pc, #332]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 800992c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	2b03      	cmp	r3, #3
 8009934:	d101      	bne.n	800993a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e099      	b.n	8009a6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800993a:	4b4f      	ldr	r3, [pc, #316]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a4e      	ldr	r2, [pc, #312]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009940:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009946:	f7f8 f907 	bl	8001b58 <HAL_GetTick>
 800994a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800994c:	e008      	b.n	8009960 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800994e:	f7f8 f903 	bl	8001b58 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	2b02      	cmp	r3, #2
 800995a:	d901      	bls.n	8009960 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e086      	b.n	8009a6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009960:	4b45      	ldr	r3, [pc, #276]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1f0      	bne.n	800994e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800996c:	4b42      	ldr	r3, [pc, #264]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 800996e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009970:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	031b      	lsls	r3, r3, #12
 800997a:	493f      	ldr	r1, [pc, #252]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 800997c:	4313      	orrs	r3, r2
 800997e:	628b      	str	r3, [r1, #40]	; 0x28
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	3b01      	subs	r3, #1
 8009986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	3b01      	subs	r3, #1
 8009990:	025b      	lsls	r3, r3, #9
 8009992:	b29b      	uxth	r3, r3
 8009994:	431a      	orrs	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	3b01      	subs	r3, #1
 800999c:	041b      	lsls	r3, r3, #16
 800999e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80099a2:	431a      	orrs	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	3b01      	subs	r3, #1
 80099aa:	061b      	lsls	r3, r3, #24
 80099ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80099b0:	4931      	ldr	r1, [pc, #196]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80099b6:	4b30      	ldr	r3, [pc, #192]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	492d      	ldr	r1, [pc, #180]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80099c8:	4b2b      	ldr	r3, [pc, #172]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099cc:	f023 0220 	bic.w	r2, r3, #32
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	4928      	ldr	r1, [pc, #160]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099d6:	4313      	orrs	r3, r2
 80099d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80099da:	4b27      	ldr	r3, [pc, #156]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099de:	4a26      	ldr	r2, [pc, #152]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099e0:	f023 0310 	bic.w	r3, r3, #16
 80099e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80099e6:	4b24      	ldr	r3, [pc, #144]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099ea:	4b24      	ldr	r3, [pc, #144]	; (8009a7c <RCCEx_PLL2_Config+0x160>)
 80099ec:	4013      	ands	r3, r2
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	69d2      	ldr	r2, [r2, #28]
 80099f2:	00d2      	lsls	r2, r2, #3
 80099f4:	4920      	ldr	r1, [pc, #128]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80099fa:	4b1f      	ldr	r3, [pc, #124]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fe:	4a1e      	ldr	r2, [pc, #120]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a00:	f043 0310 	orr.w	r3, r3, #16
 8009a04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d106      	bne.n	8009a1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a0c:	4b1a      	ldr	r3, [pc, #104]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a10:	4a19      	ldr	r2, [pc, #100]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a18:	e00f      	b.n	8009a3a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d106      	bne.n	8009a2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a20:	4b15      	ldr	r3, [pc, #84]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a24:	4a14      	ldr	r2, [pc, #80]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a2c:	e005      	b.n	8009a3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a2e:	4b12      	ldr	r3, [pc, #72]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a32:	4a11      	ldr	r2, [pc, #68]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009a3a:	4b0f      	ldr	r3, [pc, #60]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a0e      	ldr	r2, [pc, #56]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a46:	f7f8 f887 	bl	8001b58 <HAL_GetTick>
 8009a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a4c:	e008      	b.n	8009a60 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a4e:	f7f8 f883 	bl	8001b58 <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d901      	bls.n	8009a60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e006      	b.n	8009a6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a60:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d0f0      	beq.n	8009a4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	58024400 	.word	0x58024400
 8009a7c:	ffff0007 	.word	0xffff0007

08009a80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a8e:	4b53      	ldr	r3, [pc, #332]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a92:	f003 0303 	and.w	r3, r3, #3
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d101      	bne.n	8009a9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e099      	b.n	8009bd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009a9e:	4b4f      	ldr	r3, [pc, #316]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a4e      	ldr	r2, [pc, #312]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aaa:	f7f8 f855 	bl	8001b58 <HAL_GetTick>
 8009aae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ab0:	e008      	b.n	8009ac4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ab2:	f7f8 f851 	bl	8001b58 <HAL_GetTick>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d901      	bls.n	8009ac4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e086      	b.n	8009bd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ac4:	4b45      	ldr	r3, [pc, #276]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1f0      	bne.n	8009ab2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ad0:	4b42      	ldr	r3, [pc, #264]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	051b      	lsls	r3, r3, #20
 8009ade:	493f      	ldr	r1, [pc, #252]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	628b      	str	r3, [r1, #40]	; 0x28
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	3b01      	subs	r3, #1
 8009af4:	025b      	lsls	r3, r3, #9
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	431a      	orrs	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b06:	431a      	orrs	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	061b      	lsls	r3, r3, #24
 8009b10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b14:	4931      	ldr	r1, [pc, #196]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b1a:	4b30      	ldr	r3, [pc, #192]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	492d      	ldr	r1, [pc, #180]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b2c:	4b2b      	ldr	r3, [pc, #172]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	4928      	ldr	r1, [pc, #160]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b3e:	4b27      	ldr	r3, [pc, #156]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b42:	4a26      	ldr	r2, [pc, #152]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b4a:	4b24      	ldr	r3, [pc, #144]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b4e:	4b24      	ldr	r3, [pc, #144]	; (8009be0 <RCCEx_PLL3_Config+0x160>)
 8009b50:	4013      	ands	r3, r2
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	69d2      	ldr	r2, [r2, #28]
 8009b56:	00d2      	lsls	r2, r2, #3
 8009b58:	4920      	ldr	r1, [pc, #128]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b5e:	4b1f      	ldr	r3, [pc, #124]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b62:	4a1e      	ldr	r2, [pc, #120]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d106      	bne.n	8009b7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b70:	4b1a      	ldr	r3, [pc, #104]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b74:	4a19      	ldr	r2, [pc, #100]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b7c:	e00f      	b.n	8009b9e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d106      	bne.n	8009b92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b84:	4b15      	ldr	r3, [pc, #84]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b88:	4a14      	ldr	r2, [pc, #80]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b90:	e005      	b.n	8009b9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b92:	4b12      	ldr	r3, [pc, #72]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b96:	4a11      	ldr	r2, [pc, #68]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009b9e:	4b0f      	ldr	r3, [pc, #60]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a0e      	ldr	r2, [pc, #56]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009baa:	f7f7 ffd5 	bl	8001b58 <HAL_GetTick>
 8009bae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bb0:	e008      	b.n	8009bc4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009bb2:	f7f7 ffd1 	bl	8001b58 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d901      	bls.n	8009bc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e006      	b.n	8009bd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bc4:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0f0      	beq.n	8009bb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	58024400 	.word	0x58024400
 8009be0:	ffff0007 	.word	0xffff0007

08009be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e049      	b.n	8009c8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7f7 fd08 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	4619      	mov	r1, r3
 8009c22:	4610      	mov	r0, r2
 8009c24:	f000 f9b4 	bl	8009f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
	...

08009c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d001      	beq.n	8009cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e021      	b.n	8009cf0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68da      	ldr	r2, [r3, #12]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f042 0201 	orr.w	r2, r2, #1
 8009cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689a      	ldr	r2, [r3, #8]
 8009cca:	4b0c      	ldr	r3, [pc, #48]	; (8009cfc <HAL_TIM_Base_Start_IT+0x68>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2b06      	cmp	r3, #6
 8009cd4:	d00b      	beq.n	8009cee <HAL_TIM_Base_Start_IT+0x5a>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cdc:	d007      	beq.n	8009cee <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f042 0201 	orr.w	r2, r2, #1
 8009cec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3714      	adds	r7, #20
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	00010007 	.word	0x00010007

08009d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	f003 0302 	and.w	r3, r3, #2
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d122      	bne.n	8009d5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	f003 0302 	and.w	r3, r3, #2
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d11b      	bne.n	8009d5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f06f 0202 	mvn.w	r2, #2
 8009d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	f003 0303 	and.w	r3, r3, #3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d003      	beq.n	8009d4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f905 	bl	8009f52 <HAL_TIM_IC_CaptureCallback>
 8009d48:	e005      	b.n	8009d56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f8f7 	bl	8009f3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f908 	bl	8009f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	f003 0304 	and.w	r3, r3, #4
 8009d66:	2b04      	cmp	r3, #4
 8009d68:	d122      	bne.n	8009db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	f003 0304 	and.w	r3, r3, #4
 8009d74:	2b04      	cmp	r3, #4
 8009d76:	d11b      	bne.n	8009db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f06f 0204 	mvn.w	r2, #4
 8009d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2202      	movs	r2, #2
 8009d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f8db 	bl	8009f52 <HAL_TIM_IC_CaptureCallback>
 8009d9c:	e005      	b.n	8009daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f8cd 	bl	8009f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f8de 	bl	8009f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	f003 0308 	and.w	r3, r3, #8
 8009dba:	2b08      	cmp	r3, #8
 8009dbc:	d122      	bne.n	8009e04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	f003 0308 	and.w	r3, r3, #8
 8009dc8:	2b08      	cmp	r3, #8
 8009dca:	d11b      	bne.n	8009e04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f06f 0208 	mvn.w	r2, #8
 8009dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2204      	movs	r2, #4
 8009dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	f003 0303 	and.w	r3, r3, #3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d003      	beq.n	8009df2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f8b1 	bl	8009f52 <HAL_TIM_IC_CaptureCallback>
 8009df0:	e005      	b.n	8009dfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f8a3 	bl	8009f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f8b4 	bl	8009f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	f003 0310 	and.w	r3, r3, #16
 8009e0e:	2b10      	cmp	r3, #16
 8009e10:	d122      	bne.n	8009e58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	f003 0310 	and.w	r3, r3, #16
 8009e1c:	2b10      	cmp	r3, #16
 8009e1e:	d11b      	bne.n	8009e58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f06f 0210 	mvn.w	r2, #16
 8009e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2208      	movs	r2, #8
 8009e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	69db      	ldr	r3, [r3, #28]
 8009e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f887 	bl	8009f52 <HAL_TIM_IC_CaptureCallback>
 8009e44:	e005      	b.n	8009e52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f879 	bl	8009f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f88a 	bl	8009f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d10e      	bne.n	8009e84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d107      	bne.n	8009e84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f06f 0201 	mvn.w	r2, #1
 8009e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7f7 f99c 	bl	80011bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e8e:	2b80      	cmp	r3, #128	; 0x80
 8009e90:	d10e      	bne.n	8009eb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e9c:	2b80      	cmp	r3, #128	; 0x80
 8009e9e:	d107      	bne.n	8009eb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f99c 	bl	800a1e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ebe:	d10e      	bne.n	8009ede <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eca:	2b80      	cmp	r3, #128	; 0x80
 8009ecc:	d107      	bne.n	8009ede <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f98f 	bl	800a1fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee8:	2b40      	cmp	r3, #64	; 0x40
 8009eea:	d10e      	bne.n	8009f0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef6:	2b40      	cmp	r3, #64	; 0x40
 8009ef8:	d107      	bne.n	8009f0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f838 	bl	8009f7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	f003 0320 	and.w	r3, r3, #32
 8009f14:	2b20      	cmp	r3, #32
 8009f16:	d10e      	bne.n	8009f36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	f003 0320 	and.w	r3, r3, #32
 8009f22:	2b20      	cmp	r3, #32
 8009f24:	d107      	bne.n	8009f36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f06f 0220 	mvn.w	r2, #32
 8009f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f94f 	bl	800a1d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f36:	bf00      	nop
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b083      	sub	sp, #12
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f46:	bf00      	nop
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b083      	sub	sp, #12
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f5a:	bf00      	nop
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b083      	sub	sp, #12
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f6e:	bf00      	nop
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b083      	sub	sp, #12
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f82:	bf00      	nop
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
	...

08009f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a40      	ldr	r2, [pc, #256]	; (800a0a4 <TIM_Base_SetConfig+0x114>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d013      	beq.n	8009fd0 <TIM_Base_SetConfig+0x40>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fae:	d00f      	beq.n	8009fd0 <TIM_Base_SetConfig+0x40>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a3d      	ldr	r2, [pc, #244]	; (800a0a8 <TIM_Base_SetConfig+0x118>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d00b      	beq.n	8009fd0 <TIM_Base_SetConfig+0x40>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a3c      	ldr	r2, [pc, #240]	; (800a0ac <TIM_Base_SetConfig+0x11c>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d007      	beq.n	8009fd0 <TIM_Base_SetConfig+0x40>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a3b      	ldr	r2, [pc, #236]	; (800a0b0 <TIM_Base_SetConfig+0x120>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d003      	beq.n	8009fd0 <TIM_Base_SetConfig+0x40>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a3a      	ldr	r2, [pc, #232]	; (800a0b4 <TIM_Base_SetConfig+0x124>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d108      	bne.n	8009fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a2f      	ldr	r2, [pc, #188]	; (800a0a4 <TIM_Base_SetConfig+0x114>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d01f      	beq.n	800a02a <TIM_Base_SetConfig+0x9a>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ff0:	d01b      	beq.n	800a02a <TIM_Base_SetConfig+0x9a>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a2c      	ldr	r2, [pc, #176]	; (800a0a8 <TIM_Base_SetConfig+0x118>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d017      	beq.n	800a02a <TIM_Base_SetConfig+0x9a>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a2b      	ldr	r2, [pc, #172]	; (800a0ac <TIM_Base_SetConfig+0x11c>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d013      	beq.n	800a02a <TIM_Base_SetConfig+0x9a>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a2a      	ldr	r2, [pc, #168]	; (800a0b0 <TIM_Base_SetConfig+0x120>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d00f      	beq.n	800a02a <TIM_Base_SetConfig+0x9a>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a29      	ldr	r2, [pc, #164]	; (800a0b4 <TIM_Base_SetConfig+0x124>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d00b      	beq.n	800a02a <TIM_Base_SetConfig+0x9a>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a28      	ldr	r2, [pc, #160]	; (800a0b8 <TIM_Base_SetConfig+0x128>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d007      	beq.n	800a02a <TIM_Base_SetConfig+0x9a>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a27      	ldr	r2, [pc, #156]	; (800a0bc <TIM_Base_SetConfig+0x12c>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d003      	beq.n	800a02a <TIM_Base_SetConfig+0x9a>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a26      	ldr	r2, [pc, #152]	; (800a0c0 <TIM_Base_SetConfig+0x130>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d108      	bne.n	800a03c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	4313      	orrs	r3, r2
 800a03a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	695b      	ldr	r3, [r3, #20]
 800a046:	4313      	orrs	r3, r2
 800a048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	689a      	ldr	r2, [r3, #8]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a10      	ldr	r2, [pc, #64]	; (800a0a4 <TIM_Base_SetConfig+0x114>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d00f      	beq.n	800a088 <TIM_Base_SetConfig+0xf8>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a12      	ldr	r2, [pc, #72]	; (800a0b4 <TIM_Base_SetConfig+0x124>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d00b      	beq.n	800a088 <TIM_Base_SetConfig+0xf8>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a11      	ldr	r2, [pc, #68]	; (800a0b8 <TIM_Base_SetConfig+0x128>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d007      	beq.n	800a088 <TIM_Base_SetConfig+0xf8>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a10      	ldr	r2, [pc, #64]	; (800a0bc <TIM_Base_SetConfig+0x12c>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d003      	beq.n	800a088 <TIM_Base_SetConfig+0xf8>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a0f      	ldr	r2, [pc, #60]	; (800a0c0 <TIM_Base_SetConfig+0x130>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d103      	bne.n	800a090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	691a      	ldr	r2, [r3, #16]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	615a      	str	r2, [r3, #20]
}
 800a096:	bf00      	nop
 800a098:	3714      	adds	r7, #20
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	40010000 	.word	0x40010000
 800a0a8:	40000400 	.word	0x40000400
 800a0ac:	40000800 	.word	0x40000800
 800a0b0:	40000c00 	.word	0x40000c00
 800a0b4:	40010400 	.word	0x40010400
 800a0b8:	40014000 	.word	0x40014000
 800a0bc:	40014400 	.word	0x40014400
 800a0c0:	40014800 	.word	0x40014800

0800a0c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d101      	bne.n	800a0dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0d8:	2302      	movs	r3, #2
 800a0da:	e068      	b.n	800a1ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a2e      	ldr	r2, [pc, #184]	; (800a1bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d004      	beq.n	800a110 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a2d      	ldr	r2, [pc, #180]	; (800a1c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d108      	bne.n	800a122 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a116:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	4313      	orrs	r3, r2
 800a120:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a128:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	4313      	orrs	r3, r2
 800a132:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a1e      	ldr	r2, [pc, #120]	; (800a1bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d01d      	beq.n	800a182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a14e:	d018      	beq.n	800a182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a1b      	ldr	r2, [pc, #108]	; (800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d013      	beq.n	800a182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a1a      	ldr	r2, [pc, #104]	; (800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d00e      	beq.n	800a182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a18      	ldr	r2, [pc, #96]	; (800a1cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d009      	beq.n	800a182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a13      	ldr	r2, [pc, #76]	; (800a1c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d004      	beq.n	800a182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a14      	ldr	r2, [pc, #80]	; (800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d10c      	bne.n	800a19c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	4313      	orrs	r3, r2
 800a192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	40010000 	.word	0x40010000
 800a1c0:	40010400 	.word	0x40010400
 800a1c4:	40000400 	.word	0x40000400
 800a1c8:	40000800 	.word	0x40000800
 800a1cc:	40000c00 	.word	0x40000c00
 800a1d0:	40001800 	.word	0x40001800

0800a1d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e042      	b.n	800a2a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d106      	bne.n	800a23a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7f7 fa1b 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2224      	movs	r2, #36	; 0x24
 800a23e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f022 0201 	bic.w	r2, r2, #1
 800a250:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f8c2 	bl	800a3dc <UART_SetConfig>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d101      	bne.n	800a262 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e022      	b.n	800a2a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a266:	2b00      	cmp	r3, #0
 800a268:	d002      	beq.n	800a270 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fe66 	bl	800af3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a27e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	689a      	ldr	r2, [r3, #8]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a28e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f042 0201 	orr.w	r2, r2, #1
 800a29e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 feed 	bl	800b080 <UART_CheckIdleState>
 800a2a6:	4603      	mov	r3, r0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08a      	sub	sp, #40	; 0x28
 800a2b4:	af02      	add	r7, sp, #8
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	603b      	str	r3, [r7, #0]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2c6:	2b20      	cmp	r3, #32
 800a2c8:	f040 8083 	bne.w	800a3d2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <HAL_UART_Transmit+0x28>
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e07b      	b.n	800a3d4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d101      	bne.n	800a2ea <HAL_UART_Transmit+0x3a>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	e074      	b.n	800a3d4 <HAL_UART_Transmit+0x124>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2221      	movs	r2, #33	; 0x21
 800a2fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a302:	f7f7 fc29 	bl	8001b58 <HAL_GetTick>
 800a306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	88fa      	ldrh	r2, [r7, #6]
 800a30c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	88fa      	ldrh	r2, [r7, #6]
 800a314:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a320:	d108      	bne.n	800a334 <HAL_UART_Transmit+0x84>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d104      	bne.n	800a334 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	61bb      	str	r3, [r7, #24]
 800a332:	e003      	b.n	800a33c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a338:	2300      	movs	r3, #0
 800a33a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800a344:	e02c      	b.n	800a3a0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	2200      	movs	r2, #0
 800a34e:	2180      	movs	r1, #128	; 0x80
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f000 fedd 	bl	800b110 <UART_WaitOnFlagUntilTimeout>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e039      	b.n	800a3d4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10b      	bne.n	800a37e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	881b      	ldrh	r3, [r3, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a374:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	3302      	adds	r3, #2
 800a37a:	61bb      	str	r3, [r7, #24]
 800a37c:	e007      	b.n	800a38e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	781a      	ldrb	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	3301      	adds	r3, #1
 800a38c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a394:	b29b      	uxth	r3, r3
 800a396:	3b01      	subs	r3, #1
 800a398:	b29a      	uxth	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1cc      	bne.n	800a346 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	2140      	movs	r1, #64	; 0x40
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f000 feaa 	bl	800b110 <UART_WaitOnFlagUntilTimeout>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e006      	b.n	800a3d4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	e000      	b.n	800a3d4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a3d2:	2302      	movs	r3, #2
  }
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3720      	adds	r7, #32
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3dc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a3e0:	b08e      	sub	sp, #56	; 0x38
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	431a      	orrs	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	69db      	ldr	r3, [r3, #28]
 800a400:	4313      	orrs	r3, r2
 800a402:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a40a:	4313      	orrs	r3, r2
 800a40c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	4bc1      	ldr	r3, [pc, #772]	; (800a71c <UART_SetConfig+0x340>)
 800a416:	4013      	ands	r3, r2
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	6812      	ldr	r2, [r2, #0]
 800a41c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a41e:	430b      	orrs	r3, r1
 800a420:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68da      	ldr	r2, [r3, #12]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	430a      	orrs	r2, r1
 800a436:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4ab7      	ldr	r2, [pc, #732]	; (800a720 <UART_SetConfig+0x344>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d004      	beq.n	800a452 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a1b      	ldr	r3, [r3, #32]
 800a44c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a44e:	4313      	orrs	r3, r2
 800a450:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	4bb2      	ldr	r3, [pc, #712]	; (800a724 <UART_SetConfig+0x348>)
 800a45a:	4013      	ands	r3, r2
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	6812      	ldr	r2, [r2, #0]
 800a460:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a462:	430b      	orrs	r3, r1
 800a464:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46c:	f023 010f 	bic.w	r1, r3, #15
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	430a      	orrs	r2, r1
 800a47a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4aa9      	ldr	r2, [pc, #676]	; (800a728 <UART_SetConfig+0x34c>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d177      	bne.n	800a576 <UART_SetConfig+0x19a>
 800a486:	4ba9      	ldr	r3, [pc, #676]	; (800a72c <UART_SetConfig+0x350>)
 800a488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a48a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a48e:	2b28      	cmp	r3, #40	; 0x28
 800a490:	d86c      	bhi.n	800a56c <UART_SetConfig+0x190>
 800a492:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <UART_SetConfig+0xbc>)
 800a494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a498:	0800a53d 	.word	0x0800a53d
 800a49c:	0800a56d 	.word	0x0800a56d
 800a4a0:	0800a56d 	.word	0x0800a56d
 800a4a4:	0800a56d 	.word	0x0800a56d
 800a4a8:	0800a56d 	.word	0x0800a56d
 800a4ac:	0800a56d 	.word	0x0800a56d
 800a4b0:	0800a56d 	.word	0x0800a56d
 800a4b4:	0800a56d 	.word	0x0800a56d
 800a4b8:	0800a545 	.word	0x0800a545
 800a4bc:	0800a56d 	.word	0x0800a56d
 800a4c0:	0800a56d 	.word	0x0800a56d
 800a4c4:	0800a56d 	.word	0x0800a56d
 800a4c8:	0800a56d 	.word	0x0800a56d
 800a4cc:	0800a56d 	.word	0x0800a56d
 800a4d0:	0800a56d 	.word	0x0800a56d
 800a4d4:	0800a56d 	.word	0x0800a56d
 800a4d8:	0800a54d 	.word	0x0800a54d
 800a4dc:	0800a56d 	.word	0x0800a56d
 800a4e0:	0800a56d 	.word	0x0800a56d
 800a4e4:	0800a56d 	.word	0x0800a56d
 800a4e8:	0800a56d 	.word	0x0800a56d
 800a4ec:	0800a56d 	.word	0x0800a56d
 800a4f0:	0800a56d 	.word	0x0800a56d
 800a4f4:	0800a56d 	.word	0x0800a56d
 800a4f8:	0800a555 	.word	0x0800a555
 800a4fc:	0800a56d 	.word	0x0800a56d
 800a500:	0800a56d 	.word	0x0800a56d
 800a504:	0800a56d 	.word	0x0800a56d
 800a508:	0800a56d 	.word	0x0800a56d
 800a50c:	0800a56d 	.word	0x0800a56d
 800a510:	0800a56d 	.word	0x0800a56d
 800a514:	0800a56d 	.word	0x0800a56d
 800a518:	0800a55d 	.word	0x0800a55d
 800a51c:	0800a56d 	.word	0x0800a56d
 800a520:	0800a56d 	.word	0x0800a56d
 800a524:	0800a56d 	.word	0x0800a56d
 800a528:	0800a56d 	.word	0x0800a56d
 800a52c:	0800a56d 	.word	0x0800a56d
 800a530:	0800a56d 	.word	0x0800a56d
 800a534:	0800a56d 	.word	0x0800a56d
 800a538:	0800a565 	.word	0x0800a565
 800a53c:	2301      	movs	r3, #1
 800a53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a542:	e233      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a544:	2304      	movs	r3, #4
 800a546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54a:	e22f      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a54c:	2308      	movs	r3, #8
 800a54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a552:	e22b      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a554:	2310      	movs	r3, #16
 800a556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55a:	e227      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a55c:	2320      	movs	r3, #32
 800a55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a562:	e223      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a564:	2340      	movs	r3, #64	; 0x40
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56a:	e21f      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a56c:	2380      	movs	r3, #128	; 0x80
 800a56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a572:	bf00      	nop
 800a574:	e21a      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a6d      	ldr	r2, [pc, #436]	; (800a730 <UART_SetConfig+0x354>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d132      	bne.n	800a5e6 <UART_SetConfig+0x20a>
 800a580:	4b6a      	ldr	r3, [pc, #424]	; (800a72c <UART_SetConfig+0x350>)
 800a582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a584:	f003 0307 	and.w	r3, r3, #7
 800a588:	2b05      	cmp	r3, #5
 800a58a:	d827      	bhi.n	800a5dc <UART_SetConfig+0x200>
 800a58c:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <UART_SetConfig+0x1b8>)
 800a58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a592:	bf00      	nop
 800a594:	0800a5ad 	.word	0x0800a5ad
 800a598:	0800a5b5 	.word	0x0800a5b5
 800a59c:	0800a5bd 	.word	0x0800a5bd
 800a5a0:	0800a5c5 	.word	0x0800a5c5
 800a5a4:	0800a5cd 	.word	0x0800a5cd
 800a5a8:	0800a5d5 	.word	0x0800a5d5
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b2:	e1fb      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a5b4:	2304      	movs	r3, #4
 800a5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ba:	e1f7      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a5bc:	2308      	movs	r3, #8
 800a5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c2:	e1f3      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a5c4:	2310      	movs	r3, #16
 800a5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ca:	e1ef      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a5cc:	2320      	movs	r3, #32
 800a5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5d2:	e1eb      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a5d4:	2340      	movs	r3, #64	; 0x40
 800a5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5da:	e1e7      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a5dc:	2380      	movs	r3, #128	; 0x80
 800a5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e2:	bf00      	nop
 800a5e4:	e1e2      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a52      	ldr	r2, [pc, #328]	; (800a734 <UART_SetConfig+0x358>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d132      	bne.n	800a656 <UART_SetConfig+0x27a>
 800a5f0:	4b4e      	ldr	r3, [pc, #312]	; (800a72c <UART_SetConfig+0x350>)
 800a5f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	2b05      	cmp	r3, #5
 800a5fa:	d827      	bhi.n	800a64c <UART_SetConfig+0x270>
 800a5fc:	a201      	add	r2, pc, #4	; (adr r2, 800a604 <UART_SetConfig+0x228>)
 800a5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a602:	bf00      	nop
 800a604:	0800a61d 	.word	0x0800a61d
 800a608:	0800a625 	.word	0x0800a625
 800a60c:	0800a62d 	.word	0x0800a62d
 800a610:	0800a635 	.word	0x0800a635
 800a614:	0800a63d 	.word	0x0800a63d
 800a618:	0800a645 	.word	0x0800a645
 800a61c:	2300      	movs	r3, #0
 800a61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a622:	e1c3      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a624:	2304      	movs	r3, #4
 800a626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a62a:	e1bf      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a62c:	2308      	movs	r3, #8
 800a62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a632:	e1bb      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a634:	2310      	movs	r3, #16
 800a636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a63a:	e1b7      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a63c:	2320      	movs	r3, #32
 800a63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a642:	e1b3      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a644:	2340      	movs	r3, #64	; 0x40
 800a646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a64a:	e1af      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a64c:	2380      	movs	r3, #128	; 0x80
 800a64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a652:	bf00      	nop
 800a654:	e1aa      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a37      	ldr	r2, [pc, #220]	; (800a738 <UART_SetConfig+0x35c>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d132      	bne.n	800a6c6 <UART_SetConfig+0x2ea>
 800a660:	4b32      	ldr	r3, [pc, #200]	; (800a72c <UART_SetConfig+0x350>)
 800a662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a664:	f003 0307 	and.w	r3, r3, #7
 800a668:	2b05      	cmp	r3, #5
 800a66a:	d827      	bhi.n	800a6bc <UART_SetConfig+0x2e0>
 800a66c:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <UART_SetConfig+0x298>)
 800a66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a672:	bf00      	nop
 800a674:	0800a68d 	.word	0x0800a68d
 800a678:	0800a695 	.word	0x0800a695
 800a67c:	0800a69d 	.word	0x0800a69d
 800a680:	0800a6a5 	.word	0x0800a6a5
 800a684:	0800a6ad 	.word	0x0800a6ad
 800a688:	0800a6b5 	.word	0x0800a6b5
 800a68c:	2300      	movs	r3, #0
 800a68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a692:	e18b      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a694:	2304      	movs	r3, #4
 800a696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a69a:	e187      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a69c:	2308      	movs	r3, #8
 800a69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6a2:	e183      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a6a4:	2310      	movs	r3, #16
 800a6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6aa:	e17f      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a6ac:	2320      	movs	r3, #32
 800a6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6b2:	e17b      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a6b4:	2340      	movs	r3, #64	; 0x40
 800a6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ba:	e177      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a6bc:	2380      	movs	r3, #128	; 0x80
 800a6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6c2:	bf00      	nop
 800a6c4:	e172      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a1c      	ldr	r2, [pc, #112]	; (800a73c <UART_SetConfig+0x360>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d144      	bne.n	800a75a <UART_SetConfig+0x37e>
 800a6d0:	4b16      	ldr	r3, [pc, #88]	; (800a72c <UART_SetConfig+0x350>)
 800a6d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d4:	f003 0307 	and.w	r3, r3, #7
 800a6d8:	2b05      	cmp	r3, #5
 800a6da:	d839      	bhi.n	800a750 <UART_SetConfig+0x374>
 800a6dc:	a201      	add	r2, pc, #4	; (adr r2, 800a6e4 <UART_SetConfig+0x308>)
 800a6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e2:	bf00      	nop
 800a6e4:	0800a6fd 	.word	0x0800a6fd
 800a6e8:	0800a705 	.word	0x0800a705
 800a6ec:	0800a70d 	.word	0x0800a70d
 800a6f0:	0800a715 	.word	0x0800a715
 800a6f4:	0800a741 	.word	0x0800a741
 800a6f8:	0800a749 	.word	0x0800a749
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a702:	e153      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a704:	2304      	movs	r3, #4
 800a706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a70a:	e14f      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a70c:	2308      	movs	r3, #8
 800a70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a712:	e14b      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a714:	2310      	movs	r3, #16
 800a716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a71a:	e147      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a71c:	cfff69f3 	.word	0xcfff69f3
 800a720:	58000c00 	.word	0x58000c00
 800a724:	11fff4ff 	.word	0x11fff4ff
 800a728:	40011000 	.word	0x40011000
 800a72c:	58024400 	.word	0x58024400
 800a730:	40004400 	.word	0x40004400
 800a734:	40004800 	.word	0x40004800
 800a738:	40004c00 	.word	0x40004c00
 800a73c:	40005000 	.word	0x40005000
 800a740:	2320      	movs	r3, #32
 800a742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a746:	e131      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a748:	2340      	movs	r3, #64	; 0x40
 800a74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a74e:	e12d      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a750:	2380      	movs	r3, #128	; 0x80
 800a752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a756:	bf00      	nop
 800a758:	e128      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4ab6      	ldr	r2, [pc, #728]	; (800aa38 <UART_SetConfig+0x65c>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d178      	bne.n	800a856 <UART_SetConfig+0x47a>
 800a764:	4bb5      	ldr	r3, [pc, #724]	; (800aa3c <UART_SetConfig+0x660>)
 800a766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a76c:	2b28      	cmp	r3, #40	; 0x28
 800a76e:	d86d      	bhi.n	800a84c <UART_SetConfig+0x470>
 800a770:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <UART_SetConfig+0x39c>)
 800a772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a776:	bf00      	nop
 800a778:	0800a81d 	.word	0x0800a81d
 800a77c:	0800a84d 	.word	0x0800a84d
 800a780:	0800a84d 	.word	0x0800a84d
 800a784:	0800a84d 	.word	0x0800a84d
 800a788:	0800a84d 	.word	0x0800a84d
 800a78c:	0800a84d 	.word	0x0800a84d
 800a790:	0800a84d 	.word	0x0800a84d
 800a794:	0800a84d 	.word	0x0800a84d
 800a798:	0800a825 	.word	0x0800a825
 800a79c:	0800a84d 	.word	0x0800a84d
 800a7a0:	0800a84d 	.word	0x0800a84d
 800a7a4:	0800a84d 	.word	0x0800a84d
 800a7a8:	0800a84d 	.word	0x0800a84d
 800a7ac:	0800a84d 	.word	0x0800a84d
 800a7b0:	0800a84d 	.word	0x0800a84d
 800a7b4:	0800a84d 	.word	0x0800a84d
 800a7b8:	0800a82d 	.word	0x0800a82d
 800a7bc:	0800a84d 	.word	0x0800a84d
 800a7c0:	0800a84d 	.word	0x0800a84d
 800a7c4:	0800a84d 	.word	0x0800a84d
 800a7c8:	0800a84d 	.word	0x0800a84d
 800a7cc:	0800a84d 	.word	0x0800a84d
 800a7d0:	0800a84d 	.word	0x0800a84d
 800a7d4:	0800a84d 	.word	0x0800a84d
 800a7d8:	0800a835 	.word	0x0800a835
 800a7dc:	0800a84d 	.word	0x0800a84d
 800a7e0:	0800a84d 	.word	0x0800a84d
 800a7e4:	0800a84d 	.word	0x0800a84d
 800a7e8:	0800a84d 	.word	0x0800a84d
 800a7ec:	0800a84d 	.word	0x0800a84d
 800a7f0:	0800a84d 	.word	0x0800a84d
 800a7f4:	0800a84d 	.word	0x0800a84d
 800a7f8:	0800a83d 	.word	0x0800a83d
 800a7fc:	0800a84d 	.word	0x0800a84d
 800a800:	0800a84d 	.word	0x0800a84d
 800a804:	0800a84d 	.word	0x0800a84d
 800a808:	0800a84d 	.word	0x0800a84d
 800a80c:	0800a84d 	.word	0x0800a84d
 800a810:	0800a84d 	.word	0x0800a84d
 800a814:	0800a84d 	.word	0x0800a84d
 800a818:	0800a845 	.word	0x0800a845
 800a81c:	2301      	movs	r3, #1
 800a81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a822:	e0c3      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a824:	2304      	movs	r3, #4
 800a826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82a:	e0bf      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a82c:	2308      	movs	r3, #8
 800a82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a832:	e0bb      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a834:	2310      	movs	r3, #16
 800a836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83a:	e0b7      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a83c:	2320      	movs	r3, #32
 800a83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a842:	e0b3      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a844:	2340      	movs	r3, #64	; 0x40
 800a846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a84a:	e0af      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a84c:	2380      	movs	r3, #128	; 0x80
 800a84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a852:	bf00      	nop
 800a854:	e0aa      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a79      	ldr	r2, [pc, #484]	; (800aa40 <UART_SetConfig+0x664>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d132      	bne.n	800a8c6 <UART_SetConfig+0x4ea>
 800a860:	4b76      	ldr	r3, [pc, #472]	; (800aa3c <UART_SetConfig+0x660>)
 800a862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a864:	f003 0307 	and.w	r3, r3, #7
 800a868:	2b05      	cmp	r3, #5
 800a86a:	d827      	bhi.n	800a8bc <UART_SetConfig+0x4e0>
 800a86c:	a201      	add	r2, pc, #4	; (adr r2, 800a874 <UART_SetConfig+0x498>)
 800a86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a872:	bf00      	nop
 800a874:	0800a88d 	.word	0x0800a88d
 800a878:	0800a895 	.word	0x0800a895
 800a87c:	0800a89d 	.word	0x0800a89d
 800a880:	0800a8a5 	.word	0x0800a8a5
 800a884:	0800a8ad 	.word	0x0800a8ad
 800a888:	0800a8b5 	.word	0x0800a8b5
 800a88c:	2300      	movs	r3, #0
 800a88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a892:	e08b      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a894:	2304      	movs	r3, #4
 800a896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a89a:	e087      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a89c:	2308      	movs	r3, #8
 800a89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8a2:	e083      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a8a4:	2310      	movs	r3, #16
 800a8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8aa:	e07f      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a8ac:	2320      	movs	r3, #32
 800a8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8b2:	e07b      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a8b4:	2340      	movs	r3, #64	; 0x40
 800a8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ba:	e077      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a8bc:	2380      	movs	r3, #128	; 0x80
 800a8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8c2:	bf00      	nop
 800a8c4:	e072      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a5e      	ldr	r2, [pc, #376]	; (800aa44 <UART_SetConfig+0x668>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d132      	bne.n	800a936 <UART_SetConfig+0x55a>
 800a8d0:	4b5a      	ldr	r3, [pc, #360]	; (800aa3c <UART_SetConfig+0x660>)
 800a8d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8d4:	f003 0307 	and.w	r3, r3, #7
 800a8d8:	2b05      	cmp	r3, #5
 800a8da:	d827      	bhi.n	800a92c <UART_SetConfig+0x550>
 800a8dc:	a201      	add	r2, pc, #4	; (adr r2, 800a8e4 <UART_SetConfig+0x508>)
 800a8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e2:	bf00      	nop
 800a8e4:	0800a8fd 	.word	0x0800a8fd
 800a8e8:	0800a905 	.word	0x0800a905
 800a8ec:	0800a90d 	.word	0x0800a90d
 800a8f0:	0800a915 	.word	0x0800a915
 800a8f4:	0800a91d 	.word	0x0800a91d
 800a8f8:	0800a925 	.word	0x0800a925
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a902:	e053      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a904:	2304      	movs	r3, #4
 800a906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a90a:	e04f      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a90c:	2308      	movs	r3, #8
 800a90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a912:	e04b      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a914:	2310      	movs	r3, #16
 800a916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a91a:	e047      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a91c:	2320      	movs	r3, #32
 800a91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a922:	e043      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a924:	2340      	movs	r3, #64	; 0x40
 800a926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a92a:	e03f      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a92c:	2380      	movs	r3, #128	; 0x80
 800a92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a932:	bf00      	nop
 800a934:	e03a      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a43      	ldr	r2, [pc, #268]	; (800aa48 <UART_SetConfig+0x66c>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d132      	bne.n	800a9a6 <UART_SetConfig+0x5ca>
 800a940:	4b3e      	ldr	r3, [pc, #248]	; (800aa3c <UART_SetConfig+0x660>)
 800a942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a944:	f003 0307 	and.w	r3, r3, #7
 800a948:	2b05      	cmp	r3, #5
 800a94a:	d827      	bhi.n	800a99c <UART_SetConfig+0x5c0>
 800a94c:	a201      	add	r2, pc, #4	; (adr r2, 800a954 <UART_SetConfig+0x578>)
 800a94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a952:	bf00      	nop
 800a954:	0800a96d 	.word	0x0800a96d
 800a958:	0800a975 	.word	0x0800a975
 800a95c:	0800a97d 	.word	0x0800a97d
 800a960:	0800a985 	.word	0x0800a985
 800a964:	0800a98d 	.word	0x0800a98d
 800a968:	0800a995 	.word	0x0800a995
 800a96c:	2302      	movs	r3, #2
 800a96e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a972:	e01b      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a974:	2304      	movs	r3, #4
 800a976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a97a:	e017      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a97c:	2308      	movs	r3, #8
 800a97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a982:	e013      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a984:	2310      	movs	r3, #16
 800a986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a98a:	e00f      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a98c:	2320      	movs	r3, #32
 800a98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a992:	e00b      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a994:	2340      	movs	r3, #64	; 0x40
 800a996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a99a:	e007      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a99c:	2380      	movs	r3, #128	; 0x80
 800a99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9a2:	bf00      	nop
 800a9a4:	e002      	b.n	800a9ac <UART_SetConfig+0x5d0>
 800a9a6:	2380      	movs	r3, #128	; 0x80
 800a9a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a25      	ldr	r2, [pc, #148]	; (800aa48 <UART_SetConfig+0x66c>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	f040 80b8 	bne.w	800ab28 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9bc:	2b08      	cmp	r3, #8
 800a9be:	d019      	beq.n	800a9f4 <UART_SetConfig+0x618>
 800a9c0:	2b08      	cmp	r3, #8
 800a9c2:	dc04      	bgt.n	800a9ce <UART_SetConfig+0x5f2>
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d009      	beq.n	800a9dc <UART_SetConfig+0x600>
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d00b      	beq.n	800a9e4 <UART_SetConfig+0x608>
 800a9cc:	e042      	b.n	800aa54 <UART_SetConfig+0x678>
 800a9ce:	2b20      	cmp	r3, #32
 800a9d0:	d02b      	beq.n	800aa2a <UART_SetConfig+0x64e>
 800a9d2:	2b40      	cmp	r3, #64	; 0x40
 800a9d4:	d02c      	beq.n	800aa30 <UART_SetConfig+0x654>
 800a9d6:	2b10      	cmp	r3, #16
 800a9d8:	d014      	beq.n	800aa04 <UART_SetConfig+0x628>
 800a9da:	e03b      	b.n	800aa54 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a9dc:	f7fe fba4 	bl	8009128 <HAL_RCCEx_GetD3PCLK1Freq>
 800a9e0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a9e2:	e03d      	b.n	800aa60 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9e4:	f107 0314 	add.w	r3, r7, #20
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fe fbb3 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9f2:	e035      	b.n	800aa60 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9f4:	f107 0308 	add.w	r3, r7, #8
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fe fcf7 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa02:	e02d      	b.n	800aa60 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa04:	4b0d      	ldr	r3, [pc, #52]	; (800aa3c <UART_SetConfig+0x660>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 0320 	and.w	r3, r3, #32
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d009      	beq.n	800aa24 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa10:	4b0a      	ldr	r3, [pc, #40]	; (800aa3c <UART_SetConfig+0x660>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	08db      	lsrs	r3, r3, #3
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	4a0c      	ldr	r2, [pc, #48]	; (800aa4c <UART_SetConfig+0x670>)
 800aa1c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa22:	e01d      	b.n	800aa60 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800aa24:	4b09      	ldr	r3, [pc, #36]	; (800aa4c <UART_SetConfig+0x670>)
 800aa26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa28:	e01a      	b.n	800aa60 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa2a:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <UART_SetConfig+0x674>)
 800aa2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa2e:	e017      	b.n	800aa60 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa36:	e013      	b.n	800aa60 <UART_SetConfig+0x684>
 800aa38:	40011400 	.word	0x40011400
 800aa3c:	58024400 	.word	0x58024400
 800aa40:	40007800 	.word	0x40007800
 800aa44:	40007c00 	.word	0x40007c00
 800aa48:	58000c00 	.word	0x58000c00
 800aa4c:	03d09000 	.word	0x03d09000
 800aa50:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aa5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 824d 	beq.w	800af02 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	4aad      	ldr	r2, [pc, #692]	; (800ad24 <UART_SetConfig+0x948>)
 800aa6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa72:	461a      	mov	r2, r3
 800aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa76:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa7a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685a      	ldr	r2, [r3, #4]
 800aa80:	4613      	mov	r3, r2
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	4413      	add	r3, r2
 800aa86:	6a3a      	ldr	r2, [r7, #32]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d305      	bcc.n	800aa98 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa92:	6a3a      	ldr	r2, [r7, #32]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d903      	bls.n	800aaa0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800aa9e:	e230      	b.n	800af02 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f04f 0100 	mov.w	r1, #0
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaac:	4a9d      	ldr	r2, [pc, #628]	; (800ad24 <UART_SetConfig+0x948>)
 800aaae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	f04f 0400 	mov.w	r4, #0
 800aab8:	461a      	mov	r2, r3
 800aaba:	4623      	mov	r3, r4
 800aabc:	f7f5 fc68 	bl	8000390 <__aeabi_uldivmod>
 800aac0:	4603      	mov	r3, r0
 800aac2:	460c      	mov	r4, r1
 800aac4:	4619      	mov	r1, r3
 800aac6:	4622      	mov	r2, r4
 800aac8:	f04f 0300 	mov.w	r3, #0
 800aacc:	f04f 0400 	mov.w	r4, #0
 800aad0:	0214      	lsls	r4, r2, #8
 800aad2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aad6:	020b      	lsls	r3, r1, #8
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	6852      	ldr	r2, [r2, #4]
 800aadc:	0852      	lsrs	r2, r2, #1
 800aade:	4611      	mov	r1, r2
 800aae0:	f04f 0200 	mov.w	r2, #0
 800aae4:	eb13 0b01 	adds.w	fp, r3, r1
 800aae8:	eb44 0c02 	adc.w	ip, r4, r2
 800aaec:	4658      	mov	r0, fp
 800aaee:	4661      	mov	r1, ip
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	f04f 0400 	mov.w	r4, #0
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4623      	mov	r3, r4
 800aafc:	f7f5 fc48 	bl	8000390 <__aeabi_uldivmod>
 800ab00:	4603      	mov	r3, r0
 800ab02:	460c      	mov	r4, r1
 800ab04:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab0c:	d308      	bcc.n	800ab20 <UART_SetConfig+0x744>
 800ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab14:	d204      	bcs.n	800ab20 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab1c:	60da      	str	r2, [r3, #12]
 800ab1e:	e1f0      	b.n	800af02 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ab26:	e1ec      	b.n	800af02 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	69db      	ldr	r3, [r3, #28]
 800ab2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab30:	f040 8100 	bne.w	800ad34 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800ab34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab38:	2b40      	cmp	r3, #64	; 0x40
 800ab3a:	f200 80b7 	bhi.w	800acac <UART_SetConfig+0x8d0>
 800ab3e:	a201      	add	r2, pc, #4	; (adr r2, 800ab44 <UART_SetConfig+0x768>)
 800ab40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab44:	0800ac49 	.word	0x0800ac49
 800ab48:	0800ac51 	.word	0x0800ac51
 800ab4c:	0800acad 	.word	0x0800acad
 800ab50:	0800acad 	.word	0x0800acad
 800ab54:	0800ac59 	.word	0x0800ac59
 800ab58:	0800acad 	.word	0x0800acad
 800ab5c:	0800acad 	.word	0x0800acad
 800ab60:	0800acad 	.word	0x0800acad
 800ab64:	0800ac69 	.word	0x0800ac69
 800ab68:	0800acad 	.word	0x0800acad
 800ab6c:	0800acad 	.word	0x0800acad
 800ab70:	0800acad 	.word	0x0800acad
 800ab74:	0800acad 	.word	0x0800acad
 800ab78:	0800acad 	.word	0x0800acad
 800ab7c:	0800acad 	.word	0x0800acad
 800ab80:	0800acad 	.word	0x0800acad
 800ab84:	0800ac79 	.word	0x0800ac79
 800ab88:	0800acad 	.word	0x0800acad
 800ab8c:	0800acad 	.word	0x0800acad
 800ab90:	0800acad 	.word	0x0800acad
 800ab94:	0800acad 	.word	0x0800acad
 800ab98:	0800acad 	.word	0x0800acad
 800ab9c:	0800acad 	.word	0x0800acad
 800aba0:	0800acad 	.word	0x0800acad
 800aba4:	0800acad 	.word	0x0800acad
 800aba8:	0800acad 	.word	0x0800acad
 800abac:	0800acad 	.word	0x0800acad
 800abb0:	0800acad 	.word	0x0800acad
 800abb4:	0800acad 	.word	0x0800acad
 800abb8:	0800acad 	.word	0x0800acad
 800abbc:	0800acad 	.word	0x0800acad
 800abc0:	0800acad 	.word	0x0800acad
 800abc4:	0800ac9f 	.word	0x0800ac9f
 800abc8:	0800acad 	.word	0x0800acad
 800abcc:	0800acad 	.word	0x0800acad
 800abd0:	0800acad 	.word	0x0800acad
 800abd4:	0800acad 	.word	0x0800acad
 800abd8:	0800acad 	.word	0x0800acad
 800abdc:	0800acad 	.word	0x0800acad
 800abe0:	0800acad 	.word	0x0800acad
 800abe4:	0800acad 	.word	0x0800acad
 800abe8:	0800acad 	.word	0x0800acad
 800abec:	0800acad 	.word	0x0800acad
 800abf0:	0800acad 	.word	0x0800acad
 800abf4:	0800acad 	.word	0x0800acad
 800abf8:	0800acad 	.word	0x0800acad
 800abfc:	0800acad 	.word	0x0800acad
 800ac00:	0800acad 	.word	0x0800acad
 800ac04:	0800acad 	.word	0x0800acad
 800ac08:	0800acad 	.word	0x0800acad
 800ac0c:	0800acad 	.word	0x0800acad
 800ac10:	0800acad 	.word	0x0800acad
 800ac14:	0800acad 	.word	0x0800acad
 800ac18:	0800acad 	.word	0x0800acad
 800ac1c:	0800acad 	.word	0x0800acad
 800ac20:	0800acad 	.word	0x0800acad
 800ac24:	0800acad 	.word	0x0800acad
 800ac28:	0800acad 	.word	0x0800acad
 800ac2c:	0800acad 	.word	0x0800acad
 800ac30:	0800acad 	.word	0x0800acad
 800ac34:	0800acad 	.word	0x0800acad
 800ac38:	0800acad 	.word	0x0800acad
 800ac3c:	0800acad 	.word	0x0800acad
 800ac40:	0800acad 	.word	0x0800acad
 800ac44:	0800aca5 	.word	0x0800aca5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac48:	f7fd f89a 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 800ac4c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac4e:	e033      	b.n	800acb8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac50:	f7fd f8ac 	bl	8007dac <HAL_RCC_GetPCLK2Freq>
 800ac54:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac56:	e02f      	b.n	800acb8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac58:	f107 0314 	add.w	r3, r7, #20
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fe fa79 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac66:	e027      	b.n	800acb8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac68:	f107 0308 	add.w	r3, r7, #8
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fe fbbd 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac76:	e01f      	b.n	800acb8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac78:	4b2b      	ldr	r3, [pc, #172]	; (800ad28 <UART_SetConfig+0x94c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0320 	and.w	r3, r3, #32
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d009      	beq.n	800ac98 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac84:	4b28      	ldr	r3, [pc, #160]	; (800ad28 <UART_SetConfig+0x94c>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	08db      	lsrs	r3, r3, #3
 800ac8a:	f003 0303 	and.w	r3, r3, #3
 800ac8e:	4a27      	ldr	r2, [pc, #156]	; (800ad2c <UART_SetConfig+0x950>)
 800ac90:	fa22 f303 	lsr.w	r3, r2, r3
 800ac94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac96:	e00f      	b.n	800acb8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800ac98:	4b24      	ldr	r3, [pc, #144]	; (800ad2c <UART_SetConfig+0x950>)
 800ac9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac9c:	e00c      	b.n	800acb8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac9e:	4b24      	ldr	r3, [pc, #144]	; (800ad30 <UART_SetConfig+0x954>)
 800aca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aca2:	e009      	b.n	800acb8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acaa:	e005      	b.n	800acb8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800acac:	2300      	movs	r3, #0
 800acae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800acb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f000 8121 	beq.w	800af02 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc4:	4a17      	ldr	r2, [pc, #92]	; (800ad24 <UART_SetConfig+0x948>)
 800acc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acca:	461a      	mov	r2, r3
 800accc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acce:	fbb3 f3f2 	udiv	r3, r3, r2
 800acd2:	005a      	lsls	r2, r3, #1
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	085b      	lsrs	r3, r3, #1
 800acda:	441a      	add	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acea:	2b0f      	cmp	r3, #15
 800acec:	d916      	bls.n	800ad1c <UART_SetConfig+0x940>
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acf4:	d212      	bcs.n	800ad1c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	f023 030f 	bic.w	r3, r3, #15
 800acfe:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad02:	085b      	lsrs	r3, r3, #1
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	f003 0307 	and.w	r3, r3, #7
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ad18:	60da      	str	r2, [r3, #12]
 800ad1a:	e0f2      	b.n	800af02 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ad22:	e0ee      	b.n	800af02 <UART_SetConfig+0xb26>
 800ad24:	08018748 	.word	0x08018748
 800ad28:	58024400 	.word	0x58024400
 800ad2c:	03d09000 	.word	0x03d09000
 800ad30:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad38:	2b40      	cmp	r3, #64	; 0x40
 800ad3a:	f200 80b7 	bhi.w	800aeac <UART_SetConfig+0xad0>
 800ad3e:	a201      	add	r2, pc, #4	; (adr r2, 800ad44 <UART_SetConfig+0x968>)
 800ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad44:	0800ae49 	.word	0x0800ae49
 800ad48:	0800ae51 	.word	0x0800ae51
 800ad4c:	0800aead 	.word	0x0800aead
 800ad50:	0800aead 	.word	0x0800aead
 800ad54:	0800ae59 	.word	0x0800ae59
 800ad58:	0800aead 	.word	0x0800aead
 800ad5c:	0800aead 	.word	0x0800aead
 800ad60:	0800aead 	.word	0x0800aead
 800ad64:	0800ae69 	.word	0x0800ae69
 800ad68:	0800aead 	.word	0x0800aead
 800ad6c:	0800aead 	.word	0x0800aead
 800ad70:	0800aead 	.word	0x0800aead
 800ad74:	0800aead 	.word	0x0800aead
 800ad78:	0800aead 	.word	0x0800aead
 800ad7c:	0800aead 	.word	0x0800aead
 800ad80:	0800aead 	.word	0x0800aead
 800ad84:	0800ae79 	.word	0x0800ae79
 800ad88:	0800aead 	.word	0x0800aead
 800ad8c:	0800aead 	.word	0x0800aead
 800ad90:	0800aead 	.word	0x0800aead
 800ad94:	0800aead 	.word	0x0800aead
 800ad98:	0800aead 	.word	0x0800aead
 800ad9c:	0800aead 	.word	0x0800aead
 800ada0:	0800aead 	.word	0x0800aead
 800ada4:	0800aead 	.word	0x0800aead
 800ada8:	0800aead 	.word	0x0800aead
 800adac:	0800aead 	.word	0x0800aead
 800adb0:	0800aead 	.word	0x0800aead
 800adb4:	0800aead 	.word	0x0800aead
 800adb8:	0800aead 	.word	0x0800aead
 800adbc:	0800aead 	.word	0x0800aead
 800adc0:	0800aead 	.word	0x0800aead
 800adc4:	0800ae9f 	.word	0x0800ae9f
 800adc8:	0800aead 	.word	0x0800aead
 800adcc:	0800aead 	.word	0x0800aead
 800add0:	0800aead 	.word	0x0800aead
 800add4:	0800aead 	.word	0x0800aead
 800add8:	0800aead 	.word	0x0800aead
 800addc:	0800aead 	.word	0x0800aead
 800ade0:	0800aead 	.word	0x0800aead
 800ade4:	0800aead 	.word	0x0800aead
 800ade8:	0800aead 	.word	0x0800aead
 800adec:	0800aead 	.word	0x0800aead
 800adf0:	0800aead 	.word	0x0800aead
 800adf4:	0800aead 	.word	0x0800aead
 800adf8:	0800aead 	.word	0x0800aead
 800adfc:	0800aead 	.word	0x0800aead
 800ae00:	0800aead 	.word	0x0800aead
 800ae04:	0800aead 	.word	0x0800aead
 800ae08:	0800aead 	.word	0x0800aead
 800ae0c:	0800aead 	.word	0x0800aead
 800ae10:	0800aead 	.word	0x0800aead
 800ae14:	0800aead 	.word	0x0800aead
 800ae18:	0800aead 	.word	0x0800aead
 800ae1c:	0800aead 	.word	0x0800aead
 800ae20:	0800aead 	.word	0x0800aead
 800ae24:	0800aead 	.word	0x0800aead
 800ae28:	0800aead 	.word	0x0800aead
 800ae2c:	0800aead 	.word	0x0800aead
 800ae30:	0800aead 	.word	0x0800aead
 800ae34:	0800aead 	.word	0x0800aead
 800ae38:	0800aead 	.word	0x0800aead
 800ae3c:	0800aead 	.word	0x0800aead
 800ae40:	0800aead 	.word	0x0800aead
 800ae44:	0800aea5 	.word	0x0800aea5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae48:	f7fc ff9a 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 800ae4c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae4e:	e033      	b.n	800aeb8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae50:	f7fc ffac 	bl	8007dac <HAL_RCC_GetPCLK2Freq>
 800ae54:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae56:	e02f      	b.n	800aeb8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae58:	f107 0314 	add.w	r3, r7, #20
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fe f979 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae66:	e027      	b.n	800aeb8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae68:	f107 0308 	add.w	r3, r7, #8
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fe fabd 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae76:	e01f      	b.n	800aeb8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae78:	4b2c      	ldr	r3, [pc, #176]	; (800af2c <UART_SetConfig+0xb50>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 0320 	and.w	r3, r3, #32
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d009      	beq.n	800ae98 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae84:	4b29      	ldr	r3, [pc, #164]	; (800af2c <UART_SetConfig+0xb50>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	08db      	lsrs	r3, r3, #3
 800ae8a:	f003 0303 	and.w	r3, r3, #3
 800ae8e:	4a28      	ldr	r2, [pc, #160]	; (800af30 <UART_SetConfig+0xb54>)
 800ae90:	fa22 f303 	lsr.w	r3, r2, r3
 800ae94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae96:	e00f      	b.n	800aeb8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800ae98:	4b25      	ldr	r3, [pc, #148]	; (800af30 <UART_SetConfig+0xb54>)
 800ae9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae9c:	e00c      	b.n	800aeb8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae9e:	4b25      	ldr	r3, [pc, #148]	; (800af34 <UART_SetConfig+0xb58>)
 800aea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aea2:	e009      	b.n	800aeb8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aeaa:	e005      	b.n	800aeb8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800aeac:	2300      	movs	r3, #0
 800aeae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aeb6:	bf00      	nop
    }

    if (pclk != 0U)
 800aeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d021      	beq.n	800af02 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec2:	4a1d      	ldr	r2, [pc, #116]	; (800af38 <UART_SetConfig+0xb5c>)
 800aec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aec8:	461a      	mov	r2, r3
 800aeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aecc:	fbb3 f2f2 	udiv	r2, r3, r2
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	085b      	lsrs	r3, r3, #1
 800aed6:	441a      	add	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	2b0f      	cmp	r3, #15
 800aee8:	d908      	bls.n	800aefc <UART_SetConfig+0xb20>
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aef0:	d204      	bcs.n	800aefc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aef8:	60da      	str	r2, [r3, #12]
 800aefa:	e002      	b.n	800af02 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800af1e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800af22:	4618      	mov	r0, r3
 800af24:	3738      	adds	r7, #56	; 0x38
 800af26:	46bd      	mov	sp, r7
 800af28:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800af2c:	58024400 	.word	0x58024400
 800af30:	03d09000 	.word	0x03d09000
 800af34:	003d0900 	.word	0x003d0900
 800af38:	08018748 	.word	0x08018748

0800af3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af48:	f003 0301 	and.w	r3, r3, #1
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d00a      	beq.n	800af66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	430a      	orrs	r2, r1
 800af64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6a:	f003 0302 	and.w	r3, r3, #2
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00a      	beq.n	800af88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	430a      	orrs	r2, r1
 800af86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8c:	f003 0304 	and.w	r3, r3, #4
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00a      	beq.n	800afaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	430a      	orrs	r2, r1
 800afa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afae:	f003 0308 	and.w	r3, r3, #8
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00a      	beq.n	800afcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	430a      	orrs	r2, r1
 800afca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd0:	f003 0310 	and.w	r3, r3, #16
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00a      	beq.n	800afee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	430a      	orrs	r2, r1
 800afec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff2:	f003 0320 	and.w	r3, r3, #32
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00a      	beq.n	800b010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	430a      	orrs	r2, r1
 800b00e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d01a      	beq.n	800b052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	430a      	orrs	r2, r1
 800b030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b03a:	d10a      	bne.n	800b052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	430a      	orrs	r2, r1
 800b050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00a      	beq.n	800b074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	430a      	orrs	r2, r1
 800b072:	605a      	str	r2, [r3, #4]
  }
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af02      	add	r7, sp, #8
 800b086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b090:	f7f6 fd62 	bl	8001b58 <HAL_GetTick>
 800b094:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0308 	and.w	r3, r3, #8
 800b0a0:	2b08      	cmp	r3, #8
 800b0a2:	d10e      	bne.n	800b0c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f82c 	bl	800b110 <UART_WaitOnFlagUntilTimeout>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e022      	b.n	800b108 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0304 	and.w	r3, r3, #4
 800b0cc:	2b04      	cmp	r3, #4
 800b0ce:	d10e      	bne.n	800b0ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f816 	bl	800b110 <UART_WaitOnFlagUntilTimeout>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0ea:	2303      	movs	r3, #3
 800b0ec:	e00c      	b.n	800b108 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2220      	movs	r2, #32
 800b0fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	603b      	str	r3, [r7, #0]
 800b11c:	4613      	mov	r3, r2
 800b11e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b120:	e062      	b.n	800b1e8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b128:	d05e      	beq.n	800b1e8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b12a:	f7f6 fd15 	bl	8001b58 <HAL_GetTick>
 800b12e:	4602      	mov	r2, r0
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	429a      	cmp	r2, r3
 800b138:	d302      	bcc.n	800b140 <UART_WaitOnFlagUntilTimeout+0x30>
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d11d      	bne.n	800b17c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b14e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	689a      	ldr	r2, [r3, #8]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f022 0201 	bic.w	r2, r2, #1
 800b15e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2220      	movs	r2, #32
 800b164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2220      	movs	r2, #32
 800b16c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b178:	2303      	movs	r3, #3
 800b17a:	e045      	b.n	800b208 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0304 	and.w	r3, r3, #4
 800b186:	2b00      	cmp	r3, #0
 800b188:	d02e      	beq.n	800b1e8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69db      	ldr	r3, [r3, #28]
 800b190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b198:	d126      	bne.n	800b1e8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b1b2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	689a      	ldr	r2, [r3, #8]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f022 0201 	bic.w	r2, r2, #1
 800b1c2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e00f      	b.n	800b208 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	69da      	ldr	r2, [r3, #28]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	bf0c      	ite	eq
 800b1f8:	2301      	moveq	r3, #1
 800b1fa:	2300      	movne	r3, #0
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	461a      	mov	r2, r3
 800b200:	79fb      	ldrb	r3, [r7, #7]
 800b202:	429a      	cmp	r2, r3
 800b204:	d08d      	beq.n	800b122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d101      	bne.n	800b226 <HAL_UARTEx_DisableFifoMode+0x16>
 800b222:	2302      	movs	r3, #2
 800b224:	e027      	b.n	800b276 <HAL_UARTEx_DisableFifoMode+0x66>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2224      	movs	r2, #36	; 0x24
 800b232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f022 0201 	bic.w	r2, r2, #1
 800b24c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b254:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2220      	movs	r2, #32
 800b268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b084      	sub	sp, #16
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b292:	2b01      	cmp	r3, #1
 800b294:	d101      	bne.n	800b29a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b296:	2302      	movs	r3, #2
 800b298:	e02d      	b.n	800b2f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2201      	movs	r2, #1
 800b29e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2224      	movs	r2, #36	; 0x24
 800b2a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f022 0201 	bic.w	r2, r2, #1
 800b2c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	683a      	ldr	r2, [r7, #0]
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f850 	bl	800b37c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2220      	movs	r2, #32
 800b2e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d101      	bne.n	800b316 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b312:	2302      	movs	r3, #2
 800b314:	e02d      	b.n	800b372 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2201      	movs	r2, #1
 800b31a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2224      	movs	r2, #36	; 0x24
 800b322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f022 0201 	bic.w	r2, r2, #1
 800b33c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	683a      	ldr	r2, [r7, #0]
 800b34e:	430a      	orrs	r2, r1
 800b350:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 f812 	bl	800b37c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2220      	movs	r2, #32
 800b364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
	...

0800b37c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b089      	sub	sp, #36	; 0x24
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b384:	4a2f      	ldr	r2, [pc, #188]	; (800b444 <UARTEx_SetNbDataToProcess+0xc8>)
 800b386:	f107 0314 	add.w	r3, r7, #20
 800b38a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b38e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b392:	4a2d      	ldr	r2, [pc, #180]	; (800b448 <UARTEx_SetNbDataToProcess+0xcc>)
 800b394:	f107 030c 	add.w	r3, r7, #12
 800b398:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b39c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d108      	bne.n	800b3ba <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b3b8:	e03d      	b.n	800b436 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b3ba:	2310      	movs	r3, #16
 800b3bc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b3be:	2310      	movs	r3, #16
 800b3c0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	0e5b      	lsrs	r3, r3, #25
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	f003 0307 	and.w	r3, r3, #7
 800b3d0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	0f5b      	lsrs	r3, r3, #29
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	f003 0307 	and.w	r3, r3, #7
 800b3e0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b3e2:	7fbb      	ldrb	r3, [r7, #30]
 800b3e4:	7f3a      	ldrb	r2, [r7, #28]
 800b3e6:	f107 0120 	add.w	r1, r7, #32
 800b3ea:	440a      	add	r2, r1
 800b3ec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b3f0:	fb02 f303 	mul.w	r3, r2, r3
 800b3f4:	7f3a      	ldrb	r2, [r7, #28]
 800b3f6:	f107 0120 	add.w	r1, r7, #32
 800b3fa:	440a      	add	r2, r1
 800b3fc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b400:	fb93 f3f2 	sdiv	r3, r3, r2
 800b404:	b29a      	uxth	r2, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b40c:	7ffb      	ldrb	r3, [r7, #31]
 800b40e:	7f7a      	ldrb	r2, [r7, #29]
 800b410:	f107 0120 	add.w	r1, r7, #32
 800b414:	440a      	add	r2, r1
 800b416:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b41a:	fb02 f303 	mul.w	r3, r2, r3
 800b41e:	7f7a      	ldrb	r2, [r7, #29]
 800b420:	f107 0120 	add.w	r1, r7, #32
 800b424:	440a      	add	r2, r1
 800b426:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b42a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b42e:	b29a      	uxth	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b436:	bf00      	nop
 800b438:	3724      	adds	r7, #36	; 0x24
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	08018610 	.word	0x08018610
 800b448:	08018618 	.word	0x08018618

0800b44c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b44c:	b084      	sub	sp, #16
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	f107 001c 	add.w	r0, r7, #28
 800b45a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b460:	2b01      	cmp	r3, #1
 800b462:	d120      	bne.n	800b4a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68da      	ldr	r2, [r3, #12]
 800b474:	4b25      	ldr	r3, [pc, #148]	; (800b50c <USB_CoreInit+0xc0>)
 800b476:	4013      	ands	r3, r2
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d105      	bne.n	800b49a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa4c 	bl	800b938 <USB_CoreReset>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	73fb      	strb	r3, [r7, #15]
 800b4a4:	e01a      	b.n	800b4dc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fa40 	bl	800b938 <USB_CoreReset>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d106      	bne.n	800b4d0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	639a      	str	r2, [r3, #56]	; 0x38
 800b4ce:	e005      	b.n	800b4dc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d10b      	bne.n	800b4fa <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	f043 0206 	orr.w	r2, r3, #6
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	f043 0220 	orr.w	r2, r3, #32
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b506:	b004      	add	sp, #16
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	ffbdffbf 	.word	0xffbdffbf

0800b510 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	f023 0201 	bic.w	r2, r3, #1
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b082      	sub	sp, #8
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	460b      	mov	r3, r1
 800b53c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b54a:	78fb      	ldrb	r3, [r7, #3]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d106      	bne.n	800b55e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	60da      	str	r2, [r3, #12]
 800b55c:	e00b      	b.n	800b576 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b55e:	78fb      	ldrb	r3, [r7, #3]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d106      	bne.n	800b572 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	60da      	str	r2, [r3, #12]
 800b570:	e001      	b.n	800b576 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e003      	b.n	800b57e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b576:	2032      	movs	r0, #50	; 0x32
 800b578:	f7f6 fafa 	bl	8001b70 <HAL_Delay>

  return HAL_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
	...

0800b588 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b588:	b084      	sub	sp, #16
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b086      	sub	sp, #24
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	613b      	str	r3, [r7, #16]
 800b5a6:	e009      	b.n	800b5bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	3340      	adds	r3, #64	; 0x40
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	613b      	str	r3, [r7, #16]
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	2b0e      	cmp	r3, #14
 800b5c0:	d9f2      	bls.n	800b5a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d11c      	bne.n	800b602 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5d6:	f043 0302 	orr.w	r3, r3, #2
 800b5da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	601a      	str	r2, [r3, #0]
 800b600:	e005      	b.n	800b60e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b606:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b614:	461a      	mov	r2, r3
 800b616:	2300      	movs	r3, #0
 800b618:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b620:	4619      	mov	r1, r3
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b628:	461a      	mov	r2, r3
 800b62a:	680b      	ldr	r3, [r1, #0]
 800b62c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b630:	2b01      	cmp	r3, #1
 800b632:	d10c      	bne.n	800b64e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b636:	2b00      	cmp	r3, #0
 800b638:	d104      	bne.n	800b644 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b63a:	2100      	movs	r1, #0
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f949 	bl	800b8d4 <USB_SetDevSpeed>
 800b642:	e008      	b.n	800b656 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b644:	2101      	movs	r1, #1
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f944 	bl	800b8d4 <USB_SetDevSpeed>
 800b64c:	e003      	b.n	800b656 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b64e:	2103      	movs	r1, #3
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f93f 	bl	800b8d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b656:	2110      	movs	r1, #16
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f8f3 	bl	800b844 <USB_FlushTxFifo>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f911 	bl	800b890 <USB_FlushRxFifo>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b67e:	461a      	mov	r2, r3
 800b680:	2300      	movs	r3, #0
 800b682:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b68a:	461a      	mov	r2, r3
 800b68c:	2300      	movs	r3, #0
 800b68e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b696:	461a      	mov	r2, r3
 800b698:	2300      	movs	r3, #0
 800b69a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b69c:	2300      	movs	r3, #0
 800b69e:	613b      	str	r3, [r7, #16]
 800b6a0:	e043      	b.n	800b72a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	015a      	lsls	r2, r3, #5
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6b8:	d118      	bne.n	800b6ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10a      	bne.n	800b6d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	015a      	lsls	r2, r3, #5
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	e013      	b.n	800b6fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	015a      	lsls	r2, r3, #5
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4413      	add	r3, r2
 800b6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b6e8:	6013      	str	r3, [r2, #0]
 800b6ea:	e008      	b.n	800b6fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	015a      	lsls	r2, r3, #5
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	015a      	lsls	r2, r3, #5
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	4413      	add	r3, r2
 800b706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b70a:	461a      	mov	r2, r3
 800b70c:	2300      	movs	r3, #0
 800b70e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4413      	add	r3, r2
 800b718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b71c:	461a      	mov	r2, r3
 800b71e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b722:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	3301      	adds	r3, #1
 800b728:	613b      	str	r3, [r7, #16]
 800b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d3b7      	bcc.n	800b6a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b732:	2300      	movs	r3, #0
 800b734:	613b      	str	r3, [r7, #16]
 800b736:	e043      	b.n	800b7c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	015a      	lsls	r2, r3, #5
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	4413      	add	r3, r2
 800b740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b74a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b74e:	d118      	bne.n	800b782 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10a      	bne.n	800b76c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	015a      	lsls	r2, r3, #5
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	4413      	add	r3, r2
 800b75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b762:	461a      	mov	r2, r3
 800b764:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b768:	6013      	str	r3, [r2, #0]
 800b76a:	e013      	b.n	800b794 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	015a      	lsls	r2, r3, #5
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	4413      	add	r3, r2
 800b774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b778:	461a      	mov	r2, r3
 800b77a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b77e:	6013      	str	r3, [r2, #0]
 800b780:	e008      	b.n	800b794 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	015a      	lsls	r2, r3, #5
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	4413      	add	r3, r2
 800b78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78e:	461a      	mov	r2, r3
 800b790:	2300      	movs	r3, #0
 800b792:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	015a      	lsls	r2, r3, #5
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	4413      	add	r3, r2
 800b79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	015a      	lsls	r2, r3, #5
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b7b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	613b      	str	r3, [r7, #16]
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d3b7      	bcc.n	800b738 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ce:	691b      	ldr	r3, [r3, #16]
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b7e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d105      	bne.n	800b7fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	f043 0210 	orr.w	r2, r3, #16
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	699a      	ldr	r2, [r3, #24]
 800b800:	4b0e      	ldr	r3, [pc, #56]	; (800b83c <USB_DevInit+0x2b4>)
 800b802:	4313      	orrs	r3, r2
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d005      	beq.n	800b81a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	f043 0208 	orr.w	r2, r3, #8
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d105      	bne.n	800b82c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	699a      	ldr	r2, [r3, #24]
 800b824:	4b06      	ldr	r3, [pc, #24]	; (800b840 <USB_DevInit+0x2b8>)
 800b826:	4313      	orrs	r3, r2
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b838:	b004      	add	sp, #16
 800b83a:	4770      	bx	lr
 800b83c:	803c3800 	.word	0x803c3800
 800b840:	40000004 	.word	0x40000004

0800b844 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b84e:	2300      	movs	r3, #0
 800b850:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	019b      	lsls	r3, r3, #6
 800b856:	f043 0220 	orr.w	r2, r3, #32
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	3301      	adds	r3, #1
 800b862:	60fb      	str	r3, [r7, #12]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	4a09      	ldr	r2, [pc, #36]	; (800b88c <USB_FlushTxFifo+0x48>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d901      	bls.n	800b870 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b86c:	2303      	movs	r3, #3
 800b86e:	e006      	b.n	800b87e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	f003 0320 	and.w	r3, r3, #32
 800b878:	2b20      	cmp	r3, #32
 800b87a:	d0f0      	beq.n	800b85e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3714      	adds	r7, #20
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	00030d40 	.word	0x00030d40

0800b890 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2210      	movs	r2, #16
 800b8a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	4a09      	ldr	r2, [pc, #36]	; (800b8d0 <USB_FlushRxFifo+0x40>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d901      	bls.n	800b8b4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	e006      	b.n	800b8c2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	f003 0310 	and.w	r3, r3, #16
 800b8bc:	2b10      	cmp	r3, #16
 800b8be:	d0f0      	beq.n	800b8a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3714      	adds	r7, #20
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	00030d40 	.word	0x00030d40

0800b8d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	78fb      	ldrb	r3, [r7, #3]
 800b8ee:	68f9      	ldr	r1, [r7, #12]
 800b8f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b084      	sub	sp, #16
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b920:	f043 0302 	orr.w	r3, r3, #2
 800b924:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b926:	2003      	movs	r0, #3
 800b928:	f7f6 f922 	bl	8001b70 <HAL_Delay>

  return HAL_OK;
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
	...

0800b938 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b940:	2300      	movs	r3, #0
 800b942:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	3301      	adds	r3, #1
 800b948:	60fb      	str	r3, [r7, #12]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	4a13      	ldr	r2, [pc, #76]	; (800b99c <USB_CoreReset+0x64>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d901      	bls.n	800b956 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b952:	2303      	movs	r3, #3
 800b954:	e01b      	b.n	800b98e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	daf2      	bge.n	800b944 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b95e:	2300      	movs	r3, #0
 800b960:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	f043 0201 	orr.w	r2, r3, #1
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3301      	adds	r3, #1
 800b972:	60fb      	str	r3, [r7, #12]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	4a09      	ldr	r2, [pc, #36]	; (800b99c <USB_CoreReset+0x64>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d901      	bls.n	800b980 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b97c:	2303      	movs	r3, #3
 800b97e:	e006      	b.n	800b98e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	f003 0301 	and.w	r3, r3, #1
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d0f0      	beq.n	800b96e <USB_CoreReset+0x36>

  return HAL_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	00030d40 	.word	0x00030d40

0800b9a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b08a      	sub	sp, #40	; 0x28
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800b9ac:	f001 fc26 	bl	800d1fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800b9b0:	4b5c      	ldr	r3, [pc, #368]	; (800bb24 <pvPortMalloc+0x184>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800b9b8:	f000 f924 	bl	800bc04 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9bc:	4b5a      	ldr	r3, [pc, #360]	; (800bb28 <pvPortMalloc+0x188>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f040 8095 	bne.w	800baf4 <pvPortMalloc+0x154>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d01e      	beq.n	800ba0e <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 800b9d0:	2208      	movs	r2, #8
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f003 0307 	and.w	r3, r3, #7
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d015      	beq.n	800ba0e <pvPortMalloc+0x6e>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f023 0307 	bic.w	r3, r3, #7
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f003 0307 	and.w	r3, r3, #7
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00b      	beq.n	800ba0e <pvPortMalloc+0x6e>
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	b672      	cpsid	i
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	b662      	cpsie	i
 800ba0a:	617b      	str	r3, [r7, #20]
 800ba0c:	e7fe      	b.n	800ba0c <pvPortMalloc+0x6c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d06f      	beq.n	800baf4 <pvPortMalloc+0x154>
 800ba14:	4b45      	ldr	r3, [pc, #276]	; (800bb2c <pvPortMalloc+0x18c>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d86a      	bhi.n	800baf4 <pvPortMalloc+0x154>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 800ba1e:	4b44      	ldr	r3, [pc, #272]	; (800bb30 <pvPortMalloc+0x190>)
 800ba20:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800ba22:	4b43      	ldr	r3, [pc, #268]	; (800bb30 <pvPortMalloc+0x190>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba28:	e004      	b.n	800ba34 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d903      	bls.n	800ba46 <pvPortMalloc+0xa6>
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1f1      	bne.n	800ba2a <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 800ba46:	4b37      	ldr	r3, [pc, #220]	; (800bb24 <pvPortMalloc+0x184>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d051      	beq.n	800baf4 <pvPortMalloc+0x154>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba50:	6a3b      	ldr	r3, [r7, #32]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2208      	movs	r2, #8
 800ba56:	4413      	add	r3, r2
 800ba58:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	6a3b      	ldr	r3, [r7, #32]
 800ba60:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	1ad2      	subs	r2, r2, r3
 800ba6a:	2308      	movs	r3, #8
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d920      	bls.n	800bab4 <pvPortMalloc+0x114>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4413      	add	r3, r2
 800ba78:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	f003 0307 	and.w	r3, r3, #7
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00b      	beq.n	800ba9c <pvPortMalloc+0xfc>
 800ba84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba88:	b672      	cpsid	i
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	b662      	cpsie	i
 800ba98:	613b      	str	r3, [r7, #16]
 800ba9a:	e7fe      	b.n	800ba9a <pvPortMalloc+0xfa>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	1ad2      	subs	r2, r2, r3
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800baa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800baae:	69b8      	ldr	r0, [r7, #24]
 800bab0:	f000 f90a 	bl	800bcc8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bab4:	4b1d      	ldr	r3, [pc, #116]	; (800bb2c <pvPortMalloc+0x18c>)
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	4a1b      	ldr	r2, [pc, #108]	; (800bb2c <pvPortMalloc+0x18c>)
 800bac0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bac2:	4b1a      	ldr	r3, [pc, #104]	; (800bb2c <pvPortMalloc+0x18c>)
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	4b1b      	ldr	r3, [pc, #108]	; (800bb34 <pvPortMalloc+0x194>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d203      	bcs.n	800bad6 <pvPortMalloc+0x136>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bace:	4b17      	ldr	r3, [pc, #92]	; (800bb2c <pvPortMalloc+0x18c>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a18      	ldr	r2, [pc, #96]	; (800bb34 <pvPortMalloc+0x194>)
 800bad4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	4b13      	ldr	r3, [pc, #76]	; (800bb28 <pvPortMalloc+0x188>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	431a      	orrs	r2, r3
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	2200      	movs	r2, #0
 800bae8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800baea:	4b13      	ldr	r3, [pc, #76]	; (800bb38 <pvPortMalloc+0x198>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3301      	adds	r3, #1
 800baf0:	4a11      	ldr	r2, [pc, #68]	; (800bb38 <pvPortMalloc+0x198>)
 800baf2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800baf4:	f001 fb90 	bl	800d218 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	f003 0307 	and.w	r3, r3, #7
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00b      	beq.n	800bb1a <pvPortMalloc+0x17a>
 800bb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb06:	b672      	cpsid	i
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	b662      	cpsie	i
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	e7fe      	b.n	800bb18 <pvPortMalloc+0x178>
    return pvReturn;
 800bb1a:	69fb      	ldr	r3, [r7, #28]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3728      	adds	r7, #40	; 0x28
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	240050cc 	.word	0x240050cc
 800bb28:	240050e0 	.word	0x240050e0
 800bb2c:	240050d0 	.word	0x240050d0
 800bb30:	240050c4 	.word	0x240050c4
 800bb34:	240050d4 	.word	0x240050d4
 800bb38:	240050d8 	.word	0x240050d8

0800bb3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d04f      	beq.n	800bbee <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800bb4e:	2308      	movs	r3, #8
 800bb50:	425b      	negs	r3, r3
 800bb52:	697a      	ldr	r2, [r7, #20]
 800bb54:	4413      	add	r3, r2
 800bb56:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	4b25      	ldr	r3, [pc, #148]	; (800bbf8 <vPortFree+0xbc>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4013      	ands	r3, r2
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10b      	bne.n	800bb82 <vPortFree+0x46>
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	b672      	cpsid	i
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	b662      	cpsie	i
 800bb7e:	60fb      	str	r3, [r7, #12]
 800bb80:	e7fe      	b.n	800bb80 <vPortFree+0x44>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00b      	beq.n	800bba2 <vPortFree+0x66>
 800bb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8e:	b672      	cpsid	i
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	b662      	cpsie	i
 800bb9e:	60bb      	str	r3, [r7, #8]
 800bba0:	e7fe      	b.n	800bba0 <vPortFree+0x64>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	4b14      	ldr	r3, [pc, #80]	; (800bbf8 <vPortFree+0xbc>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4013      	ands	r3, r2
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01e      	beq.n	800bbee <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d11a      	bne.n	800bbee <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	4b0e      	ldr	r3, [pc, #56]	; (800bbf8 <vPortFree+0xbc>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	43db      	mvns	r3, r3
 800bbc2:	401a      	ands	r2, r3
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800bbc8:	f001 fb18 	bl	800d1fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	685a      	ldr	r2, [r3, #4]
 800bbd0:	4b0a      	ldr	r3, [pc, #40]	; (800bbfc <vPortFree+0xc0>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	4a09      	ldr	r2, [pc, #36]	; (800bbfc <vPortFree+0xc0>)
 800bbd8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bbda:	6938      	ldr	r0, [r7, #16]
 800bbdc:	f000 f874 	bl	800bcc8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800bbe0:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <vPortFree+0xc4>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	4a06      	ldr	r2, [pc, #24]	; (800bc00 <vPortFree+0xc4>)
 800bbe8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800bbea:	f001 fb15 	bl	800d218 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800bbee:	bf00      	nop
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	240050e0 	.word	0x240050e0
 800bbfc:	240050d0 	.word	0x240050d0
 800bc00:	240050dc 	.word	0x240050dc

0800bc04 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc0a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800bc0e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800bc10:	4b27      	ldr	r3, [pc, #156]	; (800bcb0 <prvHeapInit+0xac>)
 800bc12:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f003 0307 	and.w	r3, r3, #7
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00c      	beq.n	800bc38 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	3307      	adds	r3, #7
 800bc22:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f023 0307 	bic.w	r3, r3, #7
 800bc2a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc2c:	68ba      	ldr	r2, [r7, #8]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	4a1f      	ldr	r2, [pc, #124]	; (800bcb0 <prvHeapInit+0xac>)
 800bc34:	4413      	add	r3, r2
 800bc36:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc3c:	4a1d      	ldr	r2, [pc, #116]	; (800bcb4 <prvHeapInit+0xb0>)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800bc42:	4b1c      	ldr	r3, [pc, #112]	; (800bcb4 <prvHeapInit+0xb0>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800bc50:	2208      	movs	r2, #8
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	1a9b      	subs	r3, r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f023 0307 	bic.w	r3, r3, #7
 800bc5e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4a15      	ldr	r2, [pc, #84]	; (800bcb8 <prvHeapInit+0xb4>)
 800bc64:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800bc66:	4b14      	ldr	r3, [pc, #80]	; (800bcb8 <prvHeapInit+0xb4>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800bc6e:	4b12      	ldr	r3, [pc, #72]	; (800bcb8 <prvHeapInit+0xb4>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2200      	movs	r2, #0
 800bc74:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	1ad2      	subs	r2, r2, r3
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc84:	4b0c      	ldr	r3, [pc, #48]	; (800bcb8 <prvHeapInit+0xb4>)
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	4a0a      	ldr	r2, [pc, #40]	; (800bcbc <prvHeapInit+0xb8>)
 800bc92:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	4a09      	ldr	r2, [pc, #36]	; (800bcc0 <prvHeapInit+0xbc>)
 800bc9a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc9c:	4b09      	ldr	r3, [pc, #36]	; (800bcc4 <prvHeapInit+0xc0>)
 800bc9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bca2:	601a      	str	r2, [r3, #0]
}
 800bca4:	bf00      	nop
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	240000c4 	.word	0x240000c4
 800bcb4:	240050c4 	.word	0x240050c4
 800bcb8:	240050cc 	.word	0x240050cc
 800bcbc:	240050d4 	.word	0x240050d4
 800bcc0:	240050d0 	.word	0x240050d0
 800bcc4:	240050e0 	.word	0x240050e0

0800bcc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bcd0:	4b28      	ldr	r3, [pc, #160]	; (800bd74 <prvInsertBlockIntoFreeList+0xac>)
 800bcd2:	60fb      	str	r3, [r7, #12]
 800bcd4:	e002      	b.n	800bcdc <prvInsertBlockIntoFreeList+0x14>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	60fb      	str	r3, [r7, #12]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d8f7      	bhi.n	800bcd6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d108      	bne.n	800bd0a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	441a      	add	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	441a      	add	r2, r3
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d118      	bne.n	800bd50 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	4b15      	ldr	r3, [pc, #84]	; (800bd78 <prvInsertBlockIntoFreeList+0xb0>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d00d      	beq.n	800bd46 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	685a      	ldr	r2, [r3, #4]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	441a      	add	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	e008      	b.n	800bd58 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd46:	4b0c      	ldr	r3, [pc, #48]	; (800bd78 <prvInsertBlockIntoFreeList+0xb0>)
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	601a      	str	r2, [r3, #0]
 800bd4e:	e003      	b.n	800bd58 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d002      	beq.n	800bd66 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800bd66:	bf00      	nop
 800bd68:	3714      	adds	r7, #20
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	240050c4 	.word	0x240050c4
 800bd78:	240050cc 	.word	0x240050cc

0800bd7c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800bd82:	201c      	movs	r0, #28
 800bd84:	f7ff fe0c 	bl	800b9a0 <pvPortMalloc>
 800bd88:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d007      	beq.n	800bda0 <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	3304      	adds	r3, #4
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f000 f9f3 	bl	800c186 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 800bda0:	687b      	ldr	r3, [r7, #4]
    }
 800bda2:	4618      	mov	r0, r3
 800bda4:	3708      	adds	r7, #8
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
	...

0800bdac <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b090      	sub	sp, #64	; 0x40
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
 800bdb8:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	637b      	str	r3, [r7, #52]	; 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	63bb      	str	r3, [r7, #56]	; 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10b      	bne.n	800bde4 <xEventGroupWaitBits+0x38>
 800bdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd0:	b672      	cpsid	i
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	b662      	cpsie	i
 800bde0:	623b      	str	r3, [r7, #32]
 800bde2:	e7fe      	b.n	800bde2 <xEventGroupWaitBits+0x36>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00b      	beq.n	800be06 <xEventGroupWaitBits+0x5a>
 800bdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf2:	b672      	cpsid	i
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	b662      	cpsie	i
 800be02:	61fb      	str	r3, [r7, #28]
 800be04:	e7fe      	b.n	800be04 <xEventGroupWaitBits+0x58>
    configASSERT( uxBitsToWaitFor != 0 );
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10b      	bne.n	800be24 <xEventGroupWaitBits+0x78>
 800be0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be10:	b672      	cpsid	i
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	b662      	cpsie	i
 800be20:	61bb      	str	r3, [r7, #24]
 800be22:	e7fe      	b.n	800be22 <xEventGroupWaitBits+0x76>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be24:	f001 fe5a 	bl	800dadc <xTaskGetSchedulerState>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d102      	bne.n	800be34 <xEventGroupWaitBits+0x88>
 800be2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <xEventGroupWaitBits+0x8c>
 800be34:	2301      	movs	r3, #1
 800be36:	e000      	b.n	800be3a <xEventGroupWaitBits+0x8e>
 800be38:	2300      	movs	r3, #0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d10b      	bne.n	800be56 <xEventGroupWaitBits+0xaa>
 800be3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be42:	b672      	cpsid	i
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	b662      	cpsie	i
 800be52:	617b      	str	r3, [r7, #20]
 800be54:	e7fe      	b.n	800be54 <xEventGroupWaitBits+0xa8>
        }
    #endif

    vTaskSuspendAll();
 800be56:	f001 f9d1 	bl	800d1fc <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800be5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800be60:	683a      	ldr	r2, [r7, #0]
 800be62:	68b9      	ldr	r1, [r7, #8]
 800be64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be66:	f000 f96c 	bl	800c142 <prvTestWaitCondition>
 800be6a:	62b8      	str	r0, [r7, #40]	; 0x28

        if( xWaitConditionMet != pdFALSE )
 800be6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00e      	beq.n	800be90 <xEventGroupWaitBits+0xe4>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 800be72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be74:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTicksToWait = ( TickType_t ) 0;
 800be76:	2300      	movs	r3, #0
 800be78:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d028      	beq.n	800bed2 <xEventGroupWaitBits+0x126>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800be80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	43db      	mvns	r3, r3
 800be88:	401a      	ands	r2, r3
 800be8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8c:	601a      	str	r2, [r3, #0]
 800be8e:	e020      	b.n	800bed2 <xEventGroupWaitBits+0x126>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 800be90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be92:	2b00      	cmp	r3, #0
 800be94:	d104      	bne.n	800bea0 <xEventGroupWaitBits+0xf4>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 800be96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be98:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTimeoutOccurred = pdTRUE;
 800be9a:	2301      	movs	r3, #1
 800be9c:	633b      	str	r3, [r7, #48]	; 0x30
 800be9e:	e018      	b.n	800bed2 <xEventGroupWaitBits+0x126>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d003      	beq.n	800beae <xEventGroupWaitBits+0x102>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800bea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800beac:	63bb      	str	r3, [r7, #56]	; 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d003      	beq.n	800bebc <xEventGroupWaitBits+0x110>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800beb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800beba:	63bb      	str	r3, [r7, #56]	; 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800bebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bebe:	1d18      	adds	r0, r3, #4
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec4:	4313      	orrs	r3, r2
 800bec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bec8:	4619      	mov	r1, r3
 800beca:	f001 fb8f 	bl	800d5ec <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	63fb      	str	r3, [r7, #60]	; 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 800bed2:	f001 f9a1 	bl	800d218 <xTaskResumeAll>
 800bed6:	6278      	str	r0, [r7, #36]	; 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 800bed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d031      	beq.n	800bf42 <xEventGroupWaitBits+0x196>
    {
        if( xAlreadyYielded == pdFALSE )
 800bede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d107      	bne.n	800bef4 <xEventGroupWaitBits+0x148>
        {
            portYIELD_WITHIN_API();
 800bee4:	4b19      	ldr	r3, [pc, #100]	; (800bf4c <xEventGroupWaitBits+0x1a0>)
 800bee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 800bef4:	f001 ff92 	bl	800de1c <uxTaskResetEventItemValue>
 800bef8:	63f8      	str	r0, [r7, #60]	; 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800befa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800befc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d11a      	bne.n	800bf3a <xEventGroupWaitBits+0x18e>
        {
            taskENTER_CRITICAL();
 800bf04:	f002 fa42 	bl	800e38c <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 800bf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	68b9      	ldr	r1, [r7, #8]
 800bf12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf14:	f000 f915 	bl	800c142 <prvTestWaitCondition>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d009      	beq.n	800bf32 <xEventGroupWaitBits+0x186>
                {
                    if( xClearOnExit != pdFALSE )
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d006      	beq.n	800bf32 <xEventGroupWaitBits+0x186>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800bf24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	43db      	mvns	r3, r3
 800bf2c:	401a      	ands	r2, r3
 800bf2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf30:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 800bf32:	2301      	movs	r3, #1
 800bf34:	633b      	str	r3, [r7, #48]	; 0x30
            }
            taskEXIT_CRITICAL();
 800bf36:	f002 fa5b 	bl	800e3f0 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800bf3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bf40:	63fb      	str	r3, [r7, #60]	; 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 800bf42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3740      	adds	r7, #64	; 0x40
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	e000ed04 	.word	0xe000ed04

0800bf50 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	617b      	str	r3, [r7, #20]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10b      	bne.n	800bf7c <xEventGroupClearBits+0x2c>
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	b672      	cpsid	i
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
 800bf76:	b662      	cpsie	i
 800bf78:	60fb      	str	r3, [r7, #12]
 800bf7a:	e7fe      	b.n	800bf7a <xEventGroupClearBits+0x2a>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00b      	beq.n	800bf9e <xEventGroupClearBits+0x4e>
 800bf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8a:	b672      	cpsid	i
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	b662      	cpsie	i
 800bf9a:	60bb      	str	r3, [r7, #8]
 800bf9c:	e7fe      	b.n	800bf9c <xEventGroupClearBits+0x4c>

    taskENTER_CRITICAL();
 800bf9e:	f002 f9f5 	bl	800e38c <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	613b      	str	r3, [r7, #16]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	43db      	mvns	r3, r3
 800bfb0:	401a      	ands	r2, r3
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 800bfb6:	f002 fa1b 	bl	800e3f0 <vPortExitCritical>

    return uxReturn;
 800bfba:	693b      	ldr	r3, [r7, #16]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b08e      	sub	sp, #56	; 0x38
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	633b      	str	r3, [r7, #48]	; 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xMatchFound = pdFALSE;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10b      	bne.n	800bff8 <xEventGroupSetBits+0x34>
 800bfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe4:	b672      	cpsid	i
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	b662      	cpsie	i
 800bff4:	613b      	str	r3, [r7, #16]
 800bff6:	e7fe      	b.n	800bff6 <xEventGroupSetBits+0x32>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00b      	beq.n	800c01a <xEventGroupSetBits+0x56>
 800c002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c006:	b672      	cpsid	i
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	b662      	cpsie	i
 800c016:	60fb      	str	r3, [r7, #12]
 800c018:	e7fe      	b.n	800c018 <xEventGroupSetBits+0x54>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 800c01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01c:	3304      	adds	r3, #4
 800c01e:	627b      	str	r3, [r7, #36]	; 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	3308      	adds	r3, #8
 800c024:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 800c026:	f001 f8e9 	bl	800d1fc <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 800c030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	431a      	orrs	r2, r3
 800c038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03a:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 800c03c:	e03c      	b.n	800c0b8 <xEventGroupSetBits+0xf4>
        {
            pxNext = listGET_NEXT( pxListItem );
 800c03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 800c04a:	2300      	movs	r3, #0
 800c04c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c054:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c05c:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c064:	2b00      	cmp	r3, #0
 800c066:	d108      	bne.n	800c07a <xEventGroupSetBits+0xb6>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	4013      	ands	r3, r2
 800c070:	2b00      	cmp	r3, #0
 800c072:	d00b      	beq.n	800c08c <xEventGroupSetBits+0xc8>
                {
                    xMatchFound = pdTRUE;
 800c074:	2301      	movs	r3, #1
 800c076:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c078:	e008      	b.n	800c08c <xEventGroupSetBits+0xc8>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	4013      	ands	r3, r2
 800c082:	69ba      	ldr	r2, [r7, #24]
 800c084:	429a      	cmp	r2, r3
 800c086:	d101      	bne.n	800c08c <xEventGroupSetBits+0xc8>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 800c088:	2301      	movs	r3, #1
 800c08a:	62fb      	str	r3, [r7, #44]	; 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 800c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d010      	beq.n	800c0b4 <xEventGroupSetBits+0xf0>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d003      	beq.n	800c0a4 <xEventGroupSetBits+0xe0>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 800c09c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	633b      	str	r3, [r7, #48]	; 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c0b0:	f001 fb3e 	bl	800d730 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	637b      	str	r3, [r7, #52]	; 0x34
        while( pxListItem != pxListEnd )
 800c0b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0ba:	6a3b      	ldr	r3, [r7, #32]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d1be      	bne.n	800c03e <xEventGroupSetBits+0x7a>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c6:	43db      	mvns	r3, r3
 800c0c8:	401a      	ands	r2, r3
 800c0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0cc:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 800c0ce:	f001 f8a3 	bl	800d218 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 800c0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d4:	681b      	ldr	r3, [r3, #0]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3738      	adds	r7, #56	; 0x38
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b086      	sub	sp, #24
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
    EventGroup_t * pxEventBits = xEventGroup;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	617b      	str	r3, [r7, #20]
    const List_t * pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	613b      	str	r3, [r7, #16]

    vTaskSuspendAll();
 800c0f0:	f001 f884 	bl	800d1fc <vTaskSuspendAll>
    {
        traceEVENT_GROUP_DELETE( xEventGroup );

        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800c0f4:	e018      	b.n	800c128 <vEventGroupDelete+0x4a>
        {
            /* Unblock the task, returning 0 as the event list is being deleted
             * and cannot therefore have any bits set. */
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	68da      	ldr	r2, [r3, #12]
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	3308      	adds	r3, #8
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d10b      	bne.n	800c11a <vEventGroupDelete+0x3c>
 800c102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c106:	b672      	cpsid	i
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	b662      	cpsie	i
 800c116:	60fb      	str	r3, [r7, #12]
 800c118:	e7fe      	b.n	800c118 <vEventGroupDelete+0x3a>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800c122:	4618      	mov	r0, r3
 800c124:	f001 fb04 	bl	800d730 <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d1e2      	bne.n	800c0f6 <vEventGroupDelete+0x18>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
            {
                /* The event group can only have been allocated dynamically - free
                 * it again. */
                vPortFree( pxEventBits );
 800c130:	6978      	ldr	r0, [r7, #20]
 800c132:	f7ff fd03 	bl	800bb3c <vPortFree>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
    ( void ) xTaskResumeAll();
 800c136:	f001 f86f 	bl	800d218 <xTaskResumeAll>
}
 800c13a:	bf00      	nop
 800c13c:	3718      	adds	r7, #24
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 800c142:	b480      	push	{r7}
 800c144:	b087      	sub	sp, #28
 800c146:	af00      	add	r7, sp, #0
 800c148:	60f8      	str	r0, [r7, #12]
 800c14a:	60b9      	str	r1, [r7, #8]
 800c14c:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 800c14e:	2300      	movs	r3, #0
 800c150:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d107      	bne.n	800c168 <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	4013      	ands	r3, r2
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00a      	beq.n	800c178 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 800c162:	2301      	movs	r3, #1
 800c164:	617b      	str	r3, [r7, #20]
 800c166:	e007      	b.n	800c178 <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	4013      	ands	r3, r2
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	429a      	cmp	r2, r3
 800c172:	d101      	bne.n	800c178 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 800c174:	2301      	movs	r3, #1
 800c176:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 800c178:	697b      	ldr	r3, [r7, #20]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	371c      	adds	r7, #28
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c186:	b480      	push	{r7}
 800c188:	b083      	sub	sp, #12
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f103 0208 	add.w	r2, r3, #8
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f04f 32ff 	mov.w	r2, #4294967295
 800c19e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f103 0208 	add.w	r2, r3, #8
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f103 0208 	add.w	r2, r3, #8
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1ba:	bf00      	nop
 800c1bc:	370c      	adds	r7, #12
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b083      	sub	sp, #12
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c1d4:	bf00      	nop
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	68fa      	ldr	r2, [r7, #12]
 800c1f4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	689a      	ldr	r2, [r3, #8]
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	683a      	ldr	r2, [r7, #0]
 800c204:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	683a      	ldr	r2, [r7, #0]
 800c20a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	1c5a      	adds	r2, r3, #1
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	601a      	str	r2, [r3, #0]
}
 800c21c:	bf00      	nop
 800c21e:	3714      	adds	r7, #20
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23e:	d103      	bne.n	800c248 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	60fb      	str	r3, [r7, #12]
 800c246:	e00c      	b.n	800c262 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	3308      	adds	r3, #8
 800c24c:	60fb      	str	r3, [r7, #12]
 800c24e:	e002      	b.n	800c256 <vListInsert+0x2e>
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d2f6      	bcs.n	800c250 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	685a      	ldr	r2, [r3, #4]
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	683a      	ldr	r2, [r7, #0]
 800c270:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	1c5a      	adds	r2, r3, #1
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	601a      	str	r2, [r3, #0]
}
 800c28e:	bf00      	nop
 800c290:	3714      	adds	r7, #20
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr

0800c29a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c29a:	b480      	push	{r7}
 800c29c:	b085      	sub	sp, #20
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	6892      	ldr	r2, [r2, #8]
 800c2b0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	6852      	ldr	r2, [r2, #4]
 800c2ba:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d103      	bne.n	800c2ce <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	689a      	ldr	r2, [r3, #8]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	1e5a      	subs	r2, r3, #1
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3714      	adds	r7, #20
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
	...

0800c2f0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10b      	bne.n	800c31c <xQueueGenericReset+0x2c>
 800c304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c308:	b672      	cpsid	i
 800c30a:	f383 8811 	msr	BASEPRI, r3
 800c30e:	f3bf 8f6f 	isb	sy
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	b662      	cpsie	i
 800c318:	60bb      	str	r3, [r7, #8]
 800c31a:	e7fe      	b.n	800c31a <xQueueGenericReset+0x2a>

    taskENTER_CRITICAL();
 800c31c:	f002 f836 	bl	800e38c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c328:	68f9      	ldr	r1, [r7, #12]
 800c32a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c32c:	fb01 f303 	mul.w	r3, r1, r3
 800c330:	441a      	add	r2, r3
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c34c:	3b01      	subs	r3, #1
 800c34e:	68f9      	ldr	r1, [r7, #12]
 800c350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c352:	fb01 f303 	mul.w	r3, r1, r3
 800c356:	441a      	add	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	22ff      	movs	r2, #255	; 0xff
 800c360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	22ff      	movs	r2, #255	; 0xff
 800c368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d114      	bne.n	800c39c <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d01a      	beq.n	800c3b0 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3310      	adds	r3, #16
 800c37e:	4618      	mov	r0, r3
 800c380:	f001 f972 	bl	800d668 <xTaskRemoveFromEventList>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d012      	beq.n	800c3b0 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800c38a:	4b0d      	ldr	r3, [pc, #52]	; (800c3c0 <xQueueGenericReset+0xd0>)
 800c38c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c390:	601a      	str	r2, [r3, #0]
 800c392:	f3bf 8f4f 	dsb	sy
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	e009      	b.n	800c3b0 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	3310      	adds	r3, #16
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff fef0 	bl	800c186 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3324      	adds	r3, #36	; 0x24
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff feeb 	bl	800c186 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800c3b0:	f002 f81e 	bl	800e3f0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800c3b4:	2301      	movs	r3, #1
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	e000ed04 	.word	0xe000ed04

0800c3c4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b08c      	sub	sp, #48	; 0x30
 800c3c8:	af02      	add	r7, sp, #8
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10b      	bne.n	800c3f0 <xQueueGenericCreate+0x2c>
 800c3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3dc:	b672      	cpsid	i
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	b662      	cpsie	i
 800c3ec:	61bb      	str	r3, [r7, #24]
 800c3ee:	e7fe      	b.n	800c3ee <xQueueGenericCreate+0x2a>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	fb02 f303 	mul.w	r3, r2, r3
 800c3f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d006      	beq.n	800c40e <xQueueGenericCreate+0x4a>
 800c400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	fbb2 f3f3 	udiv	r3, r2, r3
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d101      	bne.n	800c412 <xQueueGenericCreate+0x4e>
 800c40e:	2301      	movs	r3, #1
 800c410:	e000      	b.n	800c414 <xQueueGenericCreate+0x50>
 800c412:	2300      	movs	r3, #0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10b      	bne.n	800c430 <xQueueGenericCreate+0x6c>
 800c418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41c:	b672      	cpsid	i
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	b662      	cpsie	i
 800c42c:	617b      	str	r3, [r7, #20]
 800c42e:	e7fe      	b.n	800c42e <xQueueGenericCreate+0x6a>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	3350      	adds	r3, #80	; 0x50
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff fab3 	bl	800b9a0 <pvPortMalloc>
 800c43a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800c43c:	6a3b      	ldr	r3, [r7, #32]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00d      	beq.n	800c45e <xQueueGenericCreate+0x9a>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c442:	6a3b      	ldr	r3, [r7, #32]
 800c444:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	3350      	adds	r3, #80	; 0x50
 800c44a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c44c:	79fa      	ldrb	r2, [r7, #7]
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	4613      	mov	r3, r2
 800c454:	69fa      	ldr	r2, [r7, #28]
 800c456:	68b9      	ldr	r1, [r7, #8]
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 f805 	bl	800c468 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c45e:	6a3b      	ldr	r3, [r7, #32]
    }
 800c460:	4618      	mov	r0, r3
 800c462:	3728      	adds	r7, #40	; 0x28
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
 800c474:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d103      	bne.n	800c484 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	69ba      	ldr	r2, [r7, #24]
 800c480:	601a      	str	r2, [r3, #0]
 800c482:	e002      	b.n	800c48a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c496:	2101      	movs	r1, #1
 800c498:	69b8      	ldr	r0, [r7, #24]
 800c49a:	f7ff ff29 	bl	800c2f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	78fa      	ldrb	r2, [r7, #3]
 800c4a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800c4a6:	bf00      	nop
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b086      	sub	sp, #24
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10b      	bne.n	800c4d6 <xQueueCreateCountingSemaphore+0x28>
 800c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c2:	b672      	cpsid	i
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	b662      	cpsie	i
 800c4d2:	613b      	str	r3, [r7, #16]
 800c4d4:	e7fe      	b.n	800c4d4 <xQueueCreateCountingSemaphore+0x26>
        configASSERT( uxInitialCount <= uxMaxCount );
 800c4d6:	683a      	ldr	r2, [r7, #0]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d90b      	bls.n	800c4f6 <xQueueCreateCountingSemaphore+0x48>
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	b672      	cpsid	i
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	b662      	cpsie	i
 800c4f2:	60fb      	str	r3, [r7, #12]
 800c4f4:	e7fe      	b.n	800c4f4 <xQueueCreateCountingSemaphore+0x46>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c4f6:	2202      	movs	r2, #2
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff ff62 	bl	800c3c4 <xQueueGenericCreate>
 800c500:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <xQueueCreateCountingSemaphore+0x60>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 800c50e:	697b      	ldr	r3, [r7, #20]
    }
 800c510:	4618      	mov	r0, r3
 800c512:	3718      	adds	r7, #24
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08e      	sub	sp, #56	; 0x38
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c526:	2300      	movs	r3, #0
 800c528:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800c52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10b      	bne.n	800c54c <xQueueGenericSend+0x34>
 800c534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c538:	b672      	cpsid	i
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	b662      	cpsie	i
 800c548:	62bb      	str	r3, [r7, #40]	; 0x28
 800c54a:	e7fe      	b.n	800c54a <xQueueGenericSend+0x32>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d103      	bne.n	800c55a <xQueueGenericSend+0x42>
 800c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c556:	2b00      	cmp	r3, #0
 800c558:	d101      	bne.n	800c55e <xQueueGenericSend+0x46>
 800c55a:	2301      	movs	r3, #1
 800c55c:	e000      	b.n	800c560 <xQueueGenericSend+0x48>
 800c55e:	2300      	movs	r3, #0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d10b      	bne.n	800c57c <xQueueGenericSend+0x64>
 800c564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c568:	b672      	cpsid	i
 800c56a:	f383 8811 	msr	BASEPRI, r3
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f3bf 8f4f 	dsb	sy
 800c576:	b662      	cpsie	i
 800c578:	627b      	str	r3, [r7, #36]	; 0x24
 800c57a:	e7fe      	b.n	800c57a <xQueueGenericSend+0x62>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	2b02      	cmp	r3, #2
 800c580:	d103      	bne.n	800c58a <xQueueGenericSend+0x72>
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c586:	2b01      	cmp	r3, #1
 800c588:	d101      	bne.n	800c58e <xQueueGenericSend+0x76>
 800c58a:	2301      	movs	r3, #1
 800c58c:	e000      	b.n	800c590 <xQueueGenericSend+0x78>
 800c58e:	2300      	movs	r3, #0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10b      	bne.n	800c5ac <xQueueGenericSend+0x94>
 800c594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c598:	b672      	cpsid	i
 800c59a:	f383 8811 	msr	BASEPRI, r3
 800c59e:	f3bf 8f6f 	isb	sy
 800c5a2:	f3bf 8f4f 	dsb	sy
 800c5a6:	b662      	cpsie	i
 800c5a8:	623b      	str	r3, [r7, #32]
 800c5aa:	e7fe      	b.n	800c5aa <xQueueGenericSend+0x92>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5ac:	f001 fa96 	bl	800dadc <xTaskGetSchedulerState>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d102      	bne.n	800c5bc <xQueueGenericSend+0xa4>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d101      	bne.n	800c5c0 <xQueueGenericSend+0xa8>
 800c5bc:	2301      	movs	r3, #1
 800c5be:	e000      	b.n	800c5c2 <xQueueGenericSend+0xaa>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d10b      	bne.n	800c5de <xQueueGenericSend+0xc6>
 800c5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ca:	b672      	cpsid	i
 800c5cc:	f383 8811 	msr	BASEPRI, r3
 800c5d0:	f3bf 8f6f 	isb	sy
 800c5d4:	f3bf 8f4f 	dsb	sy
 800c5d8:	b662      	cpsie	i
 800c5da:	61fb      	str	r3, [r7, #28]
 800c5dc:	e7fe      	b.n	800c5dc <xQueueGenericSend+0xc4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c5de:	f001 fed5 	bl	800e38c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d302      	bcc.n	800c5f4 <xQueueGenericSend+0xdc>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d129      	bne.n	800c648 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	68b9      	ldr	r1, [r7, #8]
 800c5f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5fa:	f000 fad7 	bl	800cbac <prvCopyDataToQueue>
 800c5fe:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c604:	2b00      	cmp	r3, #0
 800c606:	d010      	beq.n	800c62a <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	3324      	adds	r3, #36	; 0x24
 800c60c:	4618      	mov	r0, r3
 800c60e:	f001 f82b 	bl	800d668 <xTaskRemoveFromEventList>
 800c612:	4603      	mov	r3, r0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d013      	beq.n	800c640 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800c618:	4b3f      	ldr	r3, [pc, #252]	; (800c718 <xQueueGenericSend+0x200>)
 800c61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c61e:	601a      	str	r2, [r3, #0]
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	e00a      	b.n	800c640 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d007      	beq.n	800c640 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c630:	4b39      	ldr	r3, [pc, #228]	; (800c718 <xQueueGenericSend+0x200>)
 800c632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c640:	f001 fed6 	bl	800e3f0 <vPortExitCritical>
                return pdPASS;
 800c644:	2301      	movs	r3, #1
 800c646:	e063      	b.n	800c710 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d103      	bne.n	800c656 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c64e:	f001 fecf 	bl	800e3f0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800c652:	2300      	movs	r3, #0
 800c654:	e05c      	b.n	800c710 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d106      	bne.n	800c66a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c65c:	f107 0314 	add.w	r3, r7, #20
 800c660:	4618      	mov	r0, r3
 800c662:	f001 f8f1 	bl	800d848 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c666:	2301      	movs	r3, #1
 800c668:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c66a:	f001 fec1 	bl	800e3f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c66e:	f000 fdc5 	bl	800d1fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c672:	f001 fe8b 	bl	800e38c <vPortEnterCritical>
 800c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c67c:	b25b      	sxtb	r3, r3
 800c67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c682:	d103      	bne.n	800c68c <xQueueGenericSend+0x174>
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	2200      	movs	r2, #0
 800c688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c692:	b25b      	sxtb	r3, r3
 800c694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c698:	d103      	bne.n	800c6a2 <xQueueGenericSend+0x18a>
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6a2:	f001 fea5 	bl	800e3f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6a6:	1d3a      	adds	r2, r7, #4
 800c6a8:	f107 0314 	add.w	r3, r7, #20
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f001 f8e0 	bl	800d874 <xTaskCheckForTimeOut>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d124      	bne.n	800c704 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c6ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6bc:	f000 fb6e 	bl	800cd9c <prvIsQueueFull>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d018      	beq.n	800c6f8 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	3310      	adds	r3, #16
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 ff66 	bl	800d5a0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800c6d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6d6:	f000 faf9 	bl	800cccc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800c6da:	f000 fd9d 	bl	800d218 <xTaskResumeAll>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f47f af7c 	bne.w	800c5de <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800c6e6:	4b0c      	ldr	r3, [pc, #48]	; (800c718 <xQueueGenericSend+0x200>)
 800c6e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	e772      	b.n	800c5de <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800c6f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6fa:	f000 fae7 	bl	800cccc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c6fe:	f000 fd8b 	bl	800d218 <xTaskResumeAll>
 800c702:	e76c      	b.n	800c5de <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800c704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c706:	f000 fae1 	bl	800cccc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c70a:	f000 fd85 	bl	800d218 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800c70e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800c710:	4618      	mov	r0, r3
 800c712:	3738      	adds	r7, #56	; 0x38
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	e000ed04 	.word	0xe000ed04

0800c71c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b08c      	sub	sp, #48	; 0x30
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c728:	2300      	movs	r3, #0
 800c72a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10b      	bne.n	800c74e <xQueueReceive+0x32>
 800c736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73a:	b672      	cpsid	i
 800c73c:	f383 8811 	msr	BASEPRI, r3
 800c740:	f3bf 8f6f 	isb	sy
 800c744:	f3bf 8f4f 	dsb	sy
 800c748:	b662      	cpsie	i
 800c74a:	623b      	str	r3, [r7, #32]
 800c74c:	e7fe      	b.n	800c74c <xQueueReceive+0x30>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d103      	bne.n	800c75c <xQueueReceive+0x40>
 800c754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d101      	bne.n	800c760 <xQueueReceive+0x44>
 800c75c:	2301      	movs	r3, #1
 800c75e:	e000      	b.n	800c762 <xQueueReceive+0x46>
 800c760:	2300      	movs	r3, #0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d10b      	bne.n	800c77e <xQueueReceive+0x62>
 800c766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76a:	b672      	cpsid	i
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	b662      	cpsie	i
 800c77a:	61fb      	str	r3, [r7, #28]
 800c77c:	e7fe      	b.n	800c77c <xQueueReceive+0x60>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c77e:	f001 f9ad 	bl	800dadc <xTaskGetSchedulerState>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <xQueueReceive+0x72>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d101      	bne.n	800c792 <xQueueReceive+0x76>
 800c78e:	2301      	movs	r3, #1
 800c790:	e000      	b.n	800c794 <xQueueReceive+0x78>
 800c792:	2300      	movs	r3, #0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10b      	bne.n	800c7b0 <xQueueReceive+0x94>
 800c798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79c:	b672      	cpsid	i
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	b662      	cpsie	i
 800c7ac:	61bb      	str	r3, [r7, #24]
 800c7ae:	e7fe      	b.n	800c7ae <xQueueReceive+0x92>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c7b0:	f001 fdec 	bl	800e38c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b8:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d01f      	beq.n	800c800 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7c0:	68b9      	ldr	r1, [r7, #8]
 800c7c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7c4:	f000 fa5c 	bl	800cc80 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	1e5a      	subs	r2, r3, #1
 800c7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ce:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00f      	beq.n	800c7f8 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7da:	3310      	adds	r3, #16
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f000 ff43 	bl	800d668 <xTaskRemoveFromEventList>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d007      	beq.n	800c7f8 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c7e8:	4b3c      	ldr	r3, [pc, #240]	; (800c8dc <xQueueReceive+0x1c0>)
 800c7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ee:	601a      	str	r2, [r3, #0]
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c7f8:	f001 fdfa 	bl	800e3f0 <vPortExitCritical>
                return pdPASS;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e069      	b.n	800c8d4 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d103      	bne.n	800c80e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c806:	f001 fdf3 	bl	800e3f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800c80a:	2300      	movs	r3, #0
 800c80c:	e062      	b.n	800c8d4 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c810:	2b00      	cmp	r3, #0
 800c812:	d106      	bne.n	800c822 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c814:	f107 0310 	add.w	r3, r7, #16
 800c818:	4618      	mov	r0, r3
 800c81a:	f001 f815 	bl	800d848 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c81e:	2301      	movs	r3, #1
 800c820:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c822:	f001 fde5 	bl	800e3f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c826:	f000 fce9 	bl	800d1fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c82a:	f001 fdaf 	bl	800e38c <vPortEnterCritical>
 800c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c834:	b25b      	sxtb	r3, r3
 800c836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c83a:	d103      	bne.n	800c844 <xQueueReceive+0x128>
 800c83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83e:	2200      	movs	r2, #0
 800c840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c84a:	b25b      	sxtb	r3, r3
 800c84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c850:	d103      	bne.n	800c85a <xQueueReceive+0x13e>
 800c852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c854:	2200      	movs	r2, #0
 800c856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c85a:	f001 fdc9 	bl	800e3f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c85e:	1d3a      	adds	r2, r7, #4
 800c860:	f107 0310 	add.w	r3, r7, #16
 800c864:	4611      	mov	r1, r2
 800c866:	4618      	mov	r0, r3
 800c868:	f001 f804 	bl	800d874 <xTaskCheckForTimeOut>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d123      	bne.n	800c8ba <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c874:	f000 fa7c 	bl	800cd70 <prvIsQueueEmpty>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d017      	beq.n	800c8ae <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c880:	3324      	adds	r3, #36	; 0x24
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	4611      	mov	r1, r2
 800c886:	4618      	mov	r0, r3
 800c888:	f000 fe8a 	bl	800d5a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800c88c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c88e:	f000 fa1d 	bl	800cccc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800c892:	f000 fcc1 	bl	800d218 <xTaskResumeAll>
 800c896:	4603      	mov	r3, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d189      	bne.n	800c7b0 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800c89c:	4b0f      	ldr	r3, [pc, #60]	; (800c8dc <xQueueReceive+0x1c0>)
 800c89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8a2:	601a      	str	r2, [r3, #0]
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	f3bf 8f6f 	isb	sy
 800c8ac:	e780      	b.n	800c7b0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800c8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8b0:	f000 fa0c 	bl	800cccc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c8b4:	f000 fcb0 	bl	800d218 <xTaskResumeAll>
 800c8b8:	e77a      	b.n	800c7b0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800c8ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8bc:	f000 fa06 	bl	800cccc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c8c0:	f000 fcaa 	bl	800d218 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8c6:	f000 fa53 	bl	800cd70 <prvIsQueueEmpty>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	f43f af6f 	beq.w	800c7b0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800c8d2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3730      	adds	r7, #48	; 0x30
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	e000ed04 	.word	0xe000ed04

0800c8e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b08e      	sub	sp, #56	; 0x38
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d10b      	bne.n	800c914 <xQueueSemaphoreTake+0x34>
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	b672      	cpsid	i
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	b662      	cpsie	i
 800c910:	623b      	str	r3, [r7, #32]
 800c912:	e7fe      	b.n	800c912 <xQueueSemaphoreTake+0x32>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800c914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00b      	beq.n	800c934 <xQueueSemaphoreTake+0x54>
 800c91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c920:	b672      	cpsid	i
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	b662      	cpsie	i
 800c930:	61fb      	str	r3, [r7, #28]
 800c932:	e7fe      	b.n	800c932 <xQueueSemaphoreTake+0x52>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c934:	f001 f8d2 	bl	800dadc <xTaskGetSchedulerState>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d102      	bne.n	800c944 <xQueueSemaphoreTake+0x64>
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d101      	bne.n	800c948 <xQueueSemaphoreTake+0x68>
 800c944:	2301      	movs	r3, #1
 800c946:	e000      	b.n	800c94a <xQueueSemaphoreTake+0x6a>
 800c948:	2300      	movs	r3, #0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10b      	bne.n	800c966 <xQueueSemaphoreTake+0x86>
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	b672      	cpsid	i
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	b662      	cpsie	i
 800c962:	61bb      	str	r3, [r7, #24]
 800c964:	e7fe      	b.n	800c964 <xQueueSemaphoreTake+0x84>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c966:	f001 fd11 	bl	800e38c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96e:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c972:	2b00      	cmp	r3, #0
 800c974:	d024      	beq.n	800c9c0 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c978:	1e5a      	subs	r2, r3, #1
 800c97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97c:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d104      	bne.n	800c990 <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c986:	f001 fa61 	bl	800de4c <pvTaskIncrementMutexHeldCount>
 800c98a:	4602      	mov	r2, r0
 800c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98e:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00f      	beq.n	800c9b8 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99a:	3310      	adds	r3, #16
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 fe63 	bl	800d668 <xTaskRemoveFromEventList>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d007      	beq.n	800c9b8 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c9a8:	4b54      	ldr	r3, [pc, #336]	; (800cafc <xQueueSemaphoreTake+0x21c>)
 800c9aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ae:	601a      	str	r2, [r3, #0]
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c9b8:	f001 fd1a 	bl	800e3f0 <vPortExitCritical>
                return pdPASS;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e098      	b.n	800caf2 <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d112      	bne.n	800c9ec <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00b      	beq.n	800c9e4 <xQueueSemaphoreTake+0x104>
 800c9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d0:	b672      	cpsid	i
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	b662      	cpsie	i
 800c9e0:	617b      	str	r3, [r7, #20]
 800c9e2:	e7fe      	b.n	800c9e2 <xQueueSemaphoreTake+0x102>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800c9e4:	f001 fd04 	bl	800e3f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	e082      	b.n	800caf2 <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d106      	bne.n	800ca00 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c9f2:	f107 030c 	add.w	r3, r7, #12
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 ff26 	bl	800d848 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800ca00:	f001 fcf6 	bl	800e3f0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800ca04:	f000 fbfa 	bl	800d1fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800ca08:	f001 fcc0 	bl	800e38c <vPortEnterCritical>
 800ca0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca12:	b25b      	sxtb	r3, r3
 800ca14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca18:	d103      	bne.n	800ca22 <xQueueSemaphoreTake+0x142>
 800ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca28:	b25b      	sxtb	r3, r3
 800ca2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca2e:	d103      	bne.n	800ca38 <xQueueSemaphoreTake+0x158>
 800ca30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca38:	f001 fcda 	bl	800e3f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca3c:	463a      	mov	r2, r7
 800ca3e:	f107 030c 	add.w	r3, r7, #12
 800ca42:	4611      	mov	r1, r2
 800ca44:	4618      	mov	r0, r3
 800ca46:	f000 ff15 	bl	800d874 <xTaskCheckForTimeOut>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d132      	bne.n	800cab6 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca52:	f000 f98d 	bl	800cd70 <prvIsQueueEmpty>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d026      	beq.n	800caaa <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d109      	bne.n	800ca78 <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 800ca64:	f001 fc92 	bl	800e38c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f001 f853 	bl	800db18 <xTaskPriorityInherit>
 800ca72:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 800ca74:	f001 fcbc 	bl	800e3f0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7a:	3324      	adds	r3, #36	; 0x24
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	4611      	mov	r1, r2
 800ca80:	4618      	mov	r0, r3
 800ca82:	f000 fd8d 	bl	800d5a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800ca86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca88:	f000 f920 	bl	800cccc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800ca8c:	f000 fbc4 	bl	800d218 <xTaskResumeAll>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f47f af67 	bne.w	800c966 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 800ca98:	4b18      	ldr	r3, [pc, #96]	; (800cafc <xQueueSemaphoreTake+0x21c>)
 800ca9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca9e:	601a      	str	r2, [r3, #0]
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	e75d      	b.n	800c966 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800caaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caac:	f000 f90e 	bl	800cccc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cab0:	f000 fbb2 	bl	800d218 <xTaskResumeAll>
 800cab4:	e757      	b.n	800c966 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800cab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cab8:	f000 f908 	bl	800cccc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cabc:	f000 fbac 	bl	800d218 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cac2:	f000 f955 	bl	800cd70 <prvIsQueueEmpty>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f43f af4c 	beq.w	800c966 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800cace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00d      	beq.n	800caf0 <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 800cad4:	f001 fc5a 	bl	800e38c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cada:	f000 f84f 	bl	800cb7c <prvGetDisinheritPriorityAfterTimeout>
 800cade:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cae6:	4618      	mov	r0, r3
 800cae8:	f001 f908 	bl	800dcfc <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800caec:	f001 fc80 	bl	800e3f0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800caf0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3738      	adds	r7, #56	; 0x38
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	e000ed04 	.word	0xe000ed04

0800cb00 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d10b      	bne.n	800cb26 <uxQueueMessagesWaiting+0x26>
 800cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb12:	b672      	cpsid	i
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	b662      	cpsie	i
 800cb22:	60bb      	str	r3, [r7, #8]
 800cb24:	e7fe      	b.n	800cb24 <uxQueueMessagesWaiting+0x24>

    taskENTER_CRITICAL();
 800cb26:	f001 fc31 	bl	800e38c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800cb30:	f001 fc5e 	bl	800e3f0 <vPortExitCritical>

    return uxReturn;
 800cb34:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b084      	sub	sp, #16
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10b      	bne.n	800cb68 <vQueueDelete+0x2a>
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	b672      	cpsid	i
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	b662      	cpsie	i
 800cb64:	60bb      	str	r3, [r7, #8]
 800cb66:	e7fe      	b.n	800cb66 <vQueueDelete+0x28>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            vQueueUnregisterQueue( pxQueue );
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f000 f957 	bl	800ce1c <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The queue can only have been allocated dynamically - free it
             * again. */
            vPortFree( pxQueue );
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7fe ffe4 	bl	800bb3c <vPortFree>
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cb74:	bf00      	nop
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800cb7c:	b480      	push	{r7}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d006      	beq.n	800cb9a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f1c3 0307 	rsb	r3, r3, #7
 800cb96:	60fb      	str	r3, [r7, #12]
 800cb98:	e001      	b.n	800cb9e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
    }
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b086      	sub	sp, #24
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10d      	bne.n	800cbe6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d14d      	bne.n	800cc6e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f001 f814 	bl	800dc04 <xTaskPriorityDisinherit>
 800cbdc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	609a      	str	r2, [r3, #8]
 800cbe4:	e043      	b.n	800cc6e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d119      	bne.n	800cc20 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6858      	ldr	r0, [r3, #4]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	68b9      	ldr	r1, [r7, #8]
 800cbf8:	f00a fb41 	bl	801727e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	685a      	ldr	r2, [r3, #4]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc04:	441a      	add	r2, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	685a      	ldr	r2, [r3, #4]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d32b      	bcc.n	800cc6e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	605a      	str	r2, [r3, #4]
 800cc1e:	e026      	b.n	800cc6e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	68d8      	ldr	r0, [r3, #12]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc28:	461a      	mov	r2, r3
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	f00a fb27 	bl	801727e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	68da      	ldr	r2, [r3, #12]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc38:	425b      	negs	r3, r3
 800cc3a:	441a      	add	r2, r3
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	68da      	ldr	r2, [r3, #12]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d207      	bcs.n	800cc5c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	689a      	ldr	r2, [r3, #8]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc54:	425b      	negs	r3, r3
 800cc56:	441a      	add	r2, r3
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	d105      	bne.n	800cc6e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d002      	beq.n	800cc6e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	1c5a      	adds	r2, r3, #1
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800cc76:	697b      	ldr	r3, [r7, #20]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3718      	adds	r7, #24
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d018      	beq.n	800ccc4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68da      	ldr	r2, [r3, #12]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc9a:	441a      	add	r2, r3
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	68da      	ldr	r2, [r3, #12]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d303      	bcc.n	800ccb4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	68d9      	ldr	r1, [r3, #12]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	6838      	ldr	r0, [r7, #0]
 800ccc0:	f00a fadd 	bl	801727e <memcpy>
    }
}
 800ccc4:	bf00      	nop
 800ccc6:	3708      	adds	r7, #8
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800ccd4:	f001 fb5a 	bl	800e38c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccde:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cce0:	e011      	b.n	800cd06 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d012      	beq.n	800cd10 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	3324      	adds	r3, #36	; 0x24
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 fcba 	bl	800d668 <xTaskRemoveFromEventList>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800ccfa:	f000 fe23 	bl	800d944 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	3b01      	subs	r3, #1
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	dce9      	bgt.n	800cce2 <prvUnlockQueue+0x16>
 800cd0e:	e000      	b.n	800cd12 <prvUnlockQueue+0x46>
                        break;
 800cd10:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	22ff      	movs	r2, #255	; 0xff
 800cd16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800cd1a:	f001 fb69 	bl	800e3f0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800cd1e:	f001 fb35 	bl	800e38c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd28:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd2a:	e011      	b.n	800cd50 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	691b      	ldr	r3, [r3, #16]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d012      	beq.n	800cd5a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	3310      	adds	r3, #16
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 fc95 	bl	800d668 <xTaskRemoveFromEventList>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800cd44:	f000 fdfe 	bl	800d944 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800cd48:	7bbb      	ldrb	r3, [r7, #14]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	dce9      	bgt.n	800cd2c <prvUnlockQueue+0x60>
 800cd58:	e000      	b.n	800cd5c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800cd5a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	22ff      	movs	r2, #255	; 0xff
 800cd60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800cd64:	f001 fb44 	bl	800e3f0 <vPortExitCritical>
}
 800cd68:	bf00      	nop
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cd78:	f001 fb08 	bl	800e38c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d102      	bne.n	800cd8a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800cd84:	2301      	movs	r3, #1
 800cd86:	60fb      	str	r3, [r7, #12]
 800cd88:	e001      	b.n	800cd8e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cd8e:	f001 fb2f 	bl	800e3f0 <vPortExitCritical>

    return xReturn;
 800cd92:	68fb      	ldr	r3, [r7, #12]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3710      	adds	r7, #16
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cda4:	f001 faf2 	bl	800e38c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d102      	bne.n	800cdba <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	60fb      	str	r3, [r7, #12]
 800cdb8:	e001      	b.n	800cdbe <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cdbe:	f001 fb17 	bl	800e3f0 <vPortExitCritical>

    return xReturn;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3710      	adds	r7, #16
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	60fb      	str	r3, [r7, #12]
 800cdda:	e014      	b.n	800ce06 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cddc:	4a0e      	ldr	r2, [pc, #56]	; (800ce18 <vQueueAddToRegistry+0x4c>)
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10b      	bne.n	800ce00 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cde8:	490b      	ldr	r1, [pc, #44]	; (800ce18 <vQueueAddToRegistry+0x4c>)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800cdf2:	4a09      	ldr	r2, [pc, #36]	; (800ce18 <vQueueAddToRegistry+0x4c>)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	00db      	lsls	r3, r3, #3
 800cdf8:	4413      	add	r3, r2
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800cdfe:	e005      	b.n	800ce0c <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	3301      	adds	r3, #1
 800ce04:	60fb      	str	r3, [r7, #12]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2b07      	cmp	r3, #7
 800ce0a:	d9e7      	bls.n	800cddc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800ce0c:	bf00      	nop
 800ce0e:	3714      	adds	r7, #20
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	24006510 	.word	0x24006510

0800ce1c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce24:	2300      	movs	r3, #0
 800ce26:	60fb      	str	r3, [r7, #12]
 800ce28:	e016      	b.n	800ce58 <vQueueUnregisterQueue+0x3c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ce2a:	4a10      	ldr	r2, [pc, #64]	; (800ce6c <vQueueUnregisterQueue+0x50>)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	4413      	add	r3, r2
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d10b      	bne.n	800ce52 <vQueueUnregisterQueue+0x36>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800ce3a:	4a0c      	ldr	r2, [pc, #48]	; (800ce6c <vQueueUnregisterQueue+0x50>)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2100      	movs	r1, #0
 800ce40:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ce44:	4a09      	ldr	r2, [pc, #36]	; (800ce6c <vQueueUnregisterQueue+0x50>)
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	00db      	lsls	r3, r3, #3
 800ce4a:	4413      	add	r3, r2
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	605a      	str	r2, [r3, #4]
                break;
 800ce50:	e005      	b.n	800ce5e <vQueueUnregisterQueue+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	3301      	adds	r3, #1
 800ce56:	60fb      	str	r3, [r7, #12]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2b07      	cmp	r3, #7
 800ce5c:	d9e5      	bls.n	800ce2a <vQueueUnregisterQueue+0xe>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ce5e:	bf00      	nop
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	24006510 	.word	0x24006510

0800ce70 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b08c      	sub	sp, #48	; 0x30
 800ce74:	af04      	add	r7, sp, #16
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	603b      	str	r3, [r7, #0]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ce80:	88fb      	ldrh	r3, [r7, #6]
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fe fd8b 	bl	800b9a0 <pvPortMalloc>
 800ce8a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00e      	beq.n	800ceb0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ce92:	205c      	movs	r0, #92	; 0x5c
 800ce94:	f7fe fd84 	bl	800b9a0 <pvPortMalloc>
 800ce98:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d003      	beq.n	800cea8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	697a      	ldr	r2, [r7, #20]
 800cea4:	631a      	str	r2, [r3, #48]	; 0x30
 800cea6:	e005      	b.n	800ceb4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800cea8:	6978      	ldr	r0, [r7, #20]
 800ceaa:	f7fe fe47 	bl	800bb3c <vPortFree>
 800ceae:	e001      	b.n	800ceb4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d013      	beq.n	800cee2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ceba:	88fa      	ldrh	r2, [r7, #6]
 800cebc:	2300      	movs	r3, #0
 800cebe:	9303      	str	r3, [sp, #12]
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	9302      	str	r3, [sp, #8]
 800cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec6:	9301      	str	r3, [sp, #4]
 800cec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	68b9      	ldr	r1, [r7, #8]
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f000 f80e 	bl	800cef2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800ced6:	69f8      	ldr	r0, [r7, #28]
 800ced8:	f000 f8a2 	bl	800d020 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800cedc:	2301      	movs	r3, #1
 800cede:	61bb      	str	r3, [r7, #24]
 800cee0:	e002      	b.n	800cee8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cee2:	f04f 33ff 	mov.w	r3, #4294967295
 800cee6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800cee8:	69bb      	ldr	r3, [r7, #24]
    }
 800ceea:	4618      	mov	r0, r3
 800ceec:	3720      	adds	r7, #32
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b088      	sub	sp, #32
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	60f8      	str	r0, [r7, #12]
 800cefa:	60b9      	str	r1, [r7, #8]
 800cefc:	607a      	str	r2, [r7, #4]
 800cefe:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf02:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	461a      	mov	r2, r3
 800cf0a:	21a5      	movs	r1, #165	; 0xa5
 800cf0c:	f00a f9db 	bl	80172c6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf14:	6879      	ldr	r1, [r7, #4]
 800cf16:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cf1a:	440b      	add	r3, r1
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4413      	add	r3, r2
 800cf20:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	f023 0307 	bic.w	r3, r3, #7
 800cf28:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cf2a:	69bb      	ldr	r3, [r7, #24]
 800cf2c:	f003 0307 	and.w	r3, r3, #7
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d00b      	beq.n	800cf4c <prvInitialiseNewTask+0x5a>
 800cf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf38:	b672      	cpsid	i
 800cf3a:	f383 8811 	msr	BASEPRI, r3
 800cf3e:	f3bf 8f6f 	isb	sy
 800cf42:	f3bf 8f4f 	dsb	sy
 800cf46:	b662      	cpsie	i
 800cf48:	617b      	str	r3, [r7, #20]
 800cf4a:	e7fe      	b.n	800cf4a <prvInitialiseNewTask+0x58>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d01f      	beq.n	800cf92 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf52:	2300      	movs	r3, #0
 800cf54:	61fb      	str	r3, [r7, #28]
 800cf56:	e012      	b.n	800cf7e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cf58:	68ba      	ldr	r2, [r7, #8]
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	7819      	ldrb	r1, [r3, #0]
 800cf60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	4413      	add	r3, r2
 800cf66:	3334      	adds	r3, #52	; 0x34
 800cf68:	460a      	mov	r2, r1
 800cf6a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	4413      	add	r3, r2
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d006      	beq.n	800cf86 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	61fb      	str	r3, [r7, #28]
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	2b0f      	cmp	r3, #15
 800cf82:	d9e9      	bls.n	800cf58 <prvInitialiseNewTask+0x66>
 800cf84:	e000      	b.n	800cf88 <prvInitialiseNewTask+0x96>
            {
                break;
 800cf86:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cf90:	e003      	b.n	800cf9a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf94:	2200      	movs	r2, #0
 800cf96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9c:	2b06      	cmp	r3, #6
 800cf9e:	d901      	bls.n	800cfa4 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cfa0:	2306      	movs	r3, #6
 800cfa2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfa8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfae:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800cfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	3304      	adds	r3, #4
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7ff f903 	bl	800c1c6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc2:	3318      	adds	r3, #24
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7ff f8fe 	bl	800c1c6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfce:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd2:	f1c3 0207 	rsb	r2, r3, #7
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfde:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800cfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe2:	3354      	adds	r3, #84	; 0x54
 800cfe4:	2204      	movs	r2, #4
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f00a f96c 	bl	80172c6 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800cfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff0:	3358      	adds	r3, #88	; 0x58
 800cff2:	2201      	movs	r2, #1
 800cff4:	2100      	movs	r1, #0
 800cff6:	4618      	mov	r0, r3
 800cff8:	f00a f965 	bl	80172c6 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	68f9      	ldr	r1, [r7, #12]
 800d000:	69b8      	ldr	r0, [r7, #24]
 800d002:	f001 f8bb 	bl	800e17c <pxPortInitialiseStack>
 800d006:	4602      	mov	r2, r0
 800d008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800d00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d002      	beq.n	800d018 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d016:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d018:	bf00      	nop
 800d01a:	3720      	adds	r7, #32
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d028:	f001 f9b0 	bl	800e38c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d02c:	4b2c      	ldr	r3, [pc, #176]	; (800d0e0 <prvAddNewTaskToReadyList+0xc0>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	3301      	adds	r3, #1
 800d032:	4a2b      	ldr	r2, [pc, #172]	; (800d0e0 <prvAddNewTaskToReadyList+0xc0>)
 800d034:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d036:	4b2b      	ldr	r3, [pc, #172]	; (800d0e4 <prvAddNewTaskToReadyList+0xc4>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d109      	bne.n	800d052 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d03e:	4a29      	ldr	r2, [pc, #164]	; (800d0e4 <prvAddNewTaskToReadyList+0xc4>)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d044:	4b26      	ldr	r3, [pc, #152]	; (800d0e0 <prvAddNewTaskToReadyList+0xc0>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d110      	bne.n	800d06e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d04c:	f000 fc9e 	bl	800d98c <prvInitialiseTaskLists>
 800d050:	e00d      	b.n	800d06e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d052:	4b25      	ldr	r3, [pc, #148]	; (800d0e8 <prvAddNewTaskToReadyList+0xc8>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d109      	bne.n	800d06e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d05a:	4b22      	ldr	r3, [pc, #136]	; (800d0e4 <prvAddNewTaskToReadyList+0xc4>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d064:	429a      	cmp	r2, r3
 800d066:	d802      	bhi.n	800d06e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d068:	4a1e      	ldr	r2, [pc, #120]	; (800d0e4 <prvAddNewTaskToReadyList+0xc4>)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d06e:	4b1f      	ldr	r3, [pc, #124]	; (800d0ec <prvAddNewTaskToReadyList+0xcc>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3301      	adds	r3, #1
 800d074:	4a1d      	ldr	r2, [pc, #116]	; (800d0ec <prvAddNewTaskToReadyList+0xcc>)
 800d076:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d078:	4b1c      	ldr	r3, [pc, #112]	; (800d0ec <prvAddNewTaskToReadyList+0xcc>)
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d084:	2201      	movs	r2, #1
 800d086:	409a      	lsls	r2, r3
 800d088:	4b19      	ldr	r3, [pc, #100]	; (800d0f0 <prvAddNewTaskToReadyList+0xd0>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	4a18      	ldr	r2, [pc, #96]	; (800d0f0 <prvAddNewTaskToReadyList+0xd0>)
 800d090:	6013      	str	r3, [r2, #0]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d096:	4613      	mov	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	4413      	add	r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4a15      	ldr	r2, [pc, #84]	; (800d0f4 <prvAddNewTaskToReadyList+0xd4>)
 800d0a0:	441a      	add	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	f7ff f899 	bl	800c1e0 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d0ae:	f001 f99f 	bl	800e3f0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d0b2:	4b0d      	ldr	r3, [pc, #52]	; (800d0e8 <prvAddNewTaskToReadyList+0xc8>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00e      	beq.n	800d0d8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d0ba:	4b0a      	ldr	r3, [pc, #40]	; (800d0e4 <prvAddNewTaskToReadyList+0xc4>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d207      	bcs.n	800d0d8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d0c8:	4b0b      	ldr	r3, [pc, #44]	; (800d0f8 <prvAddNewTaskToReadyList+0xd8>)
 800d0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ce:	601a      	str	r2, [r3, #0]
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d0d8:	bf00      	nop
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	240051e4 	.word	0x240051e4
 800d0e4:	240050e4 	.word	0x240050e4
 800d0e8:	240051f0 	.word	0x240051f0
 800d0ec:	24005200 	.word	0x24005200
 800d0f0:	240051ec 	.word	0x240051ec
 800d0f4:	240050e8 	.word	0x240050e8
 800d0f8:	e000ed04 	.word	0xe000ed04

0800d0fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800d104:	2300      	movs	r3, #0
 800d106:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d018      	beq.n	800d140 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800d10e:	4b14      	ldr	r3, [pc, #80]	; (800d160 <vTaskDelay+0x64>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00b      	beq.n	800d12e <vTaskDelay+0x32>
 800d116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11a:	b672      	cpsid	i
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	b662      	cpsie	i
 800d12a:	60bb      	str	r3, [r7, #8]
 800d12c:	e7fe      	b.n	800d12c <vTaskDelay+0x30>
            vTaskSuspendAll();
 800d12e:	f000 f865 	bl	800d1fc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d132:	2100      	movs	r1, #0
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 ffbb 	bl	800e0b0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800d13a:	f000 f86d 	bl	800d218 <xTaskResumeAll>
 800d13e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d107      	bne.n	800d156 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 800d146:	4b07      	ldr	r3, [pc, #28]	; (800d164 <vTaskDelay+0x68>)
 800d148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14c:	601a      	str	r2, [r3, #0]
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d156:	bf00      	nop
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	2400520c 	.word	0x2400520c
 800d164:	e000ed04 	.word	0xe000ed04

0800d168 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800d16e:	4b1d      	ldr	r3, [pc, #116]	; (800d1e4 <vTaskStartScheduler+0x7c>)
 800d170:	9301      	str	r3, [sp, #4]
 800d172:	2300      	movs	r3, #0
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	2300      	movs	r3, #0
 800d178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d17c:	491a      	ldr	r1, [pc, #104]	; (800d1e8 <vTaskStartScheduler+0x80>)
 800d17e:	481b      	ldr	r0, [pc, #108]	; (800d1ec <vTaskStartScheduler+0x84>)
 800d180:	f7ff fe76 	bl	800ce70 <xTaskCreate>
 800d184:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d117      	bne.n	800d1bc <vTaskStartScheduler+0x54>
 800d18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d190:	b672      	cpsid	i
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	b662      	cpsie	i
 800d1a0:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800d1a2:	4b13      	ldr	r3, [pc, #76]	; (800d1f0 <vTaskStartScheduler+0x88>)
 800d1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d1aa:	4b12      	ldr	r3, [pc, #72]	; (800d1f4 <vTaskStartScheduler+0x8c>)
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d1b0:	4b11      	ldr	r3, [pc, #68]	; (800d1f8 <vTaskStartScheduler+0x90>)
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800d1b6:	f001 f86d 	bl	800e294 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 800d1ba:	e00f      	b.n	800d1dc <vTaskStartScheduler+0x74>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c2:	d10b      	bne.n	800d1dc <vTaskStartScheduler+0x74>
 800d1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c8:	b672      	cpsid	i
 800d1ca:	f383 8811 	msr	BASEPRI, r3
 800d1ce:	f3bf 8f6f 	isb	sy
 800d1d2:	f3bf 8f4f 	dsb	sy
 800d1d6:	b662      	cpsie	i
 800d1d8:	607b      	str	r3, [r7, #4]
 800d1da:	e7fe      	b.n	800d1da <vTaskStartScheduler+0x72>
}
 800d1dc:	bf00      	nop
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	24005208 	.word	0x24005208
 800d1e8:	08018620 	.word	0x08018620
 800d1ec:	0800d95d 	.word	0x0800d95d
 800d1f0:	24005204 	.word	0x24005204
 800d1f4:	240051f0 	.word	0x240051f0
 800d1f8:	240051e8 	.word	0x240051e8

0800d1fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d200:	4b04      	ldr	r3, [pc, #16]	; (800d214 <vTaskSuspendAll+0x18>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	3301      	adds	r3, #1
 800d206:	4a03      	ldr	r2, [pc, #12]	; (800d214 <vTaskSuspendAll+0x18>)
 800d208:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d20a:	bf00      	nop
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	2400520c 	.word	0x2400520c

0800d218 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d21e:	2300      	movs	r3, #0
 800d220:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d222:	2300      	movs	r3, #0
 800d224:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800d226:	4b42      	ldr	r3, [pc, #264]	; (800d330 <xTaskResumeAll+0x118>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d10b      	bne.n	800d246 <xTaskResumeAll+0x2e>
 800d22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d232:	b672      	cpsid	i
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	b662      	cpsie	i
 800d242:	603b      	str	r3, [r7, #0]
 800d244:	e7fe      	b.n	800d244 <xTaskResumeAll+0x2c>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d246:	f001 f8a1 	bl	800e38c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d24a:	4b39      	ldr	r3, [pc, #228]	; (800d330 <xTaskResumeAll+0x118>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3b01      	subs	r3, #1
 800d250:	4a37      	ldr	r2, [pc, #220]	; (800d330 <xTaskResumeAll+0x118>)
 800d252:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d254:	4b36      	ldr	r3, [pc, #216]	; (800d330 <xTaskResumeAll+0x118>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d161      	bne.n	800d320 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d25c:	4b35      	ldr	r3, [pc, #212]	; (800d334 <xTaskResumeAll+0x11c>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d05d      	beq.n	800d320 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d264:	e02e      	b.n	800d2c4 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d266:	4b34      	ldr	r3, [pc, #208]	; (800d338 <xTaskResumeAll+0x120>)
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3318      	adds	r3, #24
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff f811 	bl	800c29a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	3304      	adds	r3, #4
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff f80c 	bl	800c29a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d286:	2201      	movs	r2, #1
 800d288:	409a      	lsls	r2, r3
 800d28a:	4b2c      	ldr	r3, [pc, #176]	; (800d33c <xTaskResumeAll+0x124>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4313      	orrs	r3, r2
 800d290:	4a2a      	ldr	r2, [pc, #168]	; (800d33c <xTaskResumeAll+0x124>)
 800d292:	6013      	str	r3, [r2, #0]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d298:	4613      	mov	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4413      	add	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4a27      	ldr	r2, [pc, #156]	; (800d340 <xTaskResumeAll+0x128>)
 800d2a2:	441a      	add	r2, r3
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	3304      	adds	r3, #4
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	f7fe ff98 	bl	800c1e0 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b4:	4b23      	ldr	r3, [pc, #140]	; (800d344 <xTaskResumeAll+0x12c>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d302      	bcc.n	800d2c4 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 800d2be:	4b22      	ldr	r3, [pc, #136]	; (800d348 <xTaskResumeAll+0x130>)
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2c4:	4b1c      	ldr	r3, [pc, #112]	; (800d338 <xTaskResumeAll+0x120>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1cc      	bne.n	800d266 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d2d2:	f000 fbd7 	bl	800da84 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d2d6:	4b1d      	ldr	r3, [pc, #116]	; (800d34c <xTaskResumeAll+0x134>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d010      	beq.n	800d304 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800d2e2:	f000 f847 	bl	800d374 <xTaskIncrementTick>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d002      	beq.n	800d2f2 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 800d2ec:	4b16      	ldr	r3, [pc, #88]	; (800d348 <xTaskResumeAll+0x130>)
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1f1      	bne.n	800d2e2 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800d2fe:	4b13      	ldr	r3, [pc, #76]	; (800d34c <xTaskResumeAll+0x134>)
 800d300:	2200      	movs	r2, #0
 800d302:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800d304:	4b10      	ldr	r3, [pc, #64]	; (800d348 <xTaskResumeAll+0x130>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d009      	beq.n	800d320 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800d30c:	2301      	movs	r3, #1
 800d30e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d310:	4b0f      	ldr	r3, [pc, #60]	; (800d350 <xTaskResumeAll+0x138>)
 800d312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d316:	601a      	str	r2, [r3, #0]
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d320:	f001 f866 	bl	800e3f0 <vPortExitCritical>

    return xAlreadyYielded;
 800d324:	68bb      	ldr	r3, [r7, #8]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	2400520c 	.word	0x2400520c
 800d334:	240051e4 	.word	0x240051e4
 800d338:	240051a4 	.word	0x240051a4
 800d33c:	240051ec 	.word	0x240051ec
 800d340:	240050e8 	.word	0x240050e8
 800d344:	240050e4 	.word	0x240050e4
 800d348:	240051f8 	.word	0x240051f8
 800d34c:	240051f4 	.word	0x240051f4
 800d350:	e000ed04 	.word	0xe000ed04

0800d354 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800d35a:	4b05      	ldr	r3, [pc, #20]	; (800d370 <xTaskGetTickCount+0x1c>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d360:	687b      	ldr	r3, [r7, #4]
}
 800d362:	4618      	mov	r0, r3
 800d364:	370c      	adds	r7, #12
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	240051e8 	.word	0x240051e8

0800d374 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b086      	sub	sp, #24
 800d378:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d37a:	2300      	movs	r3, #0
 800d37c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d37e:	4b4f      	ldr	r3, [pc, #316]	; (800d4bc <xTaskIncrementTick+0x148>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	f040 808f 	bne.w	800d4a6 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d388:	4b4d      	ldr	r3, [pc, #308]	; (800d4c0 <xTaskIncrementTick+0x14c>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	3301      	adds	r3, #1
 800d38e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d390:	4a4b      	ldr	r2, [pc, #300]	; (800d4c0 <xTaskIncrementTick+0x14c>)
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d121      	bne.n	800d3e0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800d39c:	4b49      	ldr	r3, [pc, #292]	; (800d4c4 <xTaskIncrementTick+0x150>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d00b      	beq.n	800d3be <xTaskIncrementTick+0x4a>
 800d3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3aa:	b672      	cpsid	i
 800d3ac:	f383 8811 	msr	BASEPRI, r3
 800d3b0:	f3bf 8f6f 	isb	sy
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	b662      	cpsie	i
 800d3ba:	603b      	str	r3, [r7, #0]
 800d3bc:	e7fe      	b.n	800d3bc <xTaskIncrementTick+0x48>
 800d3be:	4b41      	ldr	r3, [pc, #260]	; (800d4c4 <xTaskIncrementTick+0x150>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	60fb      	str	r3, [r7, #12]
 800d3c4:	4b40      	ldr	r3, [pc, #256]	; (800d4c8 <xTaskIncrementTick+0x154>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a3e      	ldr	r2, [pc, #248]	; (800d4c4 <xTaskIncrementTick+0x150>)
 800d3ca:	6013      	str	r3, [r2, #0]
 800d3cc:	4a3e      	ldr	r2, [pc, #248]	; (800d4c8 <xTaskIncrementTick+0x154>)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	6013      	str	r3, [r2, #0]
 800d3d2:	4b3e      	ldr	r3, [pc, #248]	; (800d4cc <xTaskIncrementTick+0x158>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	4a3c      	ldr	r2, [pc, #240]	; (800d4cc <xTaskIncrementTick+0x158>)
 800d3da:	6013      	str	r3, [r2, #0]
 800d3dc:	f000 fb52 	bl	800da84 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d3e0:	4b3b      	ldr	r3, [pc, #236]	; (800d4d0 <xTaskIncrementTick+0x15c>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	693a      	ldr	r2, [r7, #16]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d348      	bcc.n	800d47c <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3ea:	4b36      	ldr	r3, [pc, #216]	; (800d4c4 <xTaskIncrementTick+0x150>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d104      	bne.n	800d3fe <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3f4:	4b36      	ldr	r3, [pc, #216]	; (800d4d0 <xTaskIncrementTick+0x15c>)
 800d3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3fa:	601a      	str	r2, [r3, #0]
                    break;
 800d3fc:	e03e      	b.n	800d47c <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3fe:	4b31      	ldr	r3, [pc, #196]	; (800d4c4 <xTaskIncrementTick+0x150>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800d40e:	693a      	ldr	r2, [r7, #16]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	429a      	cmp	r2, r3
 800d414:	d203      	bcs.n	800d41e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d416:	4a2e      	ldr	r2, [pc, #184]	; (800d4d0 <xTaskIncrementTick+0x15c>)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d41c:	e02e      	b.n	800d47c <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	3304      	adds	r3, #4
 800d422:	4618      	mov	r0, r3
 800d424:	f7fe ff39 	bl	800c29a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d004      	beq.n	800d43a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	3318      	adds	r3, #24
 800d434:	4618      	mov	r0, r3
 800d436:	f7fe ff30 	bl	800c29a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43e:	2201      	movs	r2, #1
 800d440:	409a      	lsls	r2, r3
 800d442:	4b24      	ldr	r3, [pc, #144]	; (800d4d4 <xTaskIncrementTick+0x160>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4313      	orrs	r3, r2
 800d448:	4a22      	ldr	r2, [pc, #136]	; (800d4d4 <xTaskIncrementTick+0x160>)
 800d44a:	6013      	str	r3, [r2, #0]
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d450:	4613      	mov	r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	4413      	add	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4a1f      	ldr	r2, [pc, #124]	; (800d4d8 <xTaskIncrementTick+0x164>)
 800d45a:	441a      	add	r2, r3
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	3304      	adds	r3, #4
 800d460:	4619      	mov	r1, r3
 800d462:	4610      	mov	r0, r2
 800d464:	f7fe febc 	bl	800c1e0 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d46c:	4b1b      	ldr	r3, [pc, #108]	; (800d4dc <xTaskIncrementTick+0x168>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d472:	429a      	cmp	r2, r3
 800d474:	d3b9      	bcc.n	800d3ea <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800d476:	2301      	movs	r3, #1
 800d478:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d47a:	e7b6      	b.n	800d3ea <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d47c:	4b17      	ldr	r3, [pc, #92]	; (800d4dc <xTaskIncrementTick+0x168>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d482:	4915      	ldr	r1, [pc, #84]	; (800d4d8 <xTaskIncrementTick+0x164>)
 800d484:	4613      	mov	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4413      	add	r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	440b      	add	r3, r1
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b01      	cmp	r3, #1
 800d492:	d901      	bls.n	800d498 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 800d494:	2301      	movs	r3, #1
 800d496:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800d498:	4b11      	ldr	r3, [pc, #68]	; (800d4e0 <xTaskIncrementTick+0x16c>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d007      	beq.n	800d4b0 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	617b      	str	r3, [r7, #20]
 800d4a4:	e004      	b.n	800d4b0 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800d4a6:	4b0f      	ldr	r3, [pc, #60]	; (800d4e4 <xTaskIncrementTick+0x170>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	4a0d      	ldr	r2, [pc, #52]	; (800d4e4 <xTaskIncrementTick+0x170>)
 800d4ae:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800d4b0:	697b      	ldr	r3, [r7, #20]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3718      	adds	r7, #24
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	2400520c 	.word	0x2400520c
 800d4c0:	240051e8 	.word	0x240051e8
 800d4c4:	2400519c 	.word	0x2400519c
 800d4c8:	240051a0 	.word	0x240051a0
 800d4cc:	240051fc 	.word	0x240051fc
 800d4d0:	24005204 	.word	0x24005204
 800d4d4:	240051ec 	.word	0x240051ec
 800d4d8:	240050e8 	.word	0x240050e8
 800d4dc:	240050e4 	.word	0x240050e4
 800d4e0:	240051f8 	.word	0x240051f8
 800d4e4:	240051f4 	.word	0x240051f4

0800d4e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b087      	sub	sp, #28
 800d4ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d4ee:	4b27      	ldr	r3, [pc, #156]	; (800d58c <vTaskSwitchContext+0xa4>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d003      	beq.n	800d4fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800d4f6:	4b26      	ldr	r3, [pc, #152]	; (800d590 <vTaskSwitchContext+0xa8>)
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800d4fc:	e040      	b.n	800d580 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800d4fe:	4b24      	ldr	r3, [pc, #144]	; (800d590 <vTaskSwitchContext+0xa8>)
 800d500:	2200      	movs	r2, #0
 800d502:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d504:	4b23      	ldr	r3, [pc, #140]	; (800d594 <vTaskSwitchContext+0xac>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	fab3 f383 	clz	r3, r3
 800d510:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800d512:	7afb      	ldrb	r3, [r7, #11]
 800d514:	f1c3 031f 	rsb	r3, r3, #31
 800d518:	617b      	str	r3, [r7, #20]
 800d51a:	491f      	ldr	r1, [pc, #124]	; (800d598 <vTaskSwitchContext+0xb0>)
 800d51c:	697a      	ldr	r2, [r7, #20]
 800d51e:	4613      	mov	r3, r2
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	4413      	add	r3, r2
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	440b      	add	r3, r1
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d10b      	bne.n	800d546 <vTaskSwitchContext+0x5e>
        __asm volatile
 800d52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d532:	b672      	cpsid	i
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	b662      	cpsie	i
 800d542:	607b      	str	r3, [r7, #4]
 800d544:	e7fe      	b.n	800d544 <vTaskSwitchContext+0x5c>
 800d546:	697a      	ldr	r2, [r7, #20]
 800d548:	4613      	mov	r3, r2
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4413      	add	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	4a11      	ldr	r2, [pc, #68]	; (800d598 <vTaskSwitchContext+0xb0>)
 800d552:	4413      	add	r3, r2
 800d554:	613b      	str	r3, [r7, #16]
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	605a      	str	r2, [r3, #4]
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	685a      	ldr	r2, [r3, #4]
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	3308      	adds	r3, #8
 800d568:	429a      	cmp	r2, r3
 800d56a:	d104      	bne.n	800d576 <vTaskSwitchContext+0x8e>
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	685a      	ldr	r2, [r3, #4]
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	605a      	str	r2, [r3, #4]
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	4a07      	ldr	r2, [pc, #28]	; (800d59c <vTaskSwitchContext+0xb4>)
 800d57e:	6013      	str	r3, [r2, #0]
}
 800d580:	bf00      	nop
 800d582:	371c      	adds	r7, #28
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr
 800d58c:	2400520c 	.word	0x2400520c
 800d590:	240051f8 	.word	0x240051f8
 800d594:	240051ec 	.word	0x240051ec
 800d598:	240050e8 	.word	0x240050e8
 800d59c:	240050e4 	.word	0x240050e4

0800d5a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d10b      	bne.n	800d5c8 <vTaskPlaceOnEventList+0x28>
 800d5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b4:	b672      	cpsid	i
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	b662      	cpsie	i
 800d5c4:	60fb      	str	r3, [r7, #12]
 800d5c6:	e7fe      	b.n	800d5c6 <vTaskPlaceOnEventList+0x26>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5c8:	4b07      	ldr	r3, [pc, #28]	; (800d5e8 <vTaskPlaceOnEventList+0x48>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	3318      	adds	r3, #24
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f7fe fe29 	bl	800c228 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d5d6:	2101      	movs	r1, #1
 800d5d8:	6838      	ldr	r0, [r7, #0]
 800d5da:	f000 fd69 	bl	800e0b0 <prvAddCurrentTaskToDelayedList>
}
 800d5de:	bf00      	nop
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	240050e4 	.word	0x240050e4

0800d5ec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b086      	sub	sp, #24
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	60f8      	str	r0, [r7, #12]
 800d5f4:	60b9      	str	r1, [r7, #8]
 800d5f6:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d10b      	bne.n	800d616 <vTaskPlaceOnUnorderedEventList+0x2a>
 800d5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d602:	b672      	cpsid	i
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	b662      	cpsie	i
 800d612:	617b      	str	r3, [r7, #20]
 800d614:	e7fe      	b.n	800d614 <vTaskPlaceOnUnorderedEventList+0x28>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 800d616:	4b12      	ldr	r3, [pc, #72]	; (800d660 <vTaskPlaceOnUnorderedEventList+0x74>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d10b      	bne.n	800d636 <vTaskPlaceOnUnorderedEventList+0x4a>
 800d61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d622:	b672      	cpsid	i
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	b662      	cpsie	i
 800d632:	613b      	str	r3, [r7, #16]
 800d634:	e7fe      	b.n	800d634 <vTaskPlaceOnUnorderedEventList+0x48>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800d636:	4b0b      	ldr	r3, [pc, #44]	; (800d664 <vTaskPlaceOnUnorderedEventList+0x78>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800d640:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d642:	4b08      	ldr	r3, [pc, #32]	; (800d664 <vTaskPlaceOnUnorderedEventList+0x78>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	3318      	adds	r3, #24
 800d648:	4619      	mov	r1, r3
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f7fe fdc8 	bl	800c1e0 <vListInsertEnd>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d650:	2101      	movs	r1, #1
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 fd2c 	bl	800e0b0 <prvAddCurrentTaskToDelayedList>
}
 800d658:	bf00      	nop
 800d65a:	3718      	adds	r7, #24
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	2400520c 	.word	0x2400520c
 800d664:	240050e4 	.word	0x240050e4

0800d668 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b086      	sub	sp, #24
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	68db      	ldr	r3, [r3, #12]
 800d676:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10b      	bne.n	800d696 <xTaskRemoveFromEventList+0x2e>
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	b672      	cpsid	i
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	b662      	cpsie	i
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	e7fe      	b.n	800d694 <xTaskRemoveFromEventList+0x2c>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	3318      	adds	r3, #24
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fe fdfd 	bl	800c29a <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6a0:	4b1d      	ldr	r3, [pc, #116]	; (800d718 <xTaskRemoveFromEventList+0xb0>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d11c      	bne.n	800d6e2 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	3304      	adds	r3, #4
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fe fdf4 	bl	800c29a <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	409a      	lsls	r2, r3
 800d6ba:	4b18      	ldr	r3, [pc, #96]	; (800d71c <xTaskRemoveFromEventList+0xb4>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	4a16      	ldr	r2, [pc, #88]	; (800d71c <xTaskRemoveFromEventList+0xb4>)
 800d6c2:	6013      	str	r3, [r2, #0]
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c8:	4613      	mov	r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	4413      	add	r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4a13      	ldr	r2, [pc, #76]	; (800d720 <xTaskRemoveFromEventList+0xb8>)
 800d6d2:	441a      	add	r2, r3
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	3304      	adds	r3, #4
 800d6d8:	4619      	mov	r1, r3
 800d6da:	4610      	mov	r0, r2
 800d6dc:	f7fe fd80 	bl	800c1e0 <vListInsertEnd>
 800d6e0:	e005      	b.n	800d6ee <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	3318      	adds	r3, #24
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	480e      	ldr	r0, [pc, #56]	; (800d724 <xTaskRemoveFromEventList+0xbc>)
 800d6ea:	f7fe fd79 	bl	800c1e0 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f2:	4b0d      	ldr	r3, [pc, #52]	; (800d728 <xTaskRemoveFromEventList+0xc0>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d905      	bls.n	800d708 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800d700:	4b0a      	ldr	r3, [pc, #40]	; (800d72c <xTaskRemoveFromEventList+0xc4>)
 800d702:	2201      	movs	r2, #1
 800d704:	601a      	str	r2, [r3, #0]
 800d706:	e001      	b.n	800d70c <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 800d708:	2300      	movs	r3, #0
 800d70a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800d70c:	697b      	ldr	r3, [r7, #20]
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3718      	adds	r7, #24
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	2400520c 	.word	0x2400520c
 800d71c:	240051ec 	.word	0x240051ec
 800d720:	240050e8 	.word	0x240050e8
 800d724:	240051a4 	.word	0x240051a4
 800d728:	240050e4 	.word	0x240050e4
 800d72c:	240051f8 	.word	0x240051f8

0800d730 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b086      	sub	sp, #24
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 800d73a:	4b2a      	ldr	r3, [pc, #168]	; (800d7e4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d10b      	bne.n	800d75a <vTaskRemoveFromUnorderedEventList+0x2a>
 800d742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d746:	b672      	cpsid	i
 800d748:	f383 8811 	msr	BASEPRI, r3
 800d74c:	f3bf 8f6f 	isb	sy
 800d750:	f3bf 8f4f 	dsb	sy
 800d754:	b662      	cpsie	i
 800d756:	613b      	str	r3, [r7, #16]
 800d758:	e7fe      	b.n	800d758 <vTaskRemoveFromUnorderedEventList+0x28>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d10b      	bne.n	800d788 <vTaskRemoveFromUnorderedEventList+0x58>
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	b672      	cpsid	i
 800d776:	f383 8811 	msr	BASEPRI, r3
 800d77a:	f3bf 8f6f 	isb	sy
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	b662      	cpsie	i
 800d784:	60fb      	str	r3, [r7, #12]
 800d786:	e7fe      	b.n	800d786 <vTaskRemoveFromUnorderedEventList+0x56>
    ( void ) uxListRemove( pxEventListItem );
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7fe fd86 	bl	800c29a <uxListRemove>
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	3304      	adds	r3, #4
 800d792:	4618      	mov	r0, r3
 800d794:	f7fe fd81 	bl	800c29a <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d79c:	2201      	movs	r2, #1
 800d79e:	409a      	lsls	r2, r3
 800d7a0:	4b11      	ldr	r3, [pc, #68]	; (800d7e8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	4a10      	ldr	r2, [pc, #64]	; (800d7e8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800d7a8:	6013      	str	r3, [r2, #0]
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4413      	add	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	4a0d      	ldr	r2, [pc, #52]	; (800d7ec <vTaskRemoveFromUnorderedEventList+0xbc>)
 800d7b8:	441a      	add	r2, r3
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	3304      	adds	r3, #4
 800d7be:	4619      	mov	r1, r3
 800d7c0:	4610      	mov	r0, r2
 800d7c2:	f7fe fd0d 	bl	800c1e0 <vListInsertEnd>

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ca:	4b09      	ldr	r3, [pc, #36]	; (800d7f0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d902      	bls.n	800d7da <vTaskRemoveFromUnorderedEventList+0xaa>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 800d7d4:	4b07      	ldr	r3, [pc, #28]	; (800d7f4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	601a      	str	r2, [r3, #0]
    }
}
 800d7da:	bf00      	nop
 800d7dc:	3718      	adds	r7, #24
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	2400520c 	.word	0x2400520c
 800d7e8:	240051ec 	.word	0x240051ec
 800d7ec:	240050e8 	.word	0x240050e8
 800d7f0:	240050e4 	.word	0x240050e4
 800d7f4:	240051f8 	.word	0x240051f8

0800d7f8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10b      	bne.n	800d81e <vTaskSetTimeOutState+0x26>
 800d806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80a:	b672      	cpsid	i
 800d80c:	f383 8811 	msr	BASEPRI, r3
 800d810:	f3bf 8f6f 	isb	sy
 800d814:	f3bf 8f4f 	dsb	sy
 800d818:	b662      	cpsie	i
 800d81a:	60fb      	str	r3, [r7, #12]
 800d81c:	e7fe      	b.n	800d81c <vTaskSetTimeOutState+0x24>
    taskENTER_CRITICAL();
 800d81e:	f000 fdb5 	bl	800e38c <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d822:	4b07      	ldr	r3, [pc, #28]	; (800d840 <vTaskSetTimeOutState+0x48>)
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 800d82a:	4b06      	ldr	r3, [pc, #24]	; (800d844 <vTaskSetTimeOutState+0x4c>)
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 800d832:	f000 fddd 	bl	800e3f0 <vPortExitCritical>
}
 800d836:	bf00      	nop
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	240051fc 	.word	0x240051fc
 800d844:	240051e8 	.word	0x240051e8

0800d848 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d850:	4b06      	ldr	r3, [pc, #24]	; (800d86c <vTaskInternalSetTimeOutState+0x24>)
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800d858:	4b05      	ldr	r3, [pc, #20]	; (800d870 <vTaskInternalSetTimeOutState+0x28>)
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	605a      	str	r2, [r3, #4]
}
 800d860:	bf00      	nop
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	240051fc 	.word	0x240051fc
 800d870:	240051e8 	.word	0x240051e8

0800d874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b088      	sub	sp, #32
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d10b      	bne.n	800d89c <xTaskCheckForTimeOut+0x28>
 800d884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d888:	b672      	cpsid	i
 800d88a:	f383 8811 	msr	BASEPRI, r3
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	b662      	cpsie	i
 800d898:	613b      	str	r3, [r7, #16]
 800d89a:	e7fe      	b.n	800d89a <xTaskCheckForTimeOut+0x26>
    configASSERT( pxTicksToWait );
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10b      	bne.n	800d8ba <xTaskCheckForTimeOut+0x46>
 800d8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a6:	b672      	cpsid	i
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	b662      	cpsie	i
 800d8b6:	60fb      	str	r3, [r7, #12]
 800d8b8:	e7fe      	b.n	800d8b8 <xTaskCheckForTimeOut+0x44>

    taskENTER_CRITICAL();
 800d8ba:	f000 fd67 	bl	800e38c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800d8be:	4b1f      	ldr	r3, [pc, #124]	; (800d93c <xTaskCheckForTimeOut+0xc8>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	69ba      	ldr	r2, [r7, #24]
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d6:	d102      	bne.n	800d8de <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	61fb      	str	r3, [r7, #28]
 800d8dc:	e026      	b.n	800d92c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	4b17      	ldr	r3, [pc, #92]	; (800d940 <xTaskCheckForTimeOut+0xcc>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d00a      	beq.n	800d900 <xTaskCheckForTimeOut+0x8c>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	69ba      	ldr	r2, [r7, #24]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d305      	bcc.n	800d900 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	e015      	b.n	800d92c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	697a      	ldr	r2, [r7, #20]
 800d906:	429a      	cmp	r2, r3
 800d908:	d20b      	bcs.n	800d922 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	1ad2      	subs	r2, r2, r3
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f7ff ff96 	bl	800d848 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800d91c:	2300      	movs	r3, #0
 800d91e:	61fb      	str	r3, [r7, #28]
 800d920:	e004      	b.n	800d92c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	2200      	movs	r2, #0
 800d926:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800d928:	2301      	movs	r3, #1
 800d92a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800d92c:	f000 fd60 	bl	800e3f0 <vPortExitCritical>

    return xReturn;
 800d930:	69fb      	ldr	r3, [r7, #28]
}
 800d932:	4618      	mov	r0, r3
 800d934:	3720      	adds	r7, #32
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	240051e8 	.word	0x240051e8
 800d940:	240051fc 	.word	0x240051fc

0800d944 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d944:	b480      	push	{r7}
 800d946:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800d948:	4b03      	ldr	r3, [pc, #12]	; (800d958 <vTaskMissedYield+0x14>)
 800d94a:	2201      	movs	r2, #1
 800d94c:	601a      	str	r2, [r3, #0]
}
 800d94e:	bf00      	nop
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr
 800d958:	240051f8 	.word	0x240051f8

0800d95c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800d964:	f000 f852 	bl	800da0c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d968:	4b06      	ldr	r3, [pc, #24]	; (800d984 <prvIdleTask+0x28>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d9f9      	bls.n	800d964 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800d970:	4b05      	ldr	r3, [pc, #20]	; (800d988 <prvIdleTask+0x2c>)
 800d972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d976:	601a      	str	r2, [r3, #0]
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800d980:	e7f0      	b.n	800d964 <prvIdleTask+0x8>
 800d982:	bf00      	nop
 800d984:	240050e8 	.word	0x240050e8
 800d988:	e000ed04 	.word	0xe000ed04

0800d98c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d992:	2300      	movs	r3, #0
 800d994:	607b      	str	r3, [r7, #4]
 800d996:	e00c      	b.n	800d9b2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	4613      	mov	r3, r2
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	4413      	add	r3, r2
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	4a12      	ldr	r2, [pc, #72]	; (800d9ec <prvInitialiseTaskLists+0x60>)
 800d9a4:	4413      	add	r3, r2
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fbed 	bl	800c186 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	607b      	str	r3, [r7, #4]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b06      	cmp	r3, #6
 800d9b6:	d9ef      	bls.n	800d998 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800d9b8:	480d      	ldr	r0, [pc, #52]	; (800d9f0 <prvInitialiseTaskLists+0x64>)
 800d9ba:	f7fe fbe4 	bl	800c186 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800d9be:	480d      	ldr	r0, [pc, #52]	; (800d9f4 <prvInitialiseTaskLists+0x68>)
 800d9c0:	f7fe fbe1 	bl	800c186 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800d9c4:	480c      	ldr	r0, [pc, #48]	; (800d9f8 <prvInitialiseTaskLists+0x6c>)
 800d9c6:	f7fe fbde 	bl	800c186 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800d9ca:	480c      	ldr	r0, [pc, #48]	; (800d9fc <prvInitialiseTaskLists+0x70>)
 800d9cc:	f7fe fbdb 	bl	800c186 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800d9d0:	480b      	ldr	r0, [pc, #44]	; (800da00 <prvInitialiseTaskLists+0x74>)
 800d9d2:	f7fe fbd8 	bl	800c186 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800d9d6:	4b0b      	ldr	r3, [pc, #44]	; (800da04 <prvInitialiseTaskLists+0x78>)
 800d9d8:	4a05      	ldr	r2, [pc, #20]	; (800d9f0 <prvInitialiseTaskLists+0x64>)
 800d9da:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9dc:	4b0a      	ldr	r3, [pc, #40]	; (800da08 <prvInitialiseTaskLists+0x7c>)
 800d9de:	4a05      	ldr	r2, [pc, #20]	; (800d9f4 <prvInitialiseTaskLists+0x68>)
 800d9e0:	601a      	str	r2, [r3, #0]
}
 800d9e2:	bf00      	nop
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	240050e8 	.word	0x240050e8
 800d9f0:	24005174 	.word	0x24005174
 800d9f4:	24005188 	.word	0x24005188
 800d9f8:	240051a4 	.word	0x240051a4
 800d9fc:	240051b8 	.word	0x240051b8
 800da00:	240051d0 	.word	0x240051d0
 800da04:	2400519c 	.word	0x2400519c
 800da08:	240051a0 	.word	0x240051a0

0800da0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da12:	e019      	b.n	800da48 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800da14:	f000 fcba 	bl	800e38c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da18:	4b0f      	ldr	r3, [pc, #60]	; (800da58 <prvCheckTasksWaitingTermination+0x4c>)
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	3304      	adds	r3, #4
 800da24:	4618      	mov	r0, r3
 800da26:	f7fe fc38 	bl	800c29a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800da2a:	4b0c      	ldr	r3, [pc, #48]	; (800da5c <prvCheckTasksWaitingTermination+0x50>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	3b01      	subs	r3, #1
 800da30:	4a0a      	ldr	r2, [pc, #40]	; (800da5c <prvCheckTasksWaitingTermination+0x50>)
 800da32:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800da34:	4b0a      	ldr	r3, [pc, #40]	; (800da60 <prvCheckTasksWaitingTermination+0x54>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	3b01      	subs	r3, #1
 800da3a:	4a09      	ldr	r2, [pc, #36]	; (800da60 <prvCheckTasksWaitingTermination+0x54>)
 800da3c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800da3e:	f000 fcd7 	bl	800e3f0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f80e 	bl	800da64 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da48:	4b05      	ldr	r3, [pc, #20]	; (800da60 <prvCheckTasksWaitingTermination+0x54>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1e1      	bne.n	800da14 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800da50:	bf00      	nop
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	240051b8 	.word	0x240051b8
 800da5c:	240051e4 	.word	0x240051e4
 800da60:	240051cc 	.word	0x240051cc

0800da64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da70:	4618      	mov	r0, r3
 800da72:	f7fe f863 	bl	800bb3c <vPortFree>
                vPortFree( pxTCB );
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f7fe f860 	bl	800bb3c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800da7c:	bf00      	nop
 800da7e:	3708      	adds	r7, #8
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da84:	b480      	push	{r7}
 800da86:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da88:	4b0a      	ldr	r3, [pc, #40]	; (800dab4 <prvResetNextTaskUnblockTime+0x30>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d104      	bne.n	800da9c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800da92:	4b09      	ldr	r3, [pc, #36]	; (800dab8 <prvResetNextTaskUnblockTime+0x34>)
 800da94:	f04f 32ff 	mov.w	r2, #4294967295
 800da98:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800da9a:	e005      	b.n	800daa8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800da9c:	4b05      	ldr	r3, [pc, #20]	; (800dab4 <prvResetNextTaskUnblockTime+0x30>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a04      	ldr	r2, [pc, #16]	; (800dab8 <prvResetNextTaskUnblockTime+0x34>)
 800daa6:	6013      	str	r3, [r2, #0]
}
 800daa8:	bf00      	nop
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	2400519c 	.word	0x2400519c
 800dab8:	24005204 	.word	0x24005204

0800dabc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800dac2:	4b05      	ldr	r3, [pc, #20]	; (800dad8 <xTaskGetCurrentTaskHandle+0x1c>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	607b      	str	r3, [r7, #4]

        return xReturn;
 800dac8:	687b      	ldr	r3, [r7, #4]
    }
 800daca:	4618      	mov	r0, r3
 800dacc:	370c      	adds	r7, #12
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	240050e4 	.word	0x240050e4

0800dadc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800dae2:	4b0b      	ldr	r3, [pc, #44]	; (800db10 <xTaskGetSchedulerState+0x34>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d102      	bne.n	800daf0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800daea:	2301      	movs	r3, #1
 800daec:	607b      	str	r3, [r7, #4]
 800daee:	e008      	b.n	800db02 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daf0:	4b08      	ldr	r3, [pc, #32]	; (800db14 <xTaskGetSchedulerState+0x38>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d102      	bne.n	800dafe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800daf8:	2302      	movs	r3, #2
 800dafa:	607b      	str	r3, [r7, #4]
 800dafc:	e001      	b.n	800db02 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800dafe:	2300      	movs	r3, #0
 800db00:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800db02:	687b      	ldr	r3, [r7, #4]
    }
 800db04:	4618      	mov	r0, r3
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr
 800db10:	240051f0 	.word	0x240051f0
 800db14:	2400520c 	.word	0x2400520c

0800db18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800db24:	2300      	movs	r3, #0
 800db26:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d05e      	beq.n	800dbec <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db32:	4b31      	ldr	r3, [pc, #196]	; (800dbf8 <xTaskPriorityInherit+0xe0>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db38:	429a      	cmp	r2, r3
 800db3a:	d24e      	bcs.n	800dbda <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	699b      	ldr	r3, [r3, #24]
 800db40:	2b00      	cmp	r3, #0
 800db42:	db06      	blt.n	800db52 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db44:	4b2c      	ldr	r3, [pc, #176]	; (800dbf8 <xTaskPriorityInherit+0xe0>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4a:	f1c3 0207 	rsb	r2, r3, #7
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	6959      	ldr	r1, [r3, #20]
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db5a:	4613      	mov	r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4413      	add	r3, r2
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	4a26      	ldr	r2, [pc, #152]	; (800dbfc <xTaskPriorityInherit+0xe4>)
 800db64:	4413      	add	r3, r2
 800db66:	4299      	cmp	r1, r3
 800db68:	d12f      	bne.n	800dbca <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	3304      	adds	r3, #4
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fe fb93 	bl	800c29a <uxListRemove>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d10a      	bne.n	800db90 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db7e:	2201      	movs	r2, #1
 800db80:	fa02 f303 	lsl.w	r3, r2, r3
 800db84:	43da      	mvns	r2, r3
 800db86:	4b1e      	ldr	r3, [pc, #120]	; (800dc00 <xTaskPriorityInherit+0xe8>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4013      	ands	r3, r2
 800db8c:	4a1c      	ldr	r2, [pc, #112]	; (800dc00 <xTaskPriorityInherit+0xe8>)
 800db8e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db90:	4b19      	ldr	r3, [pc, #100]	; (800dbf8 <xTaskPriorityInherit+0xe0>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9e:	2201      	movs	r2, #1
 800dba0:	409a      	lsls	r2, r3
 800dba2:	4b17      	ldr	r3, [pc, #92]	; (800dc00 <xTaskPriorityInherit+0xe8>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4313      	orrs	r3, r2
 800dba8:	4a15      	ldr	r2, [pc, #84]	; (800dc00 <xTaskPriorityInherit+0xe8>)
 800dbaa:	6013      	str	r3, [r2, #0]
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	4413      	add	r3, r2
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	4a10      	ldr	r2, [pc, #64]	; (800dbfc <xTaskPriorityInherit+0xe4>)
 800dbba:	441a      	add	r2, r3
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	3304      	adds	r3, #4
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	4610      	mov	r0, r2
 800dbc4:	f7fe fb0c 	bl	800c1e0 <vListInsertEnd>
 800dbc8:	e004      	b.n	800dbd4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbca:	4b0b      	ldr	r3, [pc, #44]	; (800dbf8 <xTaskPriorityInherit+0xe0>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	60fb      	str	r3, [r7, #12]
 800dbd8:	e008      	b.n	800dbec <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbde:	4b06      	ldr	r3, [pc, #24]	; (800dbf8 <xTaskPriorityInherit+0xe0>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d201      	bcs.n	800dbec <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800dbec:	68fb      	ldr	r3, [r7, #12]
    }
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3710      	adds	r7, #16
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	240050e4 	.word	0x240050e4
 800dbfc:	240050e8 	.word	0x240050e8
 800dc00:	240051ec 	.word	0x240051ec

0800dc04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800dc10:	2300      	movs	r3, #0
 800dc12:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d065      	beq.n	800dce6 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800dc1a:	4b35      	ldr	r3, [pc, #212]	; (800dcf0 <xTaskPriorityDisinherit+0xec>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	693a      	ldr	r2, [r7, #16]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d00b      	beq.n	800dc3c <xTaskPriorityDisinherit+0x38>
 800dc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc28:	b672      	cpsid	i
 800dc2a:	f383 8811 	msr	BASEPRI, r3
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	f3bf 8f4f 	dsb	sy
 800dc36:	b662      	cpsie	i
 800dc38:	60fb      	str	r3, [r7, #12]
 800dc3a:	e7fe      	b.n	800dc3a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10b      	bne.n	800dc5c <xTaskPriorityDisinherit+0x58>
 800dc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc48:	b672      	cpsid	i
 800dc4a:	f383 8811 	msr	BASEPRI, r3
 800dc4e:	f3bf 8f6f 	isb	sy
 800dc52:	f3bf 8f4f 	dsb	sy
 800dc56:	b662      	cpsie	i
 800dc58:	60bb      	str	r3, [r7, #8]
 800dc5a:	e7fe      	b.n	800dc5a <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc60:	1e5a      	subs	r2, r3, #1
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d039      	beq.n	800dce6 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d135      	bne.n	800dce6 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	3304      	adds	r3, #4
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fe fb0b 	bl	800c29a <uxListRemove>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10a      	bne.n	800dca0 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc8e:	2201      	movs	r2, #1
 800dc90:	fa02 f303 	lsl.w	r3, r2, r3
 800dc94:	43da      	mvns	r2, r3
 800dc96:	4b17      	ldr	r3, [pc, #92]	; (800dcf4 <xTaskPriorityDisinherit+0xf0>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4013      	ands	r3, r2
 800dc9c:	4a15      	ldr	r2, [pc, #84]	; (800dcf4 <xTaskPriorityDisinherit+0xf0>)
 800dc9e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcac:	f1c3 0207 	rsb	r2, r3, #7
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb8:	2201      	movs	r2, #1
 800dcba:	409a      	lsls	r2, r3
 800dcbc:	4b0d      	ldr	r3, [pc, #52]	; (800dcf4 <xTaskPriorityDisinherit+0xf0>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	4a0c      	ldr	r2, [pc, #48]	; (800dcf4 <xTaskPriorityDisinherit+0xf0>)
 800dcc4:	6013      	str	r3, [r2, #0]
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcca:	4613      	mov	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	4413      	add	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	4a09      	ldr	r2, [pc, #36]	; (800dcf8 <xTaskPriorityDisinherit+0xf4>)
 800dcd4:	441a      	add	r2, r3
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	3304      	adds	r3, #4
 800dcda:	4619      	mov	r1, r3
 800dcdc:	4610      	mov	r0, r2
 800dcde:	f7fe fa7f 	bl	800c1e0 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800dce2:	2301      	movs	r3, #1
 800dce4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800dce6:	697b      	ldr	r3, [r7, #20]
    }
 800dce8:	4618      	mov	r0, r3
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	240050e4 	.word	0x240050e4
 800dcf4:	240051ec 	.word	0x240051ec
 800dcf8:	240050e8 	.word	0x240050e8

0800dcfc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b088      	sub	sp, #32
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d079      	beq.n	800de08 <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d10b      	bne.n	800dd34 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800dd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd20:	b672      	cpsid	i
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	b662      	cpsie	i
 800dd30:	60fb      	str	r3, [r7, #12]
 800dd32:	e7fe      	b.n	800dd32 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd38:	683a      	ldr	r2, [r7, #0]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d902      	bls.n	800dd44 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	61fb      	str	r3, [r7, #28]
 800dd42:	e002      	b.n	800dd4a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd48:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd4e:	69fa      	ldr	r2, [r7, #28]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d059      	beq.n	800de08 <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd58:	697a      	ldr	r2, [r7, #20]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d154      	bne.n	800de08 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800dd5e:	4b2c      	ldr	r3, [pc, #176]	; (800de10 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	69ba      	ldr	r2, [r7, #24]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d10b      	bne.n	800dd80 <vTaskPriorityDisinheritAfterTimeout+0x84>
 800dd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6c:	b672      	cpsid	i
 800dd6e:	f383 8811 	msr	BASEPRI, r3
 800dd72:	f3bf 8f6f 	isb	sy
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	b662      	cpsie	i
 800dd7c:	60bb      	str	r3, [r7, #8]
 800dd7e:	e7fe      	b.n	800dd7e <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd84:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	69fa      	ldr	r2, [r7, #28]
 800dd8a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	699b      	ldr	r3, [r3, #24]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	db04      	blt.n	800dd9e <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	f1c3 0207 	rsb	r2, r3, #7
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	6959      	ldr	r1, [r3, #20]
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	4613      	mov	r3, r2
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	4413      	add	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4a19      	ldr	r2, [pc, #100]	; (800de14 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ddae:	4413      	add	r3, r2
 800ddb0:	4299      	cmp	r1, r3
 800ddb2:	d129      	bne.n	800de08 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddb4:	69bb      	ldr	r3, [r7, #24]
 800ddb6:	3304      	adds	r3, #4
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7fe fa6e 	bl	800c29a <uxListRemove>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10a      	bne.n	800ddda <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc8:	2201      	movs	r2, #1
 800ddca:	fa02 f303 	lsl.w	r3, r2, r3
 800ddce:	43da      	mvns	r2, r3
 800ddd0:	4b11      	ldr	r3, [pc, #68]	; (800de18 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4013      	ands	r3, r2
 800ddd6:	4a10      	ldr	r2, [pc, #64]	; (800de18 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ddd8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddde:	2201      	movs	r2, #1
 800dde0:	409a      	lsls	r2, r3
 800dde2:	4b0d      	ldr	r3, [pc, #52]	; (800de18 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4313      	orrs	r3, r2
 800dde8:	4a0b      	ldr	r2, [pc, #44]	; (800de18 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ddea:	6013      	str	r3, [r2, #0]
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	4413      	add	r3, r2
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	4a06      	ldr	r2, [pc, #24]	; (800de14 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ddfa:	441a      	add	r2, r3
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	3304      	adds	r3, #4
 800de00:	4619      	mov	r1, r3
 800de02:	4610      	mov	r0, r2
 800de04:	f7fe f9ec 	bl	800c1e0 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800de08:	bf00      	nop
 800de0a:	3720      	adds	r7, #32
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	240050e4 	.word	0x240050e4
 800de14:	240050e8 	.word	0x240050e8
 800de18:	240051ec 	.word	0x240051ec

0800de1c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800de22:	4b09      	ldr	r3, [pc, #36]	; (800de48 <uxTaskResetEventItemValue+0x2c>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	699b      	ldr	r3, [r3, #24]
 800de28:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de2a:	4b07      	ldr	r3, [pc, #28]	; (800de48 <uxTaskResetEventItemValue+0x2c>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de30:	4b05      	ldr	r3, [pc, #20]	; (800de48 <uxTaskResetEventItemValue+0x2c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f1c2 0207 	rsb	r2, r2, #7
 800de38:	619a      	str	r2, [r3, #24]

    return uxReturn;
 800de3a:	687b      	ldr	r3, [r7, #4]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr
 800de48:	240050e4 	.word	0x240050e4

0800de4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800de4c:	b480      	push	{r7}
 800de4e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800de50:	4b07      	ldr	r3, [pc, #28]	; (800de70 <pvTaskIncrementMutexHeldCount+0x24>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d004      	beq.n	800de62 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800de58:	4b05      	ldr	r3, [pc, #20]	; (800de70 <pvTaskIncrementMutexHeldCount+0x24>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de5e:	3201      	adds	r2, #1
 800de60:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 800de62:	4b03      	ldr	r3, [pc, #12]	; (800de70 <pvTaskIncrementMutexHeldCount+0x24>)
 800de64:	681b      	ldr	r3, [r3, #0]
    }
 800de66:	4618      	mov	r0, r3
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	240050e4 	.word	0x240050e4

0800de74 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 800de74:	b580      	push	{r7, lr}
 800de76:	b086      	sub	sp, #24
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00b      	beq.n	800de9e <ulTaskGenericNotifyTake+0x2a>
 800de86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8a:	b672      	cpsid	i
 800de8c:	f383 8811 	msr	BASEPRI, r3
 800de90:	f3bf 8f6f 	isb	sy
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	b662      	cpsie	i
 800de9a:	613b      	str	r3, [r7, #16]
 800de9c:	e7fe      	b.n	800de9c <ulTaskGenericNotifyTake+0x28>

        taskENTER_CRITICAL();
 800de9e:	f000 fa75 	bl	800e38c <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 800dea2:	4b28      	ldr	r3, [pc, #160]	; (800df44 <ulTaskGenericNotifyTake+0xd0>)
 800dea4:	681a      	ldr	r2, [r3, #0]
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	3314      	adds	r3, #20
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	4413      	add	r3, r2
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d115      	bne.n	800dee0 <ulTaskGenericNotifyTake+0x6c>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800deb4:	4b23      	ldr	r3, [pc, #140]	; (800df44 <ulTaskGenericNotifyTake+0xd0>)
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	4413      	add	r3, r2
 800debc:	3358      	adds	r3, #88	; 0x58
 800debe:	2201      	movs	r2, #1
 800dec0:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00b      	beq.n	800dee0 <ulTaskGenericNotifyTake+0x6c>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dec8:	2101      	movs	r1, #1
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 f8f0 	bl	800e0b0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800ded0:	4b1d      	ldr	r3, [pc, #116]	; (800df48 <ulTaskGenericNotifyTake+0xd4>)
 800ded2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ded6:	601a      	str	r2, [r3, #0]
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800dee0:	f000 fa86 	bl	800e3f0 <vPortExitCritical>

        taskENTER_CRITICAL();
 800dee4:	f000 fa52 	bl	800e38c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800dee8:	4b16      	ldr	r3, [pc, #88]	; (800df44 <ulTaskGenericNotifyTake+0xd0>)
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	3314      	adds	r3, #20
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	4413      	add	r3, r2
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d014      	beq.n	800df28 <ulTaskGenericNotifyTake+0xb4>
            {
                if( xClearCountOnExit != pdFALSE )
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d008      	beq.n	800df16 <ulTaskGenericNotifyTake+0xa2>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800df04:	4b0f      	ldr	r3, [pc, #60]	; (800df44 <ulTaskGenericNotifyTake+0xd0>)
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	3314      	adds	r3, #20
 800df0c:	009b      	lsls	r3, r3, #2
 800df0e:	4413      	add	r3, r2
 800df10:	2200      	movs	r2, #0
 800df12:	605a      	str	r2, [r3, #4]
 800df14:	e008      	b.n	800df28 <ulTaskGenericNotifyTake+0xb4>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 800df16:	4b0b      	ldr	r3, [pc, #44]	; (800df44 <ulTaskGenericNotifyTake+0xd0>)
 800df18:	6819      	ldr	r1, [r3, #0]
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	1e5a      	subs	r2, r3, #1
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3314      	adds	r3, #20
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	440b      	add	r3, r1
 800df26:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800df28:	4b06      	ldr	r3, [pc, #24]	; (800df44 <ulTaskGenericNotifyTake+0xd0>)
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	4413      	add	r3, r2
 800df30:	3358      	adds	r3, #88	; 0x58
 800df32:	2200      	movs	r2, #0
 800df34:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800df36:	f000 fa5b 	bl	800e3f0 <vPortExitCritical>

        return ulReturn;
 800df3a:	697b      	ldr	r3, [r7, #20]
    }
 800df3c:	4618      	mov	r0, r3
 800df3e:	3718      	adds	r7, #24
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	240050e4 	.word	0x240050e4
 800df48:	e000ed04 	.word	0xe000ed04

0800df4c <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08e      	sub	sp, #56	; 0x38
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d10b      	bne.n	800df76 <vTaskGenericNotifyGiveFromISR+0x2a>
 800df5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df62:	b672      	cpsid	i
 800df64:	f383 8811 	msr	BASEPRI, r3
 800df68:	f3bf 8f6f 	isb	sy
 800df6c:	f3bf 8f4f 	dsb	sy
 800df70:	b662      	cpsie	i
 800df72:	62bb      	str	r3, [r7, #40]	; 0x28
 800df74:	e7fe      	b.n	800df74 <vTaskGenericNotifyGiveFromISR+0x28>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00b      	beq.n	800df94 <vTaskGenericNotifyGiveFromISR+0x48>
 800df7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df80:	b672      	cpsid	i
 800df82:	f383 8811 	msr	BASEPRI, r3
 800df86:	f3bf 8f6f 	isb	sy
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	b662      	cpsie	i
 800df90:	627b      	str	r3, [r7, #36]	; 0x24
 800df92:	e7fe      	b.n	800df92 <vTaskGenericNotifyGiveFromISR+0x46>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df94:	f000 fae2 	bl	800e55c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	637b      	str	r3, [r7, #52]	; 0x34

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800df9c:	f3ef 8211 	mrs	r2, BASEPRI
 800dfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa4:	b672      	cpsid	i
 800dfa6:	f383 8811 	msr	BASEPRI, r3
 800dfaa:	f3bf 8f6f 	isb	sy
 800dfae:	f3bf 8f4f 	dsb	sy
 800dfb2:	b662      	cpsie	i
 800dfb4:	623a      	str	r2, [r7, #32]
 800dfb6:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800dfb8:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dfba:	633b      	str	r3, [r7, #48]	; 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800dfbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	3358      	adds	r3, #88	; 0x58
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800dfca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	4413      	add	r3, r2
 800dfd0:	3358      	adds	r3, #88	; 0x58
 800dfd2:	2202      	movs	r2, #2
 800dfd4:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800dfd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	3314      	adds	r3, #20
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	4413      	add	r3, r2
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	1c5a      	adds	r2, r3, #1
 800dfe4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	3314      	adds	r3, #20
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	440b      	add	r3, r1
 800dfee:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dff0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d146      	bne.n	800e086 <vTaskGenericNotifyGiveFromISR+0x13a>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00b      	beq.n	800e018 <vTaskGenericNotifyGiveFromISR+0xcc>
        __asm volatile
 800e000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e004:	b672      	cpsid	i
 800e006:	f383 8811 	msr	BASEPRI, r3
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	b662      	cpsie	i
 800e014:	61bb      	str	r3, [r7, #24]
 800e016:	e7fe      	b.n	800e016 <vTaskGenericNotifyGiveFromISR+0xca>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e018:	4b1f      	ldr	r3, [pc, #124]	; (800e098 <vTaskGenericNotifyGiveFromISR+0x14c>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d11c      	bne.n	800e05a <vTaskGenericNotifyGiveFromISR+0x10e>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e022:	3304      	adds	r3, #4
 800e024:	4618      	mov	r0, r3
 800e026:	f7fe f938 	bl	800c29a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800e02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e02e:	2201      	movs	r2, #1
 800e030:	409a      	lsls	r2, r3
 800e032:	4b1a      	ldr	r3, [pc, #104]	; (800e09c <vTaskGenericNotifyGiveFromISR+0x150>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4313      	orrs	r3, r2
 800e038:	4a18      	ldr	r2, [pc, #96]	; (800e09c <vTaskGenericNotifyGiveFromISR+0x150>)
 800e03a:	6013      	str	r3, [r2, #0]
 800e03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e040:	4613      	mov	r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	4413      	add	r3, r2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4a15      	ldr	r2, [pc, #84]	; (800e0a0 <vTaskGenericNotifyGiveFromISR+0x154>)
 800e04a:	441a      	add	r2, r3
 800e04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e04e:	3304      	adds	r3, #4
 800e050:	4619      	mov	r1, r3
 800e052:	4610      	mov	r0, r2
 800e054:	f7fe f8c4 	bl	800c1e0 <vListInsertEnd>
 800e058:	e005      	b.n	800e066 <vTaskGenericNotifyGiveFromISR+0x11a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e05c:	3318      	adds	r3, #24
 800e05e:	4619      	mov	r1, r3
 800e060:	4810      	ldr	r0, [pc, #64]	; (800e0a4 <vTaskGenericNotifyGiveFromISR+0x158>)
 800e062:	f7fe f8bd 	bl	800c1e0 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06a:	4b0f      	ldr	r3, [pc, #60]	; (800e0a8 <vTaskGenericNotifyGiveFromISR+0x15c>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e070:	429a      	cmp	r2, r3
 800e072:	d908      	bls.n	800e086 <vTaskGenericNotifyGiveFromISR+0x13a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <vTaskGenericNotifyGiveFromISR+0x134>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2201      	movs	r2, #1
 800e07e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800e080:	4b0a      	ldr	r3, [pc, #40]	; (800e0ac <vTaskGenericNotifyGiveFromISR+0x160>)
 800e082:	2201      	movs	r2, #1
 800e084:	601a      	str	r2, [r3, #0]
 800e086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e088:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	f383 8811 	msr	BASEPRI, r3
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 800e090:	bf00      	nop
 800e092:	3738      	adds	r7, #56	; 0x38
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	2400520c 	.word	0x2400520c
 800e09c:	240051ec 	.word	0x240051ec
 800e0a0:	240050e8 	.word	0x240050e8
 800e0a4:	240051a4 	.word	0x240051a4
 800e0a8:	240050e4 	.word	0x240050e4
 800e0ac:	240051f8 	.word	0x240051f8

0800e0b0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800e0ba:	4b29      	ldr	r3, [pc, #164]	; (800e160 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0c0:	4b28      	ldr	r3, [pc, #160]	; (800e164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	3304      	adds	r3, #4
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fe f8e7 	bl	800c29a <uxListRemove>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d10b      	bne.n	800e0ea <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e0d2:	4b24      	ldr	r3, [pc, #144]	; (800e164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d8:	2201      	movs	r2, #1
 800e0da:	fa02 f303 	lsl.w	r3, r2, r3
 800e0de:	43da      	mvns	r2, r3
 800e0e0:	4b21      	ldr	r3, [pc, #132]	; (800e168 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4013      	ands	r3, r2
 800e0e6:	4a20      	ldr	r2, [pc, #128]	; (800e168 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e0e8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f0:	d10a      	bne.n	800e108 <prvAddCurrentTaskToDelayedList+0x58>
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d007      	beq.n	800e108 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0f8:	4b1a      	ldr	r3, [pc, #104]	; (800e164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	4619      	mov	r1, r3
 800e100:	481a      	ldr	r0, [pc, #104]	; (800e16c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e102:	f7fe f86d 	bl	800c1e0 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800e106:	e026      	b.n	800e156 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800e108:	68fa      	ldr	r2, [r7, #12]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	4413      	add	r3, r2
 800e10e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e110:	4b14      	ldr	r3, [pc, #80]	; (800e164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	68ba      	ldr	r2, [r7, #8]
 800e116:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d209      	bcs.n	800e134 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e120:	4b13      	ldr	r3, [pc, #76]	; (800e170 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	4b0f      	ldr	r3, [pc, #60]	; (800e164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	3304      	adds	r3, #4
 800e12a:	4619      	mov	r1, r3
 800e12c:	4610      	mov	r0, r2
 800e12e:	f7fe f87b 	bl	800c228 <vListInsert>
}
 800e132:	e010      	b.n	800e156 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e134:	4b0f      	ldr	r3, [pc, #60]	; (800e174 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	4b0a      	ldr	r3, [pc, #40]	; (800e164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3304      	adds	r3, #4
 800e13e:	4619      	mov	r1, r3
 800e140:	4610      	mov	r0, r2
 800e142:	f7fe f871 	bl	800c228 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800e146:	4b0c      	ldr	r3, [pc, #48]	; (800e178 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	68ba      	ldr	r2, [r7, #8]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d202      	bcs.n	800e156 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800e150:	4a09      	ldr	r2, [pc, #36]	; (800e178 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	6013      	str	r3, [r2, #0]
}
 800e156:	bf00      	nop
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	bf00      	nop
 800e160:	240051e8 	.word	0x240051e8
 800e164:	240050e4 	.word	0x240050e4
 800e168:	240051ec 	.word	0x240051ec
 800e16c:	240051d0 	.word	0x240051d0
 800e170:	240051a0 	.word	0x240051a0
 800e174:	2400519c 	.word	0x2400519c
 800e178:	24005204 	.word	0x24005204

0800e17c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800e17c:	b480      	push	{r7}
 800e17e:	b085      	sub	sp, #20
 800e180:	af00      	add	r7, sp, #0
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	60b9      	str	r1, [r7, #8]
 800e186:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	3b04      	subs	r3, #4
 800e18c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e194:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	3b04      	subs	r3, #4
 800e19a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	f023 0201 	bic.w	r2, r3, #1
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	3b04      	subs	r3, #4
 800e1aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800e1ac:	4a0c      	ldr	r2, [pc, #48]	; (800e1e0 <pxPortInitialiseStack+0x64>)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	3b14      	subs	r3, #20
 800e1b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	3b04      	subs	r3, #4
 800e1c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f06f 0202 	mvn.w	r2, #2
 800e1ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	3b20      	subs	r3, #32
 800e1d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3714      	adds	r7, #20
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr
 800e1e0:	0800e1e5 	.word	0x0800e1e5

0800e1e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800e1ee:	4b13      	ldr	r3, [pc, #76]	; (800e23c <prvTaskExitError+0x58>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f6:	d00b      	beq.n	800e210 <prvTaskExitError+0x2c>
        __asm volatile
 800e1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fc:	b672      	cpsid	i
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	b662      	cpsie	i
 800e20c:	60fb      	str	r3, [r7, #12]
 800e20e:	e7fe      	b.n	800e20e <prvTaskExitError+0x2a>
 800e210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e214:	b672      	cpsid	i
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	b662      	cpsie	i
 800e224:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800e226:	bf00      	nop
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d0fc      	beq.n	800e228 <prvTaskExitError+0x44>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800e22e:	bf00      	nop
 800e230:	3714      	adds	r7, #20
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop
 800e23c:	24000018 	.word	0x24000018

0800e240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800e240:	4b07      	ldr	r3, [pc, #28]	; (800e260 <pxCurrentTCBConst2>)
 800e242:	6819      	ldr	r1, [r3, #0]
 800e244:	6808      	ldr	r0, [r1, #0]
 800e246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24a:	f380 8809 	msr	PSP, r0
 800e24e:	f3bf 8f6f 	isb	sy
 800e252:	f04f 0000 	mov.w	r0, #0
 800e256:	f380 8811 	msr	BASEPRI, r0
 800e25a:	4770      	bx	lr
 800e25c:	f3af 8000 	nop.w

0800e260 <pxCurrentTCBConst2>:
 800e260:	240050e4 	.word	0x240050e4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800e264:	bf00      	nop
 800e266:	bf00      	nop

0800e268 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800e268:	4808      	ldr	r0, [pc, #32]	; (800e28c <prvPortStartFirstTask+0x24>)
 800e26a:	6800      	ldr	r0, [r0, #0]
 800e26c:	6800      	ldr	r0, [r0, #0]
 800e26e:	f380 8808 	msr	MSP, r0
 800e272:	f04f 0000 	mov.w	r0, #0
 800e276:	f380 8814 	msr	CONTROL, r0
 800e27a:	b662      	cpsie	i
 800e27c:	b661      	cpsie	f
 800e27e:	f3bf 8f4f 	dsb	sy
 800e282:	f3bf 8f6f 	isb	sy
 800e286:	df00      	svc	0
 800e288:	bf00      	nop
 800e28a:	0000      	.short	0x0000
 800e28c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800e290:	bf00      	nop
 800e292:	bf00      	nop

0800e294 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e29a:	4b36      	ldr	r3, [pc, #216]	; (800e374 <xPortStartScheduler+0xe0>)
 800e29c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	22ff      	movs	r2, #255	; 0xff
 800e2aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e2b4:	78fb      	ldrb	r3, [r7, #3]
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e2bc:	b2da      	uxtb	r2, r3
 800e2be:	4b2e      	ldr	r3, [pc, #184]	; (800e378 <xPortStartScheduler+0xe4>)
 800e2c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e2c2:	4b2e      	ldr	r3, [pc, #184]	; (800e37c <xPortStartScheduler+0xe8>)
 800e2c4:	2207      	movs	r2, #7
 800e2c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2c8:	e009      	b.n	800e2de <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800e2ca:	4b2c      	ldr	r3, [pc, #176]	; (800e37c <xPortStartScheduler+0xe8>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	3b01      	subs	r3, #1
 800e2d0:	4a2a      	ldr	r2, [pc, #168]	; (800e37c <xPortStartScheduler+0xe8>)
 800e2d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e2d4:	78fb      	ldrb	r3, [r7, #3]
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	005b      	lsls	r3, r3, #1
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2de:	78fb      	ldrb	r3, [r7, #3]
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2e6:	2b80      	cmp	r3, #128	; 0x80
 800e2e8:	d0ef      	beq.n	800e2ca <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e2ea:	4b24      	ldr	r3, [pc, #144]	; (800e37c <xPortStartScheduler+0xe8>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f1c3 0307 	rsb	r3, r3, #7
 800e2f2:	2b04      	cmp	r3, #4
 800e2f4:	d00b      	beq.n	800e30e <xPortStartScheduler+0x7a>
 800e2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fa:	b672      	cpsid	i
 800e2fc:	f383 8811 	msr	BASEPRI, r3
 800e300:	f3bf 8f6f 	isb	sy
 800e304:	f3bf 8f4f 	dsb	sy
 800e308:	b662      	cpsie	i
 800e30a:	60bb      	str	r3, [r7, #8]
 800e30c:	e7fe      	b.n	800e30c <xPortStartScheduler+0x78>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e30e:	4b1b      	ldr	r3, [pc, #108]	; (800e37c <xPortStartScheduler+0xe8>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	021b      	lsls	r3, r3, #8
 800e314:	4a19      	ldr	r2, [pc, #100]	; (800e37c <xPortStartScheduler+0xe8>)
 800e316:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e318:	4b18      	ldr	r3, [pc, #96]	; (800e37c <xPortStartScheduler+0xe8>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e320:	4a16      	ldr	r2, [pc, #88]	; (800e37c <xPortStartScheduler+0xe8>)
 800e322:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	b2da      	uxtb	r2, r3
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800e32c:	4b14      	ldr	r3, [pc, #80]	; (800e380 <xPortStartScheduler+0xec>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a13      	ldr	r2, [pc, #76]	; (800e380 <xPortStartScheduler+0xec>)
 800e332:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e336:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800e338:	4b11      	ldr	r3, [pc, #68]	; (800e380 <xPortStartScheduler+0xec>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a10      	ldr	r2, [pc, #64]	; (800e380 <xPortStartScheduler+0xec>)
 800e33e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e342:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800e344:	f000 f8da 	bl	800e4fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800e348:	4b0e      	ldr	r3, [pc, #56]	; (800e384 <xPortStartScheduler+0xf0>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800e34e:	f000 f8f9 	bl	800e544 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e352:	4b0d      	ldr	r3, [pc, #52]	; (800e388 <xPortStartScheduler+0xf4>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4a0c      	ldr	r2, [pc, #48]	; (800e388 <xPortStartScheduler+0xf4>)
 800e358:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e35c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800e35e:	f7ff ff83 	bl	800e268 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800e362:	f7ff f8c1 	bl	800d4e8 <vTaskSwitchContext>
    prvTaskExitError();
 800e366:	f7ff ff3d 	bl	800e1e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800e36a:	2300      	movs	r3, #0
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3710      	adds	r7, #16
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	e000e400 	.word	0xe000e400
 800e378:	24005210 	.word	0x24005210
 800e37c:	24005214 	.word	0x24005214
 800e380:	e000ed20 	.word	0xe000ed20
 800e384:	24000018 	.word	0x24000018
 800e388:	e000ef34 	.word	0xe000ef34

0800e38c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e38c:	b480      	push	{r7}
 800e38e:	b083      	sub	sp, #12
 800e390:	af00      	add	r7, sp, #0
 800e392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e396:	b672      	cpsid	i
 800e398:	f383 8811 	msr	BASEPRI, r3
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f3bf 8f4f 	dsb	sy
 800e3a4:	b662      	cpsie	i
 800e3a6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800e3a8:	4b0f      	ldr	r3, [pc, #60]	; (800e3e8 <vPortEnterCritical+0x5c>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	4a0e      	ldr	r2, [pc, #56]	; (800e3e8 <vPortEnterCritical+0x5c>)
 800e3b0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800e3b2:	4b0d      	ldr	r3, [pc, #52]	; (800e3e8 <vPortEnterCritical+0x5c>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d110      	bne.n	800e3dc <vPortEnterCritical+0x50>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e3ba:	4b0c      	ldr	r3, [pc, #48]	; (800e3ec <vPortEnterCritical+0x60>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d00b      	beq.n	800e3dc <vPortEnterCritical+0x50>
 800e3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c8:	b672      	cpsid	i
 800e3ca:	f383 8811 	msr	BASEPRI, r3
 800e3ce:	f3bf 8f6f 	isb	sy
 800e3d2:	f3bf 8f4f 	dsb	sy
 800e3d6:	b662      	cpsie	i
 800e3d8:	603b      	str	r3, [r7, #0]
 800e3da:	e7fe      	b.n	800e3da <vPortEnterCritical+0x4e>
    }
}
 800e3dc:	bf00      	nop
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr
 800e3e8:	24000018 	.word	0x24000018
 800e3ec:	e000ed04 	.word	0xe000ed04

0800e3f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800e3f6:	4b12      	ldr	r3, [pc, #72]	; (800e440 <vPortExitCritical+0x50>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d10b      	bne.n	800e416 <vPortExitCritical+0x26>
 800e3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e402:	b672      	cpsid	i
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	b662      	cpsie	i
 800e412:	607b      	str	r3, [r7, #4]
 800e414:	e7fe      	b.n	800e414 <vPortExitCritical+0x24>
    uxCriticalNesting--;
 800e416:	4b0a      	ldr	r3, [pc, #40]	; (800e440 <vPortExitCritical+0x50>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3b01      	subs	r3, #1
 800e41c:	4a08      	ldr	r2, [pc, #32]	; (800e440 <vPortExitCritical+0x50>)
 800e41e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800e420:	4b07      	ldr	r3, [pc, #28]	; (800e440 <vPortExitCritical+0x50>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d104      	bne.n	800e432 <vPortExitCritical+0x42>
 800e428:	2300      	movs	r3, #0
 800e42a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800e432:	bf00      	nop
 800e434:	370c      	adds	r7, #12
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop
 800e440:	24000018 	.word	0x24000018
	...

0800e450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800e450:	f3ef 8009 	mrs	r0, PSP
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	4b15      	ldr	r3, [pc, #84]	; (800e4b0 <pxCurrentTCBConst>)
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	f01e 0f10 	tst.w	lr, #16
 800e460:	bf08      	it	eq
 800e462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e46a:	6010      	str	r0, [r2, #0]
 800e46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e470:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e474:	b672      	cpsid	i
 800e476:	f380 8811 	msr	BASEPRI, r0
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	f3bf 8f6f 	isb	sy
 800e482:	b662      	cpsie	i
 800e484:	f7ff f830 	bl	800d4e8 <vTaskSwitchContext>
 800e488:	f04f 0000 	mov.w	r0, #0
 800e48c:	f380 8811 	msr	BASEPRI, r0
 800e490:	bc09      	pop	{r0, r3}
 800e492:	6819      	ldr	r1, [r3, #0]
 800e494:	6808      	ldr	r0, [r1, #0]
 800e496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49a:	f01e 0f10 	tst.w	lr, #16
 800e49e:	bf08      	it	eq
 800e4a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e4a4:	f380 8809 	msr	PSP, r0
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop

0800e4b0 <pxCurrentTCBConst>:
 800e4b0:	240050e4 	.word	0x240050e4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800e4b4:	bf00      	nop
 800e4b6:	bf00      	nop

0800e4b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
        __asm volatile
 800e4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c2:	b672      	cpsid	i
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	b662      	cpsie	i
 800e4d2:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800e4d4:	f7fe ff4e 	bl	800d374 <xTaskIncrementTick>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d003      	beq.n	800e4e6 <SysTick_Handler+0x2e>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e4de:	4b06      	ldr	r3, [pc, #24]	; (800e4f8 <SysTick_Handler+0x40>)
 800e4e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4e4:	601a      	str	r2, [r3, #0]
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	603b      	str	r3, [r7, #0]
        __asm volatile
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800e4f0:	bf00      	nop
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	e000ed04 	.word	0xe000ed04

0800e4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e500:	4b0b      	ldr	r3, [pc, #44]	; (800e530 <vPortSetupTimerInterrupt+0x34>)
 800e502:	2200      	movs	r2, #0
 800e504:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e506:	4b0b      	ldr	r3, [pc, #44]	; (800e534 <vPortSetupTimerInterrupt+0x38>)
 800e508:	2200      	movs	r2, #0
 800e50a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e50c:	4b0a      	ldr	r3, [pc, #40]	; (800e538 <vPortSetupTimerInterrupt+0x3c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a0a      	ldr	r2, [pc, #40]	; (800e53c <vPortSetupTimerInterrupt+0x40>)
 800e512:	fba2 2303 	umull	r2, r3, r2, r3
 800e516:	099b      	lsrs	r3, r3, #6
 800e518:	4a09      	ldr	r2, [pc, #36]	; (800e540 <vPortSetupTimerInterrupt+0x44>)
 800e51a:	3b01      	subs	r3, #1
 800e51c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e51e:	4b04      	ldr	r3, [pc, #16]	; (800e530 <vPortSetupTimerInterrupt+0x34>)
 800e520:	2207      	movs	r2, #7
 800e522:	601a      	str	r2, [r3, #0]
}
 800e524:	bf00      	nop
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop
 800e530:	e000e010 	.word	0xe000e010
 800e534:	e000e018 	.word	0xe000e018
 800e538:	24000000 	.word	0x24000000
 800e53c:	10624dd3 	.word	0x10624dd3
 800e540:	e000e014 	.word	0xe000e014

0800e544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800e544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e554 <vPortEnableVFP+0x10>
 800e548:	6801      	ldr	r1, [r0, #0]
 800e54a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e54e:	6001      	str	r1, [r0, #0]
 800e550:	4770      	bx	lr
 800e552:	0000      	.short	0x0000
 800e554:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800e558:	bf00      	nop
 800e55a:	bf00      	nop

0800e55c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800e55c:	b480      	push	{r7}
 800e55e:	b085      	sub	sp, #20
 800e560:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800e562:	f3ef 8305 	mrs	r3, IPSR
 800e566:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2b0f      	cmp	r3, #15
 800e56c:	d915      	bls.n	800e59a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e56e:	4a18      	ldr	r2, [pc, #96]	; (800e5d0 <vPortValidateInterruptPriority+0x74>)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	4413      	add	r3, r2
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e578:	4b16      	ldr	r3, [pc, #88]	; (800e5d4 <vPortValidateInterruptPriority+0x78>)
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	7afa      	ldrb	r2, [r7, #11]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d20b      	bcs.n	800e59a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800e582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e586:	b672      	cpsid	i
 800e588:	f383 8811 	msr	BASEPRI, r3
 800e58c:	f3bf 8f6f 	isb	sy
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	b662      	cpsie	i
 800e596:	607b      	str	r3, [r7, #4]
 800e598:	e7fe      	b.n	800e598 <vPortValidateInterruptPriority+0x3c>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e59a:	4b0f      	ldr	r3, [pc, #60]	; (800e5d8 <vPortValidateInterruptPriority+0x7c>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e5a2:	4b0e      	ldr	r3, [pc, #56]	; (800e5dc <vPortValidateInterruptPriority+0x80>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d90b      	bls.n	800e5c2 <vPortValidateInterruptPriority+0x66>
 800e5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ae:	b672      	cpsid	i
 800e5b0:	f383 8811 	msr	BASEPRI, r3
 800e5b4:	f3bf 8f6f 	isb	sy
 800e5b8:	f3bf 8f4f 	dsb	sy
 800e5bc:	b662      	cpsie	i
 800e5be:	603b      	str	r3, [r7, #0]
 800e5c0:	e7fe      	b.n	800e5c0 <vPortValidateInterruptPriority+0x64>
    }
 800e5c2:	bf00      	nop
 800e5c4:	3714      	adds	r7, #20
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5cc:	4770      	bx	lr
 800e5ce:	bf00      	nop
 800e5d0:	e000e3f0 	.word	0xe000e3f0
 800e5d4:	24005210 	.word	0x24005210
 800e5d8:	e000ed0c 	.word	0xe000ed0c
 800e5dc:	24005214 	.word	0x24005214

0800e5e0 <vCastPointerTo_ARPPacket_t>:
}
#include "pack_struct_end.h"
typedef struct xARP_PACKET ARPPacket_t;

static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ARPPacket_t )
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b083      	sub	sp, #12
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
    return ( ARPPacket_t *)pvArgument;
 800e5e8:	687b      	ldr	r3, [r7, #4]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	370c      	adds	r7, #12
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr
	...

0800e5f8 <eARPProcessPacket>:
#endif /* ipconfigARP_USE_CLASH_DETECTION */

/*-----------------------------------------------------------*/

eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b086      	sub	sp, #24
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800e600:	2300      	movs	r3, #0
 800e602:	75fb      	strb	r3, [r7, #23]
ARPHeader_t *pxARPHeader;
uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

	pxARPHeader = &( pxARPFrame->xARPHeader );
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	330e      	adds	r3, #14
 800e608:	613b      	str	r3, [r7, #16]

	/* The field ulSenderProtocolAddress is badly aligned, copy byte-by-byte. */
	( void ) memcpy( ( void * ) ( &( ulSenderProtocolAddress ) ), ( const void * ) ( pxARPHeader->ucSenderProtocolAddress ), sizeof( ulSenderProtocolAddress ) );
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	330e      	adds	r3, #14
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	60bb      	str	r3, [r7, #8]
	/* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
	ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	699b      	ldr	r3, [r3, #24]
 800e616:	60fb      	str	r3, [r7, #12]

	traceARP_PACKET_RECEIVED();

	/* Don't do anything if the local IP address is zero because
	that means a DHCP request has not completed. */
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800e618:	4b33      	ldr	r3, [pc, #204]	; (800e6e8 <eARPProcessPacket+0xf0>)
 800e61a:	695b      	ldr	r3, [r3, #20]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d05b      	beq.n	800e6d8 <eARPProcessPacket+0xe0>
	{
		switch( pxARPHeader->usOperation )
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	88db      	ldrh	r3, [r3, #6]
 800e624:	b29b      	uxth	r3, r3
 800e626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e62a:	d003      	beq.n	800e634 <eARPProcessPacket+0x3c>
 800e62c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e630:	d04a      	beq.n	800e6c8 <eARPProcessPacket+0xd0>
				#endif /* ipconfigARP_USE_CLASH_DETECTION */
				break;

			default :
				/* Invalid. */
				break;
 800e632:	e054      	b.n	800e6de <eARPProcessPacket+0xe6>
				if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800e634:	4b2c      	ldr	r3, [pc, #176]	; (800e6e8 <eARPProcessPacket+0xf0>)
 800e636:	695b      	ldr	r3, [r3, #20]
 800e638:	68fa      	ldr	r2, [r7, #12]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d14e      	bne.n	800e6dc <eARPProcessPacket+0xe4>
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	3308      	adds	r3, #8
 800e642:	68ba      	ldr	r2, [r7, #8]
 800e644:	4611      	mov	r1, r2
 800e646:	4618      	mov	r0, r3
 800e648:	f000 f852 	bl	800e6f0 <vARPRefreshCacheEntry>
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	2200      	movs	r2, #0
 800e650:	719a      	strb	r2, [r3, #6]
 800e652:	2200      	movs	r2, #0
 800e654:	f042 0202 	orr.w	r2, r2, #2
 800e658:	71da      	strb	r2, [r3, #7]
					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d117      	bne.n	800e692 <eARPProcessPacket+0x9a>
						( void ) memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	3306      	adds	r3, #6
 800e666:	4a21      	ldr	r2, [pc, #132]	; (800e6ec <eARPProcessPacket+0xf4>)
 800e668:	6811      	ldr	r1, [r2, #0]
 800e66a:	6019      	str	r1, [r3, #0]
 800e66c:	8892      	ldrh	r2, [r2, #4]
 800e66e:	809a      	strh	r2, [r3, #4]
						( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	3312      	adds	r3, #18
 800e674:	2206      	movs	r2, #6
 800e676:	2100      	movs	r1, #0
 800e678:	4618      	mov	r0, r3
 800e67a:	f008 fe24 	bl	80172c6 <memset>
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	2200      	movs	r2, #0
 800e682:	761a      	strb	r2, [r3, #24]
 800e684:	2200      	movs	r2, #0
 800e686:	765a      	strb	r2, [r3, #25]
 800e688:	2200      	movs	r2, #0
 800e68a:	769a      	strb	r2, [r3, #26]
 800e68c:	2200      	movs	r2, #0
 800e68e:	76da      	strb	r2, [r3, #27]
 800e690:	e00b      	b.n	800e6aa <eARPProcessPacket+0xb2>
						( void ) memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( MACAddress_t ) );
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	f103 0012 	add.w	r0, r3, #18
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	3308      	adds	r3, #8
 800e69c:	2206      	movs	r2, #6
 800e69e:	4619      	mov	r1, r3
 800e6a0:	f008 fded 	bl	801727e <memcpy>
						pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 800e6a4:	68ba      	ldr	r2, [r7, #8]
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	619a      	str	r2, [r3, #24]
					( void ) memcpy( ( void * ) ( pxARPHeader->xSenderHardwareAddress.ucBytes ), ( const void * ) ( ipLOCAL_MAC_ADDRESS ), sizeof( MACAddress_t ) );
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	3308      	adds	r3, #8
 800e6ae:	2206      	movs	r2, #6
 800e6b0:	490d      	ldr	r1, [pc, #52]	; (800e6e8 <eARPProcessPacket+0xf0>)
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f008 fde3 	bl	801727e <memcpy>
					( void ) memcpy( ( void * ) ( pxARPHeader->ucSenderProtocolAddress ), ( const void * ) ( ipLOCAL_IP_ADDRESS_POINTER ), sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	330e      	adds	r3, #14
 800e6bc:	4a0a      	ldr	r2, [pc, #40]	; (800e6e8 <eARPProcessPacket+0xf0>)
 800e6be:	6952      	ldr	r2, [r2, #20]
 800e6c0:	601a      	str	r2, [r3, #0]
					eReturn = eReturnEthernetFrame;
 800e6c2:	2302      	movs	r3, #2
 800e6c4:	75fb      	strb	r3, [r7, #23]
				break;
 800e6c6:	e009      	b.n	800e6dc <eARPProcessPacket+0xe4>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	3308      	adds	r3, #8
 800e6cc:	68ba      	ldr	r2, [r7, #8]
 800e6ce:	4611      	mov	r1, r2
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f000 f80d 	bl	800e6f0 <vARPRefreshCacheEntry>
				break;
 800e6d6:	e002      	b.n	800e6de <eARPProcessPacket+0xe6>
		}
	}
 800e6d8:	bf00      	nop
 800e6da:	e000      	b.n	800e6de <eARPProcessPacket+0xe6>
				break;
 800e6dc:	bf00      	nop

	return eReturn;
 800e6de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3718      	adds	r7, #24
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	2400001c 	.word	0x2400001c
 800e6ec:	080187b8 	.word	0x080187b8

0800e6f0 <vARPRefreshCacheEntry>:

#endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
/*-----------------------------------------------------------*/

void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b088      	sub	sp, #32
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
BaseType_t x = 0;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	61fb      	str	r3, [r7, #28]
BaseType_t xIpEntry = -1;
 800e6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e702:	61bb      	str	r3, [r7, #24]
BaseType_t xMacEntry = -1;
 800e704:	f04f 33ff 	mov.w	r3, #4294967295
 800e708:	617b      	str	r3, [r7, #20]
BaseType_t xUseEntry = 0;
 800e70a:	2300      	movs	r3, #0
 800e70c:	613b      	str	r3, [r7, #16]
uint8_t ucMinAgeFound = 0U;
 800e70e:	2300      	movs	r3, #0
 800e710:	73fb      	strb	r3, [r7, #15]

#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
	/* Only process the IP address if it is on the local network.
	Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
	and netmask are still unknown. */
	if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 800e712:	4b70      	ldr	r3, [pc, #448]	; (800e8d4 <vARPRefreshCacheEntry+0x1e4>)
 800e714:	695a      	ldr	r2, [r3, #20]
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	405a      	eors	r2, r3
 800e71a:	4b6f      	ldr	r3, [pc, #444]	; (800e8d8 <vARPRefreshCacheEntry+0x1e8>)
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	4013      	ands	r3, r2
 800e720:	2b00      	cmp	r3, #0
 800e722:	d004      	beq.n	800e72e <vARPRefreshCacheEntry+0x3e>
		( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 800e724:	4b6b      	ldr	r3, [pc, #428]	; (800e8d4 <vARPRefreshCacheEntry+0x1e4>)
 800e726:	695b      	ldr	r3, [r3, #20]
	if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 800e728:	2b00      	cmp	r3, #0
 800e72a:	f040 80d0 	bne.w	800e8ce <vARPRefreshCacheEntry+0x1de>

	if( pdTRUE )
#endif
	{
		/* Start with the maximum possible number. */
		ucMinAgeFound--;
 800e72e:	7bfb      	ldrb	r3, [r7, #15]
 800e730:	3b01      	subs	r3, #1
 800e732:	73fb      	strb	r3, [r7, #15]

		/* For each entry in the ARP cache table. */
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800e734:	2300      	movs	r3, #0
 800e736:	61fb      	str	r3, [r7, #28]
 800e738:	e067      	b.n	800e80a <vARPRefreshCacheEntry+0x11a>
		{
		BaseType_t xMatchingMAC;

			if( pxMACAddress != NULL )
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d015      	beq.n	800e76c <vARPRefreshCacheEntry+0x7c>
			{
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800e740:	69fa      	ldr	r2, [r7, #28]
 800e742:	4613      	mov	r3, r2
 800e744:	005b      	lsls	r3, r3, #1
 800e746:	4413      	add	r3, r2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	4a64      	ldr	r2, [pc, #400]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e74c:	4413      	add	r3, r2
 800e74e:	3304      	adds	r3, #4
 800e750:	6879      	ldr	r1, [r7, #4]
 800e752:	2206      	movs	r2, #6
 800e754:	4618      	mov	r0, r3
 800e756:	f008 fd83 	bl	8017260 <memcmp>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d102      	bne.n	800e766 <vARPRefreshCacheEntry+0x76>
				{
					xMatchingMAC = pdTRUE;
 800e760:	2301      	movs	r3, #1
 800e762:	60bb      	str	r3, [r7, #8]
 800e764:	e004      	b.n	800e770 <vARPRefreshCacheEntry+0x80>
				}
				else
				{
					xMatchingMAC = pdFALSE;
 800e766:	2300      	movs	r3, #0
 800e768:	60bb      	str	r3, [r7, #8]
 800e76a:	e001      	b.n	800e770 <vARPRefreshCacheEntry+0x80>
				}
			}
			else
			{
				xMatchingMAC = pdFALSE;
 800e76c:	2300      	movs	r3, #0
 800e76e:	60bb      	str	r3, [r7, #8]
			}
			/* Does this line in the cache table hold an entry for the IP
			address	being queried? */
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800e770:	495a      	ldr	r1, [pc, #360]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e772:	69fa      	ldr	r2, [r7, #28]
 800e774:	4613      	mov	r3, r2
 800e776:	005b      	lsls	r3, r3, #1
 800e778:	4413      	add	r3, r2
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	440b      	add	r3, r1
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	683a      	ldr	r2, [r7, #0]
 800e782:	429a      	cmp	r2, r3
 800e784:	d120      	bne.n	800e7c8 <vARPRefreshCacheEntry+0xd8>
			{
				if( pxMACAddress == NULL )
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d102      	bne.n	800e792 <vARPRefreshCacheEntry+0xa2>
				{
					/* In case the parameter pxMACAddress is NULL, an entry will be reserved to
					indicate that there is an outstanding ARP request, This entry will have
					"ucValid == pdFALSE". */
					xIpEntry = x;
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	61bb      	str	r3, [r7, #24]
					break;
 800e790:	e03e      	b.n	800e810 <vARPRefreshCacheEntry+0x120>
				}

				/* See if the MAC-address also matches. */
				if( xMatchingMAC != pdFALSE )
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d014      	beq.n	800e7c2 <vARPRefreshCacheEntry+0xd2>
				{
					/* This function will be called for each received packet
					As this is by far the most common path the coding standard
					is relaxed in this case and a return is permitted as an
					optimisation. */
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800e798:	4950      	ldr	r1, [pc, #320]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e79a:	69fa      	ldr	r2, [r7, #28]
 800e79c:	4613      	mov	r3, r2
 800e79e:	005b      	lsls	r3, r3, #1
 800e7a0:	4413      	add	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	440b      	add	r3, r1
 800e7a6:	330a      	adds	r3, #10
 800e7a8:	2296      	movs	r2, #150	; 0x96
 800e7aa:	701a      	strb	r2, [r3, #0]
					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 800e7ac:	494b      	ldr	r1, [pc, #300]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e7ae:	69fa      	ldr	r2, [r7, #28]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	005b      	lsls	r3, r3, #1
 800e7b4:	4413      	add	r3, r2
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	440b      	add	r3, r1
 800e7ba:	330b      	adds	r3, #11
 800e7bc:	2201      	movs	r2, #1
 800e7be:	701a      	strb	r2, [r3, #0]
					return;
 800e7c0:	e085      	b.n	800e8ce <vARPRefreshCacheEntry+0x1de>
				/* Found an entry containing ulIPAddress, but the MAC address
				doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
				for an ARP reply.  Still want to see if there is match with the
				given MAC address.ucBytes.  If found, either of the two entries
				must be cleared. */
				xIpEntry = x;
 800e7c2:	69fb      	ldr	r3, [r7, #28]
 800e7c4:	61bb      	str	r3, [r7, #24]
 800e7c6:	e01d      	b.n	800e804 <vARPRefreshCacheEntry+0x114>
			}
			else if( xMatchingMAC != pdFALSE )
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d002      	beq.n	800e7d4 <vARPRefreshCacheEntry+0xe4>
				if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
				{
					xMacEntry = x;
				}
	#else
				xMacEntry = x;
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	617b      	str	r3, [r7, #20]
 800e7d2:	e017      	b.n	800e804 <vARPRefreshCacheEntry+0x114>
	#endif
			}
			/* _HT_
			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800e7d4:	4941      	ldr	r1, [pc, #260]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e7d6:	69fa      	ldr	r2, [r7, #28]
 800e7d8:	4613      	mov	r3, r2
 800e7da:	005b      	lsls	r3, r3, #1
 800e7dc:	4413      	add	r3, r2
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	440b      	add	r3, r1
 800e7e2:	330a      	adds	r3, #10
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	7bfa      	ldrb	r2, [r7, #15]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d90b      	bls.n	800e804 <vARPRefreshCacheEntry+0x114>
			{
				/* As the table is traversed, remember the table row that
				contains the oldest entry (the lowest age count, as ages are
				decremented to zero) so the row can be re-used if this function
				needs to add an entry that does not already exist. */
				ucMinAgeFound = xARPCache[ x ].ucAge;
 800e7ec:	493b      	ldr	r1, [pc, #236]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e7ee:	69fa      	ldr	r2, [r7, #28]
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	005b      	lsls	r3, r3, #1
 800e7f4:	4413      	add	r3, r2
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	440b      	add	r3, r1
 800e7fa:	330a      	adds	r3, #10
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	73fb      	strb	r3, [r7, #15]
				xUseEntry = x;
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	613b      	str	r3, [r7, #16]
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	3301      	adds	r3, #1
 800e808:	61fb      	str	r3, [r7, #28]
 800e80a:	69fb      	ldr	r3, [r7, #28]
 800e80c:	2b05      	cmp	r3, #5
 800e80e:	dd94      	ble.n	800e73a <vARPRefreshCacheEntry+0x4a>
			{
				/* Nothing happes to this cache entry for now. */
			}
		}

		if( xMacEntry >= 0 )
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	2b00      	cmp	r3, #0
 800e814:	db11      	blt.n	800e83a <vARPRefreshCacheEntry+0x14a>
		{
			xUseEntry = xMacEntry;
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	613b      	str	r3, [r7, #16]

			if( xIpEntry >= 0 )
 800e81a:	69bb      	ldr	r3, [r7, #24]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	db11      	blt.n	800e844 <vARPRefreshCacheEntry+0x154>
			{
				/* Both the MAC address as well as the IP address were found in
				different locations: clear the entry which matches the
				IP-address */
				( void ) memset( &( xARPCache[ xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 800e820:	69ba      	ldr	r2, [r7, #24]
 800e822:	4613      	mov	r3, r2
 800e824:	005b      	lsls	r3, r3, #1
 800e826:	4413      	add	r3, r2
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	4a2c      	ldr	r2, [pc, #176]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e82c:	4413      	add	r3, r2
 800e82e:	220c      	movs	r2, #12
 800e830:	2100      	movs	r1, #0
 800e832:	4618      	mov	r0, r3
 800e834:	f008 fd47 	bl	80172c6 <memset>
 800e838:	e004      	b.n	800e844 <vARPRefreshCacheEntry+0x154>
			}
		}
		else if( xIpEntry >= 0 )
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	db01      	blt.n	800e844 <vARPRefreshCacheEntry+0x154>
		{
			/* An entry containing the IP-address was found, but it had a different MAC address */
			xUseEntry = xIpEntry;
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	613b      	str	r3, [r7, #16]
		{
			/* No matching entry found. */
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 800e844:	4925      	ldr	r1, [pc, #148]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e846:	693a      	ldr	r2, [r7, #16]
 800e848:	4613      	mov	r3, r2
 800e84a:	005b      	lsls	r3, r3, #1
 800e84c:	4413      	add	r3, r2
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	440b      	add	r3, r1
 800e852:	683a      	ldr	r2, [r7, #0]
 800e854:	601a      	str	r2, [r3, #0]

		if( pxMACAddress != NULL )
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d021      	beq.n	800e8a0 <vARPRefreshCacheEntry+0x1b0>
		{
			( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 800e85c:	693a      	ldr	r2, [r7, #16]
 800e85e:	4613      	mov	r3, r2
 800e860:	005b      	lsls	r3, r3, #1
 800e862:	4413      	add	r3, r2
 800e864:	009b      	lsls	r3, r3, #2
 800e866:	4a1d      	ldr	r2, [pc, #116]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e868:	4413      	add	r3, r2
 800e86a:	3304      	adds	r3, #4
 800e86c:	6879      	ldr	r1, [r7, #4]
 800e86e:	2206      	movs	r2, #6
 800e870:	4618      	mov	r0, r3
 800e872:	f008 fd04 	bl	801727e <memcpy>

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800e876:	4919      	ldr	r1, [pc, #100]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e878:	693a      	ldr	r2, [r7, #16]
 800e87a:	4613      	mov	r3, r2
 800e87c:	005b      	lsls	r3, r3, #1
 800e87e:	4413      	add	r3, r2
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	440b      	add	r3, r1
 800e884:	330a      	adds	r3, #10
 800e886:	2296      	movs	r2, #150	; 0x96
 800e888:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 800e88a:	4914      	ldr	r1, [pc, #80]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e88c:	693a      	ldr	r2, [r7, #16]
 800e88e:	4613      	mov	r3, r2
 800e890:	005b      	lsls	r3, r3, #1
 800e892:	4413      	add	r3, r2
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	440b      	add	r3, r1
 800e898:	330b      	adds	r3, #11
 800e89a:	2201      	movs	r2, #1
 800e89c:	701a      	strb	r2, [r3, #0]
 800e89e:	e016      	b.n	800e8ce <vARPRefreshCacheEntry+0x1de>
		}
		else if( xIpEntry < 0 )
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	da13      	bge.n	800e8ce <vARPRefreshCacheEntry+0x1de>
		{
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 800e8a6:	490d      	ldr	r1, [pc, #52]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e8a8:	693a      	ldr	r2, [r7, #16]
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	005b      	lsls	r3, r3, #1
 800e8ae:	4413      	add	r3, r2
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	440b      	add	r3, r1
 800e8b4:	330a      	adds	r3, #10
 800e8b6:	2205      	movs	r2, #5
 800e8b8:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 800e8ba:	4908      	ldr	r1, [pc, #32]	; (800e8dc <vARPRefreshCacheEntry+0x1ec>)
 800e8bc:	693a      	ldr	r2, [r7, #16]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	005b      	lsls	r3, r3, #1
 800e8c2:	4413      	add	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	440b      	add	r3, r1
 800e8c8:	330b      	adds	r3, #11
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	701a      	strb	r2, [r3, #0]
		else
		{
			/* Nothing will be stored. */
		}
	}
}
 800e8ce:	3720      	adds	r7, #32
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	2400001c 	.word	0x2400001c
 800e8d8:	24005290 	.word	0x24005290
 800e8dc:	24005218 	.word	0x24005218

0800e8e0 <eARPGetCacheEntry>:
#endif /* ipconfigUSE_ARP_REVERSED_LOOKUP */

/*-----------------------------------------------------------*/

eARPLookupResult_t eARPGetCacheEntry( uint32_t *pulIPAddress, MACAddress_t * const pxMACAddress )
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	6039      	str	r1, [r7, #0]
eARPLookupResult_t eReturn;
uint32_t ulAddressToLookup;
ulAddressToLookup = *pulIPAddress;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	60bb      	str	r3, [r7, #8]
		( void ) memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
		eReturn = eARPCacheHit;
	}
	else
#endif
	if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 800e8f0:	68b8      	ldr	r0, [r7, #8]
 800e8f2:	f001 fb93 	bl	801001c <xIsIPv4Multicast>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d006      	beq.n	800e90a <eARPGetCacheEntry+0x2a>
	{
		/* Get the lowest 23 bits of the IP-address. */
		vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 800e8fc:	6839      	ldr	r1, [r7, #0]
 800e8fe:	68b8      	ldr	r0, [r7, #8]
 800e900:	f001 fbb4 	bl	801006c <vSetMultiCastIPv4MacAddress>

		eReturn = eARPCacheHit;
 800e904:	2301      	movs	r3, #1
 800e906:	73fb      	strb	r3, [r7, #15]
 800e908:	e047      	b.n	800e99a <eARPGetCacheEntry+0xba>
	}
	else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e912:	d005      	beq.n	800e920 <eARPGetCacheEntry+0x40>
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	4b22      	ldr	r3, [pc, #136]	; (800e9a4 <eARPGetCacheEntry+0xc4>)
 800e91a:	691b      	ldr	r3, [r3, #16]
	else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d108      	bne.n	800e932 <eARPGetCacheEntry+0x52>
	{
		/* This is a broadcast so it uses the broadcast MAC address. */
		( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	4a21      	ldr	r2, [pc, #132]	; (800e9a8 <eARPGetCacheEntry+0xc8>)
 800e924:	6811      	ldr	r1, [r2, #0]
 800e926:	6019      	str	r1, [r3, #0]
 800e928:	8892      	ldrh	r2, [r2, #4]
 800e92a:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 800e92c:	2301      	movs	r3, #1
 800e92e:	73fb      	strb	r3, [r7, #15]
 800e930:	e033      	b.n	800e99a <eARPGetCacheEntry+0xba>
	}
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 800e932:	4b1e      	ldr	r3, [pc, #120]	; (800e9ac <eARPGetCacheEntry+0xcc>)
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d102      	bne.n	800e940 <eARPGetCacheEntry+0x60>
	{
		/* The IP address has not yet been assigned, so there is nothing that
		can be done. */
		eReturn = eCantSendPacket;
 800e93a:	2302      	movs	r3, #2
 800e93c:	73fb      	strb	r3, [r7, #15]
 800e93e:	e02c      	b.n	800e99a <eARPGetCacheEntry+0xba>
	}
	else
	{
		eReturn = eARPCacheMiss;
 800e940:	2300      	movs	r3, #0
 800e942:	73fb      	strb	r3, [r7, #15]

		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	4b18      	ldr	r3, [pc, #96]	; (800e9ac <eARPGetCacheEntry+0xcc>)
 800e94a:	695b      	ldr	r3, [r3, #20]
 800e94c:	405a      	eors	r2, r3
 800e94e:	4b15      	ldr	r3, [pc, #84]	; (800e9a4 <eARPGetCacheEntry+0xc4>)
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	4013      	ands	r3, r2
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00b      	beq.n	800e970 <eARPGetCacheEntry+0x90>
			else
#endif
			{
				/* The IP address is off the local network, so look up the
				hardware address of the router, if any. */
				if( xNetworkAddressing.ulGatewayAddress != ( uint32_t ) 0U )
 800e958:	4b12      	ldr	r3, [pc, #72]	; (800e9a4 <eARPGetCacheEntry+0xc4>)
 800e95a:	689b      	ldr	r3, [r3, #8]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d003      	beq.n	800e968 <eARPGetCacheEntry+0x88>
				{
					ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 800e960:	4b10      	ldr	r3, [pc, #64]	; (800e9a4 <eARPGetCacheEntry+0xc4>)
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	60bb      	str	r3, [r7, #8]
 800e966:	e006      	b.n	800e976 <eARPGetCacheEntry+0x96>
				}
				else
				{
					ulAddressToLookup = *pulIPAddress;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	60bb      	str	r3, [r7, #8]
 800e96e:	e002      	b.n	800e976 <eARPGetCacheEntry+0x96>
		}
		else
		{
			/* The IP address is on the local network, so lookup the requested
			IP address directly. */
			ulAddressToLookup = *pulIPAddress;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	60bb      	str	r3, [r7, #8]
		if( eReturn == eARPCacheMiss )	/*lint !e774: (Info -- Boolean within 'if' always evaluates to True, depending on configuration. */
		#else
		/* No cache look-up was done, so the result is still 'eARPCacheMiss'. */
		#endif
		{
			if( ulAddressToLookup == 0UL )
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d102      	bne.n	800e982 <eARPGetCacheEntry+0xa2>
			{
				/* The address is not on the local network, and there is not a
				router. */
				eReturn = eCantSendPacket;
 800e97c:	2302      	movs	r3, #2
 800e97e:	73fb      	strb	r3, [r7, #15]
 800e980:	e00b      	b.n	800e99a <eARPGetCacheEntry+0xba>
			}
			else
			{
				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 800e982:	6839      	ldr	r1, [r7, #0]
 800e984:	68b8      	ldr	r0, [r7, #8]
 800e986:	f000 f813 	bl	800e9b0 <prvCacheLookup>
 800e98a:	4603      	mov	r3, r0
 800e98c:	73fb      	strb	r3, [r7, #15]

				if( eReturn == eARPCacheMiss )
 800e98e:	7bfb      	ldrb	r3, [r7, #15]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d102      	bne.n	800e99a <eARPGetCacheEntry+0xba>
				{
					/* It might be that the ARP has to go to the gateway. */
					*pulIPAddress = ulAddressToLookup;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	return eReturn;
 800e99a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	24005290 	.word	0x24005290
 800e9a8:	080187b8 	.word	0x080187b8
 800e9ac:	2400001c 	.word	0x2400001c

0800e9b0 <prvCacheLookup>:

/*-----------------------------------------------------------*/

static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup, MACAddress_t * const pxMACAddress )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
BaseType_t x;
eARPLookupResult_t eReturn = eARPCacheMiss;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	72fb      	strb	r3, [r7, #11]

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800e9be:	2300      	movs	r3, #0
 800e9c0:	60fb      	str	r3, [r7, #12]
 800e9c2:	e02b      	b.n	800ea1c <prvCacheLookup+0x6c>
	{
		/* Does this row in the ARP cache table hold an entry for the IP address
		being queried? */
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800e9c4:	4919      	ldr	r1, [pc, #100]	; (800ea2c <prvCacheLookup+0x7c>)
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	005b      	lsls	r3, r3, #1
 800e9cc:	4413      	add	r3, r2
 800e9ce:	009b      	lsls	r3, r3, #2
 800e9d0:	440b      	add	r3, r1
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d11d      	bne.n	800ea16 <prvCacheLookup+0x66>
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800e9da:	4914      	ldr	r1, [pc, #80]	; (800ea2c <prvCacheLookup+0x7c>)
 800e9dc:	68fa      	ldr	r2, [r7, #12]
 800e9de:	4613      	mov	r3, r2
 800e9e0:	005b      	lsls	r3, r3, #1
 800e9e2:	4413      	add	r3, r2
 800e9e4:	009b      	lsls	r3, r3, #2
 800e9e6:	440b      	add	r3, r1
 800e9e8:	330b      	adds	r3, #11
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d102      	bne.n	800e9f6 <prvCacheLookup+0x46>
			{
				/* This entry is waiting an ARP reply, so is not valid. */
				eReturn = eCantSendPacket;
 800e9f0:	2302      	movs	r3, #2
 800e9f2:	72fb      	strb	r3, [r7, #11]
			{
				/* A valid entry was found. */
				( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
				eReturn = eARPCacheHit;
			}
			break;
 800e9f4:	e015      	b.n	800ea22 <prvCacheLookup+0x72>
				( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800e9f6:	6838      	ldr	r0, [r7, #0]
 800e9f8:	68fa      	ldr	r2, [r7, #12]
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	005b      	lsls	r3, r3, #1
 800e9fe:	4413      	add	r3, r2
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	4a0a      	ldr	r2, [pc, #40]	; (800ea2c <prvCacheLookup+0x7c>)
 800ea04:	4413      	add	r3, r2
 800ea06:	3304      	adds	r3, #4
 800ea08:	2206      	movs	r2, #6
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	f008 fc37 	bl	801727e <memcpy>
				eReturn = eARPCacheHit;
 800ea10:	2301      	movs	r3, #1
 800ea12:	72fb      	strb	r3, [r7, #11]
			break;
 800ea14:	e005      	b.n	800ea22 <prvCacheLookup+0x72>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	60fb      	str	r3, [r7, #12]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2b05      	cmp	r3, #5
 800ea20:	ddd0      	ble.n	800e9c4 <prvCacheLookup+0x14>
		}
	}

	return eReturn;
 800ea22:	7afb      	ldrb	r3, [r7, #11]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3710      	adds	r7, #16
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	24005218 	.word	0x24005218

0800ea30 <vARPAgeCache>:
/*-----------------------------------------------------------*/

void vARPAgeCache( void )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
BaseType_t x;
TickType_t xTimeNow;

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800ea36:	2300      	movs	r3, #0
 800ea38:	607b      	str	r3, [r7, #4]
 800ea3a:	e063      	b.n	800eb04 <vARPAgeCache+0xd4>
	{
		/* If the entry is valid (its age is greater than zero). */
		if( xARPCache[ x ].ucAge > 0U )
 800ea3c:	4940      	ldr	r1, [pc, #256]	; (800eb40 <vARPAgeCache+0x110>)
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	4613      	mov	r3, r2
 800ea42:	005b      	lsls	r3, r3, #1
 800ea44:	4413      	add	r3, r2
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	440b      	add	r3, r1
 800ea4a:	330a      	adds	r3, #10
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d055      	beq.n	800eafe <vARPAgeCache+0xce>
		{
			/* Decrement the age value of the entry in this ARP cache table row.
			When the age reaches zero it is no longer considered valid. */
			( xARPCache[ x ].ucAge )--;
 800ea52:	493b      	ldr	r1, [pc, #236]	; (800eb40 <vARPAgeCache+0x110>)
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	4613      	mov	r3, r2
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	4413      	add	r3, r2
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	440b      	add	r3, r1
 800ea60:	330a      	adds	r3, #10
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	3b01      	subs	r3, #1
 800ea66:	b2d8      	uxtb	r0, r3
 800ea68:	4935      	ldr	r1, [pc, #212]	; (800eb40 <vARPAgeCache+0x110>)
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	005b      	lsls	r3, r3, #1
 800ea70:	4413      	add	r3, r2
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	440b      	add	r3, r1
 800ea76:	330a      	adds	r3, #10
 800ea78:	4602      	mov	r2, r0
 800ea7a:	701a      	strb	r2, [r3, #0]

			/* If the entry is not yet valid, then it is waiting an ARP
			reply, and the ARP request should be retransmitted. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800ea7c:	4930      	ldr	r1, [pc, #192]	; (800eb40 <vARPAgeCache+0x110>)
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	4613      	mov	r3, r2
 800ea82:	005b      	lsls	r3, r3, #1
 800ea84:	4413      	add	r3, r2
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	440b      	add	r3, r1
 800ea8a:	330b      	adds	r3, #11
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10b      	bne.n	800eaaa <vARPAgeCache+0x7a>
			{
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800ea92:	492b      	ldr	r1, [pc, #172]	; (800eb40 <vARPAgeCache+0x110>)
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	4613      	mov	r3, r2
 800ea98:	005b      	lsls	r3, r3, #1
 800ea9a:	4413      	add	r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	440b      	add	r3, r1
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f000 f85e 	bl	800eb64 <FreeRTOS_OutputARPRequest>
 800eaa8:	e015      	b.n	800ead6 <vARPAgeCache+0xa6>
			}
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 800eaaa:	4925      	ldr	r1, [pc, #148]	; (800eb40 <vARPAgeCache+0x110>)
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	4613      	mov	r3, r2
 800eab0:	005b      	lsls	r3, r3, #1
 800eab2:	4413      	add	r3, r2
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	440b      	add	r3, r1
 800eab8:	330a      	adds	r3, #10
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	2b03      	cmp	r3, #3
 800eabe:	d80a      	bhi.n	800ead6 <vARPAgeCache+0xa6>
			{
				/* This entry will get removed soon.  See if the MAC address is
				still valid to prevent this happening. */
				iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800eac0:	491f      	ldr	r1, [pc, #124]	; (800eb40 <vARPAgeCache+0x110>)
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	4613      	mov	r3, r2
 800eac6:	005b      	lsls	r3, r3, #1
 800eac8:	4413      	add	r3, r2
 800eaca:	009b      	lsls	r3, r3, #2
 800eacc:	440b      	add	r3, r1
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f000 f847 	bl	800eb64 <FreeRTOS_OutputARPRequest>
			else
			{
				/* The age has just ticked down, with nothing to do. */
			}

			if( xARPCache[ x ].ucAge == 0U )
 800ead6:	491a      	ldr	r1, [pc, #104]	; (800eb40 <vARPAgeCache+0x110>)
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	4613      	mov	r3, r2
 800eadc:	005b      	lsls	r3, r3, #1
 800eade:	4413      	add	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	440b      	add	r3, r1
 800eae4:	330a      	adds	r3, #10
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d108      	bne.n	800eafe <vARPAgeCache+0xce>
			{
				/* The entry is no longer valid.  Wipe it out. */
				iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
				xARPCache[ x ].ulIPAddress = 0UL;
 800eaec:	4914      	ldr	r1, [pc, #80]	; (800eb40 <vARPAgeCache+0x110>)
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	005b      	lsls	r3, r3, #1
 800eaf4:	4413      	add	r3, r2
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	440b      	add	r3, r1
 800eafa:	2200      	movs	r2, #0
 800eafc:	601a      	str	r2, [r3, #0]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	3301      	adds	r3, #1
 800eb02:	607b      	str	r3, [r7, #4]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2b05      	cmp	r3, #5
 800eb08:	dd98      	ble.n	800ea3c <vARPAgeCache+0xc>
			}
		}
	}

	xTimeNow = xTaskGetTickCount ();
 800eb0a:	f7fe fc23 	bl	800d354 <xTaskGetTickCount>
 800eb0e:	6038      	str	r0, [r7, #0]

	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 800eb10:	4b0c      	ldr	r3, [pc, #48]	; (800eb44 <vARPAgeCache+0x114>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d007      	beq.n	800eb28 <vARPAgeCache+0xf8>
 800eb18:	4b0a      	ldr	r3, [pc, #40]	; (800eb44 <vARPAgeCache+0x114>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	683a      	ldr	r2, [r7, #0]
 800eb1e:	1ad3      	subs	r3, r2, r3
 800eb20:	f644 6220 	movw	r2, #20000	; 0x4e20
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d907      	bls.n	800eb38 <vARPAgeCache+0x108>
	{
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 800eb28:	4b07      	ldr	r3, [pc, #28]	; (800eb48 <vARPAgeCache+0x118>)
 800eb2a:	695b      	ldr	r3, [r3, #20]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f000 f819 	bl	800eb64 <FreeRTOS_OutputARPRequest>
		xLastGratuitousARPTime = xTimeNow;
 800eb32:	4a04      	ldr	r2, [pc, #16]	; (800eb44 <vARPAgeCache+0x114>)
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	6013      	str	r3, [r2, #0]
	}
}
 800eb38:	bf00      	nop
 800eb3a:	3708      	adds	r7, #8
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	24005218 	.word	0x24005218
 800eb44:	24005260 	.word	0x24005260
 800eb48:	2400001c 	.word	0x2400001c

0800eb4c <vARPSendGratuitous>:
/*-----------------------------------------------------------*/

void vARPSendGratuitous( void )
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	af00      	add	r7, sp, #0
	/* Setting xLastGratuitousARPTime to 0 will force a gratuitous ARP the next
	time vARPAgeCache() is called. */
	xLastGratuitousARPTime = ( TickType_t ) 0;
 800eb50:	4b03      	ldr	r3, [pc, #12]	; (800eb60 <vARPSendGratuitous+0x14>)
 800eb52:	2200      	movs	r2, #0
 800eb54:	601a      	str	r2, [r3, #0]

	/* Let the IP-task call vARPAgeCache(). */
	( void ) xSendEventToIPTask( eARPTimerEvent );
 800eb56:	2003      	movs	r0, #3
 800eb58:	f001 f912 	bl	800fd80 <xSendEventToIPTask>
}
 800eb5c:	bf00      	nop
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	24005260 	.word	0x24005260

0800eb64 <FreeRTOS_OutputARPRequest>:

/*-----------------------------------------------------------*/
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b086      	sub	sp, #24
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	/* This is called from the context of the IP event task, so a block time
	must not be used. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	202a      	movs	r0, #42	; 0x2a
 800eb70:	f007 fc28 	bl	80163c4 <pxGetNetworkBufferWithDescriptor>
 800eb74:	6178      	str	r0, [r7, #20]

	if( pxNetworkBuffer != NULL )
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d020      	beq.n	800ebbe <FreeRTOS_OutputARPRequest+0x5a>
	{
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	615a      	str	r2, [r3, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
 800eb82:	6978      	ldr	r0, [r7, #20]
 800eb84:	f000 f820 	bl	800ebc8 <vARPGenerateRequestPacket>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		if( xIsCallingFromIPTask() != 0 )
 800eb88:	f000 fe7a 	bl	800f880 <xIsCallingFromIPTask>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d004      	beq.n	800eb9c <FreeRTOS_OutputARPRequest+0x38>
		{
			/* Only the IP-task is allowed to call this function directly. */
			( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800eb92:	2101      	movs	r1, #1
 800eb94:	6978      	ldr	r0, [r7, #20]
 800eb96:	f008 f9a3 	bl	8016ee0 <xNetworkInterfaceOutput>
				/* Failed to send the message, so release the network buffer. */
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
			}
		}
	}
}
 800eb9a:	e010      	b.n	800ebbe <FreeRTOS_OutputARPRequest+0x5a>
			xSendEvent.eEventType = eNetworkTxEvent;
 800eb9c:	2302      	movs	r3, #2
 800eb9e:	733b      	strb	r3, [r7, #12]
			xSendEvent.pvData = pxNetworkBuffer;
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	613b      	str	r3, [r7, #16]
			if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800eba4:	f107 030c 	add.w	r3, r7, #12
 800eba8:	f04f 31ff 	mov.w	r1, #4294967295
 800ebac:	4618      	mov	r0, r3
 800ebae:	f001 f8fd 	bl	800fdac <xSendEventStructToIPTask>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d102      	bne.n	800ebbe <FreeRTOS_OutputARPRequest+0x5a>
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ebb8:	6978      	ldr	r0, [r7, #20]
 800ebba:	f007 fc81 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
}
 800ebbe:	bf00      	nop
 800ebc0:	3718      	adds	r7, #24
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
	...

0800ebc8 <vARPGenerateRequestPacket>:

void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800ebc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebca:	b087      	sub	sp, #28
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
ARPPacket_t *pxARPPacket;

	/* Buffer allocation ensures that buffers always have space
	for an ARP packet. See buffer allocation implementations 1
	and 2 under portable/BufferManagement. */
	configASSERT( pxNetworkBuffer != NULL );
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10b      	bne.n	800ebee <vARPGenerateRequestPacket+0x26>
 800ebd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebda:	b672      	cpsid	i
 800ebdc:	f383 8811 	msr	BASEPRI, r3
 800ebe0:	f3bf 8f6f 	isb	sy
 800ebe4:	f3bf 8f4f 	dsb	sy
 800ebe8:	b662      	cpsie	i
 800ebea:	613b      	str	r3, [r7, #16]
 800ebec:	e7fe      	b.n	800ebec <vARPGenerateRequestPacket+0x24>
	configASSERT( pxNetworkBuffer->xDataLength >= sizeof(ARPPacket_t) );
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	69db      	ldr	r3, [r3, #28]
 800ebf2:	2b29      	cmp	r3, #41	; 0x29
 800ebf4:	d80b      	bhi.n	800ec0e <vARPGenerateRequestPacket+0x46>
 800ebf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfa:	b672      	cpsid	i
 800ebfc:	f383 8811 	msr	BASEPRI, r3
 800ec00:	f3bf 8f6f 	isb	sy
 800ec04:	f3bf 8f4f 	dsb	sy
 800ec08:	b662      	cpsie	i
 800ec0a:	60fb      	str	r3, [r7, #12]
 800ec0c:	e7fe      	b.n	800ec0c <vARPGenerateRequestPacket+0x44>

	pxARPPacket = ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	699b      	ldr	r3, [r3, #24]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7ff fce4 	bl	800e5e0 <vCastPointerTo_ARPPacket_t>
 800ec18:	6178      	str	r0, [r7, #20]
		xARPHeader.ucHardwareAddressLength;
		xARPHeader.ucProtocolAddressLength;
		xARPHeader.usOperation;
		xARPHeader.xTargetHardwareAddress;
	*/
	( void ) memcpy( ( void * ) pxARPPacket, ( const void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	4a1a      	ldr	r2, [pc, #104]	; (800ec88 <vARPGenerateRequestPacket+0xc0>)
 800ec1e:	4614      	mov	r4, r2
 800ec20:	469c      	mov	ip, r3
 800ec22:	f104 0e20 	add.w	lr, r4, #32
 800ec26:	4665      	mov	r5, ip
 800ec28:	4626      	mov	r6, r4
 800ec2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ec2c:	6028      	str	r0, [r5, #0]
 800ec2e:	6069      	str	r1, [r5, #4]
 800ec30:	60aa      	str	r2, [r5, #8]
 800ec32:	60eb      	str	r3, [r5, #12]
 800ec34:	3410      	adds	r4, #16
 800ec36:	f10c 0c10 	add.w	ip, ip, #16
 800ec3a:	4574      	cmp	r4, lr
 800ec3c:	d1f3      	bne.n	800ec26 <vARPGenerateRequestPacket+0x5e>
 800ec3e:	4663      	mov	r3, ip
 800ec40:	4622      	mov	r2, r4
 800ec42:	6810      	ldr	r0, [r2, #0]
 800ec44:	6018      	str	r0, [r3, #0]
 800ec46:	8892      	ldrh	r2, [r2, #4]
 800ec48:	809a      	strh	r2, [r3, #4]
	( void ) memcpy( ( void * ) ( pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes ) , ( const void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	3306      	adds	r3, #6
 800ec4e:	2206      	movs	r2, #6
 800ec50:	490e      	ldr	r1, [pc, #56]	; (800ec8c <vARPGenerateRequestPacket+0xc4>)
 800ec52:	4618      	mov	r0, r3
 800ec54:	f008 fb13 	bl	801727e <memcpy>
	( void ) memcpy( ( void * ) ( pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes ), ( const void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	3316      	adds	r3, #22
 800ec5c:	2206      	movs	r2, #6
 800ec5e:	490b      	ldr	r1, [pc, #44]	; (800ec8c <vARPGenerateRequestPacket+0xc4>)
 800ec60:	4618      	mov	r0, r3
 800ec62:	f008 fb0c 	bl	801727e <memcpy>

	( void ) memcpy( ( void * ) ( pxARPPacket->xARPHeader.ucSenderProtocolAddress ), ( const void * ) ipLOCAL_IP_ADDRESS_POINTER, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	331c      	adds	r3, #28
 800ec6a:	4a08      	ldr	r2, [pc, #32]	; (800ec8c <vARPGenerateRequestPacket+0xc4>)
 800ec6c:	6952      	ldr	r2, [r2, #20]
 800ec6e:	601a      	str	r2, [r3, #0]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	695a      	ldr	r2, [r3, #20]
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	222a      	movs	r2, #42	; 0x2a
 800ec7e:	61da      	str	r2, [r3, #28]

	iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 800ec80:	bf00      	nop
 800ec82:	371c      	adds	r7, #28
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec88:	08018760 	.word	0x08018760
 800ec8c:	2400001c 	.word	0x2400001c

0800ec90 <FreeRTOS_ClearARP>:
/*-----------------------------------------------------------*/

void FreeRTOS_ClearARP( void )
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	af00      	add	r7, sp, #0
	( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 800ec94:	2248      	movs	r2, #72	; 0x48
 800ec96:	2100      	movs	r1, #0
 800ec98:	4802      	ldr	r0, [pc, #8]	; (800eca4 <FreeRTOS_ClearARP+0x14>)
 800ec9a:	f008 fb14 	bl	80172c6 <memset>
}
 800ec9e:	bf00      	nop
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	24005218 	.word	0x24005218

0800eca8 <vCastPointerTo_DHCPMessage_IPv4_t>:
}
#include "pack_struct_end.h"
typedef struct xDHCPMessage_IPv4 DHCPMessage_IPv4_t;

static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( DHCPMessage_IPv4_t )
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
    return ( DHCPMessage_IPv4_t *)pvArgument;
 800ecb0:	687b      	ldr	r3, [r7, #4]
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	370c      	adds	r7, #12
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr

0800ecbe <vCastConstPointerTo_DHCPMessage_IPv4_t>:
static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( DHCPMessage_IPv4_t )
{
 800ecbe:	b480      	push	{r7}
 800ecc0:	b083      	sub	sp, #12
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
    return ( const DHCPMessage_IPv4_t *) pvArgument;
 800ecc6:	687b      	ldr	r3, [r7, #4]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	370c      	adds	r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <xIsDHCPSocket>:
_static DHCPData_t xDHCPData;

/*-----------------------------------------------------------*/

BaseType_t xIsDHCPSocket( Socket_t xSocket )
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b085      	sub	sp, #20
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	if( xDHCPSocket == xSocket )
 800ecdc:	4b08      	ldr	r3, [pc, #32]	; (800ed00 <xIsDHCPSocket+0x2c>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	687a      	ldr	r2, [r7, #4]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d102      	bne.n	800ecec <xIsDHCPSocket+0x18>
	{
		xReturn = pdTRUE;
 800ece6:	2301      	movs	r3, #1
 800ece8:	60fb      	str	r3, [r7, #12]
 800ecea:	e001      	b.n	800ecf0 <xIsDHCPSocket+0x1c>
	}
	else
	{
		xReturn = pdFALSE;
 800ecec:	2300      	movs	r3, #0
 800ecee:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3714      	adds	r7, #20
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	24005264 	.word	0x24005264

0800ed04 <vDHCPProcess>:
/*-----------------------------------------------------------*/

void vDHCPProcess( BaseType_t xReset )
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
BaseType_t xGivingUp = pdFALSE;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	60fb      	str	r3, [r7, #12]
#if( ipconfigUSE_DHCP_HOOK != 0 )
	eDHCPCallbackAnswer_t eAnswer;
#endif	/* ipconfigUSE_DHCP_HOOK */

	/* Is DHCP starting over? */
	if( xReset != pdFALSE )
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d002      	beq.n	800ed1c <vDHCPProcess+0x18>
	{
		EP_DHCPData.eDHCPState = eWaitingSendFirstDiscover;
 800ed16:	4b87      	ldr	r3, [pc, #540]	; (800ef34 <vDHCPProcess+0x230>)
 800ed18:	2200      	movs	r2, #0
 800ed1a:	771a      	strb	r2, [r3, #28]
	}

	switch( EP_DHCPData.eDHCPState )
 800ed1c:	4b85      	ldr	r3, [pc, #532]	; (800ef34 <vDHCPProcess+0x230>)
 800ed1e:	7f1b      	ldrb	r3, [r3, #28]
 800ed20:	2b04      	cmp	r3, #4
 800ed22:	f200 80e6 	bhi.w	800eef2 <vDHCPProcess+0x1ee>
 800ed26:	a201      	add	r2, pc, #4	; (adr r2, 800ed2c <vDHCPProcess+0x28>)
 800ed28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed2c:	0800ed41 	.word	0x0800ed41
 800ed30:	0800ed6f 	.word	0x0800ed6f
 800ed34:	0800ee01 	.word	0x0800ee01
 800ed38:	0800eea7 	.word	0x0800eea7
 800ed3c:	0800eeeb 	.word	0x0800eeeb
			if( eAnswer == eDHCPContinue )
		#endif	/* ipconfigUSE_DHCP_HOOK */
			{
				/* Initial state.  Create the DHCP socket, timer, etc. if they
				have not already been created. */
				prvInitialiseDHCP();
 800ed40:	f000 f95a 	bl	800eff8 <prvInitialiseDHCP>

				/* See if prvInitialiseDHCP() has creates a socket. */
				if( xDHCPSocket == NULL )
 800ed44:	4b7c      	ldr	r3, [pc, #496]	; (800ef38 <vDHCPProcess+0x234>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d102      	bne.n	800ed52 <vDHCPProcess+0x4e>
				{
					xGivingUp = pdTRUE;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	60fb      	str	r3, [r7, #12]

				/* The user indicates that the DHCP process does not continue. */
				xGivingUp = pdTRUE;
			}
		#endif	/* ipconfigUSE_DHCP_HOOK */
			break;
 800ed50:	e0d6      	b.n	800ef00 <vDHCPProcess+0x1fc>
					*ipLOCAL_IP_ADDRESS_POINTER = 0UL;
 800ed52:	4b7a      	ldr	r3, [pc, #488]	; (800ef3c <vDHCPProcess+0x238>)
 800ed54:	2200      	movs	r2, #0
 800ed56:	615a      	str	r2, [r3, #20]
					EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 800ed58:	f7fe fafc 	bl	800d354 <xTaskGetTickCount>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	4b75      	ldr	r3, [pc, #468]	; (800ef34 <vDHCPProcess+0x230>)
 800ed60:	611a      	str	r2, [r3, #16]
					prvSendDHCPDiscover();
 800ed62:	f000 fc05 	bl	800f570 <prvSendDHCPDiscover>
					EP_DHCPData.eDHCPState = eWaitingOffer;
 800ed66:	4b73      	ldr	r3, [pc, #460]	; (800ef34 <vDHCPProcess+0x230>)
 800ed68:	2201      	movs	r2, #1
 800ed6a:	771a      	strb	r2, [r3, #28]
			break;
 800ed6c:	e0c8      	b.n	800ef00 <vDHCPProcess+0x1fc>

		case eWaitingOffer :

			xGivingUp = pdFALSE;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	60fb      	str	r3, [r7, #12]

			/* Look for offers coming in. */
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_OFFER ) == pdPASS )
 800ed72:	2002      	movs	r0, #2
 800ed74:	f000 f95e 	bl	800f034 <prvProcessDHCPReplies>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d10e      	bne.n	800ed9c <vDHCPProcess+0x98>
				if( eAnswer == eDHCPContinue )
			#endif	/* ipconfigUSE_DHCP_HOOK */
				{
					/* An offer has been made, the user wants to continue,
					generate the request. */
					EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 800ed7e:	f7fe fae9 	bl	800d354 <xTaskGetTickCount>
 800ed82:	4602      	mov	r2, r0
 800ed84:	4b6b      	ldr	r3, [pc, #428]	; (800ef34 <vDHCPProcess+0x230>)
 800ed86:	611a      	str	r2, [r3, #16]
					EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 800ed88:	4b6a      	ldr	r3, [pc, #424]	; (800ef34 <vDHCPProcess+0x230>)
 800ed8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed8e:	615a      	str	r2, [r3, #20]
					prvSendDHCPRequest();
 800ed90:	f000 fbba 	bl	800f508 <prvSendDHCPRequest>
					EP_DHCPData.eDHCPState = eWaitingAcknowledge;
 800ed94:	4b67      	ldr	r3, [pc, #412]	; (800ef34 <vDHCPProcess+0x230>)
 800ed96:	2202      	movs	r2, #2
 800ed98:	771a      	strb	r2, [r3, #28]
					break;
 800ed9a:	e0b1      	b.n	800ef00 <vDHCPProcess+0x1fc>
				xGivingUp = pdTRUE;
			#endif	/* ipconfigUSE_DHCP_HOOK */
			}

			/* Is it time to send another Discover? */
			else if( ( xTaskGetTickCount() - EP_DHCPData.xDHCPTxTime ) > EP_DHCPData.xDHCPTxPeriod )
 800ed9c:	f7fe fada 	bl	800d354 <xTaskGetTickCount>
 800eda0:	4602      	mov	r2, r0
 800eda2:	4b64      	ldr	r3, [pc, #400]	; (800ef34 <vDHCPProcess+0x230>)
 800eda4:	691b      	ldr	r3, [r3, #16]
 800eda6:	1ad2      	subs	r2, r2, r3
 800eda8:	4b62      	ldr	r3, [pc, #392]	; (800ef34 <vDHCPProcess+0x230>)
 800edaa:	695b      	ldr	r3, [r3, #20]
 800edac:	429a      	cmp	r2, r3
 800edae:	f240 80a2 	bls.w	800eef6 <vDHCPProcess+0x1f2>
			{
				/* It is time to send another Discover.  Increase the time
				period, and if it has not got to the point of giving up - send
				another discovery. */
				EP_DHCPData.xDHCPTxPeriod <<= 1;
 800edb2:	4b60      	ldr	r3, [pc, #384]	; (800ef34 <vDHCPProcess+0x230>)
 800edb4:	695b      	ldr	r3, [r3, #20]
 800edb6:	005b      	lsls	r3, r3, #1
 800edb8:	4a5e      	ldr	r2, [pc, #376]	; (800ef34 <vDHCPProcess+0x230>)
 800edba:	6153      	str	r3, [r2, #20]

				if( EP_DHCPData.xDHCPTxPeriod <= ( TickType_t ) ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 800edbc:	4b5d      	ldr	r3, [pc, #372]	; (800ef34 <vDHCPProcess+0x230>)
 800edbe:	695b      	ldr	r3, [r3, #20]
 800edc0:	4a5f      	ldr	r2, [pc, #380]	; (800ef40 <vDHCPProcess+0x23c>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d819      	bhi.n	800edfa <vDHCPProcess+0xf6>
				{
					if( xApplicationGetRandomNumber( &( EP_DHCPData.ulTransactionId ) ) != pdFALSE )
 800edc6:	485b      	ldr	r0, [pc, #364]	; (800ef34 <vDHCPProcess+0x230>)
 800edc8:	f7f2 f982 	bl	80010d0 <xApplicationGetRandomNumber>
 800edcc:	4603      	mov	r3, r0
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f000 8091 	beq.w	800eef6 <vDHCPProcess+0x1f2>
					{
						EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 800edd4:	f7fe fabe 	bl	800d354 <xTaskGetTickCount>
 800edd8:	4602      	mov	r2, r0
 800edda:	4b56      	ldr	r3, [pc, #344]	; (800ef34 <vDHCPProcess+0x230>)
 800eddc:	611a      	str	r2, [r3, #16]
						if( EP_DHCPData.xUseBroadcast != pdFALSE )
 800edde:	4b55      	ldr	r3, [pc, #340]	; (800ef34 <vDHCPProcess+0x230>)
 800ede0:	699b      	ldr	r3, [r3, #24]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d003      	beq.n	800edee <vDHCPProcess+0xea>
						{
							EP_DHCPData.xUseBroadcast = pdFALSE;
 800ede6:	4b53      	ldr	r3, [pc, #332]	; (800ef34 <vDHCPProcess+0x230>)
 800ede8:	2200      	movs	r2, #0
 800edea:	619a      	str	r2, [r3, #24]
 800edec:	e002      	b.n	800edf4 <vDHCPProcess+0xf0>
						}
						else
						{
							EP_DHCPData.xUseBroadcast = pdTRUE;
 800edee:	4b51      	ldr	r3, [pc, #324]	; (800ef34 <vDHCPProcess+0x230>)
 800edf0:	2201      	movs	r2, #1
 800edf2:	619a      	str	r2, [r3, #24]
						}
						prvSendDHCPDiscover();
 800edf4:	f000 fbbc 	bl	800f570 <prvSendDHCPDiscover>
			}
			else
			{
				/* There was no DHCP reply, there was no time-out, just keep on waiting. */
			}
			break;
 800edf8:	e07d      	b.n	800eef6 <vDHCPProcess+0x1f2>
						xGivingUp = pdTRUE;
 800edfa:	2301      	movs	r3, #1
 800edfc:	60fb      	str	r3, [r7, #12]
			break;
 800edfe:	e07a      	b.n	800eef6 <vDHCPProcess+0x1f2>

		case eWaitingAcknowledge :

			/* Look for acks coming in. */
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_ACK ) == pdPASS )
 800ee00:	2005      	movs	r0, #5
 800ee02:	f000 f917 	bl	800f034 <prvProcessDHCPReplies>
 800ee06:	4603      	mov	r3, r0
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d12c      	bne.n	800ee66 <vDHCPProcess+0x162>
			{
				FreeRTOS_debug_printf( ( "vDHCPProcess: acked %lxip\n", FreeRTOS_ntohl( EP_DHCPData.ulOfferedIPAddress ) ) );

				/* DHCP completed.  The IP address can now be used, and the
				timer set to the lease timeout time. */
				*ipLOCAL_IP_ADDRESS_POINTER = EP_DHCPData.ulOfferedIPAddress;
 800ee0c:	4b49      	ldr	r3, [pc, #292]	; (800ef34 <vDHCPProcess+0x230>)
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	4a4a      	ldr	r2, [pc, #296]	; (800ef3c <vDHCPProcess+0x238>)
 800ee12:	6153      	str	r3, [r2, #20]

				/* Setting the 'local' broadcast address, something like
				'192.168.1.255'. */
				EP_IPv4_SETTINGS.ulBroadcastAddress = ( EP_DHCPData.ulOfferedIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 800ee14:	4b47      	ldr	r3, [pc, #284]	; (800ef34 <vDHCPProcess+0x230>)
 800ee16:	685a      	ldr	r2, [r3, #4]
 800ee18:	4b4a      	ldr	r3, [pc, #296]	; (800ef44 <vDHCPProcess+0x240>)
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	43db      	mvns	r3, r3
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	4a48      	ldr	r2, [pc, #288]	; (800ef44 <vDHCPProcess+0x240>)
 800ee22:	6113      	str	r3, [r2, #16]
				EP_DHCPData.eDHCPState = eLeasedAddress;
 800ee24:	4b43      	ldr	r3, [pc, #268]	; (800ef34 <vDHCPProcess+0x230>)
 800ee26:	2203      	movs	r2, #3
 800ee28:	771a      	strb	r2, [r3, #28]
				iptraceDHCP_SUCCEDEED( EP_DHCPData.ulOfferedIPAddress );

				/* DHCP failed, the default configured IP-address will be used
				Now call vIPNetworkUpCalls() to send the network-up event and
				start the ARP timer. */
				vIPNetworkUpCalls();
 800ee2a:	f001 f87b 	bl	800ff24 <vIPNetworkUpCalls>

				/* Close socket to ensure packets don't queue on it. */
				prvCloseDHCPSocket();
 800ee2e:	f000 f88d 	bl	800ef4c <prvCloseDHCPSocket>

				if( EP_DHCPData.ulLeaseTime == 0UL )
 800ee32:	4b40      	ldr	r3, [pc, #256]	; (800ef34 <vDHCPProcess+0x230>)
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d103      	bne.n	800ee42 <vDHCPProcess+0x13e>
				{
					EP_DHCPData.ulLeaseTime = ( uint32_t ) dhcpDEFAULT_LEASE_TIME;
 800ee3a:	4b3e      	ldr	r3, [pc, #248]	; (800ef34 <vDHCPProcess+0x230>)
 800ee3c:	4a42      	ldr	r2, [pc, #264]	; (800ef48 <vDHCPProcess+0x244>)
 800ee3e:	60da      	str	r2, [r3, #12]
 800ee40:	e009      	b.n	800ee56 <vDHCPProcess+0x152>
				}
				else if( EP_DHCPData.ulLeaseTime < dhcpMINIMUM_LEASE_TIME )
 800ee42:	4b3c      	ldr	r3, [pc, #240]	; (800ef34 <vDHCPProcess+0x230>)
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d803      	bhi.n	800ee56 <vDHCPProcess+0x152>
				{
					EP_DHCPData.ulLeaseTime = dhcpMINIMUM_LEASE_TIME;
 800ee4e:	4b39      	ldr	r3, [pc, #228]	; (800ef34 <vDHCPProcess+0x230>)
 800ee50:	f64e 2260 	movw	r2, #60000	; 0xea60
 800ee54:	60da      	str	r2, [r3, #12]
				{
					/* The lease time is already valid. */
				}

				/* Check for clashes. */
				vARPSendGratuitous();
 800ee56:	f7ff fe79 	bl	800eb4c <vARPSendGratuitous>
				vIPReloadDHCPTimer( EP_DHCPData.ulLeaseTime );
 800ee5a:	4b36      	ldr	r3, [pc, #216]	; (800ef34 <vDHCPProcess+0x230>)
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f001 fe04 	bl	8010a6c <vIPReloadDHCPTimer>
						/* Give up, start again. */
						EP_DHCPData.eDHCPState = eWaitingSendFirstDiscover;
					}
				}
			}
			break;
 800ee64:	e049      	b.n	800eefa <vDHCPProcess+0x1f6>
				if( ( xTaskGetTickCount() - EP_DHCPData.xDHCPTxTime ) > EP_DHCPData.xDHCPTxPeriod )
 800ee66:	f7fe fa75 	bl	800d354 <xTaskGetTickCount>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	4b31      	ldr	r3, [pc, #196]	; (800ef34 <vDHCPProcess+0x230>)
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	1ad2      	subs	r2, r2, r3
 800ee72:	4b30      	ldr	r3, [pc, #192]	; (800ef34 <vDHCPProcess+0x230>)
 800ee74:	695b      	ldr	r3, [r3, #20]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d93f      	bls.n	800eefa <vDHCPProcess+0x1f6>
					EP_DHCPData.xDHCPTxPeriod <<= 1;
 800ee7a:	4b2e      	ldr	r3, [pc, #184]	; (800ef34 <vDHCPProcess+0x230>)
 800ee7c:	695b      	ldr	r3, [r3, #20]
 800ee7e:	005b      	lsls	r3, r3, #1
 800ee80:	4a2c      	ldr	r2, [pc, #176]	; (800ef34 <vDHCPProcess+0x230>)
 800ee82:	6153      	str	r3, [r2, #20]
					if( EP_DHCPData.xDHCPTxPeriod <= ( TickType_t ) ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 800ee84:	4b2b      	ldr	r3, [pc, #172]	; (800ef34 <vDHCPProcess+0x230>)
 800ee86:	695b      	ldr	r3, [r3, #20]
 800ee88:	4a2d      	ldr	r2, [pc, #180]	; (800ef40 <vDHCPProcess+0x23c>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d807      	bhi.n	800ee9e <vDHCPProcess+0x19a>
						EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 800ee8e:	f7fe fa61 	bl	800d354 <xTaskGetTickCount>
 800ee92:	4602      	mov	r2, r0
 800ee94:	4b27      	ldr	r3, [pc, #156]	; (800ef34 <vDHCPProcess+0x230>)
 800ee96:	611a      	str	r2, [r3, #16]
						prvSendDHCPRequest();
 800ee98:	f000 fb36 	bl	800f508 <prvSendDHCPRequest>
			break;
 800ee9c:	e02d      	b.n	800eefa <vDHCPProcess+0x1f6>
						EP_DHCPData.eDHCPState = eWaitingSendFirstDiscover;
 800ee9e:	4b25      	ldr	r3, [pc, #148]	; (800ef34 <vDHCPProcess+0x230>)
 800eea0:	2200      	movs	r2, #0
 800eea2:	771a      	strb	r2, [r3, #28]
			break;
 800eea4:	e029      	b.n	800eefa <vDHCPProcess+0x1f6>
			break;
	#endif	/* ipconfigDHCP_FALL_BACK_AUTO_IP */

		case eLeasedAddress :

			if( FreeRTOS_IsNetworkUp() != 0 )
 800eea6:	f001 fdfb 	bl	8010aa0 <FreeRTOS_IsNetworkUp>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d017      	beq.n	800eee0 <vDHCPProcess+0x1dc>
			{
				/* Resend the request at the appropriate time to renew the lease. */
				prvCreateDHCPSocket();
 800eeb0:	f000 f85e 	bl	800ef70 <prvCreateDHCPSocket>

				if( xDHCPSocket != NULL )
 800eeb4:	4b20      	ldr	r3, [pc, #128]	; (800ef38 <vDHCPProcess+0x234>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d020      	beq.n	800eefe <vDHCPProcess+0x1fa>
				{
					EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 800eebc:	f7fe fa4a 	bl	800d354 <xTaskGetTickCount>
 800eec0:	4602      	mov	r2, r0
 800eec2:	4b1c      	ldr	r3, [pc, #112]	; (800ef34 <vDHCPProcess+0x230>)
 800eec4:	611a      	str	r2, [r3, #16]
					EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 800eec6:	4b1b      	ldr	r3, [pc, #108]	; (800ef34 <vDHCPProcess+0x230>)
 800eec8:	f241 3288 	movw	r2, #5000	; 0x1388
 800eecc:	615a      	str	r2, [r3, #20]
					prvSendDHCPRequest();
 800eece:	f000 fb1b 	bl	800f508 <prvSendDHCPRequest>
					EP_DHCPData.eDHCPState = eWaitingAcknowledge;
 800eed2:	4b18      	ldr	r3, [pc, #96]	; (800ef34 <vDHCPProcess+0x230>)
 800eed4:	2202      	movs	r2, #2
 800eed6:	771a      	strb	r2, [r3, #28]

					/* From now on, we should be called more often */
					vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 800eed8:	20fa      	movs	r0, #250	; 0xfa
 800eeda:	f001 fdc7 	bl	8010a6c <vIPReloadDHCPTimer>
			{
				/* See PR #53 on github/freertos/freertos */
				FreeRTOS_printf( ( "DHCP: lease time finished but network is down\n" ) );
				vIPReloadDHCPTimer( pdMS_TO_TICKS( 5000U ) );
			}
			break;
 800eede:	e00e      	b.n	800eefe <vDHCPProcess+0x1fa>
				vIPReloadDHCPTimer( pdMS_TO_TICKS( 5000U ) );
 800eee0:	f241 3088 	movw	r0, #5000	; 0x1388
 800eee4:	f001 fdc2 	bl	8010a6c <vIPReloadDHCPTimer>
			break;
 800eee8:	e009      	b.n	800eefe <vDHCPProcess+0x1fa>

		case eNotUsingLeasedAddress:

			vIPSetDHCPTimerEnableState( pdFALSE );
 800eeea:	2000      	movs	r0, #0
 800eeec:	f001 fda4 	bl	8010a38 <vIPSetDHCPTimerEnableState>
			break;
 800eef0:	e006      	b.n	800ef00 <vDHCPProcess+0x1fc>

		default:
			/* Lint: all options are included. */
			break;
 800eef2:	bf00      	nop
 800eef4:	e004      	b.n	800ef00 <vDHCPProcess+0x1fc>
			break;
 800eef6:	bf00      	nop
 800eef8:	e002      	b.n	800ef00 <vDHCPProcess+0x1fc>
			break;
 800eefa:	bf00      	nop
 800eefc:	e000      	b.n	800ef00 <vDHCPProcess+0x1fc>
			break;
 800eefe:	bf00      	nop
	}

	if( xGivingUp != pdFALSE )
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d011      	beq.n	800ef2a <vDHCPProcess+0x226>
		/* xGivingUp became true either because of a time-out, or because
		xApplicationDHCPHook() returned another value than 'eDHCPContinue',
		meaning that the conversion is cancelled from here. */

		/* Revert to static IP address. */
		taskENTER_CRITICAL();
 800ef06:	f7ff fa41 	bl	800e38c <vPortEnterCritical>
		{
			*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 800ef0a:	4b0e      	ldr	r3, [pc, #56]	; (800ef44 <vDHCPProcess+0x240>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a0b      	ldr	r2, [pc, #44]	; (800ef3c <vDHCPProcess+0x238>)
 800ef10:	6153      	str	r3, [r2, #20]
			iptraceDHCP_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( xNetworkAddressing.ulDefaultIPAddress );
		}
		taskEXIT_CRITICAL();
 800ef12:	f7ff fa6d 	bl	800e3f0 <vPortExitCritical>

		EP_DHCPData.eDHCPState = eNotUsingLeasedAddress;
 800ef16:	4b07      	ldr	r3, [pc, #28]	; (800ef34 <vDHCPProcess+0x230>)
 800ef18:	2204      	movs	r2, #4
 800ef1a:	771a      	strb	r2, [r3, #28]
		vIPSetDHCPTimerEnableState( pdFALSE );
 800ef1c:	2000      	movs	r0, #0
 800ef1e:	f001 fd8b 	bl	8010a38 <vIPSetDHCPTimerEnableState>

		/* DHCP failed, the default configured IP-address will be used.  Now
		call vIPNetworkUpCalls() to send the network-up event and start the ARP
		timer. */
		vIPNetworkUpCalls();
 800ef22:	f000 ffff 	bl	800ff24 <vIPNetworkUpCalls>

		prvCloseDHCPSocket();
 800ef26:	f000 f811 	bl	800ef4c <prvCloseDHCPSocket>
	}
}
 800ef2a:	bf00      	nop
 800ef2c:	3710      	adds	r7, #16
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	24005268 	.word	0x24005268
 800ef38:	24005264 	.word	0x24005264
 800ef3c:	2400001c 	.word	0x2400001c
 800ef40:	0001d4c0 	.word	0x0001d4c0
 800ef44:	24005290 	.word	0x24005290
 800ef48:	0a4cb800 	.word	0x0a4cb800

0800ef4c <prvCloseDHCPSocket>:
/*-----------------------------------------------------------*/

static void prvCloseDHCPSocket( void )
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	af00      	add	r7, sp, #0
	if( xDHCPSocket != NULL )
 800ef50:	4b06      	ldr	r3, [pc, #24]	; (800ef6c <prvCloseDHCPSocket+0x20>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d007      	beq.n	800ef68 <prvCloseDHCPSocket+0x1c>
	{
		/* This modules runs from the IP-task. Use the internal
		function 'vSocketClose()` to close the socket. */
		( void ) vSocketClose( xDHCPSocket );
 800ef58:	4b04      	ldr	r3, [pc, #16]	; (800ef6c <prvCloseDHCPSocket+0x20>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f002 fa65 	bl	801142c <vSocketClose>
		xDHCPSocket = NULL;
 800ef62:	4b02      	ldr	r3, [pc, #8]	; (800ef6c <prvCloseDHCPSocket+0x20>)
 800ef64:	2200      	movs	r2, #0
 800ef66:	601a      	str	r2, [r3, #0]
	}
}
 800ef68:	bf00      	nop
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	24005264 	.word	0x24005264

0800ef70 <prvCreateDHCPSocket>:
/*-----------------------------------------------------------*/

static void prvCreateDHCPSocket( void )
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b086      	sub	sp, #24
 800ef74:	af02      	add	r7, sp, #8
struct freertos_sockaddr xAddress;
BaseType_t xReturn;
TickType_t xTimeoutTime = ( TickType_t ) 0;
 800ef76:	2300      	movs	r3, #0
 800ef78:	603b      	str	r3, [r7, #0]

	/* Create the socket, if it has not already been created. */
	if( xDHCPSocket == NULL )
 800ef7a:	4b1e      	ldr	r3, [pc, #120]	; (800eff4 <prvCreateDHCPSocket+0x84>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d134      	bne.n	800efec <prvCreateDHCPSocket+0x7c>
	{
		xDHCPSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 800ef82:	2211      	movs	r2, #17
 800ef84:	2102      	movs	r1, #2
 800ef86:	2002      	movs	r0, #2
 800ef88:	f001 ff32 	bl	8010df0 <FreeRTOS_socket>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	4b19      	ldr	r3, [pc, #100]	; (800eff4 <prvCreateDHCPSocket+0x84>)
 800ef90:	601a      	str	r2, [r3, #0]
		if( xDHCPSocket != FREERTOS_INVALID_SOCKET )
 800ef92:	4b18      	ldr	r3, [pc, #96]	; (800eff4 <prvCreateDHCPSocket+0x84>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef9a:	d024      	beq.n	800efe6 <prvCreateDHCPSocket+0x76>
		{

			/* Ensure the Rx and Tx timeouts are zero as the DHCP executes in the
			context of the IP task. */
			( void ) FreeRTOS_setsockopt( xDHCPSocket, 0, FREERTOS_SO_RCVTIMEO, &( xTimeoutTime ), sizeof( TickType_t ) );
 800ef9c:	4b15      	ldr	r3, [pc, #84]	; (800eff4 <prvCreateDHCPSocket+0x84>)
 800ef9e:	6818      	ldr	r0, [r3, #0]
 800efa0:	463a      	mov	r2, r7
 800efa2:	2304      	movs	r3, #4
 800efa4:	9300      	str	r3, [sp, #0]
 800efa6:	4613      	mov	r3, r2
 800efa8:	2200      	movs	r2, #0
 800efaa:	2100      	movs	r1, #0
 800efac:	f002 fb12 	bl	80115d4 <FreeRTOS_setsockopt>
			( void ) FreeRTOS_setsockopt( xDHCPSocket, 0, FREERTOS_SO_SNDTIMEO, &( xTimeoutTime ), sizeof( TickType_t ) );
 800efb0:	4b10      	ldr	r3, [pc, #64]	; (800eff4 <prvCreateDHCPSocket+0x84>)
 800efb2:	6818      	ldr	r0, [r3, #0]
 800efb4:	463a      	mov	r2, r7
 800efb6:	2304      	movs	r3, #4
 800efb8:	9300      	str	r3, [sp, #0]
 800efba:	4613      	mov	r3, r2
 800efbc:	2201      	movs	r2, #1
 800efbe:	2100      	movs	r1, #0
 800efc0:	f002 fb08 	bl	80115d4 <FreeRTOS_setsockopt>

			/* Bind to the standard DHCP client port. */
			xAddress.sin_port = ( uint16_t ) dhcpCLIENT_PORT_IPv4;
 800efc4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800efc8:	80fb      	strh	r3, [r7, #6]
			xReturn = vSocketBind( xDHCPSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800efca:	4b0a      	ldr	r3, [pc, #40]	; (800eff4 <prvCreateDHCPSocket+0x84>)
 800efcc:	6818      	ldr	r0, [r3, #0]
 800efce:	1d39      	adds	r1, r7, #4
 800efd0:	2300      	movs	r3, #0
 800efd2:	2208      	movs	r2, #8
 800efd4:	f002 f96a 	bl	80112ac <vSocketBind>
 800efd8:	60f8      	str	r0, [r7, #12]
			if( xReturn != 0 )
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d005      	beq.n	800efec <prvCreateDHCPSocket+0x7c>
			{
				/* Binding failed, close the socket again. */
				prvCloseDHCPSocket();
 800efe0:	f7ff ffb4 	bl	800ef4c <prvCloseDHCPSocket>
		{
			/* Change to NULL for easier testing. */
			xDHCPSocket = NULL;
		}
	}
}
 800efe4:	e002      	b.n	800efec <prvCreateDHCPSocket+0x7c>
			xDHCPSocket = NULL;
 800efe6:	4b03      	ldr	r3, [pc, #12]	; (800eff4 <prvCreateDHCPSocket+0x84>)
 800efe8:	2200      	movs	r2, #0
 800efea:	601a      	str	r2, [r3, #0]
}
 800efec:	bf00      	nop
 800efee:	3710      	adds	r7, #16
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	24005264 	.word	0x24005264

0800eff8 <prvInitialiseDHCP>:
/*-----------------------------------------------------------*/

static void prvInitialiseDHCP( void )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	af00      	add	r7, sp, #0
	/* Initialise the parameters that will be set by the DHCP process. Per
	https://www.ietf.org/rfc/rfc2131.txt, Transaction ID should be a random
	value chosen by the client. */

	/* Check for random number generator API failure. */
	if( xApplicationGetRandomNumber( &( EP_DHCPData.ulTransactionId ) ) != pdFALSE )
 800effc:	480c      	ldr	r0, [pc, #48]	; (800f030 <prvInitialiseDHCP+0x38>)
 800effe:	f7f2 f867 	bl	80010d0 <xApplicationGetRandomNumber>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d011      	beq.n	800f02c <prvInitialiseDHCP+0x34>
	{
		EP_DHCPData.xUseBroadcast = 0;
 800f008:	4b09      	ldr	r3, [pc, #36]	; (800f030 <prvInitialiseDHCP+0x38>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	619a      	str	r2, [r3, #24]
		EP_DHCPData.ulOfferedIPAddress = 0UL;
 800f00e:	4b08      	ldr	r3, [pc, #32]	; (800f030 <prvInitialiseDHCP+0x38>)
 800f010:	2200      	movs	r2, #0
 800f012:	605a      	str	r2, [r3, #4]
		EP_DHCPData.ulDHCPServerAddress = 0UL;
 800f014:	4b06      	ldr	r3, [pc, #24]	; (800f030 <prvInitialiseDHCP+0x38>)
 800f016:	2200      	movs	r2, #0
 800f018:	609a      	str	r2, [r3, #8]
		EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 800f01a:	4b05      	ldr	r3, [pc, #20]	; (800f030 <prvInitialiseDHCP+0x38>)
 800f01c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f020:	615a      	str	r2, [r3, #20]

		/* Create the DHCP socket if it has not already been created. */
		prvCreateDHCPSocket();
 800f022:	f7ff ffa5 	bl	800ef70 <prvCreateDHCPSocket>
		FreeRTOS_debug_printf( ( "prvInitialiseDHCP: start after %lu ticks\n", dhcpINITIAL_TIMER_PERIOD ) );
		vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 800f026:	20fa      	movs	r0, #250	; 0xfa
 800f028:	f001 fd20 	bl	8010a6c <vIPReloadDHCPTimer>
	}
	else
	{
		/* There was a problem with the randomiser. */
	}
}
 800f02c:	bf00      	nop
 800f02e:	bd80      	pop	{r7, pc}
 800f030:	24005268 	.word	0x24005268

0800f034 <prvProcessDHCPReplies>:
/*-----------------------------------------------------------*/

_static BaseType_t prvProcessDHCPReplies( BaseType_t xExpectedMessageType )
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b090      	sub	sp, #64	; 0x40
 800f038:	af02      	add	r7, sp, #8
 800f03a:	6078      	str	r0, [r7, #4]
int32_t lBytes;
const DHCPMessage_IPv4_t *pxDHCPMessage;
const uint8_t *pucByte;
uint8_t ucOptionCode;
uint32_t ulProcessed, ulParameter;
BaseType_t xReturn = pdFALSE;
 800f03c:	2300      	movs	r3, #0
 800f03e:	633b      	str	r3, [r7, #48]	; 0x30
const uint32_t ulMandatoryOptions = 2UL; /* DHCP server address, and the correct DHCP message type must be present in the options. */
 800f040:	2302      	movs	r3, #2
 800f042:	627b      	str	r3, [r7, #36]	; 0x24

	/* Passing the address of a pointer (pucUDPPayload) because FREERTOS_ZERO_COPY is used. */
	lBytes = FreeRTOS_recvfrom( xDHCPSocket, &pucUDPPayload, 0UL, FREERTOS_ZERO_COPY, NULL, NULL );
 800f044:	4bb6      	ldr	r3, [pc, #728]	; (800f320 <prvProcessDHCPReplies+0x2ec>)
 800f046:	6818      	ldr	r0, [r3, #0]
 800f048:	f107 010c 	add.w	r1, r7, #12
 800f04c:	2300      	movs	r3, #0
 800f04e:	9301      	str	r3, [sp, #4]
 800f050:	2300      	movs	r3, #0
 800f052:	9300      	str	r3, [sp, #0]
 800f054:	2301      	movs	r3, #1
 800f056:	2200      	movs	r2, #0
 800f058:	f001 ff66 	bl	8010f28 <FreeRTOS_recvfrom>
 800f05c:	6238      	str	r0, [r7, #32]

	if( lBytes > 0 )
 800f05e:	6a3b      	ldr	r3, [r7, #32]
 800f060:	2b00      	cmp	r3, #0
 800f062:	f340 818c 	ble.w	800f37e <prvProcessDHCPReplies+0x34a>
	{
		/* Map a DHCP structure onto the received data. */
		pxDHCPMessage = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( DHCPMessage_IPv4_t, pucUDPPayload );
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	4618      	mov	r0, r3
 800f06a:	f7ff fe28 	bl	800ecbe <vCastConstPointerTo_DHCPMessage_IPv4_t>
 800f06e:	61f8      	str	r0, [r7, #28]

		/* Sanity check. */
		if( lBytes < ( int32_t ) sizeof( DHCPMessage_IPv4_t ) )
 800f070:	6a3b      	ldr	r3, [r7, #32]
 800f072:	2bef      	cmp	r3, #239	; 0xef
 800f074:	f340 817f 	ble.w	800f376 <prvProcessDHCPReplies+0x342>
		{
			/* Not enough bytes. */
		}
		else if( ( pxDHCPMessage->ulDHCPCookie != ( uint32_t ) dhcpCOOKIE ) ||
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f07e:	4aa9      	ldr	r2, [pc, #676]	; (800f324 <prvProcessDHCPReplies+0x2f0>)
 800f080:	4293      	cmp	r3, r2
 800f082:	f040 8178 	bne.w	800f376 <prvProcessDHCPReplies+0x342>
			( pxDHCPMessage->ucOpcode != ( uint8_t ) dhcpREPLY_OPCODE ) )
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	781b      	ldrb	r3, [r3, #0]
		else if( ( pxDHCPMessage->ulDHCPCookie != ( uint32_t ) dhcpCOOKIE ) ||
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	f040 8173 	bne.w	800f376 <prvProcessDHCPReplies+0x342>
		{
			/* Invalid cookie or unexpected opcode. */
		}
		else if( ( pxDHCPMessage->ulTransactionID != FreeRTOS_htonl( EP_DHCPData.ulTransactionId ) ) )
 800f090:	69fb      	ldr	r3, [r7, #28]
 800f092:	685a      	ldr	r2, [r3, #4]
 800f094:	4ba4      	ldr	r3, [pc, #656]	; (800f328 <prvProcessDHCPReplies+0x2f4>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	0619      	lsls	r1, r3, #24
 800f09a:	4ba3      	ldr	r3, [pc, #652]	; (800f328 <prvProcessDHCPReplies+0x2f4>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	021b      	lsls	r3, r3, #8
 800f0a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f0a4:	4319      	orrs	r1, r3
 800f0a6:	4ba0      	ldr	r3, [pc, #640]	; (800f328 <prvProcessDHCPReplies+0x2f4>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	0a1b      	lsrs	r3, r3, #8
 800f0ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f0b0:	4319      	orrs	r1, r3
 800f0b2:	4b9d      	ldr	r3, [pc, #628]	; (800f328 <prvProcessDHCPReplies+0x2f4>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	0e1b      	lsrs	r3, r3, #24
 800f0b8:	430b      	orrs	r3, r1
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	f040 815b 	bne.w	800f376 <prvProcessDHCPReplies+0x342>
		{
			/* Transaction ID does not match. */
		}
		else /* Looks like a valid DHCP response, with the same transaction ID. */
		{
			if( memcmp( pxDHCPMessage->ucClientHardwareAddress,
 800f0c0:	69fb      	ldr	r3, [r7, #28]
 800f0c2:	331c      	adds	r3, #28
 800f0c4:	2206      	movs	r2, #6
 800f0c6:	4999      	ldr	r1, [pc, #612]	; (800f32c <prvProcessDHCPReplies+0x2f8>)
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f008 f8c9 	bl	8017260 <memcmp>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	f040 8150 	bne.w	800f376 <prvProcessDHCPReplies+0x342>
			else
			{
			size_t uxIndex, uxPayloadDataLength, uxLength;

				/* None of the essential options have been processed yet. */
				ulProcessed = 0UL;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	637b      	str	r3, [r7, #52]	; 0x34

				/* Walk through the options until the dhcpOPTION_END_BYTE byte
				is found, taking care not to walk off the end of the options. */
				pucByte = &( pucUDPPayload[ sizeof( DHCPMessage_IPv4_t ) ] );
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	33f0      	adds	r3, #240	; 0xf0
 800f0de:	61bb      	str	r3, [r7, #24]
				uxIndex = 0;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
				uxPayloadDataLength = ( ( size_t ) lBytes ) - sizeof( DHCPMessage_IPv4_t );
 800f0e4:	6a3b      	ldr	r3, [r7, #32]
 800f0e6:	3bf0      	subs	r3, #240	; 0xf0
 800f0e8:	617b      	str	r3, [r7, #20]

				while( uxIndex < uxPayloadDataLength )
 800f0ea:	e12b      	b.n	800f344 <prvProcessDHCPReplies+0x310>
				{
					ucOptionCode = pucByte[ uxIndex ];
 800f0ec:	69ba      	ldr	r2, [r7, #24]
 800f0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f0:	4413      	add	r3, r2
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	74fb      	strb	r3, [r7, #19]
					if( ucOptionCode == ( uint8_t ) dhcpOPTION_END_BYTE )
 800f0f6:	7cfb      	ldrb	r3, [r7, #19]
 800f0f8:	2bff      	cmp	r3, #255	; 0xff
 800f0fa:	f000 8129 	beq.w	800f350 <prvProcessDHCPReplies+0x31c>
					{
						/* Ready, the last byte has been seen. */
						/* coverity[break_stmt] : Break statement terminating the loop */
						break;
					}
					if( ucOptionCode == ( uint8_t ) dhcpIPv4_ZERO_PAD_OPTION_CODE )
 800f0fe:	7cfb      	ldrb	r3, [r7, #19]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d103      	bne.n	800f10c <prvProcessDHCPReplies+0xd8>
					{
						/* The value zero is used as a pad byte,
						it is not followed by a length byte. */
						uxIndex = uxIndex + 1U;
 800f104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f106:	3301      	adds	r3, #1
 800f108:	62fb      	str	r3, [r7, #44]	; 0x2c
						continue;
 800f10a:	e11b      	b.n	800f344 <prvProcessDHCPReplies+0x310>
					}

					/* Stop if the response is malformed. */
					if( ( uxIndex + 1U ) < uxPayloadDataLength )
 800f10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10e:	3301      	adds	r3, #1
 800f110:	697a      	ldr	r2, [r7, #20]
 800f112:	429a      	cmp	r2, r3
 800f114:	f240 811e 	bls.w	800f354 <prvProcessDHCPReplies+0x320>
					{
						/* Fetch the length byte. */
						uxLength = ( size_t ) pucByte[ uxIndex + 1U ];
 800f118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11a:	3301      	adds	r3, #1
 800f11c:	69ba      	ldr	r2, [r7, #24]
 800f11e:	4413      	add	r3, r2
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	62bb      	str	r3, [r7, #40]	; 0x28
						uxIndex = uxIndex + 2U;
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	3302      	adds	r3, #2
 800f128:	62fb      	str	r3, [r7, #44]	; 0x2c

						if( !( ( ( uxIndex + uxLength ) - 1U ) < uxPayloadDataLength ) )
 800f12a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12e:	4413      	add	r3, r2
 800f130:	3b01      	subs	r3, #1
 800f132:	697a      	ldr	r2, [r7, #20]
 800f134:	429a      	cmp	r2, r3
 800f136:	f240 810f 	bls.w	800f358 <prvProcessDHCPReplies+0x324>
						break;
					}

					/* In most cases, a 4-byte network-endian parameter follows,
					just get it once here and use later. */
					if( uxLength >= sizeof( ulParameter ) )
 800f13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13c:	2b03      	cmp	r3, #3
 800f13e:	d905      	bls.n	800f14c <prvProcessDHCPReplies+0x118>
					{
						( void ) memcpy( ( void * ) ( &( ulParameter ) ),
										 ( const void * ) ( &( pucByte[ uxIndex ] ) ),
 800f140:	69ba      	ldr	r2, [r7, #24]
 800f142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f144:	4413      	add	r3, r2
						( void ) memcpy( ( void * ) ( &( ulParameter ) ),
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	60bb      	str	r3, [r7, #8]
 800f14a:	e001      	b.n	800f150 <prvProcessDHCPReplies+0x11c>
										 ( size_t ) sizeof( ulParameter ) );
						/* 'uxIndex' will be increased at the end of this loop. */
					}
					else
					{
						ulParameter = 0;
 800f14c:	2300      	movs	r3, #0
 800f14e:	60bb      	str	r3, [r7, #8]
					}

					/* Confirm uxIndex is still a valid index after adjustments to uxIndex above */
					if( !( uxIndex < uxPayloadDataLength ) )
 800f150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	429a      	cmp	r2, r3
 800f156:	f080 8101 	bcs.w	800f35c <prvProcessDHCPReplies+0x328>
					{
						break;
					}

					/* Option-specific handling. */
					switch( ucOptionCode )
 800f15a:	7cfb      	ldrb	r3, [r7, #19]
 800f15c:	3b01      	subs	r3, #1
 800f15e:	2b35      	cmp	r3, #53	; 0x35
 800f160:	f200 80d5 	bhi.w	800f30e <prvProcessDHCPReplies+0x2da>
 800f164:	a201      	add	r2, pc, #4	; (adr r2, 800f16c <prvProcessDHCPReplies+0x138>)
 800f166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f16a:	bf00      	nop
 800f16c:	0800f27b 	.word	0x0800f27b
 800f170:	0800f30f 	.word	0x0800f30f
 800f174:	0800f289 	.word	0x0800f289
 800f178:	0800f30f 	.word	0x0800f30f
 800f17c:	0800f30f 	.word	0x0800f30f
 800f180:	0800f297 	.word	0x0800f297
 800f184:	0800f30f 	.word	0x0800f30f
 800f188:	0800f30f 	.word	0x0800f30f
 800f18c:	0800f30f 	.word	0x0800f30f
 800f190:	0800f30f 	.word	0x0800f30f
 800f194:	0800f30f 	.word	0x0800f30f
 800f198:	0800f30f 	.word	0x0800f30f
 800f19c:	0800f30f 	.word	0x0800f30f
 800f1a0:	0800f30f 	.word	0x0800f30f
 800f1a4:	0800f30f 	.word	0x0800f30f
 800f1a8:	0800f30f 	.word	0x0800f30f
 800f1ac:	0800f30f 	.word	0x0800f30f
 800f1b0:	0800f30f 	.word	0x0800f30f
 800f1b4:	0800f30f 	.word	0x0800f30f
 800f1b8:	0800f30f 	.word	0x0800f30f
 800f1bc:	0800f30f 	.word	0x0800f30f
 800f1c0:	0800f30f 	.word	0x0800f30f
 800f1c4:	0800f30f 	.word	0x0800f30f
 800f1c8:	0800f30f 	.word	0x0800f30f
 800f1cc:	0800f30f 	.word	0x0800f30f
 800f1d0:	0800f30f 	.word	0x0800f30f
 800f1d4:	0800f30f 	.word	0x0800f30f
 800f1d8:	0800f30f 	.word	0x0800f30f
 800f1dc:	0800f30f 	.word	0x0800f30f
 800f1e0:	0800f30f 	.word	0x0800f30f
 800f1e4:	0800f30f 	.word	0x0800f30f
 800f1e8:	0800f30f 	.word	0x0800f30f
 800f1ec:	0800f30f 	.word	0x0800f30f
 800f1f0:	0800f30f 	.word	0x0800f30f
 800f1f4:	0800f30f 	.word	0x0800f30f
 800f1f8:	0800f30f 	.word	0x0800f30f
 800f1fc:	0800f30f 	.word	0x0800f30f
 800f200:	0800f30f 	.word	0x0800f30f
 800f204:	0800f30f 	.word	0x0800f30f
 800f208:	0800f30f 	.word	0x0800f30f
 800f20c:	0800f30f 	.word	0x0800f30f
 800f210:	0800f30f 	.word	0x0800f30f
 800f214:	0800f30f 	.word	0x0800f30f
 800f218:	0800f30f 	.word	0x0800f30f
 800f21c:	0800f30f 	.word	0x0800f30f
 800f220:	0800f30f 	.word	0x0800f30f
 800f224:	0800f30f 	.word	0x0800f30f
 800f228:	0800f30f 	.word	0x0800f30f
 800f22c:	0800f30f 	.word	0x0800f30f
 800f230:	0800f30f 	.word	0x0800f30f
 800f234:	0800f2cb 	.word	0x0800f2cb
 800f238:	0800f30f 	.word	0x0800f30f
 800f23c:	0800f245 	.word	0x0800f245
 800f240:	0800f29f 	.word	0x0800f29f
					{
						case dhcpIPv4_MESSAGE_TYPE_OPTION_CODE	:

							if( pucByte[ uxIndex ] == ( uint8_t ) xExpectedMessageType )
 800f244:	69ba      	ldr	r2, [r7, #24]
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	4413      	add	r3, r2
 800f24a:	781a      	ldrb	r2, [r3, #0]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	429a      	cmp	r2, r3
 800f252:	d103      	bne.n	800f25c <prvProcessDHCPReplies+0x228>
							{
								/* The message type is the message type the
								state machine is expecting. */
								ulProcessed++;
 800f254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f256:	3301      	adds	r3, #1
 800f258:	637b      	str	r3, [r7, #52]	; 0x34
									}
								}
								/* Stop processing further options. */
								uxLength = 0;
							}
							break;
 800f25a:	e06c      	b.n	800f336 <prvProcessDHCPReplies+0x302>
								if( pucByte[ uxIndex ] == ( uint8_t ) dhcpMESSAGE_TYPE_NACK )
 800f25c:	69ba      	ldr	r2, [r7, #24]
 800f25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f260:	4413      	add	r3, r2
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	2b06      	cmp	r3, #6
 800f266:	d105      	bne.n	800f274 <prvProcessDHCPReplies+0x240>
									if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_ACK )
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2b05      	cmp	r3, #5
 800f26c:	d102      	bne.n	800f274 <prvProcessDHCPReplies+0x240>
										EP_DHCPData.eDHCPState = eWaitingSendFirstDiscover;
 800f26e:	4b2e      	ldr	r3, [pc, #184]	; (800f328 <prvProcessDHCPReplies+0x2f4>)
 800f270:	2200      	movs	r2, #0
 800f272:	771a      	strb	r2, [r3, #28]
								uxLength = 0;
 800f274:	2300      	movs	r3, #0
 800f276:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 800f278:	e05d      	b.n	800f336 <prvProcessDHCPReplies+0x302>

						case dhcpIPv4_SUBNET_MASK_OPTION_CODE :

							if( uxLength == sizeof( uint32_t ) )
 800f27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27c:	2b04      	cmp	r3, #4
 800f27e:	d148      	bne.n	800f312 <prvProcessDHCPReplies+0x2de>
							{
								EP_IPv4_SETTINGS.ulNetMask = ulParameter;
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	4a2b      	ldr	r2, [pc, #172]	; (800f330 <prvProcessDHCPReplies+0x2fc>)
 800f284:	6053      	str	r3, [r2, #4]
							}
							break;
 800f286:	e044      	b.n	800f312 <prvProcessDHCPReplies+0x2de>

						case dhcpIPv4_GATEWAY_OPTION_CODE :
							/* The DHCP server may send more than 1 gateway addresses. */
							if( uxLength >= sizeof( uint32_t ) )
 800f288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28a:	2b03      	cmp	r3, #3
 800f28c:	d943      	bls.n	800f316 <prvProcessDHCPReplies+0x2e2>
							{
								/* ulProcessed is not incremented in this case
								because the gateway is not essential. */
								EP_IPv4_SETTINGS.ulGatewayAddress = ulParameter;
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	4a27      	ldr	r2, [pc, #156]	; (800f330 <prvProcessDHCPReplies+0x2fc>)
 800f292:	6093      	str	r3, [r2, #8]
							}
							break;
 800f294:	e03f      	b.n	800f316 <prvProcessDHCPReplies+0x2e2>
						case dhcpIPv4_DNS_SERVER_OPTIONS_CODE :

							/* ulProcessed is not incremented in this case
							because the DNS server is not essential.  Only the
							first DNS server address is taken. */
							EP_IPv4_SETTINGS.ulDNSServerAddress = ulParameter;
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	4a25      	ldr	r2, [pc, #148]	; (800f330 <prvProcessDHCPReplies+0x2fc>)
 800f29a:	60d3      	str	r3, [r2, #12]
							break;
 800f29c:	e04b      	b.n	800f336 <prvProcessDHCPReplies+0x302>

						case dhcpIPv4_SERVER_IP_ADDRESS_OPTION_CODE :

							if( uxLength == sizeof( uint32_t ) )
 800f29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a0:	2b04      	cmp	r3, #4
 800f2a2:	d13a      	bne.n	800f31a <prvProcessDHCPReplies+0x2e6>
							{
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_OFFER )
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2b02      	cmp	r3, #2
 800f2a8:	d106      	bne.n	800f2b8 <prvProcessDHCPReplies+0x284>
								{
									/* Offers state the replying server. */
									ulProcessed++;
 800f2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	637b      	str	r3, [r7, #52]	; 0x34
									EP_DHCPData.ulDHCPServerAddress = ulParameter;
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	4a1d      	ldr	r2, [pc, #116]	; (800f328 <prvProcessDHCPReplies+0x2f4>)
 800f2b4:	6093      	str	r3, [r2, #8]
									{
										ulProcessed++;
									}
								}
							}
							break;
 800f2b6:	e030      	b.n	800f31a <prvProcessDHCPReplies+0x2e6>
									if( EP_DHCPData.ulDHCPServerAddress == ulParameter )
 800f2b8:	4b1b      	ldr	r3, [pc, #108]	; (800f328 <prvProcessDHCPReplies+0x2f4>)
 800f2ba:	689a      	ldr	r2, [r3, #8]
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d12b      	bne.n	800f31a <prvProcessDHCPReplies+0x2e6>
										ulProcessed++;
 800f2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	637b      	str	r3, [r7, #52]	; 0x34
							break;
 800f2c8:	e027      	b.n	800f31a <prvProcessDHCPReplies+0x2e6>

						case dhcpIPv4_LEASE_TIME_OPTION_CODE :

							if( uxLength == sizeof( EP_DHCPData.ulLeaseTime ) )
 800f2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2cc:	2b04      	cmp	r3, #4
 800f2ce:	d131      	bne.n	800f334 <prvProcessDHCPReplies+0x300>
							{
								/* ulProcessed is not incremented in this case
								because the lease time is not essential. */
								/* The DHCP parameter is in seconds, convert
								to host-endian format. */
								EP_DHCPData.ulLeaseTime = FreeRTOS_ntohl( ulParameter );
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	061a      	lsls	r2, r3, #24
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	021b      	lsls	r3, r3, #8
 800f2d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f2dc:	431a      	orrs	r2, r3
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	0a1b      	lsrs	r3, r3, #8
 800f2e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f2e6:	431a      	orrs	r2, r3
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	0e1b      	lsrs	r3, r3, #24
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	4a0e      	ldr	r2, [pc, #56]	; (800f328 <prvProcessDHCPReplies+0x2f4>)
 800f2f0:	60d3      	str	r3, [r2, #12]

								/* Divide the lease time by two to ensure a renew
								request is sent before the lease actually expires. */
								EP_DHCPData.ulLeaseTime >>= 1UL;
 800f2f2:	4b0d      	ldr	r3, [pc, #52]	; (800f328 <prvProcessDHCPReplies+0x2f4>)
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	085b      	lsrs	r3, r3, #1
 800f2f8:	4a0b      	ldr	r2, [pc, #44]	; (800f328 <prvProcessDHCPReplies+0x2f4>)
 800f2fa:	60d3      	str	r3, [r2, #12]

								/* Multiply with configTICK_RATE_HZ to get clock ticks. */
								EP_DHCPData.ulLeaseTime = ( uint32_t ) configTICK_RATE_HZ * ( uint32_t ) EP_DHCPData.ulLeaseTime;
 800f2fc:	4b0a      	ldr	r3, [pc, #40]	; (800f328 <prvProcessDHCPReplies+0x2f4>)
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f304:	fb02 f303 	mul.w	r3, r2, r3
 800f308:	4a07      	ldr	r2, [pc, #28]	; (800f328 <prvProcessDHCPReplies+0x2f4>)
 800f30a:	60d3      	str	r3, [r2, #12]
							}
							break;
 800f30c:	e012      	b.n	800f334 <prvProcessDHCPReplies+0x300>

						default :

							/* Not interested in this field. */

							break;
 800f30e:	bf00      	nop
 800f310:	e011      	b.n	800f336 <prvProcessDHCPReplies+0x302>
							break;
 800f312:	bf00      	nop
 800f314:	e00f      	b.n	800f336 <prvProcessDHCPReplies+0x302>
							break;
 800f316:	bf00      	nop
 800f318:	e00d      	b.n	800f336 <prvProcessDHCPReplies+0x302>
							break;
 800f31a:	bf00      	nop
 800f31c:	e00b      	b.n	800f336 <prvProcessDHCPReplies+0x302>
 800f31e:	bf00      	nop
 800f320:	24005264 	.word	0x24005264
 800f324:	63538263 	.word	0x63538263
 800f328:	24005268 	.word	0x24005268
 800f32c:	2400001c 	.word	0x2400001c
 800f330:	24005290 	.word	0x24005290
							break;
 800f334:	bf00      	nop
					}

					/* Jump over the data to find the next option code. */
					if( uxLength == 0U )
 800f336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d011      	beq.n	800f360 <prvProcessDHCPReplies+0x32c>
					{
						break;
					}
					uxIndex = uxIndex + uxLength;
 800f33c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f340:	4413      	add	r3, r2
 800f342:	62fb      	str	r3, [r7, #44]	; 0x2c
				while( uxIndex < uxPayloadDataLength )
 800f344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	429a      	cmp	r2, r3
 800f34a:	f4ff aecf 	bcc.w	800f0ec <prvProcessDHCPReplies+0xb8>
 800f34e:	e008      	b.n	800f362 <prvProcessDHCPReplies+0x32e>
						break;
 800f350:	bf00      	nop
 800f352:	e006      	b.n	800f362 <prvProcessDHCPReplies+0x32e>
						break;
 800f354:	bf00      	nop
 800f356:	e004      	b.n	800f362 <prvProcessDHCPReplies+0x32e>
							break;
 800f358:	bf00      	nop
 800f35a:	e002      	b.n	800f362 <prvProcessDHCPReplies+0x32e>
						break;
 800f35c:	bf00      	nop
 800f35e:	e000      	b.n	800f362 <prvProcessDHCPReplies+0x32e>
						break;
 800f360:	bf00      	nop
				}

				/* Were all the mandatory options received? */
				if( ulProcessed >= ulMandatoryOptions )
 800f362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f366:	429a      	cmp	r2, r3
 800f368:	d305      	bcc.n	800f376 <prvProcessDHCPReplies+0x342>
				{
					/* HT:endian: used to be network order */
					EP_DHCPData.ulOfferedIPAddress = pxDHCPMessage->ulYourIPAddress_yiaddr;
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	691b      	ldr	r3, [r3, #16]
 800f36e:	4a06      	ldr	r2, [pc, #24]	; (800f388 <prvProcessDHCPReplies+0x354>)
 800f370:	6053      	str	r3, [r2, #4]
					FreeRTOS_printf( ( "vDHCPProcess: offer %lxip\n", FreeRTOS_ntohl( EP_DHCPData.ulOfferedIPAddress ) ) );
					xReturn = pdPASS;
 800f372:	2301      	movs	r3, #1
 800f374:	633b      	str	r3, [r7, #48]	; 0x30
				}
			}
		}

		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayload );
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	4618      	mov	r0, r3
 800f37a:	f000 fc00 	bl	800fb7e <FreeRTOS_ReleaseUDPPayloadBuffer>
	} /* if( lBytes > 0 ) */

	return xReturn;
 800f37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800f380:	4618      	mov	r0, r3
 800f382:	3738      	adds	r7, #56	; 0x38
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	24005268 	.word	0x24005268

0800f38c <prvCreatePartDHCPMessage>:

static uint8_t *prvCreatePartDHCPMessage( struct freertos_sockaddr *pxAddress,
										  BaseType_t xOpcode,
										  const uint8_t * const pucOptionsArray,
										  size_t *pxOptionsArraySize )
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b08c      	sub	sp, #48	; 0x30
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
 800f398:	603b      	str	r3, [r7, #0]
DHCPMessage_IPv4_t *pxDHCPMessage;
size_t uxRequiredBufferSize = sizeof( DHCPMessage_IPv4_t ) + *pxOptionsArraySize;
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	33f0      	adds	r3, #240	; 0xf0
 800f3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
const NetworkBufferDescriptor_t *pxNetworkBuffer;
uint8_t *pucUDPPayloadBuffer;

#if( ipconfigDHCP_REGISTER_HOSTNAME == 1 )
	const char *pucHostName = pcApplicationHostnameHook ();
 800f3a2:	f7f1 fe73 	bl	800108c <pcApplicationHostnameHook>
 800f3a6:	62b8      	str	r0, [r7, #40]	; 0x28
	size_t uxNameLength = strlen( pucHostName );
 800f3a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3aa:	f7f0 ff99 	bl	80002e0 <strlen>
 800f3ae:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t *pucPtr;

	/* Two extra bytes for option code and length. */
	uxRequiredBufferSize += ( 2U + uxNameLength );
 800f3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b4:	4413      	add	r3, r2
 800f3b6:	3302      	adds	r3, #2
 800f3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	to ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS so the return value still needs to
	be test. */
	do
	{
		/* Obtain a network buffer with the required amount of storage. */
		pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + uxRequiredBufferSize, portMAX_DELAY );
 800f3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3bc:	332a      	adds	r3, #42	; 0x2a
 800f3be:	f04f 31ff 	mov.w	r1, #4294967295
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f006 fffe 	bl	80163c4 <pxGetNetworkBufferWithDescriptor>
 800f3c8:	6238      	str	r0, [r7, #32]
	} while( pxNetworkBuffer == NULL );
 800f3ca:	6a3b      	ldr	r3, [r7, #32]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d0f4      	beq.n	800f3ba <prvCreatePartDHCPMessage+0x2e>

	/* Leave space for the UPD header. */
	pucUDPPayloadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 800f3d0:	6a3b      	ldr	r3, [r7, #32]
 800f3d2:	699b      	ldr	r3, [r3, #24]
 800f3d4:	332a      	adds	r3, #42	; 0x2a
 800f3d6:	61fb      	str	r3, [r7, #28]
	pxDHCPMessage = ipCAST_PTR_TO_TYPE_PTR( DHCPMessage_IPv4_t, pucUDPPayloadBuffer );
 800f3d8:	69f8      	ldr	r0, [r7, #28]
 800f3da:	f7ff fc65 	bl	800eca8 <vCastPointerTo_DHCPMessage_IPv4_t>
 800f3de:	61b8      	str	r0, [r7, #24]

	/* Most fields need to be zero. */
	( void ) memset( pxDHCPMessage, 0x00, sizeof( DHCPMessage_IPv4_t ) );
 800f3e0:	22f0      	movs	r2, #240	; 0xf0
 800f3e2:	2100      	movs	r1, #0
 800f3e4:	69b8      	ldr	r0, [r7, #24]
 800f3e6:	f007 ff6e 	bl	80172c6 <memset>

	/* Create the message. */
	pxDHCPMessage->ucOpcode = ( uint8_t ) xOpcode;
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	b2da      	uxtb	r2, r3
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	701a      	strb	r2, [r3, #0]
	pxDHCPMessage->ucAddressType = ( uint8_t ) dhcpADDRESS_TYPE_ETHERNET;
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	705a      	strb	r2, [r3, #1]
	pxDHCPMessage->ucAddressLength = ( uint8_t ) dhcpETHERNET_ADDRESS_LENGTH;
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	2206      	movs	r2, #6
 800f3fc:	709a      	strb	r2, [r3, #2]
	pxDHCPMessage->ulTransactionID = FreeRTOS_htonl( EP_DHCPData.ulTransactionId );
 800f3fe:	4b40      	ldr	r3, [pc, #256]	; (800f500 <prvCreatePartDHCPMessage+0x174>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	061a      	lsls	r2, r3, #24
 800f404:	4b3e      	ldr	r3, [pc, #248]	; (800f500 <prvCreatePartDHCPMessage+0x174>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	021b      	lsls	r3, r3, #8
 800f40a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f40e:	431a      	orrs	r2, r3
 800f410:	4b3b      	ldr	r3, [pc, #236]	; (800f500 <prvCreatePartDHCPMessage+0x174>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	0a1b      	lsrs	r3, r3, #8
 800f416:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f41a:	431a      	orrs	r2, r3
 800f41c:	4b38      	ldr	r3, [pc, #224]	; (800f500 <prvCreatePartDHCPMessage+0x174>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	0e1b      	lsrs	r3, r3, #24
 800f422:	431a      	orrs	r2, r3
 800f424:	69bb      	ldr	r3, [r7, #24]
 800f426:	605a      	str	r2, [r3, #4]
	pxDHCPMessage->ulDHCPCookie = ( uint32_t ) dhcpCOOKIE;
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	2200      	movs	r2, #0
 800f42c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800f430:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800f434:	2200      	movs	r2, #0
 800f436:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800f43a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800f43e:	2200      	movs	r2, #0
 800f440:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800f444:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800f448:	2200      	movs	r2, #0
 800f44a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800f44e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	if( EP_DHCPData.xUseBroadcast != pdFALSE )
 800f452:	4b2b      	ldr	r3, [pc, #172]	; (800f500 <prvCreatePartDHCPMessage+0x174>)
 800f454:	699b      	ldr	r3, [r3, #24]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d007      	beq.n	800f46a <prvCreatePartDHCPMessage+0xde>
	{
		pxDHCPMessage->usFlags = ( uint16_t ) dhcpBROADCAST;
 800f45a:	69bb      	ldr	r3, [r7, #24]
 800f45c:	2200      	movs	r2, #0
 800f45e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f462:	729a      	strb	r2, [r3, #10]
 800f464:	2200      	movs	r2, #0
 800f466:	72da      	strb	r2, [r3, #11]
 800f468:	e004      	b.n	800f474 <prvCreatePartDHCPMessage+0xe8>
	}
	else
	{
		pxDHCPMessage->usFlags = 0U;
 800f46a:	69bb      	ldr	r3, [r7, #24]
 800f46c:	2200      	movs	r2, #0
 800f46e:	729a      	strb	r2, [r3, #10]
 800f470:	2200      	movs	r2, #0
 800f472:	72da      	strb	r2, [r3, #11]
	}

	( void ) memcpy( &( pxDHCPMessage->ucClientHardwareAddress[ 0 ] ), ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 800f474:	69bb      	ldr	r3, [r7, #24]
 800f476:	331c      	adds	r3, #28
 800f478:	2206      	movs	r2, #6
 800f47a:	4922      	ldr	r1, [pc, #136]	; (800f504 <prvCreatePartDHCPMessage+0x178>)
 800f47c:	4618      	mov	r0, r3
 800f47e:	f007 fefe 	bl	801727e <memcpy>

	/* Copy in the const part of the options options. */
	( void ) memcpy( &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET ] ), pucOptionsArray, *pxOptionsArraySize );
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	461a      	mov	r2, r3
 800f48e:	6879      	ldr	r1, [r7, #4]
 800f490:	f007 fef5 	bl	801727e <memcpy>
	{
		/* With this option, the hostname can be registered as well which makes
		it easier to lookup a device in a router's list of DHCP clients. */

		/* Point to where the OPTION_END was stored to add data. */
		pucPtr = &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + ( *pxOptionsArraySize - 1U ) ] );
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	33ef      	adds	r3, #239	; 0xef
 800f49a:	69fa      	ldr	r2, [r7, #28]
 800f49c:	4413      	add	r3, r2
 800f49e:	617b      	str	r3, [r7, #20]
		pucPtr[ 0U ] = dhcpIPv4_DNS_HOSTNAME_OPTIONS_CODE;
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	220c      	movs	r2, #12
 800f4a4:	701a      	strb	r2, [r3, #0]
		pucPtr[ 1U ] = ( uint8_t ) uxNameLength;
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ac:	b2d2      	uxtb	r2, r2
 800f4ae:	701a      	strb	r2, [r3, #0]
		( void ) memcpy( ( void * ) ( &( pucPtr[ 2U ] ) ), ( const void * ) pucHostName, uxNameLength );
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	3302      	adds	r3, #2
 800f4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f007 fee0 	bl	801727e <memcpy>
		pucPtr[ 2U + uxNameLength ] = ( uint8_t ) dhcpOPTION_END_BYTE;
 800f4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c0:	3302      	adds	r3, #2
 800f4c2:	697a      	ldr	r2, [r7, #20]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	22ff      	movs	r2, #255	; 0xff
 800f4c8:	701a      	strb	r2, [r3, #0]
		*pxOptionsArraySize += ( size_t ) ( 2U + uxNameLength );
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	681a      	ldr	r2, [r3, #0]
 800f4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d0:	4413      	add	r3, r2
 800f4d2:	1c9a      	adds	r2, r3, #2
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	601a      	str	r2, [r3, #0]
	}
	#endif

	/* Map in the client identifier. */
	( void ) memcpy( &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpCLIENT_IDENTIFIER_OFFSET ] ),
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	33f6      	adds	r3, #246	; 0xf6
 800f4dc:	2206      	movs	r2, #6
 800f4de:	4909      	ldr	r1, [pc, #36]	; (800f504 <prvCreatePartDHCPMessage+0x178>)
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f007 fecc 	bl	801727e <memcpy>
		ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );

	/* Set the addressing. */
	pxAddress->sin_addr = ipBROADCAST_IP_ADDRESS;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ec:	605a      	str	r2, [r3, #4]
	pxAddress->sin_port = ( uint16_t ) dhcpSERVER_PORT_IPv4;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f44f 4286 	mov.w	r2, #17152	; 0x4300
 800f4f4:	805a      	strh	r2, [r3, #2]

	return pucUDPPayloadBuffer;
 800f4f6:	69fb      	ldr	r3, [r7, #28]
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3730      	adds	r7, #48	; 0x30
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	24005268 	.word	0x24005268
 800f504:	2400001c 	.word	0x2400001c

0800f508 <prvSendDHCPRequest>:
/*-----------------------------------------------------------*/

static void prvSendDHCPRequest( void )
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b086      	sub	sp, #24
 800f50c:	af02      	add	r7, sp, #8
	dhcpIPv4_CLIENT_IDENTIFIER_OPTION_CODE, 7, 1, 0, 0, 0, 0, 0, 0,		/* Client identifier. */
	dhcpIPv4_REQUEST_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address being requested. */
	dhcpIPv4_SERVER_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address of the DHCP server. */
	dhcpOPTION_END_BYTE
};
size_t uxOptionsLength = sizeof( ucDHCPRequestOptions );
 800f50e:	2319      	movs	r3, #25
 800f510:	603b      	str	r3, [r7, #0]

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress,
 800f512:	463b      	mov	r3, r7
 800f514:	1d38      	adds	r0, r7, #4
 800f516:	4a13      	ldr	r2, [pc, #76]	; (800f564 <prvSendDHCPRequest+0x5c>)
 800f518:	2101      	movs	r1, #1
 800f51a:	f7ff ff37 	bl	800f38c <prvCreatePartDHCPMessage>
 800f51e:	60f8      	str	r0, [r7, #12]
													( BaseType_t ) dhcpREQUEST_OPCODE,
													ucDHCPRequestOptions,
													&( uxOptionsLength ) );

	/* Copy in the IP address being requested. */
	( void ) memcpy( ( void * ) ( &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpREQUESTED_IP_ADDRESS_OFFSET ] ) ),
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	33fe      	adds	r3, #254	; 0xfe
 800f524:	4a10      	ldr	r2, [pc, #64]	; (800f568 <prvSendDHCPRequest+0x60>)
 800f526:	6852      	ldr	r2, [r2, #4]
 800f528:	601a      	str	r2, [r3, #0]
					 ( const void * ) ( &( EP_DHCPData.ulOfferedIPAddress ) ),
					 sizeof( EP_DHCPData.ulOfferedIPAddress ) );

	/* Copy in the address of the DHCP server being used. */
	( void ) memcpy( ( void * ) ( &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpDHCP_SERVER_IP_ADDRESS_OFFSET ] ) ),
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800f530:	4a0d      	ldr	r2, [pc, #52]	; (800f568 <prvSendDHCPRequest+0x60>)
 800f532:	6892      	ldr	r2, [r2, #8]
 800f534:	601a      	str	r2, [r3, #0]
					 sizeof( EP_DHCPData.ulDHCPServerAddress ) );

	FreeRTOS_debug_printf( ( "vDHCPProcess: reply %lxip\n", FreeRTOS_ntohl( EP_DHCPData.ulOfferedIPAddress ) ) );
	iptraceSENDING_DHCP_REQUEST();

	if( FreeRTOS_sendto( xDHCPSocket, pucUDPPayloadBuffer, sizeof( DHCPMessage_IPv4_t ) + uxOptionsLength, FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 800f536:	4b0d      	ldr	r3, [pc, #52]	; (800f56c <prvSendDHCPRequest+0x64>)
 800f538:	6818      	ldr	r0, [r3, #0]
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800f540:	2308      	movs	r3, #8
 800f542:	9301      	str	r3, [sp, #4]
 800f544:	1d3b      	adds	r3, r7, #4
 800f546:	9300      	str	r3, [sp, #0]
 800f548:	2301      	movs	r3, #1
 800f54a:	68f9      	ldr	r1, [r7, #12]
 800f54c:	f001 fd9b 	bl	8011086 <FreeRTOS_sendto>
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	d102      	bne.n	800f55c <prvSendDHCPRequest+0x54>
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 800f556:	68f8      	ldr	r0, [r7, #12]
 800f558:	f000 fb11 	bl	800fb7e <FreeRTOS_ReleaseUDPPayloadBuffer>
	}
}
 800f55c:	bf00      	nop
 800f55e:	3710      	adds	r7, #16
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}
 800f564:	08018788 	.word	0x08018788
 800f568:	24005268 	.word	0x24005268
 800f56c:	24005264 	.word	0x24005264

0800f570 <prvSendDHCPDiscover>:
/*-----------------------------------------------------------*/

static void prvSendDHCPDiscover( void )
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b086      	sub	sp, #24
 800f574:	af02      	add	r7, sp, #8
	dhcpIPv4_MESSAGE_TYPE_OPTION_CODE, 1, dhcpMESSAGE_TYPE_DISCOVER,					/* Message type option. */
	dhcpIPv4_CLIENT_IDENTIFIER_OPTION_CODE, 7, 1, 0, 0, 0, 0, 0, 0,						/* Client identifier. */
	dhcpIPv4_PARAMETER_REQUEST_OPTION_CODE, 3, dhcpIPv4_SUBNET_MASK_OPTION_CODE, dhcpIPv4_GATEWAY_OPTION_CODE, dhcpIPv4_DNS_SERVER_OPTIONS_CODE,	/* Parameter request option. */
	dhcpOPTION_END_BYTE
};
size_t uxOptionsLength = sizeof( ucDHCPDiscoverOptions );
 800f576:	2312      	movs	r3, #18
 800f578:	603b      	str	r3, [r7, #0]

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress,
 800f57a:	463b      	mov	r3, r7
 800f57c:	1d38      	adds	r0, r7, #4
 800f57e:	4a0e      	ldr	r2, [pc, #56]	; (800f5b8 <prvSendDHCPDiscover+0x48>)
 800f580:	2101      	movs	r1, #1
 800f582:	f7ff ff03 	bl	800f38c <prvCreatePartDHCPMessage>
 800f586:	60f8      	str	r0, [r7, #12]
													&( uxOptionsLength ) );

	FreeRTOS_debug_printf( ( "vDHCPProcess: discover\n" ) );
	iptraceSENDING_DHCP_DISCOVER();

	if( FreeRTOS_sendto( xDHCPSocket,
 800f588:	4b0c      	ldr	r3, [pc, #48]	; (800f5bc <prvSendDHCPDiscover+0x4c>)
 800f58a:	6818      	ldr	r0, [r3, #0]
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800f592:	2308      	movs	r3, #8
 800f594:	9301      	str	r3, [sp, #4]
 800f596:	1d3b      	adds	r3, r7, #4
 800f598:	9300      	str	r3, [sp, #0]
 800f59a:	2301      	movs	r3, #1
 800f59c:	68f9      	ldr	r1, [r7, #12]
 800f59e:	f001 fd72 	bl	8011086 <FreeRTOS_sendto>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d102      	bne.n	800f5ae <prvSendDHCPDiscover+0x3e>
						 &( xAddress ),
						 sizeof( xAddress ) ) == 0 )
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 800f5a8:	68f8      	ldr	r0, [r7, #12]
 800f5aa:	f000 fae8 	bl	800fb7e <FreeRTOS_ReleaseUDPPayloadBuffer>
	}
}
 800f5ae:	bf00      	nop
 800f5b0:	3710      	adds	r7, #16
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	080187a4 	.word	0x080187a4
 800f5bc:	24005264 	.word	0x24005264

0800f5c0 <vCastPointerTo_EthernetHeader_t>:
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
	return ( EthernetHeader_t *)pvArgument;
 800f5c8:	687b      	ldr	r3, [r7, #4]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	370c      	adds	r7, #12
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr

0800f5d6 <vCastConstPointerTo_EthernetHeader_t>:
{
 800f5d6:	b480      	push	{r7}
 800f5d8:	b083      	sub	sp, #12
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
	return ( const EthernetHeader_t *) pvArgument;
 800f5de:	687b      	ldr	r3, [r7, #4]
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <vCastPointerTo_ARPPacket_t>:
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
    return ( ARPPacket_t *)pvArgument;
 800f5f4:	687b      	ldr	r3, [r7, #4]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	370c      	adds	r7, #12
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr

0800f602 <vCastPointerTo_IPPacket_t>:
}
#include "pack_struct_end.h"
typedef struct xIP_PACKET IPPacket_t;

static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( IPPacket_t )
{
 800f602:	b480      	push	{r7}
 800f604:	b083      	sub	sp, #12
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
    return ( IPPacket_t *)pvArgument;
 800f60a:	687b      	ldr	r3, [r7, #4]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	370c      	adds	r7, #12
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr

0800f618 <vCastConstPointerTo_IPPacket_t>:
static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( IPPacket_t )
{
 800f618:	b480      	push	{r7}
 800f61a:	b083      	sub	sp, #12
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
    return ( const IPPacket_t *) pvArgument;
 800f620:	687b      	ldr	r3, [r7, #4]
}
 800f622:	4618      	mov	r0, r3
 800f624:	370c      	adds	r7, #12
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr

0800f62e <vCastPointerTo_ICMPPacket_t>:
}
#include "pack_struct_end.h"
typedef struct xICMP_PACKET ICMPPacket_t;

static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ICMPPacket_t )
{
 800f62e:	b480      	push	{r7}
 800f630:	b083      	sub	sp, #12
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]
    return ( ICMPPacket_t *)pvArgument;
 800f636:	687b      	ldr	r3, [r7, #4]
}
 800f638:	4618      	mov	r0, r3
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <vCastConstPointerTo_UDPPacket_t>:
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( UDPPacket_t )
{
    return ( UDPPacket_t *)pvArgument;
}
static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( UDPPacket_t )
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
    return ( const UDPPacket_t *) pvArgument;
 800f64c:	687b      	ldr	r3, [r7, #4]
}
 800f64e:	4618      	mov	r0, r3
 800f650:	370c      	adds	r7, #12
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr

0800f65a <vCastPointerTo_ProtocolPacket_t>:
	UDPPacket_t xUDPPacket;
	ICMPPacket_t xICMPPacket;
} ProtocolPacket_t;

static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ProtocolPacket_t )
{
 800f65a:	b480      	push	{r7}
 800f65c:	b083      	sub	sp, #12
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
	return ( ProtocolPacket_t *)pvArgument;
 800f662:	687b      	ldr	r3, [r7, #4]
}
 800f664:	4618      	mov	r0, r3
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <vCastConstPointerTo_ProtocolPacket_t>:
static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( ProtocolPacket_t )
{
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
	return ( const ProtocolPacket_t *) pvArgument;
 800f678:	687b      	ldr	r3, [r7, #4]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	370c      	adds	r7, #12
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr

0800f686 <vCastPointerTo_FreeRTOS_Socket_t>:
		#endif /* ipconfigUSE_TCP */
	} u;
} FreeRTOS_Socket_t;

static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( FreeRTOS_Socket_t )
{
 800f686:	b480      	push	{r7}
 800f688:	b083      	sub	sp, #12
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
	return ( FreeRTOS_Socket_t *)pvArgument;
 800f68e:	687b      	ldr	r3, [r7, #4]
}
 800f690:	4618      	mov	r0, r3
 800f692:	370c      	adds	r7, #12
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <vCastPointerTo_SocketSelect_t>:
{
	EventGroupHandle_t xSelectGroup;
} SocketSelect_t;

static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( SocketSelect_t )
{
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
	return ( SocketSelect_t *)pvArgument;
 800f6a4:	687b      	ldr	r3, [r7, #4]
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	370c      	adds	r7, #12
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr

0800f6b2 <vCastPointerTo_NetworkBufferDescriptor_t>:
	uint8_t *u8ptr;
} xUnionPtr;


static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 800f6b2:	b480      	push	{r7}
 800f6b4:	b083      	sub	sp, #12
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t *)pvArgument;
 800f6ba:	687b      	ldr	r3, [r7, #4]
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	370c      	adds	r7, #12
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <prvIPTask>:
/*-----------------------------------------------------------*/

/* Coverity want to make pvParameters const, which would make it incompatible. */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void *pvParameters )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b088      	sub	sp, #32
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]

	/* Generate a dummy message to say that the network connection has gone
	down.  This will cause this task to initialise the network interface.  After
	this it is the responsibility of the network interface hardware driver to
	send this message if a previously connected network is disconnected. */
	FreeRTOS_NetworkDown();
 800f6d0:	f000 f9ee 	bl	800fab0 <FreeRTOS_NetworkDown>

	#if( ipconfigUSE_TCP == 1 )
	{
		/* Initialise the TCP timer. */
		prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 800f6d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f6d8:	4864      	ldr	r0, [pc, #400]	; (800f86c <prvIPTask+0x1a4>)
 800f6da:	f000 f99d 	bl	800fa18 <prvIPTimerReload>
	}
	#endif

	/* Initialisation is complete and events can now be processed. */
	xIPTaskInitialised = pdTRUE;
 800f6de:	4b64      	ldr	r3, [pc, #400]	; (800f870 <prvIPTask+0x1a8>)
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	601a      	str	r2, [r3, #0]
	{
		ipconfigWATCHDOG_TIMER();

		/* Check the ARP, DHCP and TCP timers to see if there is any periodic
		or timeout processing to perform. */
		prvCheckNetworkTimers();
 800f6e4:	f000 f928 	bl	800f938 <prvCheckNetworkTimers>

		/* Calculate the acceptable maximum sleep time. */
		xNextIPSleep = prvCalculateSleepTime();
 800f6e8:	f000 f8ec 	bl	800f8c4 <prvCalculateSleepTime>
 800f6ec:	61f8      	str	r0, [r7, #28]

		/* Wait until there is something to do. If the following call exits
		 * due to a time out rather than a message being received, set a
		 * 'NoEvent' value. */
		if ( xQueueReceive( xNetworkEventQueue, ( void *) &xReceivedEvent, xNextIPSleep ) == pdFALSE ) 
 800f6ee:	4b61      	ldr	r3, [pc, #388]	; (800f874 <prvIPTask+0x1ac>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f107 0110 	add.w	r1, r7, #16
 800f6f6:	69fa      	ldr	r2, [r7, #28]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fd f80f 	bl	800c71c <xQueueReceive>
 800f6fe:	4603      	mov	r3, r0
 800f700:	2b00      	cmp	r3, #0
 800f702:	d101      	bne.n	800f708 <prvIPTask+0x40>
		{
			xReceivedEvent.eEventType = eNoEvent;
 800f704:	23ff      	movs	r3, #255	; 0xff
 800f706:	743b      	strb	r3, [r7, #16]
		}
		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */

		iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

		switch( xReceivedEvent.eEventType )
 800f708:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800f70c:	3301      	adds	r3, #1
 800f70e:	2b0d      	cmp	r3, #13
 800f710:	f200 80a1 	bhi.w	800f856 <prvIPTask+0x18e>
 800f714:	a201      	add	r2, pc, #4	; (adr r2, 800f71c <prvIPTask+0x54>)
 800f716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f71a:	bf00      	nop
 800f71c:	0800f857 	.word	0x0800f857
 800f720:	0800f755 	.word	0x0800f755
 800f724:	0800f761 	.word	0x0800f761
 800f728:	0800f773 	.word	0x0800f773
 800f72c:	0800f787 	.word	0x0800f787
 800f730:	0800f7ef 	.word	0x0800f7ef
 800f734:	0800f801 	.word	0x0800f801
 800f738:	0800f81b 	.word	0x0800f81b
 800f73c:	0800f827 	.word	0x0800f827
 800f740:	0800f851 	.word	0x0800f851
 800f744:	0800f78d 	.word	0x0800f78d
 800f748:	0800f7dd 	.word	0x0800f7dd
 800f74c:	0800f809 	.word	0x0800f809
 800f750:	0800f857 	.word	0x0800f857
		{
			case eNetworkDownEvent :
				/* Attempt to establish a connection. */
				xNetworkUp = pdFALSE;
 800f754:	4b48      	ldr	r3, [pc, #288]	; (800f878 <prvIPTask+0x1b0>)
 800f756:	2200      	movs	r2, #0
 800f758:	601a      	str	r2, [r3, #0]
				prvProcessNetworkDownEvent();
 800f75a:	f000 fbb7 	bl	800fecc <prvProcessNetworkDownEvent>
				break;
 800f75e:	e07d      	b.n	800f85c <prvIPTask+0x194>

			case eNetworkRxEvent:
				/* The network hardware driver has received a new packet.  A
				pointer to the received buffer is located in the pvData member
				of the received event structure. */				
				prvHandleEthernetPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	4618      	mov	r0, r3
 800f764:	f7ff ffa5 	bl	800f6b2 <vCastPointerTo_NetworkBufferDescriptor_t>
 800f768:	4603      	mov	r3, r0
 800f76a:	4618      	mov	r0, r3
 800f76c:	f000 f89e 	bl	800f8ac <prvHandleEthernetPacket>
				break;
 800f770:	e074      	b.n	800f85c <prvIPTask+0x194>

			case eNetworkTxEvent:
				/* Send a network packet. The ownership will  be transferred to
				the driver, which will release it after delivery. */
				( void ) xNetworkInterfaceOutput( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ), pdTRUE );
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	4618      	mov	r0, r3
 800f776:	f7ff ff9c 	bl	800f6b2 <vCastPointerTo_NetworkBufferDescriptor_t>
 800f77a:	4603      	mov	r3, r0
 800f77c:	2101      	movs	r1, #1
 800f77e:	4618      	mov	r0, r3
 800f780:	f007 fbae 	bl	8016ee0 <xNetworkInterfaceOutput>
				break;
 800f784:	e06a      	b.n	800f85c <prvIPTask+0x194>

			case eARPTimerEvent :
				/* The ARP timer has expired, process the ARP cache. */
				vARPAgeCache();
 800f786:	f7ff f953 	bl	800ea30 <vARPAgeCache>
				break;
 800f78a:	e067      	b.n	800f85c <prvIPTask+0x194>
				/* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
				to a port. The port number is communicated in the socket field
				usLocalPort. vSocketBind() will actually bind the socket and the
				API will unblock as soon as the eSOCKET_BOUND event is
				triggered. */
				pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	4618      	mov	r0, r3
 800f790:	f7ff ff79 	bl	800f686 <vCastPointerTo_FreeRTOS_Socket_t>
 800f794:	61b8      	str	r0, [r7, #24]
				xAddress.sin_addr = 0U;	/* For the moment. */
 800f796:	2300      	movs	r3, #0
 800f798:	60fb      	str	r3, [r7, #12]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f79e:	021b      	lsls	r3, r3, #8
 800f7a0:	b21a      	sxth	r2, r3
 800f7a2:	69bb      	ldr	r3, [r7, #24]
 800f7a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f7a6:	0a1b      	lsrs	r3, r3, #8
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	b21b      	sxth	r3, r3
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	b21b      	sxth	r3, r3
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	817b      	strh	r3, [r7, #10]
				pxSocket->usLocalPort = 0U;
 800f7b4:	69bb      	ldr	r3, [r7, #24]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	849a      	strh	r2, [r3, #36]	; 0x24
				( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800f7ba:	f107 0108 	add.w	r1, r7, #8
 800f7be:	2300      	movs	r3, #0
 800f7c0:	2208      	movs	r2, #8
 800f7c2:	69b8      	ldr	r0, [r7, #24]
 800f7c4:	f001 fd72 	bl	80112ac <vSocketBind>

				/* Before 'eSocketBindEvent' was sent it was tested that
				( xEventGroup != NULL ) so it can be used now to wake up the
				user. */
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f043 0210 	orr.w	r2, r3, #16
 800f7d0:	69bb      	ldr	r3, [r7, #24]
 800f7d2:	601a      	str	r2, [r3, #0]
				vSocketWakeUpUser( pxSocket );
 800f7d4:	69b8      	ldr	r0, [r7, #24]
 800f7d6:	f002 f9ee 	bl	8011bb6 <vSocketWakeUpUser>
				break;
 800f7da:	e03f      	b.n	800f85c <prvIPTask+0x194>
			case eSocketCloseEvent :
				/* The user API FreeRTOS_closesocket() has sent a message to the
				IP-task to actually close a socket. This is handled in
				vSocketClose().  As the socket gets closed, there is no way to
				report back to the API, so the API won't wait for the result */
				( void ) vSocketClose( ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData ) );
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7ff ff51 	bl	800f686 <vCastPointerTo_FreeRTOS_Socket_t>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f001 fe20 	bl	801142c <vSocketClose>
				break;
 800f7ec:	e036      	b.n	800f85c <prvIPTask+0x194>

			case eStackTxEvent :
				/* The network stack has generated a packet to send.  A
				pointer to the generated buffer is located in the pvData
				member of the received event structure. */
				vProcessGeneratedUDPPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7ff ff5e 	bl	800f6b2 <vCastPointerTo_NetworkBufferDescriptor_t>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f006 fc01 	bl	8016000 <vProcessGeneratedUDPPacket>
				break;
 800f7fe:	e02d      	b.n	800f85c <prvIPTask+0x194>
			case eDHCPEvent:
				/* The DHCP state machine needs processing. */
				#if( ipconfigUSE_DHCP == 1 )
				{
					/* Process DHCP messages for a given end-point. */
					vDHCPProcess( pdFALSE );
 800f800:	2000      	movs	r0, #0
 800f802:	f7ff fa7f 	bl	800ed04 <vDHCPProcess>
				}
				#endif /* ipconfigUSE_DHCP */
				break;
 800f806:	e029      	b.n	800f85c <prvIPTask+0x194>
						vSocketSelect( pxMessage->pxSocketSet );
						( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
					}
					#else
					{						
						vSocketSelect( ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, xReceivedEvent.pvData ) );
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7ff ff46 	bl	800f69c <vCastPointerTo_SocketSelect_t>
 800f810:	4603      	mov	r3, r0
 800f812:	4618      	mov	r0, r3
 800f814:	f002 fc8e 	bl	8012134 <vSocketSelect>
					}
					#endif	/* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
				}
				#endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
				break;
 800f818:	e020      	b.n	800f85c <prvIPTask+0x194>
			case eTCPTimerEvent :
				#if( ipconfigUSE_TCP == 1 )
				{
					/* Simply mark the TCP timer as expired so it gets processed
					the next time prvCheckNetworkTimers() is called. */
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800f81a:	4a14      	ldr	r2, [pc, #80]	; (800f86c <prvIPTask+0x1a4>)
 800f81c:	7813      	ldrb	r3, [r2, #0]
 800f81e:	f043 0302 	orr.w	r3, r3, #2
 800f822:	7013      	strb	r3, [r2, #0]
				}
				#endif /* ipconfigUSE_TCP */
				break;
 800f824:	e01a      	b.n	800f85c <prvIPTask+0x194>
				/* The API FreeRTOS_accept() was called, the IP-task will now
				check if the listening socket (communicated in pvData) actually
				received a new connection. */
				#if( ipconfigUSE_TCP == 1 )
				{
					pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	4618      	mov	r0, r3
 800f82a:	f7ff ff2c 	bl	800f686 <vCastPointerTo_FreeRTOS_Socket_t>
 800f82e:	61b8      	str	r0, [r7, #24]

					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 800f830:	69b8      	ldr	r0, [r7, #24]
 800f832:	f005 fb97 	bl	8014f64 <xTCPCheckNewClient>
 800f836:	4603      	mov	r3, r0
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d00e      	beq.n	800f85a <prvIPTask+0x192>
					{
						pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800f83c:	69bb      	ldr	r3, [r7, #24]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f043 0204 	orr.w	r2, r3, #4
 800f844:	69bb      	ldr	r3, [r7, #24]
 800f846:	601a      	str	r2, [r3, #0]
						vSocketWakeUpUser( pxSocket );
 800f848:	69b8      	ldr	r0, [r7, #24]
 800f84a:	f002 f9b4 	bl	8011bb6 <vSocketWakeUpUser>
					}
				}
				#endif /* ipconfigUSE_TCP */
				break;
 800f84e:	e004      	b.n	800f85a <prvIPTask+0x192>
			case eTCPNetStat:
				/* FreeRTOS_netstat() was called to have the IP-task print an
				overview of all sockets and their connections */
				#if( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
				{
					vTCPNetStat();
 800f850:	f002 fbea 	bl	8012028 <vTCPNetStat>
				}
				#endif /* ipconfigUSE_TCP */
				break;
 800f854:	e002      	b.n	800f85c <prvIPTask+0x194>
				/* xQueueReceive() returned because of a normal time-out. */
				break;

			default :
				/* Should not get here. */
				break;
 800f856:	bf00      	nop
 800f858:	e000      	b.n	800f85c <prvIPTask+0x194>
				break;
 800f85a:	bf00      	nop
		}

		if( xNetworkDownEventPending != pdFALSE )
 800f85c:	4b07      	ldr	r3, [pc, #28]	; (800f87c <prvIPTask+0x1b4>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	f43f af3f 	beq.w	800f6e4 <prvIPTask+0x1c>
		{
			/* A network down event could not be posted to the network event
			queue because the queue was full.
			As this code runs in the IP-task, it can be done directly by
			calling prvProcessNetworkDownEvent(). */
			prvProcessNetworkDownEvent();
 800f866:	f000 fb31 	bl	800fecc <prvProcessNetworkDownEvent>
		prvCheckNetworkTimers();
 800f86a:	e73b      	b.n	800f6e4 <prvIPTask+0x1c>
 800f86c:	240052f0 	.word	0x240052f0
 800f870:	24005304 	.word	0x24005304
 800f874:	24005288 	.word	0x24005288
 800f878:	240052c4 	.word	0x240052c4
 800f87c:	240052b8 	.word	0x240052b8

0800f880 <xIsCallingFromIPTask>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xIsCallingFromIPTask( void )
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
BaseType_t xReturn;

	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 800f886:	f7fe f919 	bl	800dabc <xTaskGetCurrentTaskHandle>
 800f88a:	4602      	mov	r2, r0
 800f88c:	4b06      	ldr	r3, [pc, #24]	; (800f8a8 <xIsCallingFromIPTask+0x28>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	429a      	cmp	r2, r3
 800f892:	d102      	bne.n	800f89a <xIsCallingFromIPTask+0x1a>
	{
		xReturn = pdTRUE;
 800f894:	2301      	movs	r3, #1
 800f896:	607b      	str	r3, [r7, #4]
 800f898:	e001      	b.n	800f89e <xIsCallingFromIPTask+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
 800f89a:	2300      	movs	r3, #0
 800f89c:	607b      	str	r3, [r7, #4]
	}

	return xReturn;
 800f89e:	687b      	ldr	r3, [r7, #4]
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	240052bc 	.word	0x240052bc

0800f8ac <prvHandleEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer )
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
	#if( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
	{
		/* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
		buffer will be sent at a time.  This is the default way for +TCP to pass
		messages from the MAC to the TCP/IP stack. */
		prvProcessEthernetPacket( pxBuffer );
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f000 fb49 	bl	800ff4c <prvProcessEthernetPacket>

		/* While there is another packet in the chain. */
		} while( pxBuffer != NULL );
	}
	#endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 800f8ba:	bf00      	nop
 800f8bc:	3708      	adds	r7, #8
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
	...

0800f8c4 <prvCalculateSleepTime>:
/*-----------------------------------------------------------*/

static TickType_t prvCalculateSleepTime( void )
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
TickType_t xMaximumSleepTime;

	/* Start with the maximum sleep time, then check this against the remaining
	time in any other timers that are active. */
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800f8ca:	f242 7310 	movw	r3, #10000	; 0x2710
 800f8ce:	607b      	str	r3, [r7, #4]

	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800f8d0:	4b16      	ldr	r3, [pc, #88]	; (800f92c <prvCalculateSleepTime+0x68>)
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	f003 0301 	and.w	r3, r3, #1
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d007      	beq.n	800f8ee <prvCalculateSleepTime+0x2a>
	{
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 800f8de:	4b13      	ldr	r3, [pc, #76]	; (800f92c <prvCalculateSleepTime+0x68>)
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d902      	bls.n	800f8ee <prvCalculateSleepTime+0x2a>
		{
			xMaximumSleepTime = xARPTimer.ulReloadTime;
 800f8e8:	4b10      	ldr	r3, [pc, #64]	; (800f92c <prvCalculateSleepTime+0x68>)
 800f8ea:	691b      	ldr	r3, [r3, #16]
 800f8ec:	607b      	str	r3, [r7, #4]
		}
	}

	#if( ipconfigUSE_DHCP == 1 )
	{
		if( xDHCPTimer.bActive != pdFALSE_UNSIGNED )
 800f8ee:	4b10      	ldr	r3, [pc, #64]	; (800f930 <prvCalculateSleepTime+0x6c>)
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	f003 0301 	and.w	r3, r3, #1
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d007      	beq.n	800f90c <prvCalculateSleepTime+0x48>
		{
			if( xDHCPTimer.ulRemainingTime < xMaximumSleepTime )
 800f8fc:	4b0c      	ldr	r3, [pc, #48]	; (800f930 <prvCalculateSleepTime+0x6c>)
 800f8fe:	68db      	ldr	r3, [r3, #12]
 800f900:	687a      	ldr	r2, [r7, #4]
 800f902:	429a      	cmp	r2, r3
 800f904:	d902      	bls.n	800f90c <prvCalculateSleepTime+0x48>
			{
				xMaximumSleepTime = xDHCPTimer.ulRemainingTime;
 800f906:	4b0a      	ldr	r3, [pc, #40]	; (800f930 <prvCalculateSleepTime+0x6c>)
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	607b      	str	r3, [r7, #4]
	}
	#endif /* ipconfigUSE_DHCP */

	#if( ipconfigUSE_TCP == 1 )
	{
		if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 800f90c:	4b09      	ldr	r3, [pc, #36]	; (800f934 <prvCalculateSleepTime+0x70>)
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	429a      	cmp	r2, r3
 800f914:	d902      	bls.n	800f91c <prvCalculateSleepTime+0x58>
		{
			xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800f916:	4b07      	ldr	r3, [pc, #28]	; (800f934 <prvCalculateSleepTime+0x70>)
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	607b      	str	r3, [r7, #4]
			}
		}
	}
	#endif

	return xMaximumSleepTime;
 800f91c:	687b      	ldr	r3, [r7, #4]
}
 800f91e:	4618      	mov	r0, r3
 800f920:	370c      	adds	r7, #12
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr
 800f92a:	bf00      	nop
 800f92c:	240052c8 	.word	0x240052c8
 800f930:	240052dc 	.word	0x240052dc
 800f934:	240052f0 	.word	0x240052f0

0800f938 <prvCheckNetworkTimers>:
/*-----------------------------------------------------------*/

static void prvCheckNetworkTimers( void )
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
	/* Is it time for ARP processing? */
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800f93e:	481f      	ldr	r0, [pc, #124]	; (800f9bc <prvCheckNetworkTimers+0x84>)
 800f940:	f000 f87a 	bl	800fa38 <prvIPTimerCheck>
 800f944:	4603      	mov	r3, r0
 800f946:	2b00      	cmp	r3, #0
 800f948:	d002      	beq.n	800f950 <prvCheckNetworkTimers+0x18>
	{
		( void ) xSendEventToIPTask( eARPTimerEvent );
 800f94a:	2003      	movs	r0, #3
 800f94c:	f000 fa18 	bl	800fd80 <xSendEventToIPTask>
	}

	#if( ipconfigUSE_DHCP == 1 )
	{
		/* Is it time for DHCP processing? */
		if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
 800f950:	481b      	ldr	r0, [pc, #108]	; (800f9c0 <prvCheckNetworkTimers+0x88>)
 800f952:	f000 f871 	bl	800fa38 <prvIPTimerCheck>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d002      	beq.n	800f962 <prvCheckNetworkTimers+0x2a>
		{
			( void ) xSendEventToIPTask( eDHCPEvent );
 800f95c:	2005      	movs	r0, #5
 800f95e:	f000 fa0f 	bl	800fd80 <xSendEventToIPTask>
	TickType_t xNextTime;
	BaseType_t xCheckTCPSockets;

		/* If the IP task has messages waiting to be processed then
		it will not sleep in any case. */
		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800f962:	4b18      	ldr	r3, [pc, #96]	; (800f9c4 <prvCheckNetworkTimers+0x8c>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4618      	mov	r0, r3
 800f968:	f7fd f8ca 	bl	800cb00 <uxQueueMessagesWaiting>
 800f96c:	4603      	mov	r3, r0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d102      	bne.n	800f978 <prvCheckNetworkTimers+0x40>
		{
			xWillSleep = pdTRUE;
 800f972:	2301      	movs	r3, #1
 800f974:	60fb      	str	r3, [r7, #12]
 800f976:	e001      	b.n	800f97c <prvCheckNetworkTimers+0x44>
		}
		else
		{
			xWillSleep = pdFALSE;
 800f978:	2300      	movs	r3, #0
 800f97a:	60fb      	str	r3, [r7, #12]
		}

		/* Sockets need to be checked if the TCP timer has expired. */
		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800f97c:	4812      	ldr	r0, [pc, #72]	; (800f9c8 <prvCheckNetworkTimers+0x90>)
 800f97e:	f000 f85b 	bl	800fa38 <prvIPTimerCheck>
 800f982:	60b8      	str	r0, [r7, #8]

		/* Sockets will also be checked if there are TCP messages but the
		message queue is empty (indicated by xWillSleep being true). */
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 800f984:	4b11      	ldr	r3, [pc, #68]	; (800f9cc <prvCheckNetworkTimers+0x94>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d004      	beq.n	800f996 <prvCheckNetworkTimers+0x5e>
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <prvCheckNetworkTimers+0x5e>
		{
			xCheckTCPSockets = pdTRUE;
 800f992:	2301      	movs	r3, #1
 800f994:	60bb      	str	r3, [r7, #8]
		}

		if( xCheckTCPSockets != pdFALSE )
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d00a      	beq.n	800f9b2 <prvCheckNetworkTimers+0x7a>
		{
			/* Attend to the sockets, returning the period after which the
			check must be repeated. */
			xNextTime = xTCPTimerCheck( xWillSleep );
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f002 f94d 	bl	8011c3c <xTCPTimerCheck>
 800f9a2:	6078      	str	r0, [r7, #4]
			prvIPTimerStart( &xTCPTimer, xNextTime );
 800f9a4:	6879      	ldr	r1, [r7, #4]
 800f9a6:	4808      	ldr	r0, [pc, #32]	; (800f9c8 <prvCheckNetworkTimers+0x90>)
 800f9a8:	f000 f812 	bl	800f9d0 <prvIPTimerStart>
			xProcessedTCPMessage = 0;
 800f9ac:	4b07      	ldr	r3, [pc, #28]	; (800f9cc <prvCheckNetworkTimers+0x94>)
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	601a      	str	r2, [r3, #0]
		}
	}
	#endif /* ipconfigUSE_TCP == 1 */
}
 800f9b2:	bf00      	nop
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	240052c8 	.word	0x240052c8
 800f9c0:	240052dc 	.word	0x240052dc
 800f9c4:	24005288 	.word	0x24005288
 800f9c8:	240052f0 	.word	0x240052f0
 800f9cc:	240052c0 	.word	0x240052c0

0800f9d0 <prvIPTimerStart>:
/*-----------------------------------------------------------*/

static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime )
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	6039      	str	r1, [r7, #0]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	3304      	adds	r3, #4
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fd ff0a 	bl	800d7f8 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	683a      	ldr	r2, [r7, #0]
 800f9e8:	60da      	str	r2, [r3, #12]

	if( xTime == ( TickType_t ) 0 )
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d105      	bne.n	800f9fc <prvIPTimerStart+0x2c>
	{
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	7813      	ldrb	r3, [r2, #0]
 800f9f4:	f043 0302 	orr.w	r3, r3, #2
 800f9f8:	7013      	strb	r3, [r2, #0]
 800f9fa:	e004      	b.n	800fa06 <prvIPTimerStart+0x36>
	}
	else
	{
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	7813      	ldrb	r3, [r2, #0]
 800fa00:	f36f 0341 	bfc	r3, #1, #1
 800fa04:	7013      	strb	r3, [r2, #0]
	}

	pxTimer->bActive = pdTRUE_UNSIGNED;
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	7813      	ldrb	r3, [r2, #0]
 800fa0a:	f043 0301 	orr.w	r3, r3, #1
 800fa0e:	7013      	strb	r3, [r2, #0]
}
 800fa10:	bf00      	nop
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <prvIPTimerReload>:
/*-----------------------------------------------------------*/

static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
	pxTimer->ulReloadTime = xTime;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	683a      	ldr	r2, [r7, #0]
 800fa26:	611a      	str	r2, [r3, #16]
	prvIPTimerStart( pxTimer, xTime );
 800fa28:	6839      	ldr	r1, [r7, #0]
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f7ff ffd0 	bl	800f9d0 <prvIPTimerStart>
}
 800fa30:	bf00      	nop
 800fa32:	3708      	adds	r7, #8
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <prvIPTimerCheck>:
/*-----------------------------------------------------------*/

static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	f003 0301 	and.w	r3, r3, #1
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d102      	bne.n	800fa54 <prvIPTimerCheck+0x1c>
	{
		/* The timer is not enabled. */
		xReturn = pdFALSE;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	60fb      	str	r3, [r7, #12]
 800fa52:	e028      	b.n	800faa6 <prvIPTimerCheck+0x6e>
	}
	else
	{
		/* The timer might have set the bExpired flag already, if not, check the
		value of xTimeOut against ulRemainingTime. */
		if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	f003 0302 	and.w	r3, r3, #2
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d10f      	bne.n	800fa82 <prvIPTimerCheck+0x4a>
		{
			if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	1d1a      	adds	r2, r3, #4
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	330c      	adds	r3, #12
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	4610      	mov	r0, r2
 800fa6e:	f7fd ff01 	bl	800d874 <xTaskCheckForTimeOut>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d004      	beq.n	800fa82 <prvIPTimerCheck+0x4a>
			{
				pxTimer->bExpired = pdTRUE_UNSIGNED;
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	7813      	ldrb	r3, [r2, #0]
 800fa7c:	f043 0302 	orr.w	r3, r3, #2
 800fa80:	7013      	strb	r3, [r2, #0]
			}
		}
		if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	f003 0302 	and.w	r3, r3, #2
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d008      	beq.n	800faa2 <prvIPTimerCheck+0x6a>
		{
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	691b      	ldr	r3, [r3, #16]
 800fa94:	4619      	mov	r1, r3
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7ff ff9a 	bl	800f9d0 <prvIPTimerStart>
			xReturn = pdTRUE;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	60fb      	str	r3, [r7, #12]
 800faa0:	e001      	b.n	800faa6 <prvIPTimerCheck+0x6e>
		}
		else
		{
			xReturn = pdFALSE;
 800faa2:	2300      	movs	r3, #0
 800faa4:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 800faa6:	68fb      	ldr	r3, [r7, #12]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3710      	adds	r7, #16
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <FreeRTOS_NetworkDown>:
/*-----------------------------------------------------------*/

void FreeRTOS_NetworkDown( void )
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
const TickType_t xDontBlock = ( TickType_t ) 0;
 800fab6:	2300      	movs	r3, #0
 800fab8:	607b      	str	r3, [r7, #4]

	/* Simply send the network task the appropriate event. */
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800faba:	6879      	ldr	r1, [r7, #4]
 800fabc:	4808      	ldr	r0, [pc, #32]	; (800fae0 <FreeRTOS_NetworkDown+0x30>)
 800fabe:	f000 f975 	bl	800fdac <xSendEventStructToIPTask>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d003      	beq.n	800fad0 <FreeRTOS_NetworkDown+0x20>
	{
		/* Could not send the message, so it is still pending. */
		xNetworkDownEventPending = pdTRUE;
 800fac8:	4b06      	ldr	r3, [pc, #24]	; (800fae4 <FreeRTOS_NetworkDown+0x34>)
 800faca:	2201      	movs	r2, #1
 800facc:	601a      	str	r2, [r3, #0]
		/* Message was sent so it is not pending. */
		xNetworkDownEventPending = pdFALSE;
	}

	iptraceNETWORK_DOWN();
}
 800face:	e002      	b.n	800fad6 <FreeRTOS_NetworkDown+0x26>
		xNetworkDownEventPending = pdFALSE;
 800fad0:	4b04      	ldr	r3, [pc, #16]	; (800fae4 <FreeRTOS_NetworkDown+0x34>)
 800fad2:	2200      	movs	r2, #0
 800fad4:	601a      	str	r2, [r3, #0]
}
 800fad6:	bf00      	nop
 800fad8:	3708      	adds	r7, #8
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	080187c0 	.word	0x080187c0
 800fae4:	240052b8 	.word	0x240052b8

0800fae8 <pxDuplicateNetworkBufferWithDescriptor>:
}
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
	size_t uxNewLength )
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t * pxNewBuffer;

	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
	The transmit routine wants to have ownership of the network buffer
	descriptor, because it will pass the buffer straight to DMA. */
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800faf2:	2100      	movs	r1, #0
 800faf4:	6838      	ldr	r0, [r7, #0]
 800faf6:	f006 fc65 	bl	80163c4 <pxGetNetworkBufferWithDescriptor>
 800fafa:	60f8      	str	r0, [r7, #12]

	if( pxNewBuffer != NULL )
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d017      	beq.n	800fb32 <pxDuplicateNetworkBufferWithDescriptor+0x4a>
	{
		/* Set the actual packet size in case a bigger buffer than requested
		was returned. */
		pxNewBuffer->xDataLength = uxNewLength;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	683a      	ldr	r2, [r7, #0]
 800fb06:	61da      	str	r2, [r3, #28]

		/* Copy the original packet information. */
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	695a      	ldr	r2, [r3, #20]
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	615a      	str	r2, [r3, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	8c1a      	ldrh	r2, [r3, #32]
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	841a      	strh	r2, [r3, #32]
		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	845a      	strh	r2, [r3, #34]	; 0x22
		( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	6998      	ldr	r0, [r3, #24]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6999      	ldr	r1, [r3, #24]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	69db      	ldr	r3, [r3, #28]
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	f007 fba6 	bl	801727e <memcpy>
	}

	return pxNewBuffer;
 800fb32:	68fb      	ldr	r3, [r7, #12]
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3710      	adds	r7, #16
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <pxUDPPayloadBuffer_to_NetworkBuffer>:

#endif /* ipconfigZERO_COPY_TX_DRIVER != 0 */
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b085      	sub	sp, #20
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
const uint8_t *pucBuffer;
NetworkBufferDescriptor_t *pxResult;

	if( pvBuffer == NULL )
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d102      	bne.n	800fb50 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
	{
		pxResult = NULL;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	60fb      	str	r3, [r7, #12]
 800fb4e:	e00f      	b.n	800fb70 <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
	}
	else
	{
		/* Obtain the network buffer from the zero copy pointer. */
		pucBuffer = ipPOINTER_CAST( const uint8_t *, pvBuffer );
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	60bb      	str	r3, [r7, #8]

		/* The input here is a pointer to a payload buffer.  Subtract
		the total size of a UDP/IP header plus the size of the header in
		the network buffer, usually 8 + 2 bytes. */
		pucBuffer -= ( sizeof( UDPPacket_t ) + ( ( size_t ) ipBUFFER_PADDING ) );
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	3b34      	subs	r3, #52	; 0x34
 800fb58:	60bb      	str	r3, [r7, #8]

		/* Here a pointer was placed to the network descriptor,
		As a pointer is dereferenced, make sure it is well aligned */
		if( ( ( ( size_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1U ) ) == 0U )
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	f003 0303 	and.w	r3, r3, #3
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d103      	bne.n	800fb6c <pxUDPPayloadBuffer_to_NetworkBuffer+0x30>
		{
			/* The following statement may trigger a:
			warning: cast increases required alignment of target type [-Wcast-align].
			It has been confirmed though that the alignment is suitable. */
			pxResult = * ( ( const NetworkBufferDescriptor_t **) pucBuffer );
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	60fb      	str	r3, [r7, #12]
 800fb6a:	e001      	b.n	800fb70 <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
		}
		else
		{
			pxResult = NULL;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	60fb      	str	r3, [r7, #12]
		}
	}

	return pxResult;
 800fb70:	68fb      	ldr	r3, [r7, #12]
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3714      	adds	r7, #20
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr

0800fb7e <FreeRTOS_ReleaseUDPPayloadBuffer>:
/*-----------------------------------------------------------*/

void FreeRTOS_ReleaseUDPPayloadBuffer( void const * pvBuffer )
{
 800fb7e:	b580      	push	{r7, lr}
 800fb80:	b082      	sub	sp, #8
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
	vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7ff ffd8 	bl	800fb3c <pxUDPPayloadBuffer_to_NetworkBuffer>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f006 fc96 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
}
 800fb94:	bf00      	nop
 800fb96:	3708      	adds	r7, #8
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <FreeRTOS_IPInit>:
/*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't function as expected? */
/*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was too high.
 As that bug has been repaired, there is not an urgent reason to warn.
 It is better though to use the advised priority scheme. */
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 800fb9c:	b5b0      	push	{r4, r5, r7, lr}
 800fb9e:	b08c      	sub	sp, #48	; 0x30
 800fba0:	af02      	add	r7, sp, #8
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	607a      	str	r2, [r7, #4]
 800fba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFALSE;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	627b      	str	r3, [r7, #36]	; 0x24

	/* This function should only be called once. */
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800fbae:	f000 ff6b 	bl	8010a88 <xIPIsNetworkTaskReady>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d00b      	beq.n	800fbd0 <FreeRTOS_IPInit+0x34>
 800fbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbbc:	b672      	cpsid	i
 800fbbe:	f383 8811 	msr	BASEPRI, r3
 800fbc2:	f3bf 8f6f 	isb	sy
 800fbc6:	f3bf 8f4f 	dsb	sy
 800fbca:	b662      	cpsie	i
 800fbcc:	623b      	str	r3, [r7, #32]
 800fbce:	e7fe      	b.n	800fbce <FreeRTOS_IPInit+0x32>
	configASSERT( xNetworkEventQueue == NULL );
 800fbd0:	4b63      	ldr	r3, [pc, #396]	; (800fd60 <FreeRTOS_IPInit+0x1c4>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d00b      	beq.n	800fbf0 <FreeRTOS_IPInit+0x54>
 800fbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbdc:	b672      	cpsid	i
 800fbde:	f383 8811 	msr	BASEPRI, r3
 800fbe2:	f3bf 8f6f 	isb	sy
 800fbe6:	f3bf 8f4f 	dsb	sy
 800fbea:	b662      	cpsie	i
 800fbec:	61fb      	str	r3, [r7, #28]
 800fbee:	e7fe      	b.n	800fbee <FreeRTOS_IPInit+0x52>
	configASSERT( xIPTaskHandle == NULL );
 800fbf0:	4b5c      	ldr	r3, [pc, #368]	; (800fd64 <FreeRTOS_IPInit+0x1c8>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00b      	beq.n	800fc10 <FreeRTOS_IPInit+0x74>
 800fbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbfc:	b672      	cpsid	i
 800fbfe:	f383 8811 	msr	BASEPRI, r3
 800fc02:	f3bf 8f6f 	isb	sy
 800fc06:	f3bf 8f4f 	dsb	sy
 800fc0a:	b662      	cpsie	i
 800fc0c:	61bb      	str	r3, [r7, #24]
 800fc0e:	e7fe      	b.n	800fc0e <FreeRTOS_IPInit+0x72>
		configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
		configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );
	}
	#endif
	/* Attempt to create the queue used to communicate with the IP task. */
	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) sizeof( IPStackEvent_t ) );
 800fc10:	2200      	movs	r2, #0
 800fc12:	2108      	movs	r1, #8
 800fc14:	2045      	movs	r0, #69	; 0x45
 800fc16:	f7fc fbd5 	bl	800c3c4 <xQueueGenericCreate>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	4b50      	ldr	r3, [pc, #320]	; (800fd60 <FreeRTOS_IPInit+0x1c4>)
 800fc1e:	601a      	str	r2, [r3, #0]
	configASSERT( xNetworkEventQueue != NULL );
 800fc20:	4b4f      	ldr	r3, [pc, #316]	; (800fd60 <FreeRTOS_IPInit+0x1c4>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d10b      	bne.n	800fc40 <FreeRTOS_IPInit+0xa4>
 800fc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2c:	b672      	cpsid	i
 800fc2e:	f383 8811 	msr	BASEPRI, r3
 800fc32:	f3bf 8f6f 	isb	sy
 800fc36:	f3bf 8f4f 	dsb	sy
 800fc3a:	b662      	cpsie	i
 800fc3c:	617b      	str	r3, [r7, #20]
 800fc3e:	e7fe      	b.n	800fc3e <FreeRTOS_IPInit+0xa2>

	if( xNetworkEventQueue != NULL )
 800fc40:	4b47      	ldr	r3, [pc, #284]	; (800fd60 <FreeRTOS_IPInit+0x1c4>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	f000 8086 	beq.w	800fd56 <FreeRTOS_IPInit+0x1ba>
		#if ( configQUEUE_REGISTRY_SIZE > 0 )
		{
			/* A queue registry is normally used to assist a kernel aware
			debugger.  If one is in use then it will be helpful for the debugger
			to show information about the network event queue. */
			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800fc4a:	4b45      	ldr	r3, [pc, #276]	; (800fd60 <FreeRTOS_IPInit+0x1c4>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	4946      	ldr	r1, [pc, #280]	; (800fd68 <FreeRTOS_IPInit+0x1cc>)
 800fc50:	4618      	mov	r0, r3
 800fc52:	f7fd f8bb 	bl	800cdcc <vQueueAddToRegistry>
		}
		#endif /* configQUEUE_REGISTRY_SIZE */

		if( xNetworkBuffersInitialise() == pdPASS )
 800fc56:	f006 fb25 	bl	80162a4 <xNetworkBuffersInitialise>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	d172      	bne.n	800fd46 <FreeRTOS_IPInit+0x1aa>
		{
			/* Store the local IP and MAC address. */
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	3303      	adds	r3, #3
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	061a      	lsls	r2, r3, #24
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	3302      	adds	r3, #2
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	041b      	lsls	r3, r3, #16
 800fc70:	431a      	orrs	r2, r3
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	3301      	adds	r3, #1
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	021b      	lsls	r3, r3, #8
 800fc7a:	4313      	orrs	r3, r2
 800fc7c:	68fa      	ldr	r2, [r7, #12]
 800fc7e:	7812      	ldrb	r2, [r2, #0]
 800fc80:	4313      	orrs	r3, r2
 800fc82:	4a3a      	ldr	r2, [pc, #232]	; (800fd6c <FreeRTOS_IPInit+0x1d0>)
 800fc84:	6013      	str	r3, [r2, #0]
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	3303      	adds	r3, #3
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	061a      	lsls	r2, r3, #24
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	3302      	adds	r3, #2
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	041b      	lsls	r3, r3, #16
 800fc96:	431a      	orrs	r2, r3
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	021b      	lsls	r3, r3, #8
 800fca0:	4313      	orrs	r3, r2
 800fca2:	68ba      	ldr	r2, [r7, #8]
 800fca4:	7812      	ldrb	r2, [r2, #0]
 800fca6:	4313      	orrs	r3, r2
 800fca8:	4a30      	ldr	r2, [pc, #192]	; (800fd6c <FreeRTOS_IPInit+0x1d0>)
 800fcaa:	6053      	str	r3, [r2, #4]
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	3303      	adds	r3, #3
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	061a      	lsls	r2, r3, #24
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	3302      	adds	r3, #2
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	041b      	lsls	r3, r3, #16
 800fcbc:	431a      	orrs	r2, r3
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	021b      	lsls	r3, r3, #8
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	687a      	ldr	r2, [r7, #4]
 800fcca:	7812      	ldrb	r2, [r2, #0]
 800fccc:	4313      	orrs	r3, r2
 800fcce:	4a27      	ldr	r2, [pc, #156]	; (800fd6c <FreeRTOS_IPInit+0x1d0>)
 800fcd0:	6093      	str	r3, [r2, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	3303      	adds	r3, #3
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	061a      	lsls	r2, r3, #24
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	3302      	adds	r3, #2
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	041b      	lsls	r3, r3, #16
 800fce2:	431a      	orrs	r2, r3
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	3301      	adds	r3, #1
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	021b      	lsls	r3, r3, #8
 800fcec:	4313      	orrs	r3, r2
 800fcee:	683a      	ldr	r2, [r7, #0]
 800fcf0:	7812      	ldrb	r2, [r2, #0]
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	4a1d      	ldr	r2, [pc, #116]	; (800fd6c <FreeRTOS_IPInit+0x1d0>)
 800fcf6:	60d3      	str	r3, [r2, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 800fcf8:	4b1c      	ldr	r3, [pc, #112]	; (800fd6c <FreeRTOS_IPInit+0x1d0>)
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	4b1b      	ldr	r3, [pc, #108]	; (800fd6c <FreeRTOS_IPInit+0x1d0>)
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	43db      	mvns	r3, r3
 800fd02:	4313      	orrs	r3, r2
 800fd04:	4a19      	ldr	r2, [pc, #100]	; (800fd6c <FreeRTOS_IPInit+0x1d0>)
 800fd06:	6113      	str	r3, [r2, #16]

			( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 800fd08:	4a19      	ldr	r2, [pc, #100]	; (800fd70 <FreeRTOS_IPInit+0x1d4>)
 800fd0a:	4b18      	ldr	r3, [pc, #96]	; (800fd6c <FreeRTOS_IPInit+0x1d0>)
 800fd0c:	4614      	mov	r4, r2
 800fd0e:	461d      	mov	r5, r3
 800fd10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd14:	682b      	ldr	r3, [r5, #0]
 800fd16:	6023      	str	r3, [r4, #0]

			#if ipconfigUSE_DHCP == 1
			{
				/* The IP address is not set until DHCP completes. */
				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
 800fd18:	4b16      	ldr	r3, [pc, #88]	; (800fd74 <FreeRTOS_IPInit+0x1d8>)
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	615a      	str	r2, [r3, #20]
			}
			#endif /* ipconfigUSE_DHCP == 1 */

			/* The MAC address is stored in the start of the default packet
			header fragment, which is used when sending UDP packets. */
			( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800fd1e:	2206      	movs	r2, #6
 800fd20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd22:	4814      	ldr	r0, [pc, #80]	; (800fd74 <FreeRTOS_IPInit+0x1d8>)
 800fd24:	f007 faab 	bl	801727e <memcpy>

			/* Prepare the sockets interface. */
			vNetworkSocketsInit();
 800fd28:	f000 ffbe 	bl	8010ca8 <vNetworkSocketsInit>

			/* Create the task that processes Ethernet and stack events. */
			xReturn = xTaskCreate( prvIPTask,
 800fd2c:	4b0d      	ldr	r3, [pc, #52]	; (800fd64 <FreeRTOS_IPInit+0x1c8>)
 800fd2e:	9301      	str	r3, [sp, #4]
 800fd30:	2305      	movs	r3, #5
 800fd32:	9300      	str	r3, [sp, #0]
 800fd34:	2300      	movs	r3, #0
 800fd36:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800fd3a:	490f      	ldr	r1, [pc, #60]	; (800fd78 <FreeRTOS_IPInit+0x1dc>)
 800fd3c:	480f      	ldr	r0, [pc, #60]	; (800fd7c <FreeRTOS_IPInit+0x1e0>)
 800fd3e:	f7fd f897 	bl	800ce70 <xTaskCreate>
 800fd42:	6278      	str	r0, [r7, #36]	; 0x24
 800fd44:	e007      	b.n	800fd56 <FreeRTOS_IPInit+0x1ba>
		else
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n") );

			/* Clean up. */
			vQueueDelete( xNetworkEventQueue );
 800fd46:	4b06      	ldr	r3, [pc, #24]	; (800fd60 <FreeRTOS_IPInit+0x1c4>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7fc fef7 	bl	800cb3e <vQueueDelete>
			xNetworkEventQueue = NULL;
 800fd50:	4b03      	ldr	r3, [pc, #12]	; (800fd60 <FreeRTOS_IPInit+0x1c4>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	601a      	str	r2, [r3, #0]
	else
	{
		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n") );
	}

	return xReturn;
 800fd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3728      	adds	r7, #40	; 0x28
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bdb0      	pop	{r4, r5, r7, pc}
 800fd60:	24005288 	.word	0x24005288
 800fd64:	240052bc 	.word	0x240052bc
 800fd68:	08018628 	.word	0x08018628
 800fd6c:	24005290 	.word	0x24005290
 800fd70:	240052a4 	.word	0x240052a4
 800fd74:	2400001c 	.word	0x2400001c
 800fd78:	08018630 	.word	0x08018630
 800fd7c:	0800f6c9 	.word	0x0800f6c9

0800fd80 <xSendEventToIPTask>:

#endif /* ipconfigSUPPORT_OUTGOING_PINGS == 1 */
/*-----------------------------------------------------------*/

BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b086      	sub	sp, #24
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	4603      	mov	r3, r0
 800fd88:	71fb      	strb	r3, [r7, #7]
IPStackEvent_t xEventMessage;
const TickType_t xDontBlock = ( TickType_t ) 0;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	617b      	str	r3, [r7, #20]

	xEventMessage.eEventType = eEvent;
 800fd8e:	79fb      	ldrb	r3, [r7, #7]
 800fd90:	733b      	strb	r3, [r7, #12]
	xEventMessage.pvData = ( void* )NULL;
 800fd92:	2300      	movs	r3, #0
 800fd94:	613b      	str	r3, [r7, #16]

	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800fd96:	f107 030c 	add.w	r3, r7, #12
 800fd9a:	6979      	ldr	r1, [r7, #20]
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f000 f805 	bl	800fdac <xSendEventStructToIPTask>
 800fda2:	4603      	mov	r3, r0
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3718      	adds	r7, #24
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <xSendEventStructToIPTask>:
/*-----------------------------------------------------------*/

BaseType_t xSendEventStructToIPTask( const IPStackEvent_t *pxEvent, TickType_t uxTimeout )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b086      	sub	sp, #24
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn, xSendMessage;
TickType_t uxUseTimeout = uxTimeout;
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	60fb      	str	r3, [r7, #12]

	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800fdba:	f000 fe65 	bl	8010a88 <xIPIsNetworkTaskReady>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d107      	bne.n	800fdd4 <xSendEventStructToIPTask+0x28>
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f993 3000 	ldrsb.w	r3, [r3]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d002      	beq.n	800fdd4 <xSendEventStructToIPTask+0x28>
	{
		/* Only allow eNetworkDownEvent events if the IP task is not ready
		yet.  Not going to attempt to send the message so the send failed. */
		xReturn = pdFAIL;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	617b      	str	r3, [r7, #20]
 800fdd2:	e02d      	b.n	800fe30 <xSendEventStructToIPTask+0x84>
	}
	else
	{
		xSendMessage = pdTRUE;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	613b      	str	r3, [r7, #16]

		#if( ipconfigUSE_TCP == 1 )
		{
			if( pxEvent->eEventType == eTCPTimerEvent )
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f993 3000 	ldrsb.w	r3, [r3]
 800fdde:	2b06      	cmp	r3, #6
 800fde0:	d10e      	bne.n	800fe00 <xSendEventStructToIPTask+0x54>
			{
				/* TCP timer events are sent to wake the timer task when
				xTCPTimer has expired, but there is no point sending them if the
				IP task is already awake processing other message. */
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800fde2:	4a16      	ldr	r2, [pc, #88]	; (800fe3c <xSendEventStructToIPTask+0x90>)
 800fde4:	7813      	ldrb	r3, [r2, #0]
 800fde6:	f043 0302 	orr.w	r3, r3, #2
 800fdea:	7013      	strb	r3, [r2, #0]

				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 800fdec:	4b14      	ldr	r3, [pc, #80]	; (800fe40 <xSendEventStructToIPTask+0x94>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fc fe85 	bl	800cb00 <uxQueueMessagesWaiting>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d001      	beq.n	800fe00 <xSendEventStructToIPTask+0x54>
				{
					/* Not actually going to send the message but this is not a
					failure as the message didn't need to be sent. */
					xSendMessage = pdFALSE;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	613b      	str	r3, [r7, #16]
				}
			}
		}
		#endif /* ipconfigUSE_TCP */

		if( xSendMessage != pdFALSE )
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d012      	beq.n	800fe2c <xSendEventStructToIPTask+0x80>
		{
			/* The IP task cannot block itself while waiting for itself to
			respond. */
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 800fe06:	f7ff fd3b 	bl	800f880 <xIsCallingFromIPTask>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d104      	bne.n	800fe1a <xSendEventStructToIPTask+0x6e>
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d001      	beq.n	800fe1a <xSendEventStructToIPTask+0x6e>
			{
				uxUseTimeout = ( TickType_t ) 0;
 800fe16:	2300      	movs	r3, #0
 800fe18:	60fb      	str	r3, [r7, #12]
			}

			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 800fe1a:	4b09      	ldr	r3, [pc, #36]	; (800fe40 <xSendEventStructToIPTask+0x94>)
 800fe1c:	6818      	ldr	r0, [r3, #0]
 800fe1e:	2300      	movs	r3, #0
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	6879      	ldr	r1, [r7, #4]
 800fe24:	f7fc fb78 	bl	800c518 <xQueueGenericSend>
 800fe28:	6178      	str	r0, [r7, #20]
 800fe2a:	e001      	b.n	800fe30 <xSendEventStructToIPTask+0x84>
		}
		else
		{
			/* It was not necessary to send the message to process the event so
			even though the message was not sent the call was successful. */
			xReturn = pdPASS;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	617b      	str	r3, [r7, #20]
		}
	}

	return xReturn;
 800fe30:	697b      	ldr	r3, [r7, #20]
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3718      	adds	r7, #24
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	240052f0 	.word	0x240052f0
 800fe40:	24005288 	.word	0x24005288

0800fe44 <eConsiderFrameForProcessing>:
/*-----------------------------------------------------------*/

eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b086      	sub	sp, #24
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
eFrameProcessingResult_t eReturn;
const EthernetHeader_t *pxEthernetHeader;

	/* Map the buffer onto Ethernet Header struct for easy access to fields. */
	pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pucEthernetBuffer );
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f7ff fbc2 	bl	800f5d6 <vCastConstPointerTo_EthernetHeader_t>
 800fe52:	6138      	str	r0, [r7, #16]

	if( memcmp( ipLOCAL_MAC_ADDRESS, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	2206      	movs	r2, #6
 800fe58:	4619      	mov	r1, r3
 800fe5a:	481a      	ldr	r0, [pc, #104]	; (800fec4 <eConsiderFrameForProcessing+0x80>)
 800fe5c:	f007 fa00 	bl	8017260 <memcmp>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d102      	bne.n	800fe6c <eConsiderFrameForProcessing+0x28>
	{
		/* The packet was directed to this node - process it. */
		eReturn = eProcessBuffer;
 800fe66:	2301      	movs	r3, #1
 800fe68:	75fb      	strb	r3, [r7, #23]
 800fe6a:	e00d      	b.n	800fe88 <eConsiderFrameForProcessing+0x44>
	}
	else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	2206      	movs	r2, #6
 800fe70:	4619      	mov	r1, r3
 800fe72:	4815      	ldr	r0, [pc, #84]	; (800fec8 <eConsiderFrameForProcessing+0x84>)
 800fe74:	f007 f9f4 	bl	8017260 <memcmp>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d102      	bne.n	800fe84 <eConsiderFrameForProcessing+0x40>
	{
		/* The packet was a broadcast - process it. */
		eReturn = eProcessBuffer;
 800fe7e:	2301      	movs	r3, #1
 800fe80:	75fb      	strb	r3, [r7, #23]
 800fe82:	e001      	b.n	800fe88 <eConsiderFrameForProcessing+0x44>
	else
#endif /* ipconfigUSE_LLMNR */
	{
		/* The packet was not a broadcast, or for this node, just release
		the buffer without taking any other action. */
		eReturn = eReleaseBuffer;
 800fe84:	2300      	movs	r3, #0
 800fe86:	75fb      	strb	r3, [r7, #23]

	#if( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
	{
	uint16_t usFrameType;

		if( eReturn == eProcessBuffer )
 800fe88:	7dfb      	ldrb	r3, [r7, #23]
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d115      	bne.n	800feba <eConsiderFrameForProcessing+0x76>
		{
			usFrameType = pxEthernetHeader->usFrameType;
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	7b1a      	ldrb	r2, [r3, #12]
 800fe92:	7b5b      	ldrb	r3, [r3, #13]
 800fe94:	021b      	lsls	r3, r3, #8
 800fe96:	4313      	orrs	r3, r2
 800fe98:	81fb      	strh	r3, [r7, #14]
			usFrameType = FreeRTOS_ntohs( usFrameType );
 800fe9a:	89fb      	ldrh	r3, [r7, #14]
 800fe9c:	021b      	lsls	r3, r3, #8
 800fe9e:	b21a      	sxth	r2, r3
 800fea0:	89fb      	ldrh	r3, [r7, #14]
 800fea2:	0a1b      	lsrs	r3, r3, #8
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	b21b      	sxth	r3, r3
 800fea8:	4313      	orrs	r3, r2
 800feaa:	b21b      	sxth	r3, r3
 800feac:	81fb      	strh	r3, [r7, #14]

			if( usFrameType <= 0x600U )
 800feae:	89fb      	ldrh	r3, [r7, #14]
 800feb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800feb4:	d801      	bhi.n	800feba <eConsiderFrameForProcessing+0x76>
			{
				/* Not an Ethernet II frame. */
				eReturn = eReleaseBuffer;
 800feb6:	2300      	movs	r3, #0
 800feb8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}
	#endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

	return eReturn;
 800feba:	7dfb      	ldrb	r3, [r7, #23]
}
 800febc:	4618      	mov	r0, r3
 800febe:	3718      	adds	r7, #24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	2400001c 	.word	0x2400001c
 800fec8:	080187b8 	.word	0x080187b8

0800fecc <prvProcessNetworkDownEvent>:
/*-----------------------------------------------------------*/

static void prvProcessNetworkDownEvent( void )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	af00      	add	r7, sp, #0
	/* Stop the ARP timer while there is no network. */
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 800fed0:	4a12      	ldr	r2, [pc, #72]	; (800ff1c <prvProcessNetworkDownEvent+0x50>)
 800fed2:	7813      	ldrb	r3, [r2, #0]
 800fed4:	f36f 0300 	bfc	r3, #0, #1
 800fed8:	7013      	strb	r3, [r2, #0]
		static BaseType_t xCallEventHook = pdFALSE;

		/* The first network down event is generated by the IP stack itself to
		initialise the network hardware, so do not call the network down event
		the first time through. */
		if( xCallEventHook == pdTRUE )
 800feda:	4b11      	ldr	r3, [pc, #68]	; (800ff20 <prvProcessNetworkDownEvent+0x54>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d102      	bne.n	800fee8 <prvProcessNetworkDownEvent+0x1c>
		{
			vApplicationIPNetworkEventHook( eNetworkDown );
 800fee2:	2001      	movs	r0, #1
 800fee4:	f7f1 f8dc 	bl	80010a0 <vApplicationIPNetworkEventHook>
		}
		xCallEventHook = pdTRUE;
 800fee8:	4b0d      	ldr	r3, [pc, #52]	; (800ff20 <prvProcessNetworkDownEvent+0x54>)
 800feea:	2201      	movs	r2, #1
 800feec:	601a      	str	r2, [r3, #0]
	#endif

	/* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122, 
	treat network down as a "delivery problem" and flush the ARP cache for this
	interface. */
	FreeRTOS_ClearARP( );
 800feee:	f7fe fecf 	bl	800ec90 <FreeRTOS_ClearARP>

	/* The network has been disconnected (or is being initialised for the first
	time).  Perform whatever hardware processing is necessary to bring it up
	again, or wait for it to be available again.  This is hardware dependent. */
	if( xNetworkInterfaceInitialise() != pdPASS )
 800fef2:	f006 ff5b 	bl	8016dac <xNetworkInterfaceInitialise>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d006      	beq.n	800ff0a <prvProcessNetworkDownEvent+0x3e>
	{
		/* Ideally the network interface initialisation function will only
		return when the network is available.  In case this is not the case,
		wait a while before retrying the initialisation. */
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 800fefc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ff00:	f7fd f8fc 	bl	800d0fc <vTaskDelay>
		FreeRTOS_NetworkDown();
 800ff04:	f7ff fdd4 	bl	800fab0 <FreeRTOS_NetworkDown>
			/* Perform any necessary 'network up' processing. */
			vIPNetworkUpCalls();
		}
		#endif
	}
}
 800ff08:	e005      	b.n	800ff16 <prvProcessNetworkDownEvent+0x4a>
			vDHCPProcess( pdTRUE );
 800ff0a:	2001      	movs	r0, #1
 800ff0c:	f7fe fefa 	bl	800ed04 <vDHCPProcess>
			( void ) xSendEventToIPTask( eDHCPEvent );
 800ff10:	2005      	movs	r0, #5
 800ff12:	f7ff ff35 	bl	800fd80 <xSendEventToIPTask>
}
 800ff16:	bf00      	nop
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	240052c8 	.word	0x240052c8
 800ff20:	24005308 	.word	0x24005308

0800ff24 <vIPNetworkUpCalls>:
/*-----------------------------------------------------------*/

void vIPNetworkUpCalls( void )
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	af00      	add	r7, sp, #0
	xNetworkUp = pdTRUE;
 800ff28:	4b06      	ldr	r3, [pc, #24]	; (800ff44 <vIPNetworkUpCalls+0x20>)
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	601a      	str	r2, [r3, #0]

	#if( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
	{
		vApplicationIPNetworkEventHook( eNetworkUp );
 800ff2e:	2000      	movs	r0, #0
 800ff30:	f7f1 f8b6 	bl	80010a0 <vApplicationIPNetworkEventHook>
		vDNSInitialise();
	}
	#endif /* ipconfigDNS_USE_CALLBACKS != 0 */

	/* Set remaining time to 0 so it will become active immediately. */
	prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 800ff34:	f242 7110 	movw	r1, #10000	; 0x2710
 800ff38:	4803      	ldr	r0, [pc, #12]	; (800ff48 <vIPNetworkUpCalls+0x24>)
 800ff3a:	f7ff fd6d 	bl	800fa18 <prvIPTimerReload>
}
 800ff3e:	bf00      	nop
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	240052c4 	.word	0x240052c4
 800ff48:	240052c8 	.word	0x240052c8

0800ff4c <prvProcessEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b086      	sub	sp, #24
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
const EthernetHeader_t *pxEthernetHeader;
eFrameProcessingResult_t eReturned = eReleaseBuffer;
 800ff54:	2300      	movs	r3, #0
 800ff56:	75fb      	strb	r3, [r7, #23]

	configASSERT( pxNetworkBuffer != NULL );
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d10b      	bne.n	800ff76 <prvProcessEthernetPacket+0x2a>
 800ff5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff62:	b672      	cpsid	i
 800ff64:	f383 8811 	msr	BASEPRI, r3
 800ff68:	f3bf 8f6f 	isb	sy
 800ff6c:	f3bf 8f4f 	dsb	sy
 800ff70:	b662      	cpsie	i
 800ff72:	60fb      	str	r3, [r7, #12]
 800ff74:	e7fe      	b.n	800ff74 <prvProcessEthernetPacket+0x28>

	/* Interpret the Ethernet frame. */
	if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	69db      	ldr	r3, [r3, #28]
 800ff7a:	2b0d      	cmp	r3, #13
 800ff7c:	d939      	bls.n	800fff2 <prvProcessEthernetPacket+0xa6>
	{
		eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 800ff7e:	2301      	movs	r3, #1
 800ff80:	75fb      	strb	r3, [r7, #23]

		/* Map the buffer onto the Ethernet Header struct for easy access to the fields. */
		pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	699b      	ldr	r3, [r3, #24]
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7ff fb25 	bl	800f5d6 <vCastConstPointerTo_EthernetHeader_t>
 800ff8c:	6138      	str	r0, [r7, #16]
		#if( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
		if( eReturned == eProcessBuffer )
		#endif
		{
			/* Interpret the received Ethernet packet. */
			switch( pxEthernetHeader->usFrameType )
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	899b      	ldrh	r3, [r3, #12]
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	2b08      	cmp	r3, #8
 800ff96:	d015      	beq.n	800ffc4 <prvProcessEthernetPacket+0x78>
 800ff98:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ff9c:	d126      	bne.n	800ffec <prvProcessEthernetPacket+0xa0>
			{
			case ipARP_FRAME_TYPE:
				/* The Ethernet frame contains an ARP packet. */
				if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	69db      	ldr	r3, [r3, #28]
 800ffa2:	2b29      	cmp	r3, #41	; 0x29
 800ffa4:	d90b      	bls.n	800ffbe <prvProcessEthernetPacket+0x72>
				{
					eReturned = eARPProcessPacket( ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer ) );
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	699b      	ldr	r3, [r3, #24]
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7ff fb1e 	bl	800f5ec <vCastPointerTo_ARPPacket_t>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7fe fb20 	bl	800e5f8 <eARPProcessPacket>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	75fb      	strb	r3, [r7, #23]
				}
				else
				{
					eReturned = eReleaseBuffer;
				}
				break;
 800ffbc:	e01a      	b.n	800fff4 <prvProcessEthernetPacket+0xa8>
					eReturned = eReleaseBuffer;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	75fb      	strb	r3, [r7, #23]
				break;
 800ffc2:	e017      	b.n	800fff4 <prvProcessEthernetPacket+0xa8>

			case ipIPv4_FRAME_TYPE:
				/* The Ethernet frame contains an IP packet. */
				if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	69db      	ldr	r3, [r3, #28]
 800ffc8:	2b21      	cmp	r3, #33	; 0x21
 800ffca:	d90c      	bls.n	800ffe6 <prvProcessEthernetPacket+0x9a>
				{
					eReturned = prvProcessIPPacket( ipCAST_PTR_TO_TYPE_PTR( IPPacket_t, pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	699b      	ldr	r3, [r3, #24]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7ff fb16 	bl	800f602 <vCastPointerTo_IPPacket_t>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	6879      	ldr	r1, [r7, #4]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f000 f8fc 	bl	80101d8 <prvProcessIPPacket>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	75fb      	strb	r3, [r7, #23]
				}
				else
				{
					eReturned = eReleaseBuffer;
				}
				break;
 800ffe4:	e006      	b.n	800fff4 <prvProcessEthernetPacket+0xa8>
					eReturned = eReleaseBuffer;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	75fb      	strb	r3, [r7, #23]
				break;
 800ffea:	e003      	b.n	800fff4 <prvProcessEthernetPacket+0xa8>

			default:
				/* No other packet types are handled.  Nothing to do. */
				eReturned = eReleaseBuffer;
 800ffec:	2300      	movs	r3, #0
 800ffee:	75fb      	strb	r3, [r7, #23]
				break;
 800fff0:	e000      	b.n	800fff4 <prvProcessEthernetPacket+0xa8>
			}
		}
 800fff2:	bf00      	nop
	}

	/* Perform any actions that resulted from processing the Ethernet frame. */
	switch( eReturned )
 800fff4:	7dfb      	ldrb	r3, [r7, #23]
 800fff6:	2b02      	cmp	r3, #2
 800fff8:	d002      	beq.n	8010000 <prvProcessEthernetPacket+0xb4>
 800fffa:	2b03      	cmp	r3, #3
 800fffc:	d009      	beq.n	8010012 <prvProcessEthernetPacket+0xc6>
 800fffe:	e004      	b.n	801000a <prvProcessEthernetPacket+0xbe>
	{
		case eReturnEthernetFrame :
			/* The Ethernet frame will have been updated (maybe it was
			an ARP request or a PING request?) and should be sent back to
			its source. */
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8010000:	2101      	movs	r1, #1
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 fcd6 	bl	80109b4 <vReturnEthernetFrame>
			/* parameter pdTRUE: the buffer must be released once
			the frame has been transmitted */
			break;
 8010008:	e004      	b.n	8010014 <prvProcessEthernetPacket+0xc8>
		case eProcessBuffer :
		default :
			/* The frame is not being used anywhere, and the
			NetworkBufferDescriptor_t structure containing the frame should
			just be	released back to the list of free buffers. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f006 fa58 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
			break;
 8010010:	e000      	b.n	8010014 <prvProcessEthernetPacket+0xc8>
			break;
 8010012:	bf00      	nop
	}
}
 8010014:	bf00      	nop
 8010016:	3718      	adds	r7, #24
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <xIsIPv4Multicast>:
/*-----------------------------------------------------------*/

BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 801001c:	b480      	push	{r7}
 801001e:	b085      	sub	sp, #20
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	061a      	lsls	r2, r3, #24
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	021b      	lsls	r3, r3, #8
 801002c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010030:	431a      	orrs	r2, r3
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	0a1b      	lsrs	r3, r3, #8
 8010036:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801003a:	431a      	orrs	r2, r3
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	0e1b      	lsrs	r3, r3, #24
 8010040:	4313      	orrs	r3, r2
 8010042:	60bb      	str	r3, [r7, #8]

	if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 801004a:	d306      	bcc.n	801005a <xIsIPv4Multicast+0x3e>
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 8010052:	d202      	bcs.n	801005a <xIsIPv4Multicast+0x3e>
	{
		xReturn = pdTRUE;
 8010054:	2301      	movs	r3, #1
 8010056:	60fb      	str	r3, [r7, #12]
 8010058:	e001      	b.n	801005e <xIsIPv4Multicast+0x42>
	}
	else
	{
		xReturn = pdFALSE;
 801005a:	2300      	movs	r3, #0
 801005c:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 801005e:	68fb      	ldr	r3, [r7, #12]
}
 8010060:	4618      	mov	r0, r3
 8010062:	3714      	adds	r7, #20
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <vSetMultiCastIPv4MacAddress>:
/*-----------------------------------------------------------*/

void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress, MACAddress_t *pxMACAddress )
{
 801006c:	b480      	push	{r7}
 801006e:	b085      	sub	sp, #20
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	061a      	lsls	r2, r3, #24
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	021b      	lsls	r3, r3, #8
 801007e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010082:	431a      	orrs	r2, r3
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	0a1b      	lsrs	r3, r3, #8
 8010088:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801008c:	431a      	orrs	r2, r3
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	0e1b      	lsrs	r3, r3, #24
 8010092:	4313      	orrs	r3, r2
 8010094:	60fb      	str	r3, [r7, #12]

	pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	2201      	movs	r2, #1
 801009a:	701a      	strb	r2, [r3, #0]
	pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	2200      	movs	r2, #0
 80100a0:	705a      	strb	r2, [r3, #1]
	pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	225e      	movs	r2, #94	; 0x5e
 80100a6:	709a      	strb	r2, [r3, #2]
	pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU );	/* Use 7 bits. */
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	0c1b      	lsrs	r3, r3, #16
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100b2:	b2da      	uxtb	r2, r3
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	70da      	strb	r2, [r3, #3]
	pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >>  8 ) & 0xffU );	/* Use 8 bits. */
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	0a1b      	lsrs	r3, r3, #8
 80100bc:	b2da      	uxtb	r2, r3
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	711a      	strb	r2, [r3, #4]
	pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP       ) & 0xffU );	/* Use 8 bits. */
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	b2da      	uxtb	r2, r3
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	715a      	strb	r2, [r3, #5]
}
 80100ca:	bf00      	nop
 80100cc:	3714      	adds	r7, #20
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr
	...

080100d8 <prvAllowIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
	const NetworkBufferDescriptor_t * const pxNetworkBuffer, UBaseType_t uxHeaderLength )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b08a      	sub	sp, #40	; 0x28
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	607a      	str	r2, [r7, #4]
eFrameProcessingResult_t eReturn = eProcessBuffer;
 80100e4:	2301      	movs	r3, #1
 80100e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

#if( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
	const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	330e      	adds	r3, #14
 80100ee:	623b      	str	r3, [r7, #32]
	#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
	{
		/* In systems with a very small amount of RAM, it might be advantageous
		to have incoming messages checked earlier, by the network card driver.
		This method may decrease the usage of sparse network buffers. */
		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 80100f0:	6a3b      	ldr	r3, [r7, #32]
 80100f2:	691b      	ldr	r3, [r3, #16]
 80100f4:	61fb      	str	r3, [r7, #28]

			/* Ensure that the incoming packet is not fragmented (only outgoing
			packets can be fragmented) as these are the only handled IP frames
			currently. */
			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 80100f6:	6a3b      	ldr	r3, [r7, #32]
 80100f8:	88db      	ldrh	r3, [r3, #6]
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	461a      	mov	r2, r3
 80100fe:	f64f 730f 	movw	r3, #65295	; 0xff0f
 8010102:	4013      	ands	r3, r2
 8010104:	2b00      	cmp	r3, #0
 8010106:	d003      	beq.n	8010110 <prvAllowIPPacket+0x38>
			{
				/* Can not handle, fragmented packet. */
				eReturn = eReleaseBuffer;
 8010108:	2300      	movs	r3, #0
 801010a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801010e:	e020      	b.n	8010152 <prvAllowIPPacket+0x7a>
			}
			/* Test if the length of the IP-header is between 20 and 60 bytes,
			and if the IP-version is 4. */
			else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8010110:	6a3b      	ldr	r3, [r7, #32]
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	2b44      	cmp	r3, #68	; 0x44
 8010116:	d903      	bls.n	8010120 <prvAllowIPPacket+0x48>
					 ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 8010118:	6a3b      	ldr	r3, [r7, #32]
 801011a:	781b      	ldrb	r3, [r3, #0]
			else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 801011c:	2b4f      	cmp	r3, #79	; 0x4f
 801011e:	d903      	bls.n	8010128 <prvAllowIPPacket+0x50>
			{
				/* Can not handle, unknown or invalid header version. */
				eReturn = eReleaseBuffer;
 8010120:	2300      	movs	r3, #0
 8010122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010126:	e014      	b.n	8010152 <prvAllowIPPacket+0x7a>
			}
				/* Is the packet for this IP address? */
			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 8010128:	4b28      	ldr	r3, [pc, #160]	; (80101cc <prvAllowIPPacket+0xf4>)
 801012a:	695b      	ldr	r3, [r3, #20]
 801012c:	69fa      	ldr	r2, [r7, #28]
 801012e:	429a      	cmp	r2, r3
 8010130:	d00f      	beq.n	8010152 <prvAllowIPPacket+0x7a>
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010138:	d00b      	beq.n	8010152 <prvAllowIPPacket+0x7a>
				/* Is it the global broadcast address 255.255.255.255 ? */
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
				/* Is it a specific broadcast address 192.168.1.255 ? */
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 801013a:	4b25      	ldr	r3, [pc, #148]	; (80101d0 <prvAllowIPPacket+0xf8>)
 801013c:	691b      	ldr	r3, [r3, #16]
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 801013e:	69fa      	ldr	r2, [r7, #28]
 8010140:	429a      	cmp	r2, r3
 8010142:	d006      	beq.n	8010152 <prvAllowIPPacket+0x7a>
			#if( ipconfigUSE_LLMNR == 1 )
				/* Is it the LLMNR multicast address? */
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
			#endif
				/* Or (during DHCP negotiation) we have no IP-address yet? */
				( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 8010144:	4b21      	ldr	r3, [pc, #132]	; (80101cc <prvAllowIPPacket+0xf4>)
 8010146:	695b      	ldr	r3, [r3, #20]
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 8010148:	2b00      	cmp	r3, #0
 801014a:	d002      	beq.n	8010152 <prvAllowIPPacket+0x7a>
			{
				/* Packet is not for this node, release it */
				eReturn = eReleaseBuffer;
 801014c:	2300      	movs	r3, #0
 801014e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}
	#else
	{

		if (eReturn == eProcessBuffer )
 8010152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010156:	2b01      	cmp	r3, #1
 8010158:	d10d      	bne.n	8010176 <prvAllowIPPacket+0x9e>
		{
			if( xCheckSizeFields( ( uint8_t * )( pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer->xDataLength ) != pdPASS )
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	699a      	ldr	r2, [r3, #24]
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	69db      	ldr	r3, [r3, #28]
 8010162:	4619      	mov	r1, r3
 8010164:	4610      	mov	r0, r2
 8010166:	f000 f99d 	bl	80104a4 <xCheckSizeFields>
 801016a:	4603      	mov	r3, r0
 801016c:	2b01      	cmp	r3, #1
 801016e:	d002      	beq.n	8010176 <prvAllowIPPacket+0x9e>
			{
				/* Some of the length checks were not successful. */
				eReturn = eReleaseBuffer;
 8010170:	2300      	movs	r3, #0
 8010172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		#if( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
		{
			/* Check if this is a UDP packet without a checksum. */
			if (eReturn == eProcessBuffer )
 8010176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801017a:	2b01      	cmp	r3, #1
 801017c:	d11f      	bne.n	80101be <prvAllowIPPacket+0xe6>
				/* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
				and so UDP packets carrying a protocol checksum of 0, will
				be dropped. */

				/* Identify the next protocol. */
				if( pxIPPacket->xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	7ddb      	ldrb	r3, [r3, #23]
 8010182:	2b11      	cmp	r3, #17
 8010184:	d11b      	bne.n	80101be <prvAllowIPPacket+0xe6>
				{
				ProtocolPacket_t *pxProtPack;
				const uint16_t *pusChecksum;

					/* pxProtPack will point to the offset were the protocols begin. */
					pxProtPack = ipCAST_PTR_TO_TYPE_PTR( ProtocolPacket_t, &( pxNetworkBuffer->pucEthernetBuffer[ uxHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	699a      	ldr	r2, [r3, #24]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	3b14      	subs	r3, #20
 801018e:	4413      	add	r3, r2
 8010190:	4618      	mov	r0, r3
 8010192:	f7ff fa62 	bl	800f65a <vCastPointerTo_ProtocolPacket_t>
 8010196:	61b8      	str	r0, [r7, #24]
					pusChecksum = ( const uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 8010198:	69bb      	ldr	r3, [r7, #24]
 801019a:	3328      	adds	r3, #40	; 0x28
 801019c:	617b      	str	r3, [r7, #20]
					if( *pusChecksum == ( uint16_t ) 0U )
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	881b      	ldrh	r3, [r3, #0]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d10b      	bne.n	80101be <prvAllowIPPacket+0xe6>
					{
						#if( ipconfigHAS_PRINTF != 0 )
						{
						static BaseType_t xCount = 0;

							if( xCount < 5 )
 80101a6:	4b0b      	ldr	r3, [pc, #44]	; (80101d4 <prvAllowIPPacket+0xfc>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2b04      	cmp	r3, #4
 80101ac:	dc04      	bgt.n	80101b8 <prvAllowIPPacket+0xe0>
							{
								FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
									FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
								xCount++;
 80101ae:	4b09      	ldr	r3, [pc, #36]	; (80101d4 <prvAllowIPPacket+0xfc>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	3301      	adds	r3, #1
 80101b4:	4a07      	ldr	r2, [pc, #28]	; (80101d4 <prvAllowIPPacket+0xfc>)
 80101b6:	6013      	str	r3, [r2, #0]
							}
						}
						#endif	/* ( ipconfigHAS_PRINTF != 0 ) */

						/* Protocol checksum not accepted. */
						eReturn = eReleaseBuffer;
 80101b8:	2300      	movs	r3, #0
 80101ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		/* to avoid warning unused parameters */
		( void ) uxHeaderLength;
	}
	#endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

	return eReturn;
 80101be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3728      	adds	r7, #40	; 0x28
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	2400001c 	.word	0x2400001c
 80101d0:	24005290 	.word	0x24005290
 80101d4:	2400530c 	.word	0x2400530c

080101d8 <prvProcessIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvProcessIPPacket( IPPacket_t * pxIPPacket, NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b090      	sub	sp, #64	; 0x40
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
eFrameProcessingResult_t eReturn;
IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	330e      	adds	r3, #14
 80101e6:	63bb      	str	r3, [r7, #56]	; 0x38
size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 80101e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	637b      	str	r3, [r7, #52]	; 0x34
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( uxLength & 0x0FU ) << 2 );
 80101ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101f0:	009b      	lsls	r3, r3, #2
 80101f2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80101f6:	633b      	str	r3, [r7, #48]	; 0x30
uint8_t ucProtocol;

	/* Bound the calculated header length: take away the Ethernet header size,
	then check if the IP header is claiming to be longer than the remaining
	total packet size. Also check for minimal header field length. */
	if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	69db      	ldr	r3, [r3, #28]
 80101fc:	3b0e      	subs	r3, #14
 80101fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010200:	429a      	cmp	r2, r3
 8010202:	d802      	bhi.n	801020a <prvProcessIPPacket+0x32>
 8010204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010206:	2b13      	cmp	r3, #19
 8010208:	d803      	bhi.n	8010212 <prvProcessIPPacket+0x3a>
		( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
	{
		eReturn = eReleaseBuffer;
 801020a:	2300      	movs	r3, #0
 801020c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010210:	e0cb      	b.n	80103aa <prvProcessIPPacket+0x1d2>
	}
	else
	{
		ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	7ddb      	ldrb	r3, [r3, #23]
 8010216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		/* Check if the IP headers are acceptable and if it has our destination. */
		eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 801021a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801021c:	6839      	ldr	r1, [r7, #0]
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f7ff ff5a 	bl	80100d8 <prvAllowIPPacket>
 8010224:	4603      	mov	r3, r0
 8010226:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if( eReturn == eProcessBuffer )
 801022a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801022e:	2b01      	cmp	r3, #1
 8010230:	f040 80b8 	bne.w	80103a4 <prvProcessIPPacket+0x1cc>
		{
			/* Are there IP-options. */
			if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8010234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010236:	2b14      	cmp	r3, #20
 8010238:	d927      	bls.n	801028a <prvProcessIPPacket+0xb2>
				The extra space is used for IP-options. */
				#if( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
				{
					/* All structs of headers expect a IP header size of 20 bytes
					 * IP header options were included, we'll ignore them and cut them out. */
					const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 801023a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801023c:	3b14      	subs	r3, #20
 801023e:	62bb      	str	r3, [r7, #40]	; 0x28
					/* From: the previous start of UDP/ICMP/TCP data. */
					const uint8_t *pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	699a      	ldr	r2, [r3, #24]
 8010244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010246:	330e      	adds	r3, #14
 8010248:	4413      	add	r3, r2
 801024a:	627b      	str	r3, [r7, #36]	; 0x24
					/* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
					uint8_t *pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	699b      	ldr	r3, [r3, #24]
 8010250:	3322      	adds	r3, #34	; 0x22
 8010252:	623b      	str	r3, [r7, #32]
					/* How many: total length minus the options and the lower headers. */
					const size_t  xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	69da      	ldr	r2, [r3, #28]
 8010258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025a:	1ad3      	subs	r3, r2, r3
 801025c:	3b22      	subs	r3, #34	; 0x22
 801025e:	61fb      	str	r3, [r7, #28]

					( void ) memmove( pucTarget, pucSource, xMoveLen );
 8010260:	69fa      	ldr	r2, [r7, #28]
 8010262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010264:	6a38      	ldr	r0, [r7, #32]
 8010266:	f007 f815 	bl	8017294 <memmove>
					pxNetworkBuffer->xDataLength -= optlen;
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	69da      	ldr	r2, [r3, #28]
 801026e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010270:	1ad2      	subs	r2, r2, r3
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	61da      	str	r2, [r3, #28]

					/* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
					pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 8010276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	f023 030f 	bic.w	r3, r3, #15
 801027e:	b2db      	uxtb	r3, r3
 8010280:	f043 0305 	orr.w	r3, r3, #5
 8010284:	b2da      	uxtb	r2, r3
 8010286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010288:	701a      	strb	r2, [r3, #0]
					eReturn = eReleaseBuffer;
				}
				#endif
			}

			if( eReturn != eReleaseBuffer )
 801028a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801028e:	2b00      	cmp	r3, #0
 8010290:	f000 8088 	beq.w	80103a4 <prvProcessIPPacket+0x1cc>
			{
				/* Add the IP and MAC addresses to the ARP table if they are not
				already there - otherwise refresh the age of the existing
				entry. */
				if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8010294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010298:	2b11      	cmp	r3, #17
 801029a:	d007      	beq.n	80102ac <prvProcessIPPacket+0xd4>
					/* Refresh the ARP cache with the IP/MAC-address of the received
					packet. For UDP packets, this will be done later in
					xProcessReceivedUDPPacket(), as soon as it's know that the message
					will be handled.  This will prevent the ARP cache getting
					overwritten with the IP address of useless broadcast packets. */
					vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	1d9a      	adds	r2, r3, #6
 80102a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	4619      	mov	r1, r3
 80102a6:	4610      	mov	r0, r2
 80102a8:	f7fe fa22 	bl	800e6f0 <vARPRefreshCacheEntry>
				}
				switch( ucProtocol )
 80102ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80102b0:	2b06      	cmp	r3, #6
 80102b2:	d068      	beq.n	8010386 <prvProcessIPPacket+0x1ae>
 80102b4:	2b11      	cmp	r3, #17
 80102b6:	d01d      	beq.n	80102f4 <prvProcessIPPacket+0x11c>
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d000      	beq.n	80102be <prvProcessIPPacket+0xe6>
						}
						break;
#endif
					default	:
						/* Not a supported frame type. */
						break;
 80102bc:	e075      	b.n	80103aa <prvProcessIPPacket+0x1d2>
							if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	69db      	ldr	r3, [r3, #28]
 80102c2:	2b29      	cmp	r3, #41	; 0x29
 80102c4:	d912      	bls.n	80102ec <prvProcessIPPacket+0x114>
								ICMPPacket_t *pxICMPPacket = ipCAST_PTR_TO_TYPE_PTR( ICMPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	699b      	ldr	r3, [r3, #24]
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7ff f9af 	bl	800f62e <vCastPointerTo_ICMPPacket_t>
 80102d0:	60b8      	str	r0, [r7, #8]
								if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 80102d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d4:	691a      	ldr	r2, [r3, #16]
 80102d6:	4b38      	ldr	r3, [pc, #224]	; (80103b8 <prvProcessIPPacket+0x1e0>)
 80102d8:	695b      	ldr	r3, [r3, #20]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d164      	bne.n	80103a8 <prvProcessIPPacket+0x1d0>
									eReturn = prvProcessICMPPacket( pxICMPPacket );
 80102de:	68b8      	ldr	r0, [r7, #8]
 80102e0:	f000 f8c6 	bl	8010470 <prvProcessICMPPacket>
 80102e4:	4603      	mov	r3, r0
 80102e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						break;
 80102ea:	e05d      	b.n	80103a8 <prvProcessIPPacket+0x1d0>
								eReturn = eReleaseBuffer;
 80102ec:	2300      	movs	r3, #0
 80102ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						break;
 80102f2:	e059      	b.n	80103a8 <prvProcessIPPacket+0x1d0>
						const UDPPacket_t *pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	699b      	ldr	r3, [r3, #24]
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7ff f9a3 	bl	800f644 <vCastConstPointerTo_UDPPacket_t>
 80102fe:	61b8      	str	r0, [r7, #24]
							usLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength  );
 8010300:	69bb      	ldr	r3, [r7, #24]
 8010302:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010304:	b29b      	uxth	r3, r3
 8010306:	021b      	lsls	r3, r3, #8
 8010308:	b21a      	sxth	r2, r3
 801030a:	69bb      	ldr	r3, [r7, #24]
 801030c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801030e:	b29b      	uxth	r3, r3
 8010310:	0a1b      	lsrs	r3, r3, #8
 8010312:	b29b      	uxth	r3, r3
 8010314:	b21b      	sxth	r3, r3
 8010316:	4313      	orrs	r3, r2
 8010318:	b21b      	sxth	r3, r3
 801031a:	82fb      	strh	r3, [r7, #22]
							if ( ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) ) &&
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	69db      	ldr	r3, [r3, #28]
 8010320:	2b29      	cmp	r3, #41	; 0x29
 8010322:	d92a      	bls.n	801037a <prvProcessIPPacket+0x1a2>
 8010324:	8afb      	ldrh	r3, [r7, #22]
 8010326:	2b07      	cmp	r3, #7
 8010328:	d927      	bls.n	801037a <prvProcessIPPacket+0x1a2>
								uxPayloadSize_1 = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	69db      	ldr	r3, [r3, #28]
 801032e:	3b2a      	subs	r3, #42	; 0x2a
 8010330:	613b      	str	r3, [r7, #16]
								uxPayloadSize_2 = ( ( size_t ) usLength ) - sizeof( UDPHeader_t );
 8010332:	8afb      	ldrh	r3, [r7, #22]
 8010334:	3b08      	subs	r3, #8
 8010336:	60fb      	str	r3, [r7, #12]
								if( uxPayloadSize_1 > uxPayloadSize_2 )
 8010338:	693a      	ldr	r2, [r7, #16]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	429a      	cmp	r2, r3
 801033e:	d904      	bls.n	801034a <prvProcessIPPacket+0x172>
									pxNetworkBuffer->xDataLength = uxPayloadSize_2 + sizeof( UDPPacket_t );
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	61da      	str	r2, [r3, #28]
								pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801034e:	b29a      	uxth	r2, r3
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	841a      	strh	r2, [r3, #32]
								pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8010354:	69bb      	ldr	r3, [r7, #24]
 8010356:	f8d3 201a 	ldr.w	r2, [r3, #26]
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	615a      	str	r2, [r3, #20]
								if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 801035e:	69bb      	ldr	r3, [r7, #24]
 8010360:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010362:	b29b      	uxth	r3, r3
 8010364:	4619      	mov	r1, r3
 8010366:	6838      	ldr	r0, [r7, #0]
 8010368:	f005 ff22 	bl	80161b0 <xProcessReceivedUDPPacket>
 801036c:	4603      	mov	r3, r0
 801036e:	2b01      	cmp	r3, #1
 8010370:	d107      	bne.n	8010382 <prvProcessIPPacket+0x1aa>
									eReturn = eFrameConsumed;
 8010372:	2303      	movs	r3, #3
 8010374:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							{
 8010378:	e003      	b.n	8010382 <prvProcessIPPacket+0x1aa>
								eReturn = eReleaseBuffer;
 801037a:	2300      	movs	r3, #0
 801037c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						break;
 8010380:	e013      	b.n	80103aa <prvProcessIPPacket+0x1d2>
							{
 8010382:	bf00      	nop
						break;
 8010384:	e011      	b.n	80103aa <prvProcessIPPacket+0x1d2>
							if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8010386:	6838      	ldr	r0, [r7, #0]
 8010388:	f004 fb02 	bl	8014990 <xProcessReceivedTCPPacket>
 801038c:	4603      	mov	r3, r0
 801038e:	2b01      	cmp	r3, #1
 8010390:	d102      	bne.n	8010398 <prvProcessIPPacket+0x1c0>
								eReturn = eFrameConsumed;
 8010392:	2303      	movs	r3, #3
 8010394:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							xProcessedTCPMessage++;
 8010398:	4b08      	ldr	r3, [pc, #32]	; (80103bc <prvProcessIPPacket+0x1e4>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	3301      	adds	r3, #1
 801039e:	4a07      	ldr	r2, [pc, #28]	; (80103bc <prvProcessIPPacket+0x1e4>)
 80103a0:	6013      	str	r3, [r2, #0]
						break;
 80103a2:	e002      	b.n	80103aa <prvProcessIPPacket+0x1d2>
				}
			}
 80103a4:	bf00      	nop
 80103a6:	e000      	b.n	80103aa <prvProcessIPPacket+0x1d2>
						break;
 80103a8:	bf00      	nop
		}
	}

	return eReturn;
 80103aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3740      	adds	r7, #64	; 0x40
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop
 80103b8:	2400001c 	.word	0x2400001c
 80103bc:	240052c0 	.word	0x240052c0

080103c0 <prvProcessICMPEchoRequest>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
	{
 80103c0:	b480      	push	{r7}
 80103c2:	b087      	sub	sp, #28
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
	ICMPHeader_t *pxICMPHeader;
	IPHeader_t *pxIPHeader;
	uint16_t usRequest;

		pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	3322      	adds	r3, #34	; 0x22
 80103cc:	617b      	str	r3, [r7, #20]
		pxIPHeader = &( pxICMPPacket->xIPHeader );
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	330e      	adds	r3, #14
 80103d2:	613b      	str	r3, [r7, #16]

		/* The checksum can be checked here - but a ping reply should be
		returned even if the checksum is incorrect so the other end can
		tell that the ping was received - even if the ping reply contains
		invalid data. */
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	2200      	movs	r2, #0
 80103d8:	701a      	strb	r2, [r3, #0]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	68da      	ldr	r2, [r3, #12]
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 80103e2:	4b22      	ldr	r3, [pc, #136]	; (801046c <prvProcessICMPEchoRequest+0xac>)
 80103e4:	695a      	ldr	r2, [r3, #20]
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	60da      	str	r2, [r3, #12]
		has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
		usGenerateChecksum(). */

		/* due to compiler warning "integer operation result is out of range" */

		usRequest = ( uint16_t ) ( ( uint16_t )ipICMP_ECHO_REQUEST << 8 );
 80103ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80103ee:	81fb      	strh	r3, [r7, #14]

		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFU - usRequest ) )
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	885b      	ldrh	r3, [r3, #2]
 80103f4:	b29a      	uxth	r2, r3
 80103f6:	89fb      	ldrh	r3, [r7, #14]
 80103f8:	43db      	mvns	r3, r3
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	021b      	lsls	r3, r3, #8
 80103fe:	b299      	uxth	r1, r3
 8010400:	89f8      	ldrh	r0, [r7, #14]
 8010402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010406:	1a1b      	subs	r3, r3, r0
 8010408:	0a1b      	lsrs	r3, r3, #8
 801040a:	b29b      	uxth	r3, r3
 801040c:	430b      	orrs	r3, r1
 801040e:	b29b      	uxth	r3, r3
 8010410:	429a      	cmp	r2, r3
 8010412:	d312      	bcc.n	801043a <prvProcessICMPEchoRequest+0x7a>
		{
			pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest + 1U );
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	885b      	ldrh	r3, [r3, #2]
 8010418:	b29a      	uxth	r2, r3
 801041a:	89fb      	ldrh	r3, [r7, #14]
 801041c:	3301      	adds	r3, #1
 801041e:	b29b      	uxth	r3, r3
 8010420:	021b      	lsls	r3, r3, #8
 8010422:	b299      	uxth	r1, r3
 8010424:	89fb      	ldrh	r3, [r7, #14]
 8010426:	3301      	adds	r3, #1
 8010428:	0a1b      	lsrs	r3, r3, #8
 801042a:	b29b      	uxth	r3, r3
 801042c:	430b      	orrs	r3, r1
 801042e:	b29b      	uxth	r3, r3
 8010430:	4413      	add	r3, r2
 8010432:	b29a      	uxth	r2, r3
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	805a      	strh	r2, [r3, #2]
 8010438:	e010      	b.n	801045c <prvProcessICMPEchoRequest+0x9c>
		}
		else
		{
			pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest );
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	885b      	ldrh	r3, [r3, #2]
 801043e:	b29a      	uxth	r2, r3
 8010440:	89fb      	ldrh	r3, [r7, #14]
 8010442:	021b      	lsls	r3, r3, #8
 8010444:	b219      	sxth	r1, r3
 8010446:	89fb      	ldrh	r3, [r7, #14]
 8010448:	0a1b      	lsrs	r3, r3, #8
 801044a:	b29b      	uxth	r3, r3
 801044c:	b21b      	sxth	r3, r3
 801044e:	430b      	orrs	r3, r1
 8010450:	b21b      	sxth	r3, r3
 8010452:	b29b      	uxth	r3, r3
 8010454:	4413      	add	r3, r2
 8010456:	b29a      	uxth	r2, r3
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	805a      	strh	r2, [r3, #2]
		}
		return eReturnEthernetFrame;
 801045c:	2302      	movs	r3, #2
	}
 801045e:	4618      	mov	r0, r3
 8010460:	371c      	adds	r7, #28
 8010462:	46bd      	mov	sp, r7
 8010464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	2400001c 	.word	0x2400001c

08010470 <prvProcessICMPPacket>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
	{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8010478:	2300      	movs	r3, #0
 801047a:	73fb      	strb	r3, [r7, #15]

		iptraceICMP_PACKET_RECEIVED();
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010482:	2b00      	cmp	r3, #0
 8010484:	d008      	beq.n	8010498 <prvProcessICMPPacket+0x28>
 8010486:	2b08      	cmp	r3, #8
 8010488:	d000      	beq.n	801048c <prvProcessICMPPacket+0x1c>
				#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
				break;

			default	:
				/* Only ICMP echo packets are handled. */
				break;
 801048a:	e006      	b.n	801049a <prvProcessICMPPacket+0x2a>
					eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f7ff ff97 	bl	80103c0 <prvProcessICMPEchoRequest>
 8010492:	4603      	mov	r3, r0
 8010494:	73fb      	strb	r3, [r7, #15]
				break;
 8010496:	e000      	b.n	801049a <prvProcessICMPPacket+0x2a>
				break;
 8010498:	bf00      	nop
		}

		return eReturn;
 801049a:	7bfb      	ldrb	r3, [r7, #15]
	}
 801049c:	4618      	mov	r0, r3
 801049e:	3710      	adds	r7, #16
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}

080104a4 <xCheckSizeFields>:

#if( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 1 )
	/* Although the driver will take care of checksum calculations,
	the IP-task will still check if the length fields are OK. */
	static BaseType_t xCheckSizeFields( const uint8_t * const pucEthernetBuffer, size_t uxBufferLength )
	{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b08c      	sub	sp, #48	; 0x30
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
	UBaseType_t uxIPHeaderLength;
	const ProtocolPacket_t *pxProtPack;
	uint8_t ucProtocol;
	uint16_t usLength;
	uint16_t ucVersionHeaderLength;
	BaseType_t xLocation = 0;
 80104ae:	2300      	movs	r3, #0
 80104b0:	627b      	str	r3, [r7, #36]	; 0x24
	size_t uxMinimumLength;
	BaseType_t xResult = pdFAIL;
 80104b2:	2300      	movs	r3, #0
 80104b4:	62bb      	str	r3, [r7, #40]	; 0x28

		do
		{
			/* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
			if( uxBufferLength < sizeof( IPPacket_t ) )
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	2b21      	cmp	r3, #33	; 0x21
 80104ba:	d802      	bhi.n	80104c2 <xCheckSizeFields+0x1e>
			{
				xLocation = 1;
 80104bc:	2301      	movs	r3, #1
 80104be:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80104c0:	e07a      	b.n	80105b8 <xCheckSizeFields+0x114>
			}

			/* Map the buffer onto a IP-Packet struct to easily access the
			 * fields of the IP packet. */
			pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f7ff f8a8 	bl	800f618 <vCastConstPointerTo_IPPacket_t>
 80104c8:	6238      	str	r0, [r7, #32]

			ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 80104ca:	6a3b      	ldr	r3, [r7, #32]
 80104cc:	7b9b      	ldrb	r3, [r3, #14]
 80104ce:	83fb      	strh	r3, [r7, #30]
			/* Test if the length of the IP-header is between 20 and 60 bytes,
			and if the IP-version is 4. */
			if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 80104d0:	8bfb      	ldrh	r3, [r7, #30]
 80104d2:	2b44      	cmp	r3, #68	; 0x44
 80104d4:	d902      	bls.n	80104dc <xCheckSizeFields+0x38>
 80104d6:	8bfb      	ldrh	r3, [r7, #30]
 80104d8:	2b4f      	cmp	r3, #79	; 0x4f
 80104da:	d902      	bls.n	80104e2 <xCheckSizeFields+0x3e>
				( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
			{
				xLocation = 2;
 80104dc:	2302      	movs	r3, #2
 80104de:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80104e0:	e06a      	b.n	80105b8 <xCheckSizeFields+0x114>
			}
			ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
 80104e2:	8bfb      	ldrh	r3, [r7, #30]
 80104e4:	009b      	lsls	r3, r3, #2
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80104ec:	83fb      	strh	r3, [r7, #30]
			uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 80104ee:	8bfb      	ldrh	r3, [r7, #30]
 80104f0:	61bb      	str	r3, [r7, #24]

			/* Check if the complete IP-header is transferred. */
			if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	330e      	adds	r3, #14
 80104f6:	683a      	ldr	r2, [r7, #0]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d202      	bcs.n	8010502 <xCheckSizeFields+0x5e>
			{
				xLocation = 3;
 80104fc:	2303      	movs	r3, #3
 80104fe:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8010500:	e05a      	b.n	80105b8 <xCheckSizeFields+0x114>
			}
			/* Check if the complete IP-header plus protocol data have been transferred: */
			usLength = pxIPPacket->xIPHeader.usLength;
 8010502:	6a3b      	ldr	r3, [r7, #32]
 8010504:	7c1a      	ldrb	r2, [r3, #16]
 8010506:	7c5b      	ldrb	r3, [r3, #17]
 8010508:	021b      	lsls	r3, r3, #8
 801050a:	4313      	orrs	r3, r2
 801050c:	82fb      	strh	r3, [r7, #22]
			usLength = FreeRTOS_ntohs( usLength );
 801050e:	8afb      	ldrh	r3, [r7, #22]
 8010510:	021b      	lsls	r3, r3, #8
 8010512:	b21a      	sxth	r2, r3
 8010514:	8afb      	ldrh	r3, [r7, #22]
 8010516:	0a1b      	lsrs	r3, r3, #8
 8010518:	b29b      	uxth	r3, r3
 801051a:	b21b      	sxth	r3, r3
 801051c:	4313      	orrs	r3, r2
 801051e:	b21b      	sxth	r3, r3
 8010520:	82fb      	strh	r3, [r7, #22]
			if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 8010522:	8afb      	ldrh	r3, [r7, #22]
 8010524:	330e      	adds	r3, #14
 8010526:	683a      	ldr	r2, [r7, #0]
 8010528:	429a      	cmp	r2, r3
 801052a:	d202      	bcs.n	8010532 <xCheckSizeFields+0x8e>
			{
				xLocation = 4;
 801052c:	2304      	movs	r3, #4
 801052e:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8010530:	e042      	b.n	80105b8 <xCheckSizeFields+0x114>
			}

			/* Identify the next protocol. */
			ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8010532:	6a3b      	ldr	r3, [r7, #32]
 8010534:	7ddb      	ldrb	r3, [r3, #23]
 8010536:	757b      	strb	r3, [r7, #21]
			and IP headers incorrectly aligned. However, either way, the "third"
			protocol (Layer 3 or 4) header will be aligned, which is the convenience
			of this calculation. */
			/* Map the Buffer onto the Protocol Packet struct for easy access to the
			 * struct fields. */
			pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	3b14      	subs	r3, #20
 801053c:	687a      	ldr	r2, [r7, #4]
 801053e:	4413      	add	r3, r2
 8010540:	4618      	mov	r0, r3
 8010542:	f7ff f895 	bl	800f670 <vCastConstPointerTo_ProtocolPacket_t>
 8010546:	6138      	str	r0, [r7, #16]

			/* Switch on the Layer 3/4 protocol. */
			if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8010548:	7d7b      	ldrb	r3, [r7, #21]
 801054a:	2b11      	cmp	r3, #17
 801054c:	d103      	bne.n	8010556 <xCheckSizeFields+0xb2>
			{
				/* Expect at least a complete UDP header. */
				uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 801054e:	69bb      	ldr	r3, [r7, #24]
 8010550:	3316      	adds	r3, #22
 8010552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010554:	e013      	b.n	801057e <xCheckSizeFields+0xda>
			}
			else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 8010556:	7d7b      	ldrb	r3, [r7, #21]
 8010558:	2b06      	cmp	r3, #6
 801055a:	d103      	bne.n	8010564 <xCheckSizeFields+0xc0>
			{
				uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 801055c:	69bb      	ldr	r3, [r7, #24]
 801055e:	3322      	adds	r3, #34	; 0x22
 8010560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010562:	e00c      	b.n	801057e <xCheckSizeFields+0xda>
			}
			else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8010564:	7d7b      	ldrb	r3, [r7, #21]
 8010566:	2b01      	cmp	r3, #1
 8010568:	d002      	beq.n	8010570 <xCheckSizeFields+0xcc>
 801056a:	7d7b      	ldrb	r3, [r7, #21]
 801056c:	2b02      	cmp	r3, #2
 801056e:	d103      	bne.n	8010578 <xCheckSizeFields+0xd4>
					 ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
			{
				uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER;
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	3316      	adds	r3, #22
 8010574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010576:	e002      	b.n	801057e <xCheckSizeFields+0xda>
			}
			else
			{
				/* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
				xLocation = 5;
 8010578:	2305      	movs	r3, #5
 801057a:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 801057c:	e01c      	b.n	80105b8 <xCheckSizeFields+0x114>
			}
			if( uxBufferLength < uxMinimumLength )
 801057e:	683a      	ldr	r2, [r7, #0]
 8010580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010582:	429a      	cmp	r2, r3
 8010584:	d202      	bcs.n	801058c <xCheckSizeFields+0xe8>
			{
				xLocation = 6;
 8010586:	2306      	movs	r3, #6
 8010588:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 801058a:	e015      	b.n	80105b8 <xCheckSizeFields+0x114>
			}

			uxLength = ( size_t ) usLength;
 801058c:	8afb      	ldrh	r3, [r7, #22]
 801058e:	60fb      	str	r3, [r7, #12]
			uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	b29b      	uxth	r3, r3
 8010594:	461a      	mov	r2, r3
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	1a9b      	subs	r3, r3, r2
 801059a:	60fb      	str	r3, [r7, #12]

			if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2b07      	cmp	r3, #7
 80105a0:	d905      	bls.n	80105ae <xCheckSizeFields+0x10a>
				( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 80105a2:	69bb      	ldr	r3, [r7, #24]
 80105a4:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
			if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 80105a8:	68fa      	ldr	r2, [r7, #12]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d902      	bls.n	80105b4 <xCheckSizeFields+0x110>
			{
				/* For incoming packets, the length is out of bound: either
				too short or too long. For outgoing packets, there is a 
				serious problem with the format/length. */
				xLocation = 7;
 80105ae:	2307      	movs	r3, #7
 80105b0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80105b2:	e001      	b.n	80105b8 <xCheckSizeFields+0x114>
			}
			xResult = pdPASS;
 80105b4:	2301      	movs	r3, #1
 80105b6:	62bb      	str	r3, [r7, #40]	; 0x28
			 * rule 2.2 as the value assigned to xLocation will not be used. The below statement uses
			 * the variable without modifying the logic of the source. */
			( void ) xLocation;
		}

		return xResult;
 80105b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
	}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3730      	adds	r7, #48	; 0x30
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
	...

080105c4 <usGenerateProtocolChecksum>:
#endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 1 ) */
/*-----------------------------------------------------------*/

uint16_t usGenerateProtocolChecksum( const uint8_t * const pucEthernetBuffer, size_t uxBufferLength, BaseType_t xOutgoingPacket )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b08e      	sub	sp, #56	; 0x38
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	60b9      	str	r1, [r7, #8]
 80105ce:	607a      	str	r2, [r7, #4]
#endif
uint16_t usLength;
uint16_t ucVersionHeaderLength;


BaseType_t location = 0;
 80105d0:	2300      	movs	r3, #0
 80105d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Introduce a do-while loop to allow use of break statements.
	 * Note: MISRA prohibits use of 'goto', thus replaced with breaks. */
	do
	{
		/* Check for minimum packet size. */
		if( uxBufferLength < sizeof( IPPacket_t ) )
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	2b21      	cmp	r3, #33	; 0x21
 80105d8:	d805      	bhi.n	80105e6 <usGenerateProtocolChecksum+0x22>
		{
			usChecksum = ipINVALID_LENGTH;
 80105da:	f241 2334 	movw	r3, #4660	; 0x1234
 80105de:	86fb      	strh	r3, [r7, #54]	; 0x36
			location = 1;
 80105e0:	2301      	movs	r3, #1
 80105e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 80105e4:	e105      	b.n	80107f2 <usGenerateProtocolChecksum+0x22e>
		}

		/* Parse the packet length. */
		pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
 80105e6:	68f8      	ldr	r0, [r7, #12]
 80105e8:	f7ff f816 	bl	800f618 <vCastConstPointerTo_IPPacket_t>
 80105ec:	62b8      	str	r0, [r7, #40]	; 0x28

		/* Per https://tools.ietf.org/html/rfc791, the four-bit Internet Header
		Length field contains the length of the internet header in 32-bit words. */
		ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 80105ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f0:	7b9b      	ldrb	r3, [r3, #14]
 80105f2:	84fb      	strh	r3, [r7, #38]	; 0x26
		ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
 80105f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80105f6:	009b      	lsls	r3, r3, #2
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80105fe:	84fb      	strh	r3, [r7, #38]	; 0x26
		uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 8010600:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010602:	623b      	str	r3, [r7, #32]

		/* Check for minimum packet size. */
		if( uxBufferLength < ( sizeof( IPPacket_t ) + ( uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ) ) )
 8010604:	6a3b      	ldr	r3, [r7, #32]
 8010606:	330e      	adds	r3, #14
 8010608:	68ba      	ldr	r2, [r7, #8]
 801060a:	429a      	cmp	r2, r3
 801060c:	d205      	bcs.n	801061a <usGenerateProtocolChecksum+0x56>
		{
			usChecksum = ipINVALID_LENGTH;
 801060e:	f241 2334 	movw	r3, #4660	; 0x1234
 8010612:	86fb      	strh	r3, [r7, #54]	; 0x36
			location = 2;
 8010614:	2302      	movs	r3, #2
 8010616:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8010618:	e0eb      	b.n	80107f2 <usGenerateProtocolChecksum+0x22e>
		}
		usLength = pxIPPacket->xIPHeader.usLength;
 801061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061c:	7c1a      	ldrb	r2, [r3, #16]
 801061e:	7c5b      	ldrb	r3, [r3, #17]
 8010620:	021b      	lsls	r3, r3, #8
 8010622:	4313      	orrs	r3, r2
 8010624:	83fb      	strh	r3, [r7, #30]
		usLength = FreeRTOS_ntohs( usLength );
 8010626:	8bfb      	ldrh	r3, [r7, #30]
 8010628:	021b      	lsls	r3, r3, #8
 801062a:	b21a      	sxth	r2, r3
 801062c:	8bfb      	ldrh	r3, [r7, #30]
 801062e:	0a1b      	lsrs	r3, r3, #8
 8010630:	b29b      	uxth	r3, r3
 8010632:	b21b      	sxth	r3, r3
 8010634:	4313      	orrs	r3, r2
 8010636:	b21b      	sxth	r3, r3
 8010638:	83fb      	strh	r3, [r7, #30]
		if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 801063a:	8bfb      	ldrh	r3, [r7, #30]
 801063c:	330e      	adds	r3, #14
 801063e:	68ba      	ldr	r2, [r7, #8]
 8010640:	429a      	cmp	r2, r3
 8010642:	d205      	bcs.n	8010650 <usGenerateProtocolChecksum+0x8c>
		{
			usChecksum = ipINVALID_LENGTH;
 8010644:	f241 2334 	movw	r3, #4660	; 0x1234
 8010648:	86fb      	strh	r3, [r7, #54]	; 0x36
			location = 3;
 801064a:	2303      	movs	r3, #3
 801064c:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 801064e:	e0d0      	b.n	80107f2 <usGenerateProtocolChecksum+0x22e>
		}

		/* Identify the next protocol. */
		ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8010650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010652:	7ddb      	ldrb	r3, [r3, #23]
 8010654:	777b      	strb	r3, [r7, #29]
		/* N.B., if this IP packet header includes Options, then the following
		assignment results in a pointer into the protocol packet with the Ethernet
		and IP headers incorrectly aligned. However, either way, the "third"
		protocol (Layer 3 or 4) header will be aligned, which is the convenience
		of this calculation. */
		pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 8010656:	6a3b      	ldr	r3, [r7, #32]
 8010658:	3b14      	subs	r3, #20
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	4413      	add	r3, r2
 801065e:	4618      	mov	r0, r3
 8010660:	f7ff f806 	bl	800f670 <vCastConstPointerTo_ProtocolPacket_t>
 8010664:	61b8      	str	r0, [r7, #24]

		/* Switch on the Layer 3/4 protocol. */
		if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8010666:	7f7b      	ldrb	r3, [r7, #29]
 8010668:	2b11      	cmp	r3, #17
 801066a:	d10e      	bne.n	801068a <usGenerateProtocolChecksum+0xc6>
		{
			if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER ) )
 801066c:	6a3b      	ldr	r3, [r7, #32]
 801066e:	3316      	adds	r3, #22
 8010670:	68ba      	ldr	r2, [r7, #8]
 8010672:	429a      	cmp	r2, r3
 8010674:	d205      	bcs.n	8010682 <usGenerateProtocolChecksum+0xbe>
			{
				usChecksum = ipINVALID_LENGTH;
 8010676:	f241 2334 	movw	r3, #4660	; 0x1234
 801067a:	86fb      	strh	r3, [r7, #54]	; 0x36
				location = 4;
 801067c:	2304      	movs	r3, #4
 801067e:	62fb      	str	r3, [r7, #44]	; 0x2c
				break;
 8010680:	e0b7      	b.n	80107f2 <usGenerateProtocolChecksum+0x22e>
			}

			pusChecksum = ( uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 8010682:	69bb      	ldr	r3, [r7, #24]
 8010684:	3328      	adds	r3, #40	; 0x28
 8010686:	633b      	str	r3, [r7, #48]	; 0x30
 8010688:	e02c      	b.n	80106e4 <usGenerateProtocolChecksum+0x120>
			{
				pcType = "UDP";
			}
			#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
		}
		else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 801068a:	7f7b      	ldrb	r3, [r7, #29]
 801068c:	2b06      	cmp	r3, #6
 801068e:	d10e      	bne.n	80106ae <usGenerateProtocolChecksum+0xea>
		{
			if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER ) )
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	3322      	adds	r3, #34	; 0x22
 8010694:	68ba      	ldr	r2, [r7, #8]
 8010696:	429a      	cmp	r2, r3
 8010698:	d205      	bcs.n	80106a6 <usGenerateProtocolChecksum+0xe2>
			{
				usChecksum = ipINVALID_LENGTH;
 801069a:	f241 2334 	movw	r3, #4660	; 0x1234
 801069e:	86fb      	strh	r3, [r7, #54]	; 0x36
				location = 5;
 80106a0:	2305      	movs	r3, #5
 80106a2:	62fb      	str	r3, [r7, #44]	; 0x2c
				break;
 80106a4:	e0a5      	b.n	80107f2 <usGenerateProtocolChecksum+0x22e>
			}

			pusChecksum = ( uint16_t * ) ( &( pxProtPack->xTCPPacket.xTCPHeader.usChecksum ) );
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	3332      	adds	r3, #50	; 0x32
 80106aa:	633b      	str	r3, [r7, #48]	; 0x30
 80106ac:	e01a      	b.n	80106e4 <usGenerateProtocolChecksum+0x120>
			{
				pcType = "TCP";
			}
			#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
		}
		else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 80106ae:	7f7b      	ldrb	r3, [r7, #29]
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d002      	beq.n	80106ba <usGenerateProtocolChecksum+0xf6>
 80106b4:	7f7b      	ldrb	r3, [r7, #29]
 80106b6:	2b02      	cmp	r3, #2
 80106b8:	d10e      	bne.n	80106d8 <usGenerateProtocolChecksum+0x114>
				( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
		{
			if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER ) )
 80106ba:	6a3b      	ldr	r3, [r7, #32]
 80106bc:	3316      	adds	r3, #22
 80106be:	68ba      	ldr	r2, [r7, #8]
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d205      	bcs.n	80106d0 <usGenerateProtocolChecksum+0x10c>
			{
				usChecksum = ipINVALID_LENGTH;
 80106c4:	f241 2334 	movw	r3, #4660	; 0x1234
 80106c8:	86fb      	strh	r3, [r7, #54]	; 0x36
				location = 6;
 80106ca:	2306      	movs	r3, #6
 80106cc:	62fb      	str	r3, [r7, #44]	; 0x2c
				break;
 80106ce:	e090      	b.n	80107f2 <usGenerateProtocolChecksum+0x22e>
			}

			pusChecksum = ( uint16_t * ) ( &( pxProtPack->xICMPPacket.xICMPHeader.usChecksum ) );
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	3324      	adds	r3, #36	; 0x24
 80106d4:	633b      	str	r3, [r7, #48]	; 0x30
 80106d6:	e005      	b.n	80106e4 <usGenerateProtocolChecksum+0x120>
			#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */
		}
		else
		{
			/* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
			usChecksum = ipUNHANDLED_PROTOCOL;
 80106d8:	f244 3321 	movw	r3, #17185	; 0x4321
 80106dc:	86fb      	strh	r3, [r7, #54]	; 0x36
			location = 7;
 80106de:	2307      	movs	r3, #7
 80106e0:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 80106e2:	e086      	b.n	80107f2 <usGenerateProtocolChecksum+0x22e>
		}

		/* The protocol and checksum field have been identified. Check the direction
		of the packet. */
		if( xOutgoingPacket != pdFALSE )
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d003      	beq.n	80106f2 <usGenerateProtocolChecksum+0x12e>
		{
			/* This is an outgoing packet. Before calculating the checksum, set it
			to zero. */
			*( pusChecksum ) = 0U;
 80106ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ec:	2200      	movs	r2, #0
 80106ee:	801a      	strh	r2, [r3, #0]
 80106f0:	e014      	b.n	801071c <usGenerateProtocolChecksum+0x158>
		}
		else if( ( *pusChecksum == 0U ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 80106f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f4:	881b      	ldrh	r3, [r3, #0]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d110      	bne.n	801071c <usGenerateProtocolChecksum+0x158>
 80106fa:	7f7b      	ldrb	r3, [r7, #29]
 80106fc:	2b11      	cmp	r3, #17
 80106fe:	d10d      	bne.n	801071c <usGenerateProtocolChecksum+0x158>
		{
			#if( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
			{
				/* Sender hasn't set the checksum, drop the packet because
				ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is not set. */
				usChecksum = ipWRONG_CRC;
 8010700:	2300      	movs	r3, #0
 8010702:	86fb      	strh	r3, [r7, #54]	; 0x36
				#if( ipconfigHAS_PRINTF != 0 )
				{
				static BaseType_t xCount = 0;

					if( xCount < 5 )
 8010704:	4b3d      	ldr	r3, [pc, #244]	; (80107fc <usGenerateProtocolChecksum+0x238>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	2b04      	cmp	r3, #4
 801070a:	dc04      	bgt.n	8010716 <usGenerateProtocolChecksum+0x152>
					{
						FreeRTOS_printf( ( "usGenerateProtocolChecksum: UDP packet from %xip without CRC dropped\n",
							FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
						xCount++;
 801070c:	4b3b      	ldr	r3, [pc, #236]	; (80107fc <usGenerateProtocolChecksum+0x238>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	3301      	adds	r3, #1
 8010712:	4a3a      	ldr	r2, [pc, #232]	; (80107fc <usGenerateProtocolChecksum+0x238>)
 8010714:	6013      	str	r3, [r2, #0]
			{
				/* Sender hasn't set the checksum, no use to calculate it. */
				usChecksum = ipCORRECT_CRC;
			}
			#endif
			location = 8;
 8010716:	2308      	movs	r3, #8
 8010718:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 801071a:	e06a      	b.n	80107f2 <usGenerateProtocolChecksum+0x22e>
		else
		{
			/* Other incoming packet than UDP. */
		}

		usLength = pxIPPacket->xIPHeader.usLength;
 801071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801071e:	7c1a      	ldrb	r2, [r3, #16]
 8010720:	7c5b      	ldrb	r3, [r3, #17]
 8010722:	021b      	lsls	r3, r3, #8
 8010724:	4313      	orrs	r3, r2
 8010726:	83fb      	strh	r3, [r7, #30]
		usLength = FreeRTOS_ntohs( usLength );
 8010728:	8bfb      	ldrh	r3, [r7, #30]
 801072a:	021b      	lsls	r3, r3, #8
 801072c:	b21a      	sxth	r2, r3
 801072e:	8bfb      	ldrh	r3, [r7, #30]
 8010730:	0a1b      	lsrs	r3, r3, #8
 8010732:	b29b      	uxth	r3, r3
 8010734:	b21b      	sxth	r3, r3
 8010736:	4313      	orrs	r3, r2
 8010738:	b21b      	sxth	r3, r3
 801073a:	83fb      	strh	r3, [r7, #30]
		ulLength = ( uint32_t ) usLength;
 801073c:	8bfb      	ldrh	r3, [r7, #30]
 801073e:	617b      	str	r3, [r7, #20]
		ulLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally minus 20 */
 8010740:	6a3b      	ldr	r3, [r7, #32]
 8010742:	b29b      	uxth	r3, r3
 8010744:	461a      	mov	r2, r3
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	1a9b      	subs	r3, r3, r2
 801074a:	617b      	str	r3, [r7, #20]

		if( ( ulLength < ( ( uint32_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	2b07      	cmp	r3, #7
 8010750:	d905      	bls.n	801075e <usGenerateProtocolChecksum+0x19a>
			( ulLength > ( ( uint32_t ) ipconfigNETWORK_MTU - ( uint32_t ) uxIPHeaderLength ) ) )
 8010752:	6a3b      	ldr	r3, [r7, #32]
 8010754:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
		if( ( ulLength < ( ( uint32_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8010758:	697a      	ldr	r2, [r7, #20]
 801075a:	429a      	cmp	r2, r3
 801075c:	d905      	bls.n	801076a <usGenerateProtocolChecksum+0x1a6>

			/* Again, in a 16-bit return value there is no space to indicate an
			error.  For incoming packets, 0x1234 will cause dropping of the packet.
			For outgoing packets, there is a serious problem with the
			format/length */
			usChecksum = ipINVALID_LENGTH;
 801075e:	f241 2334 	movw	r3, #4660	; 0x1234
 8010762:	86fb      	strh	r3, [r7, #54]	; 0x36
			location = 9;
 8010764:	2309      	movs	r3, #9
 8010766:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8010768:	e043      	b.n	80107f2 <usGenerateProtocolChecksum+0x22e>
		}
		if( ucProtocol <= ( uint8_t ) ipPROTOCOL_IGMP )
 801076a:	7f7b      	ldrb	r3, [r7, #29]
 801076c:	2b02      	cmp	r3, #2
 801076e:	d80a      	bhi.n	8010786 <usGenerateProtocolChecksum+0x1c2>
		{
			/* ICMP/IGMP do not have a pseudo header for CRC-calculation. */
			usChecksum = ( uint16_t )
				( ~usGenerateChecksum( 0U,
					( const uint8_t * ) &( pxProtPack->xTCPPacket.xTCPHeader ), ( size_t ) ulLength ) );
 8010770:	69bb      	ldr	r3, [r7, #24]
 8010772:	3322      	adds	r3, #34	; 0x22
				( ~usGenerateChecksum( 0U,
 8010774:	697a      	ldr	r2, [r7, #20]
 8010776:	4619      	mov	r1, r3
 8010778:	2000      	movs	r0, #0
 801077a:	f000 f841 	bl	8010800 <usGenerateChecksum>
 801077e:	4603      	mov	r3, r0
			usChecksum = ( uint16_t )
 8010780:	43db      	mvns	r3, r3
 8010782:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010784:	e012      	b.n	80107ac <usGenerateProtocolChecksum+0x1e8>
		}
		else
		{
			/* For UDP and TCP, sum the pseudo header, i.e. IP protocol + length
			fields */
			usChecksum = ( uint16_t ) ( ulLength + ( ( uint16_t ) ucProtocol ) );
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	b29a      	uxth	r2, r3
 801078a:	7f7b      	ldrb	r3, [r7, #29]
 801078c:	b29b      	uxth	r3, r3
 801078e:	4413      	add	r3, r2
 8010790:	86fb      	strh	r3, [r7, #54]	; 0x36

			/* And then continue at the IPv4 source and destination addresses. */
			usChecksum = ( uint16_t )
					( ~usGenerateChecksum( usChecksum,
										   ipPOINTER_CAST( const uint8_t *, &( pxIPPacket->xIPHeader.ulSourceIPAddress ) ),
 8010792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010794:	f103 011a 	add.w	r1, r3, #26
										   ( size_t )( ( 2U * ipSIZE_OF_IPv4_ADDRESS ) + ulLength ) ) );
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	f103 0208 	add.w	r2, r3, #8
					( ~usGenerateChecksum( usChecksum,
 801079e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80107a0:	4618      	mov	r0, r3
 80107a2:	f000 f82d 	bl	8010800 <usGenerateChecksum>
 80107a6:	4603      	mov	r3, r0
			usChecksum = ( uint16_t )
 80107a8:	43db      	mvns	r3, r3
 80107aa:	86fb      	strh	r3, [r7, #54]	; 0x36
			/* Sum TCP header and data. */
		}

		if( xOutgoingPacket == pdFALSE )
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d106      	bne.n	80107c0 <usGenerateProtocolChecksum+0x1fc>
		{
			/* This is in incoming packet. If the CRC is correct, it should be zero. */
			if( usChecksum == 0U )
 80107b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d10c      	bne.n	80107d2 <usGenerateProtocolChecksum+0x20e>
			{
				usChecksum = ( uint16_t )ipCORRECT_CRC;
 80107b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80107bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80107be:	e008      	b.n	80107d2 <usGenerateProtocolChecksum+0x20e>
			}
		}
		else
		{
			if( ( usChecksum == 0U ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 80107c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d105      	bne.n	80107d2 <usGenerateProtocolChecksum+0x20e>
 80107c6:	7f7b      	ldrb	r3, [r7, #29]
 80107c8:	2b11      	cmp	r3, #17
 80107ca:	d102      	bne.n	80107d2 <usGenerateProtocolChecksum+0x20e>
						FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: crc swap: %04X\n", pcType, usChecksum ) );
					}
				}
				#endif	/* ipconfigHAS_DEBUG_PRINTF != 0 */

				usChecksum = ( uint16_t )0xffffu;
 80107cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80107d0:	86fb      	strh	r3, [r7, #54]	; 0x36
			}
		}
		usChecksum = FreeRTOS_htons( usChecksum );
 80107d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80107d4:	021b      	lsls	r3, r3, #8
 80107d6:	b21a      	sxth	r2, r3
 80107d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80107da:	0a1b      	lsrs	r3, r3, #8
 80107dc:	b29b      	uxth	r3, r3
 80107de:	b21b      	sxth	r3, r3
 80107e0:	4313      	orrs	r3, r2
 80107e2:	b21b      	sxth	r3, r3
 80107e4:	86fb      	strh	r3, [r7, #54]	; 0x36

		if( xOutgoingPacket != pdFALSE )
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d002      	beq.n	80107f2 <usGenerateProtocolChecksum+0x22e>
		{
			*( pusChecksum ) = usChecksum;
 80107ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80107f0:	801a      	strh	r2, [r3, #0]
		 * rule 2.2 as the value assigned to 'location' will not be used. The below statement uses
		 * the variable without modifying the logic of the source. */
		( void ) location;
	}

	return usChecksum;
 80107f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3738      	adds	r7, #56	; 0x38
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	24005310 	.word	0x24005310

08010800 <usGenerateChecksum>:
 *	 method should process. The method's memory iterator is initialized to this value.
 *   uxDataLengthBytes: This argument contains the number of bytes that this method
 *	 should process.
 */
uint16_t usGenerateChecksum( uint16_t usSum, const uint8_t * pucNextData, size_t uxByteCount )
{
 8010800:	b480      	push	{r7}
 8010802:	b08f      	sub	sp, #60	; 0x3c
 8010804:	af00      	add	r7, sp, #0
 8010806:	4603      	mov	r3, r0
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	607a      	str	r2, [r7, #4]
 801080c:	81fb      	strh	r3, [r7, #14]
/* MISRA/PC-lint doesn't like the use of unions. Here, they are a great
aid though to optimise the calculations. */
xUnion32 xSum2, xSum, xTerm;
xUnionPtr xSource;
xUnionPtr xLastSource;
uint32_t ulAlignBits, ulCarry = 0UL;
 801080e:	2300      	movs	r3, #0
 8010810:	637b      	str	r3, [r7, #52]	; 0x34
uint16_t usTemp;
size_t uxDataLengthBytes = uxByteCount;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	633b      	str	r3, [r7, #48]	; 0x30
	/* Small MCUs often spend up to 30% of the time doing checksum calculations
	This function is optimised for 32-bit CPUs; Each time it will try to fetch
	32-bits, sums it with an accumulator and counts the number of carries. */

	/* Swap the input (little endian platform only). */
	usTemp = FreeRTOS_ntohs( usSum );
 8010816:	89fb      	ldrh	r3, [r7, #14]
 8010818:	021b      	lsls	r3, r3, #8
 801081a:	b21a      	sxth	r2, r3
 801081c:	89fb      	ldrh	r3, [r7, #14]
 801081e:	0a1b      	lsrs	r3, r3, #8
 8010820:	b29b      	uxth	r3, r3
 8010822:	b21b      	sxth	r3, r3
 8010824:	4313      	orrs	r3, r2
 8010826:	b21b      	sxth	r3, r3
 8010828:	85fb      	strh	r3, [r7, #46]	; 0x2e
	xSum.u32 = ( uint32_t ) usTemp;
 801082a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801082c:	623b      	str	r3, [r7, #32]
	xTerm.u32 = 0UL;
 801082e:	2300      	movs	r3, #0
 8010830:	61fb      	str	r3, [r7, #28]

	xSource.u8ptr = ipPOINTER_CAST( uint8_t *, pucNextData );
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	61bb      	str	r3, [r7, #24]
	/* coverity[misra_c_2012_rule_11_4_violation] */
	/* The object pointer expression "pucNextData" of type "uint8_t const *" is cast to an integer type "unsigned int". */
	ulAlignBits = ( ( ( uint32_t ) pucNextData ) & 0x03U ); /*lint !e9078 !e923*/	/* gives 0, 1, 2, or 3 */
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	f003 0303 	and.w	r3, r3, #3
 801083c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* If byte (8-bit) aligned... */
	if( ( ( ulAlignBits & 1UL ) != 0UL ) && ( uxDataLengthBytes >= ( size_t ) 1 ) )
 801083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010840:	f003 0301 	and.w	r3, r3, #1
 8010844:	2b00      	cmp	r3, #0
 8010846:	d00b      	beq.n	8010860 <usGenerateChecksum+0x60>
 8010848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084a:	2b00      	cmp	r3, #0
 801084c:	d008      	beq.n	8010860 <usGenerateChecksum+0x60>
	{
		xTerm.u8[ 1 ] = *( xSource.u8ptr );
 801084e:	69bb      	ldr	r3, [r7, #24]
 8010850:	781b      	ldrb	r3, [r3, #0]
 8010852:	777b      	strb	r3, [r7, #29]
		xSource.u8ptr++;
 8010854:	69bb      	ldr	r3, [r7, #24]
 8010856:	3301      	adds	r3, #1
 8010858:	61bb      	str	r3, [r7, #24]
		uxDataLengthBytes--;
 801085a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085c:	3b01      	subs	r3, #1
 801085e:	633b      	str	r3, [r7, #48]	; 0x30
		/* Now xSource is word (16-bit) aligned. */
	}

	/* If half-word (16-bit) aligned... */
	if( ( ( ulAlignBits == 1U ) || ( ulAlignBits == 2U ) ) && ( uxDataLengthBytes >= 2U ) )
 8010860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010862:	2b01      	cmp	r3, #1
 8010864:	d002      	beq.n	801086c <usGenerateChecksum+0x6c>
 8010866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010868:	2b02      	cmp	r3, #2
 801086a:	d10d      	bne.n	8010888 <usGenerateChecksum+0x88>
 801086c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086e:	2b01      	cmp	r3, #1
 8010870:	d90a      	bls.n	8010888 <usGenerateChecksum+0x88>
	{
		xSum.u32 += *(xSource.u16ptr);
 8010872:	6a3b      	ldr	r3, [r7, #32]
 8010874:	69ba      	ldr	r2, [r7, #24]
 8010876:	8812      	ldrh	r2, [r2, #0]
 8010878:	4413      	add	r3, r2
 801087a:	623b      	str	r3, [r7, #32]
		xSource.u16ptr++;
 801087c:	69bb      	ldr	r3, [r7, #24]
 801087e:	3302      	adds	r3, #2
 8010880:	61bb      	str	r3, [r7, #24]
		uxDataLengthBytes -= 2U;
 8010882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010884:	3b02      	subs	r3, #2
 8010886:	633b      	str	r3, [r7, #48]	; 0x30
		/* Now xSource is word (32-bit) aligned. */
	}

	/* Word (32-bit) aligned, do the most part. */
	xLastSource.u32ptr = ( xSource.u32ptr + ( uxDataLengthBytes / 4U ) ) - 3U;
 8010888:	69ba      	ldr	r2, [r7, #24]
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	f023 0303 	bic.w	r3, r3, #3
 8010890:	3b0c      	subs	r3, #12
 8010892:	4413      	add	r3, r2
 8010894:	617b      	str	r3, [r7, #20]

	/* In this loop, four 32-bit additions will be done, in total 16 bytes.
	Indexing with constants (0,1,2,3) gives faster code than using
	post-increments. */
	while( xSource.u32ptr < xLastSource.u32ptr )
 8010896:	e035      	b.n	8010904 <usGenerateChecksum+0x104>
	{
		/* Use a secondary Sum2, just to see if the addition produced an
		overflow. */
		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 0 ];
 8010898:	6a3a      	ldr	r2, [r7, #32]
 801089a:	69bb      	ldr	r3, [r7, #24]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	4413      	add	r3, r2
 80108a0:	627b      	str	r3, [r7, #36]	; 0x24
		if( xSum2.u32 < xSum.u32 )
 80108a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108a4:	6a3b      	ldr	r3, [r7, #32]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d202      	bcs.n	80108b0 <usGenerateChecksum+0xb0>
		{
			ulCarry++;
 80108aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ac:	3301      	adds	r3, #1
 80108ae:	637b      	str	r3, [r7, #52]	; 0x34
		}

		/* Now add the secondary sum to the major sum, and remember if there was
		a carry. */
		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 1 ];
 80108b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108b2:	69bb      	ldr	r3, [r7, #24]
 80108b4:	3304      	adds	r3, #4
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4413      	add	r3, r2
 80108ba:	623b      	str	r3, [r7, #32]
		if( xSum2.u32 > xSum.u32 )
 80108bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108be:	6a3b      	ldr	r3, [r7, #32]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d902      	bls.n	80108ca <usGenerateChecksum+0xca>
		{
			ulCarry++;
 80108c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c6:	3301      	adds	r3, #1
 80108c8:	637b      	str	r3, [r7, #52]	; 0x34
		}

		/* And do the same trick once again for indexes 2 and 3 */
		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 2 ];
 80108ca:	6a3a      	ldr	r2, [r7, #32]
 80108cc:	69bb      	ldr	r3, [r7, #24]
 80108ce:	3308      	adds	r3, #8
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	4413      	add	r3, r2
 80108d4:	627b      	str	r3, [r7, #36]	; 0x24
		if( xSum2.u32 < xSum.u32 )
 80108d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108d8:	6a3b      	ldr	r3, [r7, #32]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d202      	bcs.n	80108e4 <usGenerateChecksum+0xe4>
		{
			ulCarry++;
 80108de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e0:	3301      	adds	r3, #1
 80108e2:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 3 ];
 80108e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	330c      	adds	r3, #12
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4413      	add	r3, r2
 80108ee:	623b      	str	r3, [r7, #32]

		if( xSum2.u32 > xSum.u32 )
 80108f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108f2:	6a3b      	ldr	r3, [r7, #32]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d902      	bls.n	80108fe <usGenerateChecksum+0xfe>
		{
			ulCarry++;
 80108f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fa:	3301      	adds	r3, #1
 80108fc:	637b      	str	r3, [r7, #52]	; 0x34
		}

		/* And finally advance the pointer 4 * 4 = 16 bytes. */
		xSource.u32ptr = &( xSource.u32ptr[ 4 ] );
 80108fe:	69bb      	ldr	r3, [r7, #24]
 8010900:	3310      	adds	r3, #16
 8010902:	61bb      	str	r3, [r7, #24]
	while( xSource.u32ptr < xLastSource.u32ptr )
 8010904:	69ba      	ldr	r2, [r7, #24]
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	429a      	cmp	r2, r3
 801090a:	d3c5      	bcc.n	8010898 <usGenerateChecksum+0x98>
	}

	/* Now add all carries. */
	xSum.u32 = ( uint32_t )xSum.u16[ 0 ] + xSum.u16[ 1 ] + ulCarry;
 801090c:	8c3b      	ldrh	r3, [r7, #32]
 801090e:	461a      	mov	r2, r3
 8010910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010912:	441a      	add	r2, r3
 8010914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010916:	4413      	add	r3, r2
 8010918:	623b      	str	r3, [r7, #32]

	uxDataLengthBytes %= 16U;
 801091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091c:	f003 030f 	and.w	r3, r3, #15
 8010920:	633b      	str	r3, [r7, #48]	; 0x30
	xLastSource.u8ptr = ( uint8_t * ) ( xSource.u8ptr + ( uxDataLengthBytes & ~( ( size_t ) 1 ) ) );
 8010922:	69ba      	ldr	r2, [r7, #24]
 8010924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010926:	f023 0301 	bic.w	r3, r3, #1
 801092a:	4413      	add	r3, r2
 801092c:	617b      	str	r3, [r7, #20]

	/* Half-word aligned. */
	/* Coverity does not like Unions. Warning issued here: "The operator "<"
	 * is being applied to the pointers "xSource.u16ptr" and "xLastSource.u16ptr",
	 * which do not point into the same object." */
	while( xSource.u16ptr < xLastSource.u16ptr )
 801092e:	e007      	b.n	8010940 <usGenerateChecksum+0x140>
	{
		/* At least one more short. */
		xSum.u32 += xSource.u16ptr[ 0 ];
 8010930:	6a3b      	ldr	r3, [r7, #32]
 8010932:	69ba      	ldr	r2, [r7, #24]
 8010934:	8812      	ldrh	r2, [r2, #0]
 8010936:	4413      	add	r3, r2
 8010938:	623b      	str	r3, [r7, #32]
		xSource.u16ptr++;
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	3302      	adds	r3, #2
 801093e:	61bb      	str	r3, [r7, #24]
	while( xSource.u16ptr < xLastSource.u16ptr )
 8010940:	69ba      	ldr	r2, [r7, #24]
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	429a      	cmp	r2, r3
 8010946:	d3f3      	bcc.n	8010930 <usGenerateChecksum+0x130>
	}

	if( ( uxDataLengthBytes & ( size_t ) 1 ) != 0U )	/* Maybe one more ? */
 8010948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094a:	f003 0301 	and.w	r3, r3, #1
 801094e:	2b00      	cmp	r3, #0
 8010950:	d002      	beq.n	8010958 <usGenerateChecksum+0x158>
	{
		xTerm.u8[ 0 ] = xSource.u8ptr[ 0 ];
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	781b      	ldrb	r3, [r3, #0]
 8010956:	773b      	strb	r3, [r7, #28]
	}
	xSum.u32 += xTerm.u32;
 8010958:	6a3a      	ldr	r2, [r7, #32]
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	4413      	add	r3, r2
 801095e:	623b      	str	r3, [r7, #32]

	/* Now add all carries again. */
	/* Assigning value from "xTerm.u32" to "xSum.u32" here, but that stored value is overwritten before it can be used.
	Coverity doesn't understand about union variables. */
	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 8010960:	8c3b      	ldrh	r3, [r7, #32]
 8010962:	461a      	mov	r2, r3
 8010964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010966:	4413      	add	r3, r2
 8010968:	623b      	str	r3, [r7, #32]

	/* coverity[value_overwrite] */
	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 801096a:	8c3b      	ldrh	r3, [r7, #32]
 801096c:	461a      	mov	r2, r3
 801096e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010970:	4413      	add	r3, r2
 8010972:	623b      	str	r3, [r7, #32]

	if( ( ulAlignBits & 1U ) != 0U )
 8010974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010976:	f003 0301 	and.w	r3, r3, #1
 801097a:	2b00      	cmp	r3, #0
 801097c:	d007      	beq.n	801098e <usGenerateChecksum+0x18e>
	{
		/* Quite unlikely, but pucNextData might be non-aligned, which would
		 mean that a checksum is calculated starting at an odd position. */
		xSum.u32 = ( ( xSum.u32 & 0xffU ) << 8 ) | ( ( xSum.u32 & 0xff00U ) >> 8 );
 801097e:	6a3b      	ldr	r3, [r7, #32]
 8010980:	021b      	lsls	r3, r3, #8
 8010982:	b29a      	uxth	r2, r3
 8010984:	6a3b      	ldr	r3, [r7, #32]
 8010986:	0a1b      	lsrs	r3, r3, #8
 8010988:	b2db      	uxtb	r3, r3
 801098a:	4313      	orrs	r3, r2
 801098c:	623b      	str	r3, [r7, #32]
	}

	/* swap the output (little endian platform only). */
	return FreeRTOS_htons( ( (uint16_t) xSum.u32 ) );
 801098e:	6a3b      	ldr	r3, [r7, #32]
 8010990:	b29b      	uxth	r3, r3
 8010992:	021b      	lsls	r3, r3, #8
 8010994:	b21a      	sxth	r2, r3
 8010996:	6a3b      	ldr	r3, [r7, #32]
 8010998:	b29b      	uxth	r3, r3
 801099a:	0a1b      	lsrs	r3, r3, #8
 801099c:	b29b      	uxth	r3, r3
 801099e:	b21b      	sxth	r3, r3
 80109a0:	4313      	orrs	r3, r2
 80109a2:	b21b      	sxth	r3, r3
 80109a4:	b29b      	uxth	r3, r3
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	373c      	adds	r7, #60	; 0x3c
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr
	...

080109b4 <vReturnEthernetFrame>:
/*-----------------------------------------------------------*/

/* This function is used in other files, has external linkage e.g. in
 * FreeRTOS_DNS.c. Not to be made static. */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSend )
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
	}
	#endif

#if( ipconfigZERO_COPY_TX_DRIVER != 0 )

	if( xReleaseAfterSend == pdFALSE )
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d10e      	bne.n	80109e2 <vReturnEthernetFrame+0x2e>
	{
		pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	69db      	ldr	r3, [r3, #28]
 80109c8:	4619      	mov	r1, r3
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f7ff f88c 	bl	800fae8 <pxDuplicateNetworkBufferWithDescriptor>
 80109d0:	60f8      	str	r0, [r7, #12]
		xReleaseAfterSend = pdTRUE;
 80109d2:	2301      	movs	r3, #1
 80109d4:	603b      	str	r3, [r7, #0]
		/* Want no rounding up. */
		pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	69da      	ldr	r2, [r3, #28]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	61da      	str	r2, [r3, #28]
		pxNetworkBuffer = pxNewBuffer;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	607b      	str	r3, [r7, #4]
	}

	if( pxNetworkBuffer != NULL )
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d017      	beq.n	8010a18 <vReturnEthernetFrame+0x64>
#endif
	{
		/* Map the Buffer to Ethernet Header struct for easy access to fields. */
		pxEthernetHeader = ipCAST_PTR_TO_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	699b      	ldr	r3, [r3, #24]
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7fe fde7 	bl	800f5c0 <vCastPointerTo_EthernetHeader_t>
 80109f2:	60b8      	str	r0, [r7, #8]

		/* Swap source and destination MAC addresses. */
		( void ) memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( const void * ) ( &( pxEthernetHeader->xSourceAddress ) ), sizeof( pxEthernetHeader->xDestinationAddress ) );
 80109f4:	68b8      	ldr	r0, [r7, #8]
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	3306      	adds	r3, #6
 80109fa:	2206      	movs	r2, #6
 80109fc:	4619      	mov	r1, r3
 80109fe:	f006 fc3e 	bl	801727e <memcpy>
		( void ) memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( const void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	3306      	adds	r3, #6
 8010a06:	2206      	movs	r2, #6
 8010a08:	4905      	ldr	r1, [pc, #20]	; (8010a20 <vReturnEthernetFrame+0x6c>)
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f006 fc37 	bl	801727e <memcpy>

		/* Send! */
		( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 8010a10:	6839      	ldr	r1, [r7, #0]
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f006 fa64 	bl	8016ee0 <xNetworkInterfaceOutput>
	}
}
 8010a18:	bf00      	nop
 8010a1a:	3710      	adds	r7, #16
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	2400001c 	.word	0x2400001c

08010a24 <FreeRTOS_GetMACAddress>:
	( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
}
/*-----------------------------------------------------------*/

const uint8_t * FreeRTOS_GetMACAddress( void )
{
 8010a24:	b480      	push	{r7}
 8010a26:	af00      	add	r7, sp, #0
	return ipLOCAL_MAC_ADDRESS;
 8010a28:	4b02      	ldr	r3, [pc, #8]	; (8010a34 <FreeRTOS_GetMACAddress+0x10>)
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr
 8010a34:	2400001c 	.word	0x2400001c

08010a38 <vIPSetDHCPTimerEnableState>:
}
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DHCP == 1 )
	void vIPSetDHCPTimerEnableState( BaseType_t xEnableState )
	{
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
		if( xEnableState != pdFALSE )
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d005      	beq.n	8010a52 <vIPSetDHCPTimerEnableState+0x1a>
		{
			xDHCPTimer.bActive = pdTRUE_UNSIGNED;
 8010a46:	4a08      	ldr	r2, [pc, #32]	; (8010a68 <vIPSetDHCPTimerEnableState+0x30>)
 8010a48:	7813      	ldrb	r3, [r2, #0]
 8010a4a:	f043 0301 	orr.w	r3, r3, #1
 8010a4e:	7013      	strb	r3, [r2, #0]
		}
		else
		{
			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
		}
	}
 8010a50:	e004      	b.n	8010a5c <vIPSetDHCPTimerEnableState+0x24>
			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
 8010a52:	4a05      	ldr	r2, [pc, #20]	; (8010a68 <vIPSetDHCPTimerEnableState+0x30>)
 8010a54:	7813      	ldrb	r3, [r2, #0]
 8010a56:	f36f 0300 	bfc	r3, #0, #1
 8010a5a:	7013      	strb	r3, [r2, #0]
	}
 8010a5c:	bf00      	nop
 8010a5e:	370c      	adds	r7, #12
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr
 8010a68:	240052dc 	.word	0x240052dc

08010a6c <vIPReloadDHCPTimer>:
#endif /* ipconfigUSE_DHCP */
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DHCP == 1 )
	void vIPReloadDHCPTimer( uint32_t ulLeaseTime )
	{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
		prvIPTimerReload( &xDHCPTimer, ulLeaseTime );
 8010a74:	6879      	ldr	r1, [r7, #4]
 8010a76:	4803      	ldr	r0, [pc, #12]	; (8010a84 <vIPReloadDHCPTimer+0x18>)
 8010a78:	f7fe ffce 	bl	800fa18 <prvIPTimerReload>
	}
 8010a7c:	bf00      	nop
 8010a7e:	3708      	adds	r7, #8
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	240052dc 	.word	0x240052dc

08010a88 <xIPIsNetworkTaskReady>:
	}
#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
/*-----------------------------------------------------------*/

BaseType_t xIPIsNetworkTaskReady( void )
{
 8010a88:	b480      	push	{r7}
 8010a8a:	af00      	add	r7, sp, #0
	return xIPTaskInitialised;
 8010a8c:	4b03      	ldr	r3, [pc, #12]	; (8010a9c <xIPIsNetworkTaskReady+0x14>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	46bd      	mov	sp, r7
 8010a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	24005304 	.word	0x24005304

08010aa0 <FreeRTOS_IsNetworkUp>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_IsNetworkUp( void )
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	af00      	add	r7, sp, #0
	return xNetworkUp;
 8010aa4:	4b03      	ldr	r3, [pc, #12]	; (8010ab4 <FreeRTOS_IsNetworkUp+0x14>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab0:	4770      	bx	lr
 8010ab2:	bf00      	nop
 8010ab4:	240052c4 	.word	0x240052c4

08010ab8 <FreeRTOS_max_uint32>:
	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d);
	static portINLINE uint32_t FreeRTOS_round_down (uint32_t a, uint32_t d);
	static portINLINE BaseType_t  FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);

	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return ( a >= b ) ? a : b; }
	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return ( a >= b ) ? a : b; }
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	bf38      	it	cc
 8010aca:	4613      	movcc	r3, r2
 8010acc:	4618      	mov	r0, r3
 8010ace:	370c      	adds	r7, #12
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad6:	4770      	bx	lr

08010ad8 <FreeRTOS_round_up>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return ( a <= b ) ? a : b; }
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return ( a <= b ) ? a : b; }
	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d) { return d * ( ( a + d - 1U ) / d ); }
 8010ad8:	b480      	push	{r7}
 8010ada:	b083      	sub	sp, #12
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
 8010ae2:	687a      	ldr	r2, [r7, #4]
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	4413      	add	r3, r2
 8010ae8:	1e5a      	subs	r2, r3, #1
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8010af0:	683a      	ldr	r2, [r7, #0]
 8010af2:	fb02 f303 	mul.w	r3, r2, r3
 8010af6:	4618      	mov	r0, r3
 8010af8:	370c      	adds	r7, #12
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr

08010b02 <uxStreamBufferSpace>:
}
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 8010b02:	b480      	push	{r7}
 8010b04:	b087      	sub	sp, #28
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	60f8      	str	r0, [r7, #12]
 8010b0a:	60b9      	str	r1, [r7, #8]
 8010b0c:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	691a      	ldr	r2, [r3, #16]
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	441a      	add	r2, r3
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	1ad3      	subs	r3, r2, r3
 8010b1a:	3b01      	subs	r3, #1
 8010b1c:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	691b      	ldr	r3, [r3, #16]
 8010b22:	697a      	ldr	r2, [r7, #20]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d304      	bcc.n	8010b32 <uxStreamBufferSpace+0x30>
	{
		uxCount -= pxBuffer->LENGTH;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	691b      	ldr	r3, [r3, #16]
 8010b2c:	697a      	ldr	r2, [r7, #20]
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 8010b32:	697b      	ldr	r3, [r7, #20]
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	371c      	adds	r7, #28
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr

08010b40 <uxStreamBufferDistance>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 8010b40:	b480      	push	{r7}
 8010b42:	b087      	sub	sp, #28
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	691a      	ldr	r2, [r3, #16]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	441a      	add	r2, r3
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	1ad3      	subs	r3, r2, r3
 8010b58:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	691b      	ldr	r3, [r3, #16]
 8010b5e:	697a      	ldr	r2, [r7, #20]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d304      	bcc.n	8010b6e <uxStreamBufferDistance+0x2e>
	{
		uxCount -= pxBuffer->LENGTH;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	691b      	ldr	r3, [r3, #16]
 8010b68:	697a      	ldr	r2, [r7, #20]
 8010b6a:	1ad3      	subs	r3, r2, r3
 8010b6c:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 8010b6e:	697b      	ldr	r3, [r7, #20]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	371c      	adds	r7, #28
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr

08010b7c <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer )
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
before hitting on uxTail */
size_t uxHead = pxBuffer->uxHead;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 8010b90:	68ba      	ldr	r2, [r7, #8]
 8010b92:	68f9      	ldr	r1, [r7, #12]
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7ff ffb4 	bl	8010b02 <uxStreamBufferSpace>
 8010b9a:	4603      	mov	r3, r0
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3710      	adds	r7, #16
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b084      	sub	sp, #16
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
or the number of items which can still be added to uxFront,
before hitting on uxTail */

size_t uxFront = pxBuffer->uxFront;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 8010bb8:	68ba      	ldr	r2, [r7, #8]
 8010bba:	68f9      	ldr	r1, [r7, #12]
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7ff ffa0 	bl	8010b02 <uxStreamBufferSpace>
 8010bc2:	4603      	mov	r3, r0
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3710      	adds	r7, #16
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b084      	sub	sp, #16
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
before reaching uxHead */
size_t uxHead = pxBuffer->uxHead;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	689b      	ldr	r3, [r3, #8]
 8010bd8:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	68b9      	ldr	r1, [r7, #8]
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f7ff ffab 	bl	8010b40 <uxStreamBufferDistance>
 8010bea:	4603      	mov	r3, r0
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3710      	adds	r7, #16
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}

08010bf4 <vCastPointerTo_FreeRTOS_Socket_t>:
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
	return ( FreeRTOS_Socket_t *)pvArgument;
 8010bfc:	687b      	ldr	r3, [r7, #4]
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	370c      	adds	r7, #12
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr

08010c0a <vCastConstPointerTo_FreeRTOS_Socket_t>:
{
 8010c0a:	b480      	push	{r7}
 8010c0c:	b083      	sub	sp, #12
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	6078      	str	r0, [r7, #4]
	return ( const FreeRTOS_Socket_t *) pvArgument;
 8010c12:	687b      	ldr	r3, [r7, #4]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	370c      	adds	r7, #12
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr

08010c20 <vCastPointerTo_NetworkBufferDescriptor_t>:
	}
#endif


static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
	return ( NetworkBufferDescriptor_t *)pvArgument;
 8010c28:	687b      	ldr	r3, [r7, #4]
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	370c      	adds	r7, #12
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c34:	4770      	bx	lr

08010c36 <vCastPointerTo_StreamBuffer_t>:


static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( StreamBuffer_t )
{
 8010c36:	b480      	push	{r7}
 8010c38:	b083      	sub	sp, #12
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
	return ( StreamBuffer_t *)pvArgument;
 8010c3e:	687b      	ldr	r3, [r7, #4]
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	370c      	adds	r7, #12
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <prvValidSocket>:
#endif /* ipconfigUSE_TCP == 1 */

/*-----------------------------------------------------------*/

static BaseType_t prvValidSocket( const FreeRTOS_Socket_t *pxSocket, BaseType_t xProtocol, BaseType_t xIsBound )
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b087      	sub	sp, #28
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	60f8      	str	r0, [r7, #12]
 8010c54:	60b9      	str	r1, [r7, #8]
 8010c56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;

	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d003      	beq.n	8010c66 <prvValidSocket+0x1a>
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c64:	d102      	bne.n	8010c6c <prvValidSocket+0x20>
	{
		xReturn = pdFALSE;
 8010c66:	2300      	movs	r3, #0
 8010c68:	617b      	str	r3, [r7, #20]
 8010c6a:	e015      	b.n	8010c98 <prvValidSocket+0x4c>
	}
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d006      	beq.n	8010c80 <prvValidSocket+0x34>
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	699b      	ldr	r3, [r3, #24]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d102      	bne.n	8010c80 <prvValidSocket+0x34>
	{
		/* The caller expects the socket to be bound, but it isn't. */
		xReturn = pdFALSE;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	617b      	str	r3, [r7, #20]
 8010c7e:	e00b      	b.n	8010c98 <prvValidSocket+0x4c>
	}
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d002      	beq.n	8010c94 <prvValidSocket+0x48>
	{
		/* Socket has a wrong type (UDP != TCP). */
		xReturn = pdFALSE;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	617b      	str	r3, [r7, #20]
 8010c92:	e001      	b.n	8010c98 <prvValidSocket+0x4c>
	}
	else
	{
		xReturn = pdTRUE;
 8010c94:	2301      	movs	r3, #1
 8010c96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010c98:	697b      	ldr	r3, [r7, #20]
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	371c      	adds	r7, #28
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr
	...

08010ca8 <vNetworkSocketsInit>:
/*-----------------------------------------------------------*/

void vNetworkSocketsInit( void )
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	af00      	add	r7, sp, #0
	vListInitialise( &xBoundUDPSocketsList );
 8010cac:	4803      	ldr	r0, [pc, #12]	; (8010cbc <vNetworkSocketsInit+0x14>)
 8010cae:	f7fb fa6a 	bl	800c186 <vListInitialise>

	#if( ipconfigUSE_TCP == 1 )
	{
		vListInitialise( &xBoundTCPSocketsList );
 8010cb2:	4803      	ldr	r0, [pc, #12]	; (8010cc0 <vNetworkSocketsInit+0x18>)
 8010cb4:	f7fb fa67 	bl	800c186 <vListInitialise>
	}
	#endif  /* ipconfigUSE_TCP == 1 */
}
 8010cb8:	bf00      	nop
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	24005314 	.word	0x24005314
 8010cc0:	24006550 	.word	0x24006550

08010cc4 <prvDetermineSocketSize>:
/*-----------------------------------------------------------*/

static BaseType_t prvDetermineSocketSize( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol, size_t *pxSocketSize )
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b08c      	sub	sp, #48	; 0x30
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	60f8      	str	r0, [r7, #12]
 8010ccc:	60b9      	str	r1, [r7, #8]
 8010cce:	607a      	str	r2, [r7, #4]
 8010cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdPASS;
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
FreeRTOS_Socket_t const *pxSocket = NULL;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Asserts must not appear before it has been determined that the network
	task is ready - otherwise the asserts will fail. */
	if( xIPIsNetworkTaskReady() == pdFALSE )
 8010cda:	f7ff fed5 	bl	8010a88 <xIPIsNetworkTaskReady>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d102      	bne.n	8010cea <prvDetermineSocketSize+0x26>
	{
		xReturn = pdFAIL;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ce8:	e078      	b.n	8010ddc <prvDetermineSocketSize+0x118>
	}
	else
	{
		/* Only Ethernet is currently supported. */
		configASSERT( xDomain == FREERTOS_AF_INET );
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	2b02      	cmp	r3, #2
 8010cee:	d00b      	beq.n	8010d08 <prvDetermineSocketSize+0x44>
 8010cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf4:	b672      	cpsid	i
 8010cf6:	f383 8811 	msr	BASEPRI, r3
 8010cfa:	f3bf 8f6f 	isb	sy
 8010cfe:	f3bf 8f4f 	dsb	sy
 8010d02:	b662      	cpsie	i
 8010d04:	627b      	str	r3, [r7, #36]	; 0x24
 8010d06:	e7fe      	b.n	8010d06 <prvDetermineSocketSize+0x42>

		/* Check if the UDP socket-list has been initialised. */
		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 8010d08:	4b37      	ldr	r3, [pc, #220]	; (8010de8 <prvDetermineSocketSize+0x124>)
 8010d0a:	689b      	ldr	r3, [r3, #8]
 8010d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d10:	d00b      	beq.n	8010d2a <prvDetermineSocketSize+0x66>
 8010d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d16:	b672      	cpsid	i
 8010d18:	f383 8811 	msr	BASEPRI, r3
 8010d1c:	f3bf 8f6f 	isb	sy
 8010d20:	f3bf 8f4f 	dsb	sy
 8010d24:	b662      	cpsie	i
 8010d26:	623b      	str	r3, [r7, #32]
 8010d28:	e7fe      	b.n	8010d28 <prvDetermineSocketSize+0x64>
		#if( ipconfigUSE_TCP == 1 )
		{
			/* Check if the TCP socket-list has been initialised. */
			configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 8010d2a:	4b30      	ldr	r3, [pc, #192]	; (8010dec <prvDetermineSocketSize+0x128>)
 8010d2c:	689b      	ldr	r3, [r3, #8]
 8010d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d32:	d00b      	beq.n	8010d4c <prvDetermineSocketSize+0x88>
 8010d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d38:	b672      	cpsid	i
 8010d3a:	f383 8811 	msr	BASEPRI, r3
 8010d3e:	f3bf 8f6f 	isb	sy
 8010d42:	f3bf 8f4f 	dsb	sy
 8010d46:	b662      	cpsie	i
 8010d48:	61fb      	str	r3, [r7, #28]
 8010d4a:	e7fe      	b.n	8010d4a <prvDetermineSocketSize+0x86>
		}
		#endif  /* ipconfigUSE_TCP == 1 */

		if( xProtocol == FREERTOS_IPPROTO_UDP )
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2b11      	cmp	r3, #17
 8010d50:	d117      	bne.n	8010d82 <prvDetermineSocketSize+0xbe>
		{
			if( xType != FREERTOS_SOCK_DGRAM )
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	2b02      	cmp	r3, #2
 8010d56:	d010      	beq.n	8010d7a <prvDetermineSocketSize+0xb6>
			{
				xReturn = pdFAIL;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
				configASSERT( xReturn == pdPASS );
 8010d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	d00b      	beq.n	8010d7a <prvDetermineSocketSize+0xb6>
 8010d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d66:	b672      	cpsid	i
 8010d68:	f383 8811 	msr	BASEPRI, r3
 8010d6c:	f3bf 8f6f 	isb	sy
 8010d70:	f3bf 8f4f 	dsb	sy
 8010d74:	b662      	cpsie	i
 8010d76:	61bb      	str	r3, [r7, #24]
 8010d78:	e7fe      	b.n	8010d78 <prvDetermineSocketSize+0xb4>
			}
			/* In case a UDP socket is created, do not allocate space for TCP data. */
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	224c      	movs	r2, #76	; 0x4c
 8010d7e:	601a      	str	r2, [r3, #0]
 8010d80:	e02c      	b.n	8010ddc <prvDetermineSocketSize+0x118>
		}
#if( ipconfigUSE_TCP == 1 )
		else if( xProtocol == FREERTOS_IPPROTO_TCP )
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2b06      	cmp	r3, #6
 8010d86:	d118      	bne.n	8010dba <prvDetermineSocketSize+0xf6>
		{
			if( xType != FREERTOS_SOCK_STREAM )
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	d010      	beq.n	8010db0 <prvDetermineSocketSize+0xec>
			{
				xReturn = pdFAIL;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	62fb      	str	r3, [r7, #44]	; 0x2c
				configASSERT( xReturn == pdPASS );
 8010d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	d00b      	beq.n	8010db0 <prvDetermineSocketSize+0xec>
 8010d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9c:	b672      	cpsid	i
 8010d9e:	f383 8811 	msr	BASEPRI, r3
 8010da2:	f3bf 8f6f 	isb	sy
 8010da6:	f3bf 8f4f 	dsb	sy
 8010daa:	b662      	cpsie	i
 8010dac:	617b      	str	r3, [r7, #20]
 8010dae:	e7fe      	b.n	8010dae <prvDetermineSocketSize+0xea>
			}

			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010db6:	601a      	str	r2, [r3, #0]
 8010db8:	e010      	b.n	8010ddc <prvDetermineSocketSize+0x118>
		}
#endif  /* ipconfigUSE_TCP == 1 */
		else
		{
			xReturn = pdFAIL;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
			configASSERT( xReturn == pdPASS );
 8010dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc0:	2b01      	cmp	r3, #1
 8010dc2:	d00b      	beq.n	8010ddc <prvDetermineSocketSize+0x118>
 8010dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc8:	b672      	cpsid	i
 8010dca:	f383 8811 	msr	BASEPRI, r3
 8010dce:	f3bf 8f6f 	isb	sy
 8010dd2:	f3bf 8f4f 	dsb	sy
 8010dd6:	b662      	cpsie	i
 8010dd8:	613b      	str	r3, [r7, #16]
 8010dda:	e7fe      	b.n	8010dda <prvDetermineSocketSize+0x116>
		}
	}
	/* In case configASSERT() is not used */
	( void )xDomain;
	( void )pxSocket;	/* Was only use fot sizeof. */
	return xReturn;
 8010ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3730      	adds	r7, #48	; 0x30
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	bf00      	nop
 8010de8:	24005314 	.word	0x24005314
 8010dec:	24006550 	.word	0x24006550

08010df0 <FreeRTOS_socket>:
/*-----------------------------------------------------------*/

/* FreeRTOS_socket() allocates and initiates a socket */
Socket_t FreeRTOS_socket( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol )
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b088      	sub	sp, #32
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	60b9      	str	r1, [r7, #8]
 8010dfa:	607a      	str	r2, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
size_t uxSocketSize = 0;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	613b      	str	r3, [r7, #16]
EventGroupHandle_t xEventGroup;
Socket_t xReturn;

	if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 8010e00:	f107 0310 	add.w	r3, r7, #16
 8010e04:	687a      	ldr	r2, [r7, #4]
 8010e06:	68b9      	ldr	r1, [r7, #8]
 8010e08:	68f8      	ldr	r0, [r7, #12]
 8010e0a:	f7ff ff5b 	bl	8010cc4 <prvDetermineSocketSize>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d103      	bne.n	8010e1c <FreeRTOS_socket+0x2c>
	{
		xReturn = FREERTOS_INVALID_SOCKET;
 8010e14:	f04f 33ff 	mov.w	r3, #4294967295
 8010e18:	61fb      	str	r3, [r7, #28]
 8010e1a:	e07e      	b.n	8010f1a <FreeRTOS_socket+0x12a>
	{
		/* Allocate the structure that will hold the socket information. The
		size depends on the type of socket: UDP sockets need less space. A
		define 'pvPortMallocSocket' will used to allocate the necessary space.
		By default it points to the FreeRTOS function 'pvPortMalloc()'. */
		pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, pvPortMallocSocket( uxSocketSize ) );
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7fa fdbe 	bl	800b9a0 <pvPortMalloc>
 8010e24:	4603      	mov	r3, r0
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7ff fee4 	bl	8010bf4 <vCastPointerTo_FreeRTOS_Socket_t>
 8010e2c:	61b8      	str	r0, [r7, #24]

		if( pxSocket == NULL )
 8010e2e:	69bb      	ldr	r3, [r7, #24]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d103      	bne.n	8010e3c <FreeRTOS_socket+0x4c>
		{
			xReturn = FREERTOS_INVALID_SOCKET;
 8010e34:	f04f 33ff 	mov.w	r3, #4294967295
 8010e38:	61fb      	str	r3, [r7, #28]
 8010e3a:	e06e      	b.n	8010f1a <FreeRTOS_socket+0x12a>
			iptraceFAILED_TO_CREATE_SOCKET();
		}
		else
		{
			xEventGroup = xEventGroupCreate();
 8010e3c:	f7fa ff9e 	bl	800bd7c <xEventGroupCreate>
 8010e40:	6178      	str	r0, [r7, #20]
			if( xEventGroup == NULL )
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d106      	bne.n	8010e56 <FreeRTOS_socket+0x66>
			{
				vPortFreeSocket( pxSocket );
 8010e48:	69b8      	ldr	r0, [r7, #24]
 8010e4a:	f7fa fe77 	bl	800bb3c <vPortFree>
				xReturn = FREERTOS_INVALID_SOCKET;
 8010e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e52:	61fb      	str	r3, [r7, #28]
 8010e54:	e061      	b.n	8010f1a <FreeRTOS_socket+0x12a>
					/* Lint wants at least a comment, in case the macro is empty. */
					iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
				}

				/* Clear the entire space to avoid nulling individual entries. */
				( void ) memset( pxSocket, 0, uxSocketSize );
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	461a      	mov	r2, r3
 8010e5a:	2100      	movs	r1, #0
 8010e5c:	69b8      	ldr	r0, [r7, #24]
 8010e5e:	f006 fa32 	bl	80172c6 <memset>

				pxSocket->xEventGroup = xEventGroup;
 8010e62:	69bb      	ldr	r3, [r7, #24]
 8010e64:	697a      	ldr	r2, [r7, #20]
 8010e66:	605a      	str	r2, [r3, #4]

				/* Initialise the socket's members.  The semaphore will be created
				if the socket is bound to an address, for now the pointer to the
				semaphore is just set to NULL to show it has not been created. */
				if( xProtocol == FREERTOS_IPPROTO_UDP )
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2b11      	cmp	r3, #17
 8010e6c:	d104      	bne.n	8010e78 <FreeRTOS_socket+0x88>
				{
					vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8010e6e:	69bb      	ldr	r3, [r7, #24]
 8010e70:	3338      	adds	r3, #56	; 0x38
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7fb f987 	bl	800c186 <vListInitialise>
						pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
					}
					#endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
				}

				vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	3308      	adds	r3, #8
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7fb f9a2 	bl	800c1c6 <vListInitialiseItem>
				listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ipPOINTER_CAST( void *, pxSocket ) );
 8010e82:	69bb      	ldr	r3, [r7, #24]
 8010e84:	69ba      	ldr	r2, [r7, #24]
 8010e86:	615a      	str	r2, [r3, #20]

				pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 8010e88:	69bb      	ldr	r3, [r7, #24]
 8010e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e8e:	61da      	str	r2, [r3, #28]
				pxSocket->xSendBlockTime	= ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 8010e90:	69bb      	ldr	r3, [r7, #24]
 8010e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e96:	621a      	str	r2, [r3, #32]
				pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 8010e98:	69bb      	ldr	r3, [r7, #24]
 8010e9a:	2202      	movs	r2, #2
 8010e9c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				pxSocket->ucProtocol		= ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	b2da      	uxtb	r2, r3
 8010ea4:	69bb      	ldr	r3, [r7, #24]
 8010ea6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

				#if( ipconfigUSE_TCP == 1 )
				{
					if( xProtocol == FREERTOS_IPPROTO_TCP )
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2b06      	cmp	r3, #6
 8010eae:	d132      	bne.n	8010f16 <FreeRTOS_socket+0x126>
					{
						/* StreamSize is expressed in number of bytes */
						/* Round up buffer sizes to nearest multiple of MSS */
						pxSocket->u.xTCP.usCurMSS     = ( uint16_t ) ipconfigTCP_MSS;
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	f44f 6291 	mov.w	r2, #1160	; 0x488
 8010eb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
						pxSocket->u.xTCP.usInitMSS    = ( uint16_t ) ipconfigTCP_MSS;
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	f44f 6291 	mov.w	r2, #1160	; 0x488
 8010ec0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
						pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 8010ec4:	69bb      	ldr	r3, [r7, #24]
 8010ec6:	f242 7210 	movw	r2, #10000	; 0x2710
 8010eca:	66da      	str	r2, [r3, #108]	; 0x6c
						pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 8010ecc:	f44f 6191 	mov.w	r1, #1160	; 0x488
 8010ed0:	f242 7010 	movw	r0, #10000	; 0x2710
 8010ed4:	f7ff fe00 	bl	8010ad8 <FreeRTOS_round_up>
 8010ed8:	4602      	mov	r2, r0
 8010eda:	69bb      	ldr	r3, [r7, #24]
 8010edc:	671a      	str	r2, [r3, #112]	; 0x70
						/* Use half of the buffer size of the TCP windows */
						#if ( ipconfigUSE_TCP_WIN == 1 )
						{
							pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 8010ede:	69bb      	ldr	r3, [r7, #24]
 8010ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ee2:	4a10      	ldr	r2, [pc, #64]	; (8010f24 <FreeRTOS_socket+0x134>)
 8010ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8010ee8:	0adb      	lsrs	r3, r3, #11
 8010eea:	4619      	mov	r1, r3
 8010eec:	2001      	movs	r0, #1
 8010eee:	f7ff fde3 	bl	8010ab8 <FreeRTOS_max_uint32>
 8010ef2:	4602      	mov	r2, r0
 8010ef4:	69bb      	ldr	r3, [r7, #24]
 8010ef6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
							pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010efe:	4a09      	ldr	r2, [pc, #36]	; (8010f24 <FreeRTOS_socket+0x134>)
 8010f00:	fba2 2303 	umull	r2, r3, r2, r3
 8010f04:	0adb      	lsrs	r3, r3, #11
 8010f06:	4619      	mov	r1, r3
 8010f08:	2001      	movs	r0, #1
 8010f0a:	f7ff fdd5 	bl	8010ab8 <FreeRTOS_max_uint32>
 8010f0e:	4602      	mov	r2, r0
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
						calling FreeRTOS_setsockopt().  No buffers will be allocated until a
						socket is connected and data is exchanged. */
					}
				}
				#endif  /* ipconfigUSE_TCP == 1 */
				xReturn = pxSocket;
 8010f16:	69bb      	ldr	r3, [r7, #24]
 8010f18:	61fb      	str	r3, [r7, #28]
		}
	}
	/* Remove compiler warnings in the case the configASSERT() is not defined. */
	( void ) xDomain;

	return xReturn;
 8010f1a:	69fb      	ldr	r3, [r7, #28]
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3720      	adds	r7, #32
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	e1fc780f 	.word	0xe1fc780f

08010f28 <FreeRTOS_recvfrom>:
 * FreeRTOS_recvfrom: receive data from a bound socket
 * In this library, the function can only be used with connectionsless sockets
 * (UDP)
 */
int32_t FreeRTOS_recvfrom( Socket_t xSocket, void *pvBuffer, size_t uxBufferLength, BaseType_t xFlags, struct freertos_sockaddr *pxSourceAddress, socklen_t *pxSourceAddressLength )
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b092      	sub	sp, #72	; 0x48
 8010f2c:	af02      	add	r7, sp, #8
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	60b9      	str	r1, [r7, #8]
 8010f32:	607a      	str	r2, [r7, #4]
 8010f34:	603b      	str	r3, [r7, #0]
BaseType_t lPacketCount;
NetworkBufferDescriptor_t *pxNetworkBuffer;
const void *pvCopySource;
FreeRTOS_Socket_t const * pxSocket = xSocket;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	633b      	str	r3, [r7, #48]	; 0x30
TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	61fb      	str	r3, [r7, #28]
BaseType_t xTimed = pdFALSE;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	63bb      	str	r3, [r7, #56]	; 0x38
TimeOut_t xTimeOut;
int32_t lReturn;
EventBits_t xEventBits = ( EventBits_t ) 0;
 8010f42:	2300      	movs	r3, #0
 8010f44:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t uxPayloadLength;

	if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 8010f46:	2201      	movs	r2, #1
 8010f48:	2111      	movs	r1, #17
 8010f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f4c:	f7ff fe7e 	bl	8010c4c <prvValidSocket>
 8010f50:	4603      	mov	r3, r0
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d103      	bne.n	8010f5e <FreeRTOS_recvfrom+0x36>
	{
		lReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010f56:	f06f 0315 	mvn.w	r3, #21
 8010f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f5c:	e08e      	b.n	801107c <FreeRTOS_recvfrom+0x154>
	}
	else
	{
		lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8010f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f62:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* The function prototype is designed to maintain the expected Berkeley
		sockets standard, but this implementation does not use all the parameters. */
		( void ) pxSourceAddressLength;

		while( lPacketCount == 0 )
 8010f64:	e02f      	b.n	8010fc6 <FreeRTOS_recvfrom+0x9e>
		{
			if( xTimed == pdFALSE )
 8010f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d111      	bne.n	8010f90 <FreeRTOS_recvfrom+0x68>
			{
				/* Check to see if the socket is non blocking on the first
				iteration.  */
				xRemainingTime = pxSocket->xReceiveBlockTime;
 8010f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6e:	69db      	ldr	r3, [r3, #28]
 8010f70:	61fb      	str	r3, [r7, #28]

				if( xRemainingTime == ( TickType_t ) 0 )
 8010f72:	69fb      	ldr	r3, [r7, #28]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d02a      	beq.n	8010fce <FreeRTOS_recvfrom+0xa6>
					}
					#endif /* ipconfigSUPPORT_SIGNALS */
					break;
				}

				if( ( ( ( UBaseType_t ) xFlags ) & ( ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) ) != 0U )
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	f003 0310 	and.w	r3, r3, #16
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d127      	bne.n	8010fd2 <FreeRTOS_recvfrom+0xaa>
				{
					break;
				}

				/* To ensure this part only executes once. */
				xTimed = pdTRUE;
 8010f82:	2301      	movs	r3, #1
 8010f84:	63bb      	str	r3, [r7, #56]	; 0x38

				/* Fetch the current time. */
				vTaskSetTimeOutState( &xTimeOut );
 8010f86:	f107 0314 	add.w	r3, r7, #20
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fc fc34 	bl	800d7f8 <vTaskSetTimeOutState>
			}

			/* Wait for arrival of data.  While waiting, the IP-task may set the
			'eSOCKET_RECEIVE' bit in 'xEventGroup', if it receives data for this
			socket, thus unblocking this API call. */
			xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, ( ( EventBits_t ) eSOCKET_RECEIVE ) | ( ( EventBits_t ) eSOCKET_INTR ),
 8010f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f92:	6858      	ldr	r0, [r3, #4]
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	9300      	str	r3, [sp, #0]
 8010f98:	2300      	movs	r3, #0
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	2141      	movs	r1, #65	; 0x41
 8010f9e:	f7fa ff05 	bl	800bdac <xEventGroupWaitBits>
 8010fa2:	62f8      	str	r0, [r7, #44]	; 0x2c
			{
				( void ) xEventBits;
			}
			#endif /* ipconfigSUPPORT_SIGNALS */

			lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8010fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa8:	63fb      	str	r3, [r7, #60]	; 0x3c

			if( lPacketCount != 0 )
 8010faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d112      	bne.n	8010fd6 <FreeRTOS_recvfrom+0xae>
			{
				break;
			}

			/* Has the timeout been reached ? */
			if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8010fb0:	f107 021c 	add.w	r2, r7, #28
 8010fb4:	f107 0314 	add.w	r3, r7, #20
 8010fb8:	4611      	mov	r1, r2
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fc fc5a 	bl	800d874 <xTaskCheckForTimeOut>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d109      	bne.n	8010fda <FreeRTOS_recvfrom+0xb2>
		while( lPacketCount == 0 )
 8010fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d0cc      	beq.n	8010f66 <FreeRTOS_recvfrom+0x3e>
 8010fcc:	e006      	b.n	8010fdc <FreeRTOS_recvfrom+0xb4>
					break;
 8010fce:	bf00      	nop
 8010fd0:	e004      	b.n	8010fdc <FreeRTOS_recvfrom+0xb4>
					break;
 8010fd2:	bf00      	nop
 8010fd4:	e002      	b.n	8010fdc <FreeRTOS_recvfrom+0xb4>
				break;
 8010fd6:	bf00      	nop
 8010fd8:	e000      	b.n	8010fdc <FreeRTOS_recvfrom+0xb4>
			{
				break;
 8010fda:	bf00      	nop
			}
		} /* while( lPacketCount == 0 ) */

		if( lPacketCount != 0 )
 8010fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d049      	beq.n	8011076 <FreeRTOS_recvfrom+0x14e>
		{
			taskENTER_CRITICAL();
 8010fe2:	f7fd f9d3 	bl	800e38c <vPortEnterCritical>
			{
				/* The owner of the list item is the network buffer. */
				pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 8010fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7ff fe17 	bl	8010c20 <vCastPointerTo_NetworkBufferDescriptor_t>
 8010ff2:	62b8      	str	r0, [r7, #40]	; 0x28

				if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	f003 0304 	and.w	r3, r3, #4
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d103      	bne.n	8011006 <FreeRTOS_recvfrom+0xde>
				{
					/* Remove the network buffer from the list of buffers waiting to
					be processed by the socket. */
					( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 8010ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011000:	4618      	mov	r0, r3
 8011002:	f7fb f94a 	bl	800c29a <uxListRemove>
				}
			}
			taskEXIT_CRITICAL();
 8011006:	f7fd f9f3 	bl	800e3f0 <vPortExitCritical>

			/* The returned value is the length of the payload data, which is
			calculated at the total packet size minus the headers.
			The validity of `xDataLength` prvProcessIPPacket has been confirmed
			in 'prvProcessIPPacket()'. */
			uxPayloadLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 801100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801100c:	69db      	ldr	r3, [r3, #28]
 801100e:	3b2a      	subs	r3, #42	; 0x2a
 8011010:	627b      	str	r3, [r7, #36]	; 0x24
			lReturn = ( int32_t ) uxPayloadLength;
 8011012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011014:	637b      	str	r3, [r7, #52]	; 0x34

			if( pxSourceAddress != NULL )
 8011016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011018:	2b00      	cmp	r3, #0
 801101a:	d007      	beq.n	801102c <FreeRTOS_recvfrom+0x104>
			{
				pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 801101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801101e:	8c1a      	ldrh	r2, [r3, #32]
 8011020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011022:	805a      	strh	r2, [r3, #2]
				pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 8011024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011026:	695a      	ldr	r2, [r3, #20]
 8011028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801102a:	605a      	str	r2, [r3, #4]
			}

			if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	f003 0301 	and.w	r3, r3, #1
 8011032:	2b00      	cmp	r3, #0
 8011034:	d118      	bne.n	8011068 <FreeRTOS_recvfrom+0x140>
			{
				/* The zero copy flag is not set.  Truncate the length if it won't
				fit in the provided buffer. */
				if( lReturn > ( int32_t ) uxBufferLength )
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801103a:	429a      	cmp	r2, r3
 801103c:	dd01      	ble.n	8011042 <FreeRTOS_recvfrom+0x11a>
				{
					iptraceRECVFROM_DISCARDING_BYTES( ( uxBufferLength - lReturn ) );
					lReturn = ( int32_t ) uxBufferLength;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	637b      	str	r3, [r7, #52]	; 0x34
				}

				/* Copy the received data into the provided buffer, then release the
				network buffer. */
				pvCopySource = ( const void *) &pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ];
 8011042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011044:	699b      	ldr	r3, [r3, #24]
 8011046:	332a      	adds	r3, #42	; 0x2a
 8011048:	623b      	str	r3, [r7, #32]
				( void ) memcpy( pvBuffer, pvCopySource, ( size_t )lReturn );
 801104a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801104c:	461a      	mov	r2, r3
 801104e:	6a39      	ldr	r1, [r7, #32]
 8011050:	68b8      	ldr	r0, [r7, #8]
 8011052:	f006 f914 	bl	801727e <memcpy>

				if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	f003 0304 	and.w	r3, r3, #4
 801105c:	2b00      	cmp	r3, #0
 801105e:	d10d      	bne.n	801107c <FreeRTOS_recvfrom+0x154>
				{
					vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8011060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011062:	f005 fa2d 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
 8011066:	e009      	b.n	801107c <FreeRTOS_recvfrom+0x154>
			{
				/* The zero copy flag was set.  pvBuffer is not a buffer into which
				the received data can be copied, but a pointer that must be set to
				point to the buffer in which the received data has already been
				placed. */
				*( ( void** ) pvBuffer ) = ipPOINTER_CAST( void *, &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 8011068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801106a:	699b      	ldr	r3, [r3, #24]
 801106c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	601a      	str	r2, [r3, #0]
 8011074:	e002      	b.n	801107c <FreeRTOS_recvfrom+0x154>
			iptraceRECVFROM_INTERRUPTED();
		}
	#endif /* ipconfigSUPPORT_SIGNALS */
		else
		{
			lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 8011076:	f06f 030a 	mvn.w	r3, #10
 801107a:	637b      	str	r3, [r7, #52]	; 0x34
			iptraceRECVFROM_TIMEOUT();
		}
	}

	return lReturn;
 801107c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801107e:	4618      	mov	r0, r3
 8011080:	3740      	adds	r7, #64	; 0x40
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}

08011086 <FreeRTOS_sendto>:
/*-----------------------------------------------------------*/

int32_t FreeRTOS_sendto( Socket_t xSocket, const void *pvBuffer, size_t uxTotalDataLength, BaseType_t xFlags, const struct freertos_sockaddr *pxDestinationAddress, socklen_t xDestinationAddressLength )
{
 8011086:	b580      	push	{r7, lr}
 8011088:	b090      	sub	sp, #64	; 0x40
 801108a:	af00      	add	r7, sp, #0
 801108c:	60f8      	str	r0, [r7, #12]
 801108e:	60b9      	str	r1, [r7, #8]
 8011090:	607a      	str	r2, [r7, #4]
 8011092:	603b      	str	r3, [r7, #0]
NetworkBufferDescriptor_t *pxNetworkBuffer;
void *pvCopyDest;
IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 8011094:	2304      	movs	r3, #4
 8011096:	773b      	strb	r3, [r7, #28]
 8011098:	2300      	movs	r3, #0
 801109a:	623b      	str	r3, [r7, #32]
TimeOut_t xTimeOut;
TickType_t xTicksToWait;
int32_t lReturn = 0;
 801109c:	2300      	movs	r3, #0
 801109e:	63bb      	str	r3, [r7, #56]	; 0x38
FreeRTOS_Socket_t const * pxSocket;
const size_t uxMaxPayloadLength = ( size_t ) ipMAX_UDP_PAYLOAD_LENGTH;
 80110a0:	f240 4394 	movw	r3, #1172	; 0x494
 80110a4:	637b      	str	r3, [r7, #52]	; 0x34
const size_t uxPayloadOffset = ( size_t ) ipUDP_PAYLOAD_OFFSET_IPv4;
 80110a6:	232a      	movs	r3, #42	; 0x2a
 80110a8:	633b      	str	r3, [r7, #48]	; 0x30


	pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the
	parameters. */
	( void ) xDestinationAddressLength;
	configASSERT( pvBuffer != NULL );
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d10b      	bne.n	80110cc <FreeRTOS_sendto+0x46>
 80110b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b8:	b672      	cpsid	i
 80110ba:	f383 8811 	msr	BASEPRI, r3
 80110be:	f3bf 8f6f 	isb	sy
 80110c2:	f3bf 8f4f 	dsb	sy
 80110c6:	b662      	cpsie	i
 80110c8:	627b      	str	r3, [r7, #36]	; 0x24
 80110ca:	e7fe      	b.n	80110ca <FreeRTOS_sendto+0x44>

	if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 80110cc:	687a      	ldr	r2, [r7, #4]
 80110ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d87a      	bhi.n	80111ca <FreeRTOS_sendto+0x144>
	{
		/* If the socket is not already bound to an address, bind it now.
		Passing NULL as the address parameter tells FreeRTOS_bind() to select
		the address to bind to. */
		if( socketSOCKET_IS_BOUND( pxSocket ) ||
 80110d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d6:	699b      	ldr	r3, [r3, #24]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d107      	bne.n	80110ec <FreeRTOS_sendto+0x66>
			( FreeRTOS_bind( xSocket, NULL, 0U ) == 0 ) )
 80110dc:	2200      	movs	r2, #0
 80110de:	2100      	movs	r1, #0
 80110e0:	68f8      	ldr	r0, [r7, #12]
 80110e2:	f000 f877 	bl	80111d4 <FreeRTOS_bind>
 80110e6:	4603      	mov	r3, r0
		if( socketSOCKET_IS_BOUND( pxSocket ) ||
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d16e      	bne.n	80111ca <FreeRTOS_sendto+0x144>
		{
			xTicksToWait = pxSocket->xSendBlockTime;
 80110ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ee:	6a1b      	ldr	r3, [r3, #32]
 80110f0:	613b      	str	r3, [r7, #16]
					xTicksToWait = ( TickType_t )0;
				}
			}
			#endif /* ipconfigUSE_CALLBACKS */

			if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	f003 0310 	and.w	r3, r3, #16
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d001      	beq.n	8011100 <FreeRTOS_sendto+0x7a>
			{
				xTicksToWait = ( TickType_t ) 0;
 80110fc:	2300      	movs	r3, #0
 80110fe:	613b      	str	r3, [r7, #16]
			}

			if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	f003 0301 	and.w	r3, r3, #1
 8011106:	2b00      	cmp	r3, #0
 8011108:	d128      	bne.n	801115c <FreeRTOS_sendto+0xd6>
			{
				/* Zero copy is not set, so obtain a network buffer into
				which the payload will be copied. */
				vTaskSetTimeOutState( &xTimeOut );
 801110a:	f107 0314 	add.w	r3, r7, #20
 801110e:	4618      	mov	r0, r3
 8011110:	f7fc fb72 	bl	800d7f8 <vTaskSetTimeOutState>

				/* Block until a buffer becomes available, or until a
				timeout has been reached */
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 8011114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	4413      	add	r3, r2
 801111a:	693a      	ldr	r2, [r7, #16]
 801111c:	4611      	mov	r1, r2
 801111e:	4618      	mov	r0, r3
 8011120:	f005 f950 	bl	80163c4 <pxGetNetworkBufferWithDescriptor>
 8011124:	63f8      	str	r0, [r7, #60]	; 0x3c

				if( pxNetworkBuffer != NULL )
 8011126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011128:	2b00      	cmp	r3, #0
 801112a:	d01b      	beq.n	8011164 <FreeRTOS_sendto+0xde>
				{
					pvCopyDest = ( void * ) &pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ];
 801112c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801112e:	699a      	ldr	r2, [r3, #24]
 8011130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011132:	4413      	add	r3, r2
 8011134:	62bb      	str	r3, [r7, #40]	; 0x28
					( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 8011136:	687a      	ldr	r2, [r7, #4]
 8011138:	68b9      	ldr	r1, [r7, #8]
 801113a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801113c:	f006 f89f 	bl	801727e <memcpy>

					if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 8011140:	f107 0210 	add.w	r2, r7, #16
 8011144:	f107 0314 	add.w	r3, r7, #20
 8011148:	4611      	mov	r1, r2
 801114a:	4618      	mov	r0, r3
 801114c:	f7fc fb92 	bl	800d874 <xTaskCheckForTimeOut>
 8011150:	4603      	mov	r3, r0
 8011152:	2b01      	cmp	r3, #1
 8011154:	d106      	bne.n	8011164 <FreeRTOS_sendto+0xde>
					{
						/* The entire block time has been used up. */
						xTicksToWait = ( TickType_t ) 0;
 8011156:	2300      	movs	r3, #0
 8011158:	613b      	str	r3, [r7, #16]
 801115a:	e003      	b.n	8011164 <FreeRTOS_sendto+0xde>
			else
			{
				/* When zero copy is used, pvBuffer is a pointer to the
				payload of a buffer that has already been obtained from the
				stack.  Obtain the network buffer pointer from the buffer. */
				pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 801115c:	68b8      	ldr	r0, [r7, #8]
 801115e:	f7fe fced 	bl	800fb3c <pxUDPPayloadBuffer_to_NetworkBuffer>
 8011162:	63f8      	str	r0, [r7, #60]	; 0x3c
			}

			if( pxNetworkBuffer != NULL )
 8011164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011166:	2b00      	cmp	r3, #0
 8011168:	d02f      	beq.n	80111ca <FreeRTOS_sendto+0x144>
			{
				/* xDataLength is the size of the total packet, including the Ethernet header. */
				pxNetworkBuffer->xDataLength = uxTotalDataLength + sizeof( UDPPacket_t );
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011172:	61da      	str	r2, [r3, #28]
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 8011174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011176:	885a      	ldrh	r2, [r3, #2]
 8011178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801117a:	841a      	strh	r2, [r3, #32]
				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 801117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117e:	689b      	ldr	r3, [r3, #8]
 8011180:	b29a      	uxth	r2, r3
 8011182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011184:	845a      	strh	r2, [r3, #34]	; 0x22
				pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 8011186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011188:	685a      	ldr	r2, [r3, #4]
 801118a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801118c:	615a      	str	r2, [r3, #20]

				/* The socket options are passed to the IP layer in the
				space that will eventually get used by the Ethernet header. */
				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 801118e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011190:	699b      	ldr	r3, [r3, #24]
 8011192:	3306      	adds	r3, #6
 8011194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011196:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 801119a:	701a      	strb	r2, [r3, #0]

				/* Tell the networking task that the packet needs sending. */
				xStackTxEvent.pvData = pxNetworkBuffer;
 801119c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801119e:	623b      	str	r3, [r7, #32]

				/* Ask the IP-task to send this packet */
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 80111a0:	693a      	ldr	r2, [r7, #16]
 80111a2:	f107 031c 	add.w	r3, r7, #28
 80111a6:	4611      	mov	r1, r2
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7fe fdff 	bl	800fdac <xSendEventStructToIPTask>
 80111ae:	4603      	mov	r3, r0
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d102      	bne.n	80111ba <FreeRTOS_sendto+0x134>
				{
					/* The packet was successfully sent to the IP task. */
					lReturn = ( int32_t ) uxTotalDataLength;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80111b8:	e007      	b.n	80111ca <FreeRTOS_sendto+0x144>
				}
				else
				{
					/* If the buffer was allocated in this function, release
					it. */
					if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	f003 0301 	and.w	r3, r3, #1
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d102      	bne.n	80111ca <FreeRTOS_sendto+0x144>
					{
						vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80111c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111c6:	f005 f97b 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
	{
		/* The data is longer than the available buffer space. */
		iptraceSENDTO_DATA_TOO_LONG();
	}

	return lReturn;
 80111ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
} /* Tested */
 80111cc:	4618      	mov	r0, r3
 80111ce:	3740      	adds	r7, #64	; 0x40
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <FreeRTOS_bind>:
 * be used for both UDP and TCP sockets.  The actual binding will be performed
 * by the IP-task to avoid mutual access to the bound-socket-lists
 * (xBoundUDPSocketsList or xBoundTCPSocketsList).
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket, struct freertos_sockaddr const * pxAddress, socklen_t xAddressLength )
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b08c      	sub	sp, #48	; 0x30
 80111d8:	af02      	add	r7, sp, #8
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
IPStackEvent_t xBindEvent;
FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	623b      	str	r3, [r7, #32]
BaseType_t xReturn = 0;
 80111e4:	2300      	movs	r3, #0
 80111e6:	627b      	str	r3, [r7, #36]	; 0x24

	( void ) xAddressLength;

	configASSERT( xIsCallingFromIPTask() == pdFALSE );
 80111e8:	f7fe fb4a 	bl	800f880 <xIsCallingFromIPTask>
 80111ec:	4603      	mov	r3, r0
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00b      	beq.n	801120a <FreeRTOS_bind+0x36>
 80111f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f6:	b672      	cpsid	i
 80111f8:	f383 8811 	msr	BASEPRI, r3
 80111fc:	f3bf 8f6f 	isb	sy
 8011200:	f3bf 8f4f 	dsb	sy
 8011204:	b662      	cpsie	i
 8011206:	61fb      	str	r3, [r7, #28]
 8011208:	e7fe      	b.n	8011208 <FreeRTOS_bind+0x34>

	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 801120a:	6a3b      	ldr	r3, [r7, #32]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d003      	beq.n	8011218 <FreeRTOS_bind+0x44>
 8011210:	6a3b      	ldr	r3, [r7, #32]
 8011212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011216:	d103      	bne.n	8011220 <FreeRTOS_bind+0x4c>
	{
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8011218:	f06f 0315 	mvn.w	r3, #21
 801121c:	627b      	str	r3, [r7, #36]	; 0x24
 801121e:	e03f      	b.n	80112a0 <FreeRTOS_bind+0xcc>
	}
	/* Once a socket is bound to a port, it can not be bound to a different
	port number */
	else if( socketSOCKET_IS_BOUND( pxSocket) )
 8011220:	6a3b      	ldr	r3, [r7, #32]
 8011222:	699b      	ldr	r3, [r3, #24]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d003      	beq.n	8011230 <FreeRTOS_bind+0x5c>
	{
		/* The socket is already bound. */
		FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8011228:	f06f 0315 	mvn.w	r3, #21
 801122c:	627b      	str	r3, [r7, #36]	; 0x24
 801122e:	e037      	b.n	80112a0 <FreeRTOS_bind+0xcc>
	}
	else
	{
		/* Prepare a messages to the IP-task in order to perform the binding.
		The desired port number will be passed in usLocalPort. */
		xBindEvent.eEventType = eSocketBindEvent;
 8011230:	2309      	movs	r3, #9
 8011232:	753b      	strb	r3, [r7, #20]
		xBindEvent.pvData = xSocket;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	61bb      	str	r3, [r7, #24]
		if( pxAddress != NULL )
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d00e      	beq.n	801125c <FreeRTOS_bind+0x88>
		{
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	885b      	ldrh	r3, [r3, #2]
 8011242:	021b      	lsls	r3, r3, #8
 8011244:	b21a      	sxth	r2, r3
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	885b      	ldrh	r3, [r3, #2]
 801124a:	0a1b      	lsrs	r3, r3, #8
 801124c:	b29b      	uxth	r3, r3
 801124e:	b21b      	sxth	r3, r3
 8011250:	4313      	orrs	r3, r2
 8011252:	b21b      	sxth	r3, r3
 8011254:	b29a      	uxth	r2, r3
 8011256:	6a3b      	ldr	r3, [r7, #32]
 8011258:	849a      	strh	r2, [r3, #36]	; 0x24
 801125a:	e002      	b.n	8011262 <FreeRTOS_bind+0x8e>
		}
		else
		{
			/* Caller wants to bind to a random port number. */
			pxSocket->usLocalPort = 0U;
 801125c:	6a3b      	ldr	r3, [r7, #32]
 801125e:	2200      	movs	r2, #0
 8011260:	849a      	strh	r2, [r3, #36]	; 0x24
		}

		/* portMAX_DELAY is used as a the time-out parameter, as binding *must*
		succeed before the socket can be used.  _RB_ The use of an infinite
		block time needs be changed as it could result in the task hanging. */
		if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8011262:	f107 0314 	add.w	r3, r7, #20
 8011266:	f04f 31ff 	mov.w	r1, #4294967295
 801126a:	4618      	mov	r0, r3
 801126c:	f7fe fd9e 	bl	800fdac <xSendEventStructToIPTask>
 8011270:	4603      	mov	r3, r0
 8011272:	2b00      	cmp	r3, #0
 8011274:	d103      	bne.n	801127e <FreeRTOS_bind+0xaa>
		{
			/* Failed to wake-up the IP-task, no use to wait for it */
			FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
			xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 8011276:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801127a:	627b      	str	r3, [r7, #36]	; 0x24
 801127c:	e010      	b.n	80112a0 <FreeRTOS_bind+0xcc>
		}
		else
		{
			/* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
			job. */
			( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 801127e:	6a3b      	ldr	r3, [r7, #32]
 8011280:	6858      	ldr	r0, [r3, #4]
 8011282:	f04f 33ff 	mov.w	r3, #4294967295
 8011286:	9300      	str	r3, [sp, #0]
 8011288:	2300      	movs	r3, #0
 801128a:	2201      	movs	r2, #1
 801128c:	2110      	movs	r1, #16
 801128e:	f7fa fd8d 	bl	800bdac <xEventGroupWaitBits>
			if( !socketSOCKET_IS_BOUND( pxSocket ) )
 8011292:	6a3b      	ldr	r3, [r7, #32]
 8011294:	699b      	ldr	r3, [r3, #24]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d102      	bne.n	80112a0 <FreeRTOS_bind+0xcc>
			{
				xReturn = -pdFREERTOS_ERRNO_EINVAL;
 801129a:	f06f 0315 	mvn.w	r3, #21
 801129e:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}
	}

	return xReturn;
 80112a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	3728      	adds	r7, #40	; 0x28
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
	...

080112ac <vSocketBind>:
 * vSocketBind(): internal version of bind() that should not be called directly.
 * 'xInternal' is used for TCP sockets only: it allows to have several
 * (connected) child sockets bound to the same server port.
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr * pxBindAddress, size_t uxAddressLength, BaseType_t xInternal )
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b08c      	sub	sp, #48	; 0x30
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	60b9      	str	r1, [r7, #8]
 80112b6:	607a      	str	r2, [r7, #4]
 80112b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 80112ba:	2300      	movs	r3, #0
 80112bc:	62fb      	str	r3, [r7, #44]	; 0x2c
List_t *pxSocketList;
struct freertos_sockaddr * pxAddress = pxBindAddress;
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	627b      	str	r3, [r7, #36]	; 0x24
#if( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
	struct freertos_sockaddr xAddress;
#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

#if( ipconfigUSE_TCP == 1 )
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80112c8:	2b06      	cmp	r3, #6
 80112ca:	d102      	bne.n	80112d2 <vSocketBind+0x26>
	{
		pxSocketList = &xBoundTCPSocketsList;
 80112cc:	4b42      	ldr	r3, [pc, #264]	; (80113d8 <vSocketBind+0x12c>)
 80112ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80112d0:	e001      	b.n	80112d6 <vSocketBind+0x2a>
	}
	else
#endif  /* ipconfigUSE_TCP == 1 */
	{
		pxSocketList = &xBoundUDPSocketsList;
 80112d2:	4b42      	ldr	r3, [pc, #264]	; (80113dc <vSocketBind+0x130>)
 80112d4:	62bb      	str	r3, [r7, #40]	; 0x28

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) uxAddressLength;

	configASSERT( pxSocket != NULL );
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d10b      	bne.n	80112f4 <vSocketBind+0x48>
 80112dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e0:	b672      	cpsid	i
 80112e2:	f383 8811 	msr	BASEPRI, r3
 80112e6:	f3bf 8f6f 	isb	sy
 80112ea:	f3bf 8f4f 	dsb	sy
 80112ee:	b662      	cpsie	i
 80112f0:	623b      	str	r3, [r7, #32]
 80112f2:	e7fe      	b.n	80112f2 <vSocketBind+0x46>
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112fa:	d10b      	bne.n	8011314 <vSocketBind+0x68>
 80112fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011300:	b672      	cpsid	i
 8011302:	f383 8811 	msr	BASEPRI, r3
 8011306:	f3bf 8f6f 	isb	sy
 801130a:	f3bf 8f4f 	dsb	sy
 801130e:	b662      	cpsie	i
 8011310:	61fb      	str	r3, [r7, #28]
 8011312:	e7fe      	b.n	8011312 <vSocketBind+0x66>
		/* pxAddress will be NULL if sendto() was called on a socket without the
		socket being bound to an address. In this case, automatically allocate
		an address to the socket.  There is a small chance that the allocated
		port will already be in use - if that is the case, then the check below
		[pxListFindListItemWithValue()] will result in an error being returned. */
		if( pxAddress == NULL )
 8011314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011316:	2b00      	cmp	r3, #0
 8011318:	d105      	bne.n	8011326 <vSocketBind+0x7a>
		{
			pxAddress = &xAddress;
 801131a:	f107 0310 	add.w	r3, r7, #16
 801131e:	627b      	str	r3, [r7, #36]	; 0x24
			/* Put the port to zero to be assigned later. */
			pxAddress->sin_port = 0U;
 8011320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011322:	2200      	movs	r2, #0
 8011324:	805a      	strh	r2, [r3, #2]
	}
	#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

	/* Sockets must be bound before calling FreeRTOS_sendto() if
	ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
	configASSERT( pxAddress != NULL );
 8011326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011328:	2b00      	cmp	r3, #0
 801132a:	d10b      	bne.n	8011344 <vSocketBind+0x98>
 801132c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011330:	b672      	cpsid	i
 8011332:	f383 8811 	msr	BASEPRI, r3
 8011336:	f3bf 8f6f 	isb	sy
 801133a:	f3bf 8f4f 	dsb	sy
 801133e:	b662      	cpsie	i
 8011340:	61bb      	str	r3, [r7, #24]
 8011342:	e7fe      	b.n	8011342 <vSocketBind+0x96>
	#endif
	{
		/* Add a do-while loop to facilitate use of 'break' statements. */
		do
		{
			if( pxAddress->sin_port == 0U )
 8011344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011346:	885b      	ldrh	r3, [r3, #2]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d111      	bne.n	8011370 <vSocketBind+0xc4>
			{
				pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011352:	4618      	mov	r0, r3
 8011354:	f000 faee 	bl	8011934 <prvGetPrivatePortNumber>
 8011358:	4603      	mov	r3, r0
 801135a:	461a      	mov	r2, r3
 801135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135e:	805a      	strh	r2, [r3, #2]
				if( pxAddress->sin_port == ( uint16_t ) 0U )
 8011360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011362:	885b      	ldrh	r3, [r3, #2]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d103      	bne.n	8011370 <vSocketBind+0xc4>
				{
					xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 8011368:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801136c:	62fb      	str	r3, [r7, #44]	; 0x2c
					break;
 801136e:	e02d      	b.n	80113cc <vSocketBind+0x120>
			confirmed that the socket was not yet bound to a port.  If it is called
			from the IP-task, no such check is necessary. */

			/* Check to ensure the port is not already in use.  If the bind is
			called internally, a port MAY be used by more than one socket. */
			if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d004      	beq.n	8011380 <vSocketBind+0xd4>
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801137c:	2b06      	cmp	r3, #6
 801137e:	d00c      	beq.n	801139a <vSocketBind+0xee>
				( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 8011380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011382:	885b      	ldrh	r3, [r3, #2]
 8011384:	4619      	mov	r1, r3
 8011386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011388:	f000 fb2c 	bl	80119e4 <pxListFindListItemWithValue>
 801138c:	4603      	mov	r3, r0
			if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 801138e:	2b00      	cmp	r3, #0
 8011390:	d003      	beq.n	801139a <vSocketBind+0xee>
			{
				FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
					( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
					FreeRTOS_ntohs( pxAddress->sin_port ) ) );
				xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 8011392:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8011396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011398:	e018      	b.n	80113cc <vSocketBind+0x120>
			}
			else
			{
				/* Allocate the port number to the socket.
				This macro will set 'xBoundSocketListItem->xItemValue' */
				socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 801139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139c:	885b      	ldrh	r3, [r3, #2]
 801139e:	461a      	mov	r2, r3
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	609a      	str	r2, [r3, #8]

				/* And also store it in a socket field 'usLocalPort' in host-byte-order,
				mostly used for logging and debugging purposes */
				pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 80113a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a6:	885b      	ldrh	r3, [r3, #2]
 80113a8:	021b      	lsls	r3, r3, #8
 80113aa:	b21a      	sxth	r2, r3
 80113ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ae:	885b      	ldrh	r3, [r3, #2]
 80113b0:	0a1b      	lsrs	r3, r3, #8
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	b21b      	sxth	r3, r3
 80113b6:	4313      	orrs	r3, r2
 80113b8:	b21b      	sxth	r3, r3
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	849a      	strh	r2, [r3, #36]	; 0x24
						vTaskSuspendAll();
					}
					#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

					/* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
					vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	3308      	adds	r3, #8
 80113c4:	4619      	mov	r1, r3
 80113c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113c8:	f7fa ff0a 	bl	800c1e0 <vListInsertEnd>
	if( xReturn != 0 )
	{
		iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
	}

	return xReturn;
 80113cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
} /* Tested */
 80113ce:	4618      	mov	r0, r3
 80113d0:	3730      	adds	r7, #48	; 0x30
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	bf00      	nop
 80113d8:	24006550 	.word	0x24006550
 80113dc:	24005314 	.word	0x24005314

080113e0 <FreeRTOS_closesocket>:
 * In case of a TCP socket: the connection will not be closed automatically
 * Subsequent messages for the closed socket will be responded to with a RST
 * The IP-task will actually close the socket, after receiving a 'eSocketCloseEvent' message
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b086      	sub	sp, #24
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
BaseType_t xResult;
#if( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * )xSocket;
#endif
IPStackEvent_t xCloseEvent;
xCloseEvent.eEventType = eSocketCloseEvent;
 80113e8:	230a      	movs	r3, #10
 80113ea:	733b      	strb	r3, [r7, #12]
xCloseEvent.pvData = xSocket;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	613b      	str	r3, [r7, #16]

	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d003      	beq.n	80113fe <FreeRTOS_closesocket+0x1e>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113fc:	d102      	bne.n	8011404 <FreeRTOS_closesocket+0x24>
	{
		xResult = 0;
 80113fe:	2300      	movs	r3, #0
 8011400:	617b      	str	r3, [r7, #20]
 8011402:	e00e      	b.n	8011422 <FreeRTOS_closesocket+0x42>
		packet handling. */

		/* Note when changing the time-out value below, it must be checked who is calling
		this function. If it is called by the IP-task, a deadlock could occur.
		The IP-task would only call it in case of a user call-back */
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 8011404:	f107 030c 	add.w	r3, r7, #12
 8011408:	2100      	movs	r1, #0
 801140a:	4618      	mov	r0, r3
 801140c:	f7fe fcce 	bl	800fdac <xSendEventStructToIPTask>
 8011410:	4603      	mov	r3, r0
 8011412:	2b00      	cmp	r3, #0
 8011414:	d103      	bne.n	801141e <FreeRTOS_closesocket+0x3e>
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
			xResult = -1;
 8011416:	f04f 33ff 	mov.w	r3, #4294967295
 801141a:	617b      	str	r3, [r7, #20]
 801141c:	e001      	b.n	8011422 <FreeRTOS_closesocket+0x42>
		}
		else
		{
			xResult = 1;
 801141e:	2301      	movs	r3, #1
 8011420:	617b      	str	r3, [r7, #20]
		}
	}

	return xResult;
 8011422:	697b      	ldr	r3, [r7, #20]
}
 8011424:	4618      	mov	r0, r3
 8011426:	3718      	adds	r7, #24
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <vSocketClose>:

/* This is the internal version of FreeRTOS_closesocket()
 * It will be called by the IPtask only to avoid problems with synchronicity
 */
void *vSocketClose( FreeRTOS_Socket_t *pxSocket )
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	#if( ipconfigUSE_TCP == 1 )
	{
		/* For TCP: clean up a little more. */
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801143a:	2b06      	cmp	r3, #6
 801143c:	d122      	bne.n	8011484 <vSocketClose+0x58>
		{
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011442:	2b00      	cmp	r3, #0
 8011444:	d004      	beq.n	8011450 <vSocketClose+0x24>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801144a:	4618      	mov	r0, r3
 801144c:	f005 f838 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
				}
				/* Free the resources which were claimed by the tcpWin member */
				vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	33d8      	adds	r3, #216	; 0xd8
 8011454:	4618      	mov	r0, r3
 8011456:	f004 f809 	bl	801546c <vTCPWindowDestroy>
			}
			#endif /* ipconfigUSE_TCP_WIN */

			/* Free the input and output streams */
			if( pxSocket->u.xTCP.rxStream != NULL )
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801145e:	2b00      	cmp	r3, #0
 8011460:	d004      	beq.n	801146c <vSocketClose+0x40>
			{
				iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
				vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011466:	4618      	mov	r0, r3
 8011468:	f7fa fb68 	bl	800bb3c <vPortFree>
			}

			if( pxSocket->u.xTCP.txStream != NULL )
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011470:	2b00      	cmp	r3, #0
 8011472:	d004      	beq.n	801147e <vSocketClose+0x52>
			{
				iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
				vPortFreeLarge( pxSocket->u.xTCP.txStream );
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011478:	4618      	mov	r0, r3
 801147a:	f7fa fb5f 	bl	800bb3c <vPortFree>
			}

			/* In case this is a child socket, make sure the child-count of the
			parent socket is decreased. */
			prvTCPSetSocketCount( pxSocket );
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f000 f832 	bl	80114e8 <prvTCPSetSocketCount>
	}
	#endif  /* ipconfigUSE_TCP == 1 */

	/* Socket must be unbound first, to ensure no more packets are queued on
	it. */
	if( socketSOCKET_IS_BOUND( pxSocket ) )
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	699b      	ldr	r3, [r3, #24]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d004      	beq.n	8011496 <vSocketClose+0x6a>
		{
			vTaskSuspendAll();
		}
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

		( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	3308      	adds	r3, #8
 8011490:	4618      	mov	r0, r3
 8011492:	f7fa ff02 	bl	800c29a <uxListRemove>
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
	}

	/* Now the socket is not bound the list of waiting packets can be
	drained. */
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801149c:	2b11      	cmp	r3, #17
 801149e:	d112      	bne.n	80114c6 <vSocketClose+0x9a>
	{
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 80114a0:	e00d      	b.n	80114be <vSocketClose+0x92>
		{
			pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7ff fbb9 	bl	8010c20 <vCastPointerTo_NetworkBufferDescriptor_t>
 80114ae:	60f8      	str	r0, [r7, #12]
			( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7fa fef1 	bl	800c29a <uxListRemove>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f005 f801 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d1ed      	bne.n	80114a2 <vSocketClose+0x76>
		}
	}

	if( pxSocket->xEventGroup != NULL )
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	685b      	ldr	r3, [r3, #4]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d004      	beq.n	80114d8 <vSocketClose+0xac>
	{
		vEventGroupDelete( pxSocket->xEventGroup );
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7fa fe03 	bl	800c0de <vEventGroupDelete>
	}
	#endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

	/* Anf finally, after all resources have been freed, free the socket space */
	iptraceMEM_STATS_DELETE( pxSocket );
	vPortFreeSocket( pxSocket );
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f7fa fb2f 	bl	800bb3c <vPortFree>

	return NULL;
 80114de:	2300      	movs	r3, #0
} /* Tested */
 80114e0:	4618      	mov	r0, r3
 80114e2:	3710      	adds	r7, #16
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <prvTCPSetSocketCount>:
	 * When a child socket gets closed, make sure to update the child-count of the
	 * parent.  When a listening parent socket is closed, make sure no child-sockets
	 * keep a pointer to it.
	 */
	static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
	{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b086      	sub	sp, #24
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
	const ListItem_t *pxIterator;
	const ListItem_t *pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 80114f0:	4b18      	ldr	r3, [pc, #96]	; (8011554 <prvTCPSetSocketCount+0x6c>)
 80114f2:	613b      	str	r3, [r7, #16]
	FreeRTOS_Socket_t *pxOtherSocket;
	uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80114f8:	81fb      	strh	r3, [r7, #14]

		for( pxIterator  = listGET_NEXT( pxEnd );
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	617b      	str	r3, [r7, #20]
 8011500:	e020      	b.n	8011544 <prvTCPSetSocketCount+0x5c>
			 pxIterator != pxEnd;
			 pxIterator  = listGET_NEXT( pxIterator ) )
		{
			pxOtherSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	68db      	ldr	r3, [r3, #12]
 8011506:	4618      	mov	r0, r3
 8011508:	f7ff fb74 	bl	8010bf4 <vCastPointerTo_FreeRTOS_Socket_t>
 801150c:	60b8      	str	r0, [r7, #8]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011514:	2b01      	cmp	r3, #1
 8011516:	d112      	bne.n	801153e <prvTCPSetSocketCount+0x56>
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 801151c:	89fa      	ldrh	r2, [r7, #14]
 801151e:	429a      	cmp	r2, r3
 8011520:	d10d      	bne.n	801153e <prvTCPSetSocketCount+0x56>
				( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 8011528:	2b00      	cmp	r3, #0
 801152a:	d008      	beq.n	801153e <prvTCPSetSocketCount+0x56>
			{
				pxOtherSocket->u.xTCP.usChildCount--;
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011532:	3b01      	subs	r3, #1
 8011534:	b29a      	uxth	r2, r3
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
					pxOtherSocket->usLocalPort,
					pxOtherSocket->u.xTCP.usChildCount,
					pxOtherSocket->u.xTCP.usBacklog,
					( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
				break;
 801153c:	e006      	b.n	801154c <prvTCPSetSocketCount+0x64>
			 pxIterator  = listGET_NEXT( pxIterator ) )
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	617b      	str	r3, [r7, #20]
		for( pxIterator  = listGET_NEXT( pxEnd );
 8011544:	697a      	ldr	r2, [r7, #20]
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	429a      	cmp	r2, r3
 801154a:	d1da      	bne.n	8011502 <prvTCPSetSocketCount+0x1a>
			}
		}
	}
 801154c:	bf00      	nop
 801154e:	3718      	adds	r7, #24
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}
 8011554:	24006558 	.word	0x24006558

08011558 <prvSockopt_so_buffer>:
#endif /* ipconfigUSE_TCP == 1 */

/*-----------------------------------------------------------*/

static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t *pxSocket, int32_t lOptionName, const void *pvOptionValue )
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b086      	sub	sp, #24
 801155c:	af00      	add	r7, sp, #0
 801155e:	60f8      	str	r0, [r7, #12]
 8011560:	60b9      	str	r1, [r7, #8]
 8011562:	607a      	str	r2, [r7, #4]
uint32_t ulNewValue;
BaseType_t xReturn;

	if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801156a:	2b06      	cmp	r3, #6
 801156c:	d003      	beq.n	8011576 <prvSockopt_so_buffer+0x1e>
	{
		FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
			( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 801156e:	f06f 0315 	mvn.w	r3, #21
 8011572:	617b      	str	r3, [r7, #20]
 8011574:	e028      	b.n	80115c8 <prvSockopt_so_buffer+0x70>
	}
	else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	2b04      	cmp	r3, #4
 801157a:	d103      	bne.n	8011584 <prvSockopt_so_buffer+0x2c>
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011580:	2b00      	cmp	r3, #0
 8011582:	d106      	bne.n	8011592 <prvSockopt_so_buffer+0x3a>
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	2b05      	cmp	r3, #5
 8011588:	d107      	bne.n	801159a <prvSockopt_so_buffer+0x42>
			( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801158e:	2b00      	cmp	r3, #0
 8011590:	d003      	beq.n	801159a <prvSockopt_so_buffer+0x42>
	{
		FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
			( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8011592:	f06f 0315 	mvn.w	r3, #21
 8011596:	617b      	str	r3, [r7, #20]
 8011598:	e016      	b.n	80115c8 <prvSockopt_so_buffer+0x70>
	}
	else
	{
		ulNewValue = *( ipPOINTER_CAST( const uint32_t *, pvOptionValue ) );
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	613b      	str	r3, [r7, #16]

		if( lOptionName == FREERTOS_SO_SNDBUF )
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	2b04      	cmp	r3, #4
 80115a4:	d10b      	bne.n	80115be <prvSockopt_so_buffer+0x66>
		{
			/* Round up to nearest MSS size */
			ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80115ac:	4619      	mov	r1, r3
 80115ae:	6938      	ldr	r0, [r7, #16]
 80115b0:	f7ff fa92 	bl	8010ad8 <FreeRTOS_round_up>
 80115b4:	6138      	str	r0, [r7, #16]
			pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	693a      	ldr	r2, [r7, #16]
 80115ba:	671a      	str	r2, [r3, #112]	; 0x70
 80115bc:	e002      	b.n	80115c4 <prvSockopt_so_buffer+0x6c>
		}
		else
		{
			pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	693a      	ldr	r2, [r7, #16]
 80115c2:	66da      	str	r2, [r3, #108]	; 0x6c
		}
		xReturn = 0;
 80115c4:	2300      	movs	r3, #0
 80115c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80115c8:	697b      	ldr	r3, [r7, #20]
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3718      	adds	r7, #24
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
	...

080115d4 <FreeRTOS_setsockopt>:
/*-----------------------------------------------------------*/

/* FreeRTOS_setsockopt calls itself, but in a very limited way,
only when FREERTOS_SO_WIN_PROPERTIES is being set. */
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket, int32_t lLevel, int32_t lOptionName, const void *pvOptionValue, size_t uxOptionLength )
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b088      	sub	sp, #32
 80115d8:	af00      	add	r7, sp, #0
 80115da:	60f8      	str	r0, [r7, #12]
 80115dc:	60b9      	str	r1, [r7, #8]
 80115de:	607a      	str	r2, [r7, #4]
 80115e0:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 80115e2:	f06f 0315 	mvn.w	r3, #21
 80115e6:	61fb      	str	r3, [r7, #28]
FreeRTOS_Socket_t *pxSocket;

	pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	61bb      	str	r3, [r7, #24]
	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) lLevel;
	( void ) uxOptionLength;
	
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80115ec:	69bb      	ldr	r3, [r7, #24]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d003      	beq.n	80115fa <FreeRTOS_setsockopt+0x26>
 80115f2:	69bb      	ldr	r3, [r7, #24]
 80115f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f8:	d104      	bne.n	8011604 <FreeRTOS_setsockopt+0x30>
	{
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 80115fa:	f06f 0315 	mvn.w	r3, #21
 80115fe:	61fb      	str	r3, [r7, #28]
		return xReturn;
 8011600:	69fb      	ldr	r3, [r7, #28]
 8011602:	e193      	b.n	801192c <FreeRTOS_setsockopt+0x358>
	}

	switch( lOptionName )
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b12      	cmp	r3, #18
 8011608:	f200 817a 	bhi.w	8011900 <FreeRTOS_setsockopt+0x32c>
 801160c:	a201      	add	r2, pc, #4	; (adr r2, 8011614 <FreeRTOS_setsockopt+0x40>)
 801160e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011612:	bf00      	nop
 8011614:	08011661 	.word	0x08011661
 8011618:	0801166f 	.word	0x0801166f
 801161c:	0801169b 	.word	0x0801169b
 8011620:	08011901 	.word	0x08011901
 8011624:	0801171b 	.word	0x0801171b
 8011628:	0801171b 	.word	0x0801171b
 801162c:	08011901 	.word	0x08011901
 8011630:	08011901 	.word	0x08011901
 8011634:	08011901 	.word	0x08011901
 8011638:	08011901 	.word	0x08011901
 801163c:	08011901 	.word	0x08011901
 8011640:	080117d5 	.word	0x080117d5
 8011644:	0801180d 	.word	0x0801180d
 8011648:	08011729 	.word	0x08011729
 801164c:	08011845 	.word	0x08011845
 8011650:	080118af 	.word	0x080118af
 8011654:	08011901 	.word	0x08011901
 8011658:	080116cd 	.word	0x080116cd
 801165c:	080116d9 	.word	0x080116d9
	{
		case FREERTOS_SO_RCVTIMEO	:
			/* Receive time out. */
			pxSocket->xReceiveBlockTime = *( ( const TickType_t *) pvOptionValue );
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	61da      	str	r2, [r3, #28]
			xReturn = 0;
 8011668:	2300      	movs	r3, #0
 801166a:	61fb      	str	r3, [r7, #28]
			break;
 801166c:	e15d      	b.n	801192a <FreeRTOS_setsockopt+0x356>

		case FREERTOS_SO_SNDTIMEO	:
			pxSocket->xSendBlockTime = *( ( const TickType_t *) pvOptionValue );
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	681a      	ldr	r2, [r3, #0]
 8011672:	69bb      	ldr	r3, [r7, #24]
 8011674:	621a      	str	r2, [r3, #32]
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 8011676:	69bb      	ldr	r3, [r7, #24]
 8011678:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801167c:	2b11      	cmp	r3, #17
 801167e:	d109      	bne.n	8011694 <FreeRTOS_setsockopt+0xc0>
			{
				/* The send time out is capped for the reason stated in the
				comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
				in FreeRTOSIPConfig.h (assuming an official configuration file
				is being used. */
				if( pxSocket->xSendBlockTime > ( ( TickType_t ) ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS ) )
 8011680:	69bb      	ldr	r3, [r7, #24]
 8011682:	6a1b      	ldr	r3, [r3, #32]
 8011684:	f241 3288 	movw	r2, #5000	; 0x1388
 8011688:	4293      	cmp	r3, r2
 801168a:	d903      	bls.n	8011694 <FreeRTOS_setsockopt+0xc0>
				{
					pxSocket->xSendBlockTime = ( ( TickType_t ) ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS );
 801168c:	69bb      	ldr	r3, [r7, #24]
 801168e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011692:	621a      	str	r2, [r3, #32]
			{
				/* For TCP socket, it isn't necessary to limit the blocking time
				because	the FreeRTOS_send() function does not wait for a network
				buffer to become available. */
			}
			xReturn = 0;
 8011694:	2300      	movs	r3, #0
 8011696:	61fb      	str	r3, [r7, #28]
			break;
 8011698:	e147      	b.n	801192a <FreeRTOS_setsockopt+0x356>

		case FREERTOS_SO_UDPCKSUM_OUT :
			/* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
			 * is anything else than NULL, the checksum generation will be turned on. */

			if( pvOptionValue == NULL )
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d109      	bne.n	80116b4 <FreeRTOS_setsockopt+0xe0>
			{
				pxSocket->ucSocketOptions &= ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT );
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80116a6:	f023 0302 	bic.w	r3, r3, #2
 80116aa:	b2da      	uxtb	r2, r3
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80116b2:	e008      	b.n	80116c6 <FreeRTOS_setsockopt+0xf2>
			}
			else
			{
				pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 80116b4:	69bb      	ldr	r3, [r7, #24]
 80116b6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80116ba:	f043 0302 	orr.w	r3, r3, #2
 80116be:	b2da      	uxtb	r2, r3
 80116c0:	69bb      	ldr	r3, [r7, #24]
 80116c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
			xReturn = 0;
 80116c6:	2300      	movs	r3, #0
 80116c8:	61fb      	str	r3, [r7, #28]
			break;
 80116ca:	e12e      	b.n	801192a <FreeRTOS_setsockopt+0x356>
				{
					/* Each socket can have a callback function that is executed
					when there is an event the socket's owner might want to
					process. */
					/* The type cast of the pointer expression "A" to type "B" removes const qualifier from the pointed to type. */
					pxSocket->pxUserWakeCallback = ( const SocketWakeupCallback_t ) pvOptionValue;
 80116cc:	683a      	ldr	r2, [r7, #0]
 80116ce:	69bb      	ldr	r3, [r7, #24]
 80116d0:	629a      	str	r2, [r3, #40]	; 0x28
					xReturn = 0;
 80116d2:	2300      	movs	r3, #0
 80116d4:	61fb      	str	r3, [r7, #28]
				}
				break;
 80116d6:	e128      	b.n	801192a <FreeRTOS_setsockopt+0x356>
			#endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

			case FREERTOS_SO_SET_LOW_HIGH_WATER:
				{
				const LowHighWater_t *pxLowHighWater = ipPOINTER_CAST( const LowHighWater_t *, pvOptionValue );
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	617b      	str	r3, [r7, #20]

					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80116dc:	69bb      	ldr	r3, [r7, #24]
 80116de:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80116e2:	2b06      	cmp	r3, #6
 80116e4:	f040 8110 	bne.w	8011908 <FreeRTOS_setsockopt+0x334>
					{
						/* It is not allowed to access 'pxSocket->u.xTCP'. */
						FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}
					if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	f080 810b 	bcs.w	801190c <FreeRTOS_setsockopt+0x338>
						( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	685a      	ldr	r2, [r3, #4]
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
					if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 80116fe:	429a      	cmp	r2, r3
 8011700:	f200 8104 	bhi.w	801190c <FreeRTOS_setsockopt+0x338>
						/* Impossible values. */
						FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}
					/* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
					pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	69bb      	ldr	r3, [r7, #24]
 801170a:	665a      	str	r2, [r3, #100]	; 0x64
					/* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
					pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	685a      	ldr	r2, [r3, #4]
 8011710:	69bb      	ldr	r3, [r7, #24]
 8011712:	669a      	str	r2, [r3, #104]	; 0x68
					xReturn = 0;
 8011714:	2300      	movs	r3, #0
 8011716:	61fb      	str	r3, [r7, #28]
				}
				break;
 8011718:	e107      	b.n	801192a <FreeRTOS_setsockopt+0x356>

			case FREERTOS_SO_SNDBUF:	/* Set the size of the send buffer, in units of MSS (TCP only) */
			case FREERTOS_SO_RCVBUF:	/* Set the size of the receive buffer, in units of MSS (TCP only) */
				{
					xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 801171a:	683a      	ldr	r2, [r7, #0]
 801171c:	6879      	ldr	r1, [r7, #4]
 801171e:	69b8      	ldr	r0, [r7, #24]
 8011720:	f7ff ff1a 	bl	8011558 <prvSockopt_so_buffer>
 8011724:	61f8      	str	r0, [r7, #28]
				}
				break;
 8011726:	e100      	b.n	801192a <FreeRTOS_setsockopt+0x356>

			case FREERTOS_SO_WIN_PROPERTIES:	/* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
				{
					const WinProperties_t* pxProps;

					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8011728:	69bb      	ldr	r3, [r7, #24]
 801172a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801172e:	2b06      	cmp	r3, #6
 8011730:	f040 80ee 	bne.w	8011910 <FreeRTOS_setsockopt+0x33c>
					{
						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011738:	2b00      	cmp	r3, #0
 801173a:	f040 80e7 	bne.w	801190c <FreeRTOS_setsockopt+0x338>
 801173e:	69bb      	ldr	r3, [r7, #24]
 8011740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011742:	2b00      	cmp	r3, #0
 8011744:	f040 80e2 	bne.w	801190c <FreeRTOS_setsockopt+0x338>
					{
						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: buffer already created\n" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					pxProps = ipPOINTER_CAST( const WinProperties_t *, pvOptionValue );
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	613b      	str	r3, [r7, #16]

					xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	461a      	mov	r2, r3
 8011750:	2104      	movs	r1, #4
 8011752:	69b8      	ldr	r0, [r7, #24]
 8011754:	f7ff ff00 	bl	8011558 <prvSockopt_so_buffer>
 8011758:	61f8      	str	r0, [r7, #28]
					if ( xReturn != 0 )
 801175a:	69fb      	ldr	r3, [r7, #28]
 801175c:	2b00      	cmp	r3, #0
 801175e:	f040 80d9 	bne.w	8011914 <FreeRTOS_setsockopt+0x340>
					{
						break;	/* will return an error. */
					}

					xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	3308      	adds	r3, #8
 8011766:	461a      	mov	r2, r3
 8011768:	2105      	movs	r1, #5
 801176a:	69b8      	ldr	r0, [r7, #24]
 801176c:	f7ff fef4 	bl	8011558 <prvSockopt_so_buffer>
 8011770:	61f8      	str	r0, [r7, #28]
					if ( xReturn != 0 )
 8011772:	69fb      	ldr	r3, [r7, #28]
 8011774:	2b00      	cmp	r3, #0
 8011776:	f040 80cf 	bne.w	8011918 <FreeRTOS_setsockopt+0x344>
						break;	/* will return an error. */
					}

					#if( ipconfigUSE_TCP_WIN == 1 )
					{
						pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the TCP reception window */
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	461a      	mov	r2, r3
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
						pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the TCP transmit window */
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	461a      	mov	r2, r3
 801178c:	69bb      	ldr	r3, [r7, #24]
 801178e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					}
					#endif

					/* In case the socket has already initialised its tcpWin,
					adapt the window size parameters */
					if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 8011792:	69bb      	ldr	r3, [r7, #24]
 8011794:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8011798:	f003 0301 	and.w	r3, r3, #1
 801179c:	b2db      	uxtb	r3, r3
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d015      	beq.n	80117ce <FreeRTOS_setsockopt+0x1fa>
					{
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usInitMSS;
 80117a2:	69bb      	ldr	r3, [r7, #24]
 80117a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80117a8:	69ba      	ldr	r2, [r7, #24]
 80117aa:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 80117ae:	fb02 f203 	mul.w	r2, r2, r3
 80117b2:	69bb      	ldr	r3, [r7, #24]
 80117b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
						pxSocket->u.xTCP.xTCPWindow.xSize.ulTxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usInitMSS;
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80117be:	69ba      	ldr	r2, [r7, #24]
 80117c0:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 80117c4:	fb02 f203 	mul.w	r2, r2, r3
 80117c8:	69bb      	ldr	r3, [r7, #24]
 80117ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
					}
				}

				xReturn = 0;
 80117ce:	2300      	movs	r3, #0
 80117d0:	61fb      	str	r3, [r7, #28]
				break;
 80117d2:	e0aa      	b.n	801192a <FreeRTOS_setsockopt+0x356>

			case FREERTOS_SO_REUSE_LISTEN_SOCKET:	/* If true, the server-socket will turn into a connected socket */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80117d4:	69bb      	ldr	r3, [r7, #24]
 80117d6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80117da:	2b06      	cmp	r3, #6
 80117dc:	f040 809e 	bne.w	801191c <FreeRTOS_setsockopt+0x348>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}
					if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d007      	beq.n	80117f8 <FreeRTOS_setsockopt+0x224>
					{
						pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 80117e8:	69ba      	ldr	r2, [r7, #24]
 80117ea:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 80117ee:	f043 0308 	orr.w	r3, r3, #8
 80117f2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 80117f6:	e006      	b.n	8011806 <FreeRTOS_setsockopt+0x232>
					}
					else
					{
						pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE;
 80117f8:	69ba      	ldr	r2, [r7, #24]
 80117fa:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 80117fe:	f36f 03c3 	bfc	r3, #3, #1
 8011802:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
					}
				}
				xReturn = 0;
 8011806:	2300      	movs	r3, #0
 8011808:	61fb      	str	r3, [r7, #28]
				break;
 801180a:	e08e      	b.n	801192a <FreeRTOS_setsockopt+0x356>

			case FREERTOS_SO_CLOSE_AFTER_SEND:		/* As soon as the last byte has been transmitted, finalise the connection */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 801180c:	69bb      	ldr	r3, [r7, #24]
 801180e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011812:	2b06      	cmp	r3, #6
 8011814:	f040 8084 	bne.w	8011920 <FreeRTOS_setsockopt+0x34c>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d007      	beq.n	8011830 <FreeRTOS_setsockopt+0x25c>
					{
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE;
 8011820:	69ba      	ldr	r2, [r7, #24]
 8011822:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8011826:	f043 0310 	orr.w	r3, r3, #16
 801182a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 801182e:	e006      	b.n	801183e <FreeRTOS_setsockopt+0x26a>
					}
					else
					{
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE;
 8011830:	69ba      	ldr	r2, [r7, #24]
 8011832:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8011836:	f36f 1304 	bfc	r3, #4, #1
 801183a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
					}
				}
				xReturn = 0;
 801183e:	2300      	movs	r3, #0
 8011840:	61fb      	str	r3, [r7, #28]
				break;
 8011842:	e072      	b.n	801192a <FreeRTOS_setsockopt+0x356>

			case FREERTOS_SO_SET_FULL_SIZE:		/* Refuse to send packets smaller than MSS  */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8011844:	69bb      	ldr	r3, [r7, #24]
 8011846:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801184a:	2b06      	cmp	r3, #6
 801184c:	d16a      	bne.n	8011924 <FreeRTOS_setsockopt+0x350>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( const BaseType_t *) pvOptionValue ) != 0 )
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d007      	beq.n	8011866 <FreeRTOS_setsockopt+0x292>
					{
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE;
 8011856:	69ba      	ldr	r2, [r7, #24]
 8011858:	f892 30d8 	ldrb.w	r3, [r2, #216]	; 0xd8
 801185c:	f043 0302 	orr.w	r3, r3, #2
 8011860:	f882 30d8 	strb.w	r3, [r2, #216]	; 0xd8
 8011864:	e006      	b.n	8011874 <FreeRTOS_setsockopt+0x2a0>
					}
					else
					{
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE;
 8011866:	69ba      	ldr	r2, [r7, #24]
 8011868:	f892 30d8 	ldrb.w	r3, [r2, #216]	; 0xd8
 801186c:	f36f 0341 	bfc	r3, #1, #1
 8011870:	f882 30d8 	strb.w	r3, [r2, #216]	; 0xd8
					}

					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 801187a:	f003 0302 	and.w	r3, r3, #2
 801187e:	b2db      	uxtb	r3, r3
 8011880:	2b00      	cmp	r3, #0
 8011882:	d111      	bne.n	80118a8 <FreeRTOS_setsockopt+0x2d4>
						( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 8011884:	69bb      	ldr	r3, [r7, #24]
 8011886:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 801188a:	2b04      	cmp	r3, #4
 801188c:	d90c      	bls.n	80118a8 <FreeRTOS_setsockopt+0x2d4>
						( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 801188e:	69b8      	ldr	r0, [r7, #24]
 8011890:	f000 fb86 	bl	8011fa0 <FreeRTOS_tx_size>
 8011894:	4603      	mov	r3, r0
						( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 8011896:	2b00      	cmp	r3, #0
 8011898:	d006      	beq.n	80118a8 <FreeRTOS_setsockopt+0x2d4>
					{
						pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bSendFullSize */
 801189a:	69bb      	ldr	r3, [r7, #24]
 801189c:	2201      	movs	r2, #1
 801189e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
						( void ) xSendEventToIPTask( eTCPTimerEvent );
 80118a2:	2006      	movs	r0, #6
 80118a4:	f7fe fa6c 	bl	800fd80 <xSendEventToIPTask>
					}
				}
				xReturn = 0;
 80118a8:	2300      	movs	r3, #0
 80118aa:	61fb      	str	r3, [r7, #28]
				break;
 80118ac:	e03d      	b.n	801192a <FreeRTOS_setsockopt+0x356>

			case FREERTOS_SO_STOP_RX:		/* Refuse to receive more packts */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80118ae:	69bb      	ldr	r3, [r7, #24]
 80118b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80118b4:	2b06      	cmp	r3, #6
 80118b6:	d137      	bne.n	8011928 <FreeRTOS_setsockopt+0x354>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}
					if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d007      	beq.n	80118d0 <FreeRTOS_setsockopt+0x2fc>
					{
						pxSocket->u.xTCP.bits.bRxStopped = pdTRUE;
 80118c0:	69ba      	ldr	r2, [r7, #24]
 80118c2:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 80118c6:	f043 0304 	orr.w	r3, r3, #4
 80118ca:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
 80118ce:	e006      	b.n	80118de <FreeRTOS_setsockopt+0x30a>
					}
					else
					{
						pxSocket->u.xTCP.bits.bRxStopped = pdFALSE;
 80118d0:	69ba      	ldr	r2, [r7, #24]
 80118d2:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 80118d6:	f36f 0382 	bfc	r3, #2, #1
 80118da:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
					}

					pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 80118de:	69ba      	ldr	r2, [r7, #24]
 80118e0:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 80118e4:	f043 0301 	orr.w	r3, r3, #1
 80118e8:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	2201      	movs	r2, #1
 80118f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
					( void ) xSendEventToIPTask( eTCPTimerEvent );
 80118f4:	2006      	movs	r0, #6
 80118f6:	f7fe fa43 	bl	800fd80 <xSendEventToIPTask>
				}
				xReturn = 0;
 80118fa:	2300      	movs	r3, #0
 80118fc:	61fb      	str	r3, [r7, #28]
				break;
 80118fe:	e014      	b.n	801192a <FreeRTOS_setsockopt+0x356>

		#endif  /* ipconfigUSE_TCP == 1 */

		default :
			/* No other options are handled. */
			xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 8011900:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 8011904:	61fb      	str	r3, [r7, #28]
			break;
 8011906:	e010      	b.n	801192a <FreeRTOS_setsockopt+0x356>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 8011908:	bf00      	nop
 801190a:	e00e      	b.n	801192a <FreeRTOS_setsockopt+0x356>
	}

	return xReturn;
 801190c:	bf00      	nop
 801190e:	e00c      	b.n	801192a <FreeRTOS_setsockopt+0x356>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 8011910:	bf00      	nop
 8011912:	e00a      	b.n	801192a <FreeRTOS_setsockopt+0x356>
						break;	/* will return an error. */
 8011914:	bf00      	nop
 8011916:	e008      	b.n	801192a <FreeRTOS_setsockopt+0x356>
						break;	/* will return an error. */
 8011918:	bf00      	nop
 801191a:	e006      	b.n	801192a <FreeRTOS_setsockopt+0x356>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 801191c:	bf00      	nop
 801191e:	e004      	b.n	801192a <FreeRTOS_setsockopt+0x356>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 8011920:	bf00      	nop
 8011922:	e002      	b.n	801192a <FreeRTOS_setsockopt+0x356>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 8011924:	bf00      	nop
 8011926:	e000      	b.n	801192a <FreeRTOS_setsockopt+0x356>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 8011928:	bf00      	nop
	return xReturn;
 801192a:	69fb      	ldr	r3, [r7, #28]
} /* Tested */
 801192c:	4618      	mov	r0, r3
 801192e:	3720      	adds	r7, #32
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <prvGetPrivatePortNumber>:

/*-----------------------------------------------------------*/

/* Find an available port number per https://tools.ietf.org/html/rfc6056. */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b086      	sub	sp, #24
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
const uint16_t usEphemeralPortCount =
 801193c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8011940:	81fb      	strh	r3, [r7, #14]
	socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
uint16_t usIterations = usEphemeralPortCount;
 8011942:	89fb      	ldrh	r3, [r7, #14]
 8011944:	82fb      	strh	r3, [r7, #22]
uint32_t ulRandomSeed = 0;
 8011946:	2300      	movs	r3, #0
 8011948:	60bb      	str	r3, [r7, #8]
uint16_t usResult = 0;
 801194a:	2300      	movs	r3, #0
 801194c:	82bb      	strh	r3, [r7, #20]
const List_t *pxList;

#if ipconfigUSE_TCP == 1
	if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2b06      	cmp	r3, #6
 8011952:	d102      	bne.n	801195a <prvGetPrivatePortNumber+0x26>
	{
		pxList = &xBoundTCPSocketsList;
 8011954:	4b21      	ldr	r3, [pc, #132]	; (80119dc <prvGetPrivatePortNumber+0xa8>)
 8011956:	613b      	str	r3, [r7, #16]
 8011958:	e001      	b.n	801195e <prvGetPrivatePortNumber+0x2a>
	}
	else
#endif
	{
		pxList = &xBoundUDPSocketsList;
 801195a:	4b21      	ldr	r3, [pc, #132]	; (80119e0 <prvGetPrivatePortNumber+0xac>)
 801195c:	613b      	str	r3, [r7, #16]
	/* Find the next available port using the random seed as a starting
	point. */
	do
	{
		/* Only proceed if the random number generator succeeded. */
		if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 801195e:	f107 0308 	add.w	r3, r7, #8
 8011962:	4618      	mov	r0, r3
 8011964:	f7ef fbb4 	bl	80010d0 <xApplicationGetRandomNumber>
 8011968:	4603      	mov	r3, r0
 801196a:	2b00      	cmp	r3, #0
 801196c:	d030      	beq.n	80119d0 <prvGetPrivatePortNumber+0x9c>
		}

		/* Map the random to a candidate port. */
		usResult =
			socketAUTO_PORT_ALLOCATION_START_NUMBER +
			( ( ( uint16_t )ulRandomSeed ) % usEphemeralPortCount );
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	b29b      	uxth	r3, r3
			socketAUTO_PORT_ALLOCATION_START_NUMBER +
 8011972:	89fa      	ldrh	r2, [r7, #14]
 8011974:	fbb3 f1f2 	udiv	r1, r3, r2
 8011978:	fb02 f201 	mul.w	r2, r2, r1
 801197c:	1a9b      	subs	r3, r3, r2
 801197e:	b29b      	uxth	r3, r3
		usResult =
 8011980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011984:	82bb      	strh	r3, [r7, #20]

		/* Check if there's already an open socket with the same protocol
		and port. */
		if( NULL == pxListFindListItemWithValue(
			pxList,
			( TickType_t )FreeRTOS_htons( usResult ) ) )
 8011986:	8abb      	ldrh	r3, [r7, #20]
 8011988:	021b      	lsls	r3, r3, #8
 801198a:	b21a      	sxth	r2, r3
 801198c:	8abb      	ldrh	r3, [r7, #20]
 801198e:	0a1b      	lsrs	r3, r3, #8
 8011990:	b29b      	uxth	r3, r3
 8011992:	b21b      	sxth	r3, r3
 8011994:	4313      	orrs	r3, r2
 8011996:	b21b      	sxth	r3, r3
 8011998:	b29b      	uxth	r3, r3
		if( NULL == pxListFindListItemWithValue(
 801199a:	4619      	mov	r1, r3
 801199c:	6938      	ldr	r0, [r7, #16]
 801199e:	f000 f821 	bl	80119e4 <pxListFindListItemWithValue>
 80119a2:	4603      	mov	r3, r0
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d10a      	bne.n	80119be <prvGetPrivatePortNumber+0x8a>
		{
			usResult = FreeRTOS_htons( usResult );
 80119a8:	8abb      	ldrh	r3, [r7, #20]
 80119aa:	021b      	lsls	r3, r3, #8
 80119ac:	b21a      	sxth	r2, r3
 80119ae:	8abb      	ldrh	r3, [r7, #20]
 80119b0:	0a1b      	lsrs	r3, r3, #8
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	b21b      	sxth	r3, r3
 80119b6:	4313      	orrs	r3, r2
 80119b8:	b21b      	sxth	r3, r3
 80119ba:	82bb      	strh	r3, [r7, #20]
			break;
 80119bc:	e009      	b.n	80119d2 <prvGetPrivatePortNumber+0x9e>
		}
		else
		{
			usResult = 0;
 80119be:	2300      	movs	r3, #0
 80119c0:	82bb      	strh	r3, [r7, #20]
		}

		usIterations--;
 80119c2:	8afb      	ldrh	r3, [r7, #22]
 80119c4:	3b01      	subs	r3, #1
 80119c6:	82fb      	strh	r3, [r7, #22]
	}
	while( usIterations > 0U );
 80119c8:	8afb      	ldrh	r3, [r7, #22]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d1c7      	bne.n	801195e <prvGetPrivatePortNumber+0x2a>
 80119ce:	e000      	b.n	80119d2 <prvGetPrivatePortNumber+0x9e>
			break;
 80119d0:	bf00      	nop

	return usResult;
 80119d2:	8abb      	ldrh	r3, [r7, #20]
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3718      	adds	r7, #24
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	24006550 	.word	0x24006550
 80119e0:	24005314 	.word	0x24005314

080119e4 <pxListFindListItemWithValue>:
/*-----------------------------------------------------------*/

/* pxListFindListItemWithValue: find a list item in a bound socket list
'xWantedItemValue' refers to a port number */
static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItemValue )
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b086      	sub	sp, #24
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	6039      	str	r1, [r7, #0]
const ListItem_t * pxResult = NULL;
 80119ee:	2300      	movs	r3, #0
 80119f0:	617b      	str	r3, [r7, #20]

	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 80119f2:	f7ff f849 	bl	8010a88 <xIPIsNetworkTaskReady>
 80119f6:	4603      	mov	r3, r0
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d018      	beq.n	8011a2e <pxListFindListItemWithValue+0x4a>
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d015      	beq.n	8011a2e <pxListFindListItemWithValue+0x4a>
	{
		const ListItem_t *pxIterator;
		const ListItem_t *pxEnd = listGET_END_MARKER( pxList );
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	3308      	adds	r3, #8
 8011a06:	60fb      	str	r3, [r7, #12]
		for( pxIterator  = listGET_NEXT( pxEnd );
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	613b      	str	r3, [r7, #16]
 8011a0e:	e00a      	b.n	8011a26 <pxListFindListItemWithValue+0x42>
			 pxIterator != pxEnd;
			 pxIterator  = listGET_NEXT( pxIterator ) )
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	683a      	ldr	r2, [r7, #0]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d102      	bne.n	8011a20 <pxListFindListItemWithValue+0x3c>
			{
				pxResult = pxIterator;
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	617b      	str	r3, [r7, #20]
				break;
 8011a1e:	e006      	b.n	8011a2e <pxListFindListItemWithValue+0x4a>
			 pxIterator  = listGET_NEXT( pxIterator ) )
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	613b      	str	r3, [r7, #16]
		for( pxIterator  = listGET_NEXT( pxEnd );
 8011a26:	693a      	ldr	r2, [r7, #16]
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d1f0      	bne.n	8011a10 <pxListFindListItemWithValue+0x2c>
			}
		}
	}

	return pxResult;
 8011a2e:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 8011a30:	4618      	mov	r0, r3
 8011a32:	3718      	adds	r7, #24
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <pxUDPSocketLookup>:

/*-----------------------------------------------------------*/

FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b086      	sub	sp, #24
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
const ListItem_t *pxListItem;
FreeRTOS_Socket_t *pxSocket = NULL;
 8011a40:	2300      	movs	r3, #0
 8011a42:	617b      	str	r3, [r7, #20]

	/* Looking up a socket is quite simple, find a match with the local port.

	See if there is a list item associated with the port number on the
	list of bound sockets. */
	pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 8011a44:	6879      	ldr	r1, [r7, #4]
 8011a46:	4810      	ldr	r0, [pc, #64]	; (8011a88 <pxUDPSocketLookup+0x50>)
 8011a48:	f7ff ffcc 	bl	80119e4 <pxListFindListItemWithValue>
 8011a4c:	6138      	str	r0, [r7, #16]

	if( pxListItem != NULL )
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d014      	beq.n	8011a7e <pxUDPSocketLookup+0x46>
	{
		/* The owner of the list item is the socket itself. */
		pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxListItem ) );
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	68db      	ldr	r3, [r3, #12]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7ff f8cb 	bl	8010bf4 <vCastPointerTo_FreeRTOS_Socket_t>
 8011a5e:	6178      	str	r0, [r7, #20]
		configASSERT( pxSocket != NULL );
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d10b      	bne.n	8011a7e <pxUDPSocketLookup+0x46>
 8011a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a6a:	b672      	cpsid	i
 8011a6c:	f383 8811 	msr	BASEPRI, r3
 8011a70:	f3bf 8f6f 	isb	sy
 8011a74:	f3bf 8f4f 	dsb	sy
 8011a78:	b662      	cpsie	i
 8011a7a:	60fb      	str	r3, [r7, #12]
 8011a7c:	e7fe      	b.n	8011a7c <pxUDPSocketLookup+0x44>
	}
	return pxSocket;
 8011a7e:	697b      	ldr	r3, [r7, #20]
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3718      	adds	r7, #24
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	24005314 	.word	0x24005314

08011a8c <FreeRTOS_inet_pton4>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_inet_pton4( const char *pcSource, void *pvDestination )
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b08d      	sub	sp, #52	; 0x34
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	6039      	str	r1, [r7, #0]
const uint32_t ulDecimalBase = 10U;
 8011a96:	230a      	movs	r3, #10
 8011a98:	61fb      	str	r3, [r7, #28]
uint8_t ucOctet[ socketMAX_IP_ADDRESS_OCTETS ];
uint32_t ulReturn = 0UL, ulValue;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	60fb      	str	r3, [r7, #12]
UBaseType_t uxOctetNumber;
BaseType_t xResult = pdPASS;
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	627b      	str	r3, [r7, #36]	; 0x24
const char *pcIPAddress = pcSource;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	623b      	str	r3, [r7, #32]
const void *pvCopySource;

	/* Translate "192.168.2.100" to a 32-bit number, network-endian. */
	for( uxOctetNumber = 0U; uxOctetNumber < socketMAX_IP_ADDRESS_OCTETS; uxOctetNumber++ )
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8011aaa:	e043      	b.n	8011b34 <FreeRTOS_inet_pton4+0xa8>
	{
		ulValue = 0UL;
 8011aac:	2300      	movs	r3, #0
 8011aae:	62fb      	str	r3, [r7, #44]	; 0x2c

		while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
 8011ab0:	e011      	b.n	8011ad6 <FreeRTOS_inet_pton4+0x4a>
		{
		BaseType_t xChar;
			/* Move previous read characters into the next decimal
			position. */
			ulValue *= ulDecimalBase;
 8011ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab4:	69fa      	ldr	r2, [r7, #28]
 8011ab6:	fb02 f303 	mul.w	r3, r2, r3
 8011aba:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Add the binary value of the ascii character. */
			xChar = ( BaseType_t ) pcIPAddress[ 0 ];
 8011abc:	6a3b      	ldr	r3, [r7, #32]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	61bb      	str	r3, [r7, #24]
			xChar = xChar - ( BaseType_t ) '0';
 8011ac2:	69bb      	ldr	r3, [r7, #24]
 8011ac4:	3b30      	subs	r3, #48	; 0x30
 8011ac6:	61bb      	str	r3, [r7, #24]
			ulValue += ( uint32_t ) xChar;
 8011ac8:	69bb      	ldr	r3, [r7, #24]
 8011aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011acc:	4413      	add	r3, r2
 8011ace:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Move to next character in the string. */
			pcIPAddress++;
 8011ad0:	6a3b      	ldr	r3, [r7, #32]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	623b      	str	r3, [r7, #32]
		while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
 8011ad6:	6a3b      	ldr	r3, [r7, #32]
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	2b2f      	cmp	r3, #47	; 0x2f
 8011adc:	d903      	bls.n	8011ae6 <FreeRTOS_inet_pton4+0x5a>
 8011ade:	6a3b      	ldr	r3, [r7, #32]
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	2b39      	cmp	r3, #57	; 0x39
 8011ae4:	d9e5      	bls.n	8011ab2 <FreeRTOS_inet_pton4+0x26>
		}

		/* Check characters were read. */
		if( pcIPAddress == pcSource )
 8011ae6:	6a3a      	ldr	r2, [r7, #32]
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d101      	bne.n	8011af2 <FreeRTOS_inet_pton4+0x66>
		{
			xResult = pdFAIL;
 8011aee:	2300      	movs	r3, #0
 8011af0:	627b      	str	r3, [r7, #36]	; 0x24
		}

		/* Check the value fits in an 8-bit number. */
		if( ulValue > 0xffUL )
 8011af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af4:	2bff      	cmp	r3, #255	; 0xff
 8011af6:	d902      	bls.n	8011afe <FreeRTOS_inet_pton4+0x72>
		{
			xResult = pdFAIL;
 8011af8:	2300      	movs	r3, #0
 8011afa:	627b      	str	r3, [r7, #36]	; 0x24
 8011afc:	e014      	b.n	8011b28 <FreeRTOS_inet_pton4+0x9c>
		}
		else
		{
			ucOctet[ uxOctetNumber ] = ( uint8_t ) ulValue;
 8011afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b00:	b2d9      	uxtb	r1, r3
 8011b02:	f107 0210 	add.w	r2, r7, #16
 8011b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b08:	4413      	add	r3, r2
 8011b0a:	460a      	mov	r2, r1
 8011b0c:	701a      	strb	r2, [r3, #0]

			/* Check the next character is as expected. */
			if( uxOctetNumber < ( socketMAX_IP_ADDRESS_OCTETS - 1U ) )
 8011b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b10:	2b02      	cmp	r3, #2
 8011b12:	d809      	bhi.n	8011b28 <FreeRTOS_inet_pton4+0x9c>
			{
				if( *pcIPAddress != '.' )
 8011b14:	6a3b      	ldr	r3, [r7, #32]
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	2b2e      	cmp	r3, #46	; 0x2e
 8011b1a:	d002      	beq.n	8011b22 <FreeRTOS_inet_pton4+0x96>
				{
					xResult = pdFAIL;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8011b20:	e002      	b.n	8011b28 <FreeRTOS_inet_pton4+0x9c>
				}
				else
				{
					/* Move past the dot. */
					pcIPAddress++;
 8011b22:	6a3b      	ldr	r3, [r7, #32]
 8011b24:	3301      	adds	r3, #1
 8011b26:	623b      	str	r3, [r7, #32]
				}
			}
		}

		if( xResult == pdFAIL )
 8011b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d006      	beq.n	8011b3c <FreeRTOS_inet_pton4+0xb0>
	for( uxOctetNumber = 0U; uxOctetNumber < socketMAX_IP_ADDRESS_OCTETS; uxOctetNumber++ )
 8011b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b30:	3301      	adds	r3, #1
 8011b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b36:	2b03      	cmp	r3, #3
 8011b38:	d9b8      	bls.n	8011aac <FreeRTOS_inet_pton4+0x20>
 8011b3a:	e000      	b.n	8011b3e <FreeRTOS_inet_pton4+0xb2>
		{
			/* No point going on. */
			break;
 8011b3c:	bf00      	nop
		}
	}

	if( *pcIPAddress != ( char ) 0 )
 8011b3e:	6a3b      	ldr	r3, [r7, #32]
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d001      	beq.n	8011b4a <FreeRTOS_inet_pton4+0xbe>
	{
		/* Expected the end of the string. */
		xResult = pdFAIL;
 8011b46:	2300      	movs	r3, #0
 8011b48:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( uxOctetNumber != socketMAX_IP_ADDRESS_OCTETS )
 8011b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b4c:	2b04      	cmp	r3, #4
 8011b4e:	d001      	beq.n	8011b54 <FreeRTOS_inet_pton4+0xc8>
	{
		/* Didn't read enough octets. */
		xResult = pdFAIL;
 8011b50:	2300      	movs	r3, #0
 8011b52:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xResult == pdPASS )
 8011b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d10b      	bne.n	8011b72 <FreeRTOS_inet_pton4+0xe6>
	{
		/* lint: ucOctet has been set because xResult == pdPASS. */
		ulReturn = FreeRTOS_inet_addr_quick( ucOctet[ 0 ], ucOctet[ 1 ], ucOctet[ 2 ], ucOctet[ 3 ] );
 8011b5a:	7cfb      	ldrb	r3, [r7, #19]
 8011b5c:	061a      	lsls	r2, r3, #24
 8011b5e:	7cbb      	ldrb	r3, [r7, #18]
 8011b60:	041b      	lsls	r3, r3, #16
 8011b62:	431a      	orrs	r2, r3
 8011b64:	7c7b      	ldrb	r3, [r7, #17]
 8011b66:	021b      	lsls	r3, r3, #8
 8011b68:	4313      	orrs	r3, r2
 8011b6a:	7c3a      	ldrb	r2, [r7, #16]
 8011b6c:	4313      	orrs	r3, r2
 8011b6e:	60fb      	str	r3, [r7, #12]
 8011b70:	e001      	b.n	8011b76 <FreeRTOS_inet_pton4+0xea>
	}
	else
	{
		ulReturn = 0UL;
 8011b72:	2300      	movs	r3, #0
 8011b74:	60fb      	str	r3, [r7, #12]
	}
	pvCopySource = ( const void * ) &ulReturn;
 8011b76:	f107 030c 	add.w	r3, r7, #12
 8011b7a:	617b      	str	r3, [r7, #20]
	( void ) memcpy( pvDestination, pvCopySource, sizeof( ulReturn ) );
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	461a      	mov	r2, r3
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	601a      	str	r2, [r3, #0]

	return xResult;
 8011b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3734      	adds	r7, #52	; 0x34
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr

08011b94 <FreeRTOS_inet_addr>:
/*-----------------------------------------------------------*/

uint32_t FreeRTOS_inet_addr( const char * pcIPAddress )
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b084      	sub	sp, #16
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
uint32_t ulReturn = 0UL;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	60fb      	str	r3, [r7, #12]

	/* inet_pton AF_INET target is a 4-byte 'struct in_addr'. */
	( void ) FreeRTOS_inet_pton4( pcIPAddress, &( ulReturn ) );
 8011ba0:	f107 030c 	add.w	r3, r7, #12
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f7ff ff70 	bl	8011a8c <FreeRTOS_inet_pton4>

	return ulReturn;
 8011bac:	68fb      	ldr	r3, [r7, #12]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3710      	adds	r7, #16
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}

08011bb6 <vSocketWakeUpUser>:
}

/*-----------------------------------------------------------*/

void vSocketWakeUpUser( FreeRTOS_Socket_t *pxSocket )
{
 8011bb6:	b580      	push	{r7, lr}
 8011bb8:	b084      	sub	sp, #16
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
	}
	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

	#if( ipconfigSOCKET_HAS_USER_WAKE_CALLBACK == 1 )
	{
		if( pxSocket->pxUserWakeCallback != NULL )
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d003      	beq.n	8011bce <vSocketWakeUpUser+0x18>
		{
			pxSocket->pxUserWakeCallback( pxSocket );
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	4798      	blx	r3
	}
	#endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		if( pxSocket->pxSocketSet != NULL )
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d015      	beq.n	8011c02 <vSocketWakeUpUser+0x4c>
		{
			EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	0a1b      	lsrs	r3, r3, #8
 8011bdc:	f003 030f 	and.w	r3, r3, #15
 8011be0:	60fb      	str	r3, [r7, #12]
			if( xSelectBits != 0UL )
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d00c      	beq.n	8011c02 <vSocketWakeUpUser+0x4c>
			{
				pxSocket->xSocketBits |= xSelectBits;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	431a      	orrs	r2, r3
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	635a      	str	r2, [r3, #52]	; 0x34
				( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	68f9      	ldr	r1, [r7, #12]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7fa f9e1 	bl	800bfc4 <xEventGroupSetBits>
			}
		}

		pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	601a      	str	r2, [r3, #0]
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d00b      	beq.n	8011c2e <vSocketWakeUpUser+0x78>
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d007      	beq.n	8011c2e <vSocketWakeUpUser+0x78>
	{
		( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	685a      	ldr	r2, [r3, #4]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	4619      	mov	r1, r3
 8011c28:	4610      	mov	r0, r2
 8011c2a:	f7fa f9cb 	bl	800bfc4 <xEventGroupSetBits>
	}

	pxSocket->xEventBits = 0UL;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2200      	movs	r2, #0
 8011c32:	601a      	str	r2, [r3, #0]
}
 8011c34:	bf00      	nop
 8011c36:	3710      	adds	r7, #16
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}

08011c3c <xTCPTimerCheck>:
	 * - Send new data
	 * - Send a keep-alive packet
	 * - Check for timeout (in non-connected states only)
	 */
	TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
	{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b08a      	sub	sp, #40	; 0x28
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket;
	TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 8011c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011c48:	627b      	str	r3, [r7, #36]	; 0x24
	TickType_t xNow = xTaskGetTickCount();
 8011c4a:	f7fb fb83 	bl	800d354 <xTaskGetTickCount>
 8011c4e:	61b8      	str	r0, [r7, #24]
	static TickType_t xLastTime = 0U;
	TickType_t xDelta = xNow - xLastTime;
 8011c50:	4b32      	ldr	r3, [pc, #200]	; (8011d1c <xTCPTimerCheck+0xe0>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	69ba      	ldr	r2, [r7, #24]
 8011c56:	1ad3      	subs	r3, r2, r3
 8011c58:	623b      	str	r3, [r7, #32]
	const ListItem_t* pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 8011c5a:	4b31      	ldr	r3, [pc, #196]	; (8011d20 <xTCPTimerCheck+0xe4>)
 8011c5c:	617b      	str	r3, [r7, #20]
	const ListItem_t *pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8011c5e:	4b31      	ldr	r3, [pc, #196]	; (8011d24 <xTCPTimerCheck+0xe8>)
 8011c60:	68db      	ldr	r3, [r3, #12]
 8011c62:	61fb      	str	r3, [r7, #28]

		xLastTime = xNow;
 8011c64:	4a2d      	ldr	r2, [pc, #180]	; (8011d1c <xTCPTimerCheck+0xe0>)
 8011c66:	69bb      	ldr	r3, [r7, #24]
 8011c68:	6013      	str	r3, [r2, #0]

		if( xDelta == 0U )
 8011c6a:	6a3b      	ldr	r3, [r7, #32]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d14c      	bne.n	8011d0a <xTCPTimerCheck+0xce>
		{
			xDelta = 1U;
 8011c70:	2301      	movs	r3, #1
 8011c72:	623b      	str	r3, [r7, #32]
		}

		while( pxIterator != pxEnd )
 8011c74:	e049      	b.n	8011d0a <xTCPTimerCheck+0xce>
		{
			pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011c76:	69fb      	ldr	r3, [r7, #28]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7fe ffba 	bl	8010bf4 <vCastPointerTo_FreeRTOS_Socket_t>
 8011c80:	6138      	str	r0, [r7, #16]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	61fb      	str	r3, [r7, #28]

			/* Sockets with 'tmout == 0' do not need any regular attention. */
			if( pxSocket->u.xTCP.usTimeout == 0U )
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d100      	bne.n	8011c94 <xTCPTimerCheck+0x58>
			{
				continue;
 8011c92:	e03a      	b.n	8011d0a <xTCPTimerCheck+0xce>
			}

			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	6a3b      	ldr	r3, [r7, #32]
 8011c9e:	4293      	cmp	r3, r2
 8011ca0:	d20a      	bcs.n	8011cb8 <xTCPTimerCheck+0x7c>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ca8:	6a3b      	ldr	r3, [r7, #32]
 8011caa:	b29b      	uxth	r3, r3
 8011cac:	1ad3      	subs	r3, r2, r3
 8011cae:	b29a      	uxth	r2, r3
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011cb6:	e00b      	b.n	8011cd0 <xTCPTimerCheck+0x94>
			}
			else
			{
			BaseType_t xRc;

				pxSocket->u.xTCP.usTimeout = 0U;
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				xRc = xTCPSocketCheck( pxSocket );
 8011cc0:	6938      	ldr	r0, [r7, #16]
 8011cc2:	f000 feaf 	bl	8012a24 <xTCPSocketCheck>
 8011cc6:	60f8      	str	r0, [r7, #12]

				/* Within this function, the socket might want to send a delayed
				ack or send out data or whatever it needs to do. */
				if( xRc < 0 )
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	da00      	bge.n	8011cd0 <xTCPTimerCheck+0x94>
				{
					/* Continue because the socket was deleted. */
					continue;
 8011cce:	e01c      	b.n	8011d0a <xTCPTimerCheck+0xce>
			}

			/* In xEventBits the driver may indicate that the socket has
			important events for the user.  These are only done just before the
			IP-task goes to sleep. */
			if( pxSocket->xEventBits != 0U )
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d008      	beq.n	8011cea <xTCPTimerCheck+0xae>
			{
				if( xWillSleep != pdFALSE )
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d003      	beq.n	8011ce6 <xTCPTimerCheck+0xaa>
				{
					/* The IP-task is about to go to sleep, so messages can be
					sent to the socket owners. */
					vSocketWakeUpUser( pxSocket );
 8011cde:	6938      	ldr	r0, [r7, #16]
 8011ce0:	f7ff ff69 	bl	8011bb6 <vSocketWakeUpUser>
 8011ce4:	e001      	b.n	8011cea <xTCPTimerCheck+0xae>
				}
				else
				{
					/* Or else make sure this will be called again to wake-up
					the sockets' owner. */
					xShortest = ( TickType_t ) 0;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}

			if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d00a      	beq.n	8011d0a <xTCPTimerCheck+0xce>
 8011cf4:	693b      	ldr	r3, [r7, #16]
 8011cf6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d903      	bls.n	8011d0a <xTCPTimerCheck+0xce>
			{
				xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011d08:	627b      	str	r3, [r7, #36]	; 0x24
		while( pxIterator != pxEnd )
 8011d0a:	69fa      	ldr	r2, [r7, #28]
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	d1b1      	bne.n	8011c76 <xTCPTimerCheck+0x3a>
			}
		}

		return xShortest;
 8011d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3728      	adds	r7, #40	; 0x28
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	24005328 	.word	0x24005328
 8011d20:	24006558 	.word	0x24006558
 8011d24:	24006550 	.word	0x24006550

08011d28 <pxTCPSocketLookup>:
	 * looking up a socket is a little more complex:
	 * Both a local port, and a remote port and IP address are being used
	 * For a socket in listening mode, the remote port and IP address are both 0
	 */
	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemoteIP, UBaseType_t uxRemotePort )
	{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b08a      	sub	sp, #40	; 0x28
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	607a      	str	r2, [r7, #4]
 8011d34:	603b      	str	r3, [r7, #0]
	const ListItem_t *pxIterator;
	FreeRTOS_Socket_t *pxResult = NULL, *pxListenSocket = NULL;
 8011d36:	2300      	movs	r3, #0
 8011d38:	623b      	str	r3, [r7, #32]
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	61fb      	str	r3, [r7, #28]
	const ListItem_t *pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 8011d3e:	4b1c      	ldr	r3, [pc, #112]	; (8011db0 <pxTCPSocketLookup+0x88>)
 8011d40:	61bb      	str	r3, [r7, #24]

		/* Parameter not yet supported. */
		( void ) ulLocalIP;

		for( pxIterator  = listGET_NEXT( pxEnd );
 8011d42:	69bb      	ldr	r3, [r7, #24]
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	627b      	str	r3, [r7, #36]	; 0x24
 8011d48:	e024      	b.n	8011d94 <pxTCPSocketLookup+0x6c>
			 pxIterator != pxEnd;
			 pxIterator  = listGET_NEXT( pxIterator ) )
		{
			FreeRTOS_Socket_t *pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fe ff50 	bl	8010bf4 <vCastPointerTo_FreeRTOS_Socket_t>
 8011d54:	6178      	str	r0, [r7, #20]

			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d115      	bne.n	8011d8e <pxTCPSocketLookup+0x66>
			{
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	d102      	bne.n	8011d72 <pxTCPSocketLookup+0x4a>
				{
					/* If this is a socket listening to uxLocalPort, remember it
					in case there is no perfect match. */
					pxListenSocket = pxSocket;
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	61fb      	str	r3, [r7, #28]
 8011d70:	e00d      	b.n	8011d8e <pxTCPSocketLookup+0x66>
				}
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d107      	bne.n	8011d8e <pxTCPSocketLookup+0x66>
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d102      	bne.n	8011d8e <pxTCPSocketLookup+0x66>
				{
					/* For sockets not in listening mode, find a match with
					xLocalPort, ulRemoteIP AND xRemotePort. */
					pxResult = pxSocket;
 8011d88:	697b      	ldr	r3, [r7, #20]
 8011d8a:	623b      	str	r3, [r7, #32]
					break;
 8011d8c:	e006      	b.n	8011d9c <pxTCPSocketLookup+0x74>
			 pxIterator  = listGET_NEXT( pxIterator ) )
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	627b      	str	r3, [r7, #36]	; 0x24
		for( pxIterator  = listGET_NEXT( pxEnd );
 8011d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d96:	69bb      	ldr	r3, [r7, #24]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d1d6      	bne.n	8011d4a <pxTCPSocketLookup+0x22>
				{
					/* This 'pxSocket' doesn't match. */
				}
			}
		}
		if( pxResult == NULL )
 8011d9c:	6a3b      	ldr	r3, [r7, #32]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d101      	bne.n	8011da6 <pxTCPSocketLookup+0x7e>
		{
			/* An exact match was not found, maybe a listening socket was
			found. */
			pxResult = pxListenSocket;
 8011da2:	69fb      	ldr	r3, [r7, #28]
 8011da4:	623b      	str	r3, [r7, #32]
		}

		return pxResult;
 8011da6:	6a3b      	ldr	r3, [r7, #32]
	}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3728      	adds	r7, #40	; 0x28
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}
 8011db0:	24006558 	.word	0x24006558

08011db4 <prvTCPCreateStream>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	static StreamBuffer_t *prvTCPCreateStream ( FreeRTOS_Socket_t *pxSocket, BaseType_t xIsInputStream )
	{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b086      	sub	sp, #24
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
	size_t uxLength;
	size_t uxSize;

		/* Now that a stream is created, the maximum size is fixed before
		creation, it could still be changed with setsockopt(). */
		if( xIsInputStream != pdFALSE )
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d025      	beq.n	8011e10 <prvTCPCreateStream+0x5c>
		{
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dc8:	617b      	str	r3, [r7, #20]

			if( pxSocket->u.xTCP.uxLittleSpace == 0UL )
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d10c      	bne.n	8011dec <prvTCPCreateStream+0x38>
			{
				pxSocket->u.xTCP.uxLittleSpace  = ( sock20_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011dd6:	4613      	mov	r3, r2
 8011dd8:	009b      	lsls	r3, r3, #2
 8011dda:	4413      	add	r3, r2
 8011ddc:	009b      	lsls	r3, r3, #2
 8011dde:	461a      	mov	r2, r3
 8011de0:	4b29      	ldr	r3, [pc, #164]	; (8011e88 <prvTCPCreateStream+0xd4>)
 8011de2:	fba3 2302 	umull	r2, r3, r3, r2
 8011de6:	095a      	lsrs	r2, r3, #5
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	665a      	str	r2, [r3, #100]	; 0x64
			}

			if( pxSocket->u.xTCP.uxEnoughSpace == 0UL )
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d110      	bne.n	8011e16 <prvTCPCreateStream+0x62>
			{
				pxSocket->u.xTCP.uxEnoughSpace = ( sock80_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011df8:	4613      	mov	r3, r2
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	4413      	add	r3, r2
 8011dfe:	011b      	lsls	r3, r3, #4
 8011e00:	461a      	mov	r2, r3
 8011e02:	4b21      	ldr	r3, [pc, #132]	; (8011e88 <prvTCPCreateStream+0xd4>)
 8011e04:	fba3 2302 	umull	r2, r3, r3, r2
 8011e08:	095a      	lsrs	r2, r3, #5
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	669a      	str	r2, [r3, #104]	; 0x68
 8011e0e:	e002      	b.n	8011e16 <prvTCPCreateStream+0x62>
			}
		}
		else
		{
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e14:	617b      	str	r3, [r7, #20]
		}

		/* Add an extra 4 (or 8) bytes. */
		uxLength += sizeof( size_t );
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	3304      	adds	r3, #4
 8011e1a:	617b      	str	r3, [r7, #20]

		/* And make the length a multiple of sizeof( size_t ). */
		uxLength &= ~( sizeof( size_t ) - 1U );
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	f023 0303 	bic.w	r3, r3, #3
 8011e22:	617b      	str	r3, [r7, #20]

		uxSize = ( sizeof( *pxBuffer )  + uxLength ) - sizeof( pxBuffer->ucArray );
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	3314      	adds	r3, #20
 8011e28:	613b      	str	r3, [r7, #16]

		pxBuffer = ipCAST_PTR_TO_TYPE_PTR( StreamBuffer_t, pvPortMallocLarge( uxSize ) );
 8011e2a:	6938      	ldr	r0, [r7, #16]
 8011e2c:	f7f9 fdb8 	bl	800b9a0 <pvPortMalloc>
 8011e30:	4603      	mov	r3, r0
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7fe feff 	bl	8010c36 <vCastPointerTo_StreamBuffer_t>
 8011e38:	60f8      	str	r0, [r7, #12]

		if( pxBuffer == NULL )
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d10b      	bne.n	8011e58 <prvTCPCreateStream+0xa4>
		{
			FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE;
 8011e40:	687a      	ldr	r2, [r7, #4]
 8011e42:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8011e46:	f043 0308 	orr.w	r3, r3, #8
 8011e4a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011e4e:	2108      	movs	r1, #8
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f001 fc04 	bl	801365e <vTCPStateChange>
 8011e56:	e011      	b.n	8011e7c <prvTCPCreateStream+0xc8>
		}
		else
		{
			/* Clear the markers of the stream */
			( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 8011e58:	2214      	movs	r2, #20
 8011e5a:	2100      	movs	r1, #0
 8011e5c:	68f8      	ldr	r0, [r7, #12]
 8011e5e:	f005 fa32 	bl	80172c6 <memset>
			pxBuffer->LENGTH = ( size_t ) uxLength ;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	697a      	ldr	r2, [r7, #20]
 8011e66:	611a      	str	r2, [r3, #16]
			if( xTCPWindowLoggingLevel != 0 )
			{
				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', uxLength, uxSize ) );
			}

			if( xIsInputStream != 0 )
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d003      	beq.n	8011e76 <prvTCPCreateStream+0xc2>
			{
				iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
				pxSocket->u.xTCP.rxStream = pxBuffer;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	68fa      	ldr	r2, [r7, #12]
 8011e72:	675a      	str	r2, [r3, #116]	; 0x74
 8011e74:	e002      	b.n	8011e7c <prvTCPCreateStream+0xc8>
			}
			else
			{
				iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
				pxSocket->u.xTCP.txStream = pxBuffer;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	68fa      	ldr	r2, [r7, #12]
 8011e7a:	679a      	str	r2, [r3, #120]	; 0x78
			}
		}

		return pxBuffer;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
	}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3718      	adds	r7, #24
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
 8011e86:	bf00      	nop
 8011e88:	51eb851f 	.word	0x51eb851f

08011e8c <lTCPAddRxdata>:
	/*
	 * Add data to the RxStream.  When uxOffset > 0, data has come in out-of-order
	 * and will be put in front of the head so it can not be popped by the user.
	 */
	int32_t lTCPAddRxdata( FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t ulByteCount )
	{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b088      	sub	sp, #32
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	607a      	str	r2, [r7, #4]
 8011e98:	603b      	str	r3, [r7, #0]
	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e9e:	61fb      	str	r3, [r7, #28]
	int32_t xResult = 0;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	61bb      	str	r3, [r7, #24]
		/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
		if( pucData != NULL ) copy data the the buffer
		if( pucData == NULL ) no copying, just advance rxHead
		if( uxOffset != 0 ) Just store data which has come out-of-order
		if( uxOffset == 0 ) Also advance rxHead */
		if( pxStream == NULL )
 8011ea4:	69fb      	ldr	r3, [r7, #28]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d10a      	bne.n	8011ec0 <lTCPAddRxdata+0x34>
		{
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8011eaa:	2101      	movs	r1, #1
 8011eac:	68f8      	ldr	r0, [r7, #12]
 8011eae:	f7ff ff81 	bl	8011db4 <prvTCPCreateStream>
 8011eb2:	61f8      	str	r0, [r7, #28]
			if( pxStream == NULL )
 8011eb4:	69fb      	ldr	r3, [r7, #28]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d102      	bne.n	8011ec0 <lTCPAddRxdata+0x34>
			{
				xResult = -1;
 8011eba:	f04f 33ff 	mov.w	r3, #4294967295
 8011ebe:	61bb      	str	r3, [r7, #24]
			}
		}

		if( xResult >= 0 )
 8011ec0:	69bb      	ldr	r3, [r7, #24]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	db44      	blt.n	8011f50 <lTCPAddRxdata+0xc4>
					pcData = NULL;
				}
			}
			#endif /* ipconfigUSE_CALLBACKS */

			xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	687a      	ldr	r2, [r7, #4]
 8011eca:	68b9      	ldr	r1, [r7, #8]
 8011ecc:	69f8      	ldr	r0, [r7, #28]
 8011ece:	f000 faf7 	bl	80124c0 <uxStreamBufferAdd>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	61bb      	str	r3, [r7, #24]
						( UBaseType_t ) pxStream->uxFront ) );
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF */

			if( uxOffset == 0U )
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d139      	bne.n	8011f50 <lTCPAddRxdata+0xc4>
					}
				} else
				#endif /* ipconfigUSE_CALLBACKS */
				{
					/* See if running out of space. */
					if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ee2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011ee6:	b2db      	uxtb	r3, r3
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d11f      	bne.n	8011f2c <lTCPAddRxdata+0xa0>
					{
						size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7fe fe57 	bl	8010ba4 <uxStreamBufferFrontSpace>
 8011ef6:	6178      	str	r0, [r7, #20]
						if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011efc:	697a      	ldr	r2, [r7, #20]
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d814      	bhi.n	8011f2c <lTCPAddRxdata+0xa0>
						{
							pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 8011f02:	68fa      	ldr	r2, [r7, #12]
 8011f04:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8011f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f0c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
							pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 8011f10:	68fa      	ldr	r2, [r7, #12]
 8011f12:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8011f16:	f043 0301 	orr.w	r3, r3, #1
 8011f1a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

							/* bLowWater was reached, send the changed window size. */
							pxSocket->u.xTCP.usTimeout = 1U;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2201      	movs	r2, #1
 8011f22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
							( void ) xSendEventToIPTask( eTCPTimerEvent );
 8011f26:	2006      	movs	r0, #6
 8011f28:	f7fd ff2a 	bl	800fd80 <xSendEventToIPTask>
						}
					}

					/* New incoming data is available, wake up the user.   User's
					semaphores will be set just before the IP-task goes asleep. */
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	f043 0201 	orr.w	r2, r3, #1
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	601a      	str	r2, [r3, #0]

					#if ipconfigSUPPORT_SELECT_FUNCTION == 1
					{
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f3c:	f003 0301 	and.w	r3, r3, #1
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d005      	beq.n	8011f50 <lTCPAddRxdata+0xc4>
						{
							pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	601a      	str	r2, [r3, #0]
					#endif
				}
			}
		}

		return xResult;
 8011f50:	69bb      	ldr	r3, [r7, #24]
	}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3720      	adds	r7, #32
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}

08011f5a <FreeRTOS_tx_space>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
	{
 8011f5a:	b580      	push	{r7, lr}
 8011f5c:	b084      	sub	sp, #16
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
	const FreeRTOS_Socket_t *pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011f6c:	2b06      	cmp	r3, #6
 8011f6e:	d003      	beq.n	8011f78 <FreeRTOS_tx_space+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8011f70:	f06f 0315 	mvn.w	r3, #21
 8011f74:	60fb      	str	r3, [r7, #12]
 8011f76:	e00e      	b.n	8011f96 <FreeRTOS_tx_space+0x3c>
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d007      	beq.n	8011f90 <FreeRTOS_tx_space+0x36>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSpace ( pxSocket->u.xTCP.txStream );
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7fe fdf9 	bl	8010b7c <uxStreamBufferGetSpace>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	60fb      	str	r3, [r7, #12]
 8011f8e:	e002      	b.n	8011f96 <FreeRTOS_tx_space+0x3c>
			}
			else
			{
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f94:	60fb      	str	r3, [r7, #12]
			}
		}

		return xReturn;
 8011f96:	68fb      	ldr	r3, [r7, #12]
	}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3710      	adds	r7, #16
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <FreeRTOS_tx_size>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
	{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b084      	sub	sp, #16
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
	const FreeRTOS_Socket_t *pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011fb2:	2b06      	cmp	r3, #6
 8011fb4:	d003      	beq.n	8011fbe <FreeRTOS_tx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8011fb6:	f06f 0315 	mvn.w	r3, #21
 8011fba:	60fb      	str	r3, [r7, #12]
 8011fbc:	e00d      	b.n	8011fda <FreeRTOS_tx_size+0x3a>
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d007      	beq.n	8011fd6 <FreeRTOS_tx_size+0x36>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSize ( pxSocket->u.xTCP.txStream );
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f7fe fdfe 	bl	8010bcc <uxStreamBufferGetSize>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	60fb      	str	r3, [r7, #12]
 8011fd4:	e001      	b.n	8011fda <FreeRTOS_tx_size+0x3a>
			}
			else
			{
				xReturn = 0;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	60fb      	str	r3, [r7, #12]
			}
		}

		return xReturn;
 8011fda:	68fb      	ldr	r3, [r7, #12]
	}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3710      	adds	r7, #16
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <FreeRTOS_rx_size>:

	/*
	 * Returns the number of bytes which can be read.
	 */
	BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
	{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b084      	sub	sp, #16
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
	const FreeRTOS_Socket_t *pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011ff6:	2b06      	cmp	r3, #6
 8011ff8:	d003      	beq.n	8012002 <FreeRTOS_rx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8011ffa:	f06f 0315 	mvn.w	r3, #21
 8011ffe:	60fb      	str	r3, [r7, #12]
 8012000:	e00d      	b.n	801201e <FreeRTOS_rx_size+0x3a>
		}
		else if( pxSocket->u.xTCP.rxStream != NULL )
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012006:	2b00      	cmp	r3, #0
 8012008:	d007      	beq.n	801201a <FreeRTOS_rx_size+0x36>
		{
			xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801200e:	4618      	mov	r0, r3
 8012010:	f7fe fddc 	bl	8010bcc <uxStreamBufferGetSize>
 8012014:	4603      	mov	r3, r0
 8012016:	60fb      	str	r3, [r7, #12]
 8012018:	e001      	b.n	801201e <FreeRTOS_rx_size+0x3a>
		}
		else
		{
			xReturn = 0;
 801201a:	2300      	movs	r3, #0
 801201c:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 801201e:	68fb      	ldr	r3, [r7, #12]
	}
 8012020:	4618      	mov	r0, r3
 8012022:	3710      	adds	r7, #16
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <vTCPNetStat>:
/*-----------------------------------------------------------*/

#if( ( ipconfigHAS_PRINTF != 0 ) && ( ipconfigUSE_TCP == 1 ) )

	void vTCPNetStat( void )
	{
 8012028:	b580      	push	{r7, lr}
 801202a:	b092      	sub	sp, #72	; 0x48
 801202c:	af02      	add	r7, sp, #8
	/* Show a simple listing of all created sockets and their connections */
	const ListItem_t *pxIterator;
	BaseType_t count = 0;
 801202e:	2300      	movs	r3, #0
 8012030:	63bb      	str	r3, [r7, #56]	; 0x38
	size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 8012032:	f004 fa85 	bl	8016540 <uxGetMinimumFreeNetworkBuffers>
 8012036:	6378      	str	r0, [r7, #52]	; 0x34
	size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 8012038:	f004 fa76 	bl	8016528 <uxGetNumberOfFreeNetworkBuffers>
 801203c:	6338      	str	r0, [r7, #48]	; 0x30

		if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 801203e:	4b38      	ldr	r3, [pc, #224]	; (8012120 <vTCPNetStat+0xf8>)
 8012040:	689b      	ldr	r3, [r3, #8]
 8012042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012046:	d166      	bne.n	8012116 <vTCPNetStat+0xee>
		{
			FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
		}
		else
		{
		const ListItem_t *pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 8012048:	4b36      	ldr	r3, [pc, #216]	; (8012124 <vTCPNetStat+0xfc>)
 801204a:	62fb      	str	r3, [r7, #44]	; 0x2c
		const ListItem_t *pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 801204c:	4b36      	ldr	r3, [pc, #216]	; (8012128 <vTCPNetStat+0x100>)
 801204e:	62bb      	str	r3, [r7, #40]	; 0x28
			FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
			for( pxIterator  = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8012050:	4b33      	ldr	r3, [pc, #204]	; (8012120 <vTCPNetStat+0xf8>)
 8012052:	68db      	ldr	r3, [r3, #12]
 8012054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012056:	e04c      	b.n	80120f2 <vTCPNetStat+0xca>
				 pxIterator != pxEndTCP;
				 pxIterator  = listGET_NEXT( pxIterator ) )
			{
				const FreeRTOS_Socket_t *pxSocket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8012058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	4618      	mov	r0, r3
 801205e:	f7fe fdd4 	bl	8010c0a <vCastConstPointerTo_FreeRTOS_Socket_t>
 8012062:	6278      	str	r0, [r7, #36]	; 0x24
				#if( ipconfigTCP_KEEP_ALIVE == 1 )
					TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8012064:	f7fb f976 	bl	800d354 <xTaskGetTickCount>
 8012068:	4602      	mov	r2, r0
 801206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801206e:	1ad3      	subs	r3, r2, r3
 8012070:	623b      	str	r3, [r7, #32]
				#else
					TickType_t age = 0U;
				#endif

				char ucChildText[16] = "";
 8012072:	2300      	movs	r3, #0
 8012074:	607b      	str	r3, [r7, #4]
 8012076:	f107 0308 	add.w	r3, r7, #8
 801207a:	2200      	movs	r2, #0
 801207c:	601a      	str	r2, [r3, #0]
 801207e:	605a      	str	r2, [r3, #4]
 8012080:	609a      	str	r2, [r3, #8]
				if (pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN)
 8012082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012084:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8012088:	2b01      	cmp	r3, #1
 801208a:	d12c      	bne.n	80120e6 <vTCPNetStat+0xbe>
				{
					/* Using function "snprintf". */
					const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
						( int32_t ) pxSocket->u.xTCP.usChildCount,
 801208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801208e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
					const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8012092:	461a      	mov	r2, r3
						( int32_t ) pxSocket->u.xTCP.usBacklog);
 8012094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
					const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 801209a:	1d38      	adds	r0, r7, #4
 801209c:	9300      	str	r3, [sp, #0]
 801209e:	4613      	mov	r3, r2
 80120a0:	4a22      	ldr	r2, [pc, #136]	; (801212c <vTCPNetStat+0x104>)
 80120a2:	2110      	movs	r1, #16
 80120a4:	f005 f9c8 	bl	8017438 <sniprintf>
 80120a8:	61f8      	str	r0, [r7, #28]
					( void )copied_len;
					/* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
					configASSERT( copied_len >= 0 );
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	da0b      	bge.n	80120c8 <vTCPNetStat+0xa0>
 80120b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b4:	b672      	cpsid	i
 80120b6:	f383 8811 	msr	BASEPRI, r3
 80120ba:	f3bf 8f6f 	isb	sy
 80120be:	f3bf 8f4f 	dsb	sy
 80120c2:	b662      	cpsie	i
 80120c4:	61bb      	str	r3, [r7, #24]
 80120c6:	e7fe      	b.n	80120c6 <vTCPNetStat+0x9e>
					configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) );
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	2b0f      	cmp	r3, #15
 80120cc:	dd0b      	ble.n	80120e6 <vTCPNetStat+0xbe>
 80120ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d2:	b672      	cpsid	i
 80120d4:	f383 8811 	msr	BASEPRI, r3
 80120d8:	f3bf 8f6f 	isb	sy
 80120dc:	f3bf 8f4f 	dsb	sy
 80120e0:	b662      	cpsie	i
 80120e2:	617b      	str	r3, [r7, #20]
 80120e4:	e7fe      	b.n	80120e4 <vTCPNetStat+0xbc>
					( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
					FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.ucTCPState ),
					( age > 999999u ) ? 999999u : age, /* Format 'age' for printing */
					pxSocket->u.xTCP.usTimeout,
					ucChildText ) );
				count++;
 80120e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e8:	3301      	adds	r3, #1
 80120ea:	63bb      	str	r3, [r7, #56]	; 0x38
				 pxIterator  = listGET_NEXT( pxIterator ) )
 80120ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			for( pxIterator  = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80120f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80120f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d1ae      	bne.n	8012058 <vTCPNetStat+0x30>
			}

			for( pxIterator  = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 80120fa:	4b0d      	ldr	r3, [pc, #52]	; (8012130 <vTCPNetStat+0x108>)
 80120fc:	68db      	ldr	r3, [r3, #12]
 80120fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012100:	e005      	b.n	801210e <vTCPNetStat+0xe6>
				 pxIterator  = listGET_NEXT( pxIterator ) )
			{
				/* Local port on this machine */
				FreeRTOS_printf( ( "UDP Port %5u\n",
					FreeRTOS_ntohs( listGET_LIST_ITEM_VALUE( pxIterator ) ) ) );
				count++;
 8012102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012104:	3301      	adds	r3, #1
 8012106:	63bb      	str	r3, [r7, #56]	; 0x38
				 pxIterator  = listGET_NEXT( pxIterator ) )
 8012108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	63fb      	str	r3, [r7, #60]	; 0x3c
			for( pxIterator  = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 801210e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012112:	429a      	cmp	r2, r3
 8012114:	d1f5      	bne.n	8012102 <vTCPNetStat+0xda>
				( UBaseType_t ) count,
				( UBaseType_t ) uxMinimum,
				( UBaseType_t ) uxCurrent,
				( BaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
		}
	}
 8012116:	bf00      	nop
 8012118:	3740      	adds	r7, #64	; 0x40
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	24006550 	.word	0x24006550
 8012124:	24006558 	.word	0x24006558
 8012128:	2400531c 	.word	0x2400531c
 801212c:	080186e8 	.word	0x080186e8
 8012130:	24005314 	.word	0x24005314

08012134 <vSocketSelect>:
/*-----------------------------------------------------------*/

#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )

	void vSocketSelect( SocketSelect_t *pxSocketSet )
	{
 8012134:	b580      	push	{r7, lr}
 8012136:	b08c      	sub	sp, #48	; 0x30
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
	BaseType_t xRound;
	EventBits_t xSocketBits, xBitsToClear;
	#if ipconfigUSE_TCP == 1
		BaseType_t xLastRound = 1;
 801213c:	2301      	movs	r3, #1
 801213e:	613b      	str	r3, [r7, #16]
	#else
		BaseType_t xLastRound = 0;
	#endif

		/* These flags will be switched on after checking the socket status. */
		EventBits_t xGroupBits = 0;
 8012140:	2300      	movs	r3, #0
 8012142:	627b      	str	r3, [r7, #36]	; 0x24

		for( xRound = 0; xRound <= xLastRound; xRound++ )
 8012144:	2300      	movs	r3, #0
 8012146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012148:	e0e4      	b.n	8012314 <vSocketSelect+0x1e0>
		{
			const ListItem_t *pxIterator;
			const ListItem_t *pxEnd;
			if( xRound == 0 )
 801214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801214c:	2b00      	cmp	r3, #0
 801214e:	d102      	bne.n	8012156 <vSocketSelect+0x22>
			{
				pxEnd = listGET_END_MARKER( &xBoundUDPSocketsList );
 8012150:	4b85      	ldr	r3, [pc, #532]	; (8012368 <vSocketSelect+0x234>)
 8012152:	61fb      	str	r3, [r7, #28]
 8012154:	e001      	b.n	801215a <vSocketSelect+0x26>
			}
		#if ipconfigUSE_TCP == 1
			else
			{
				pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 8012156:	4b85      	ldr	r3, [pc, #532]	; (801236c <vSocketSelect+0x238>)
 8012158:	61fb      	str	r3, [r7, #28]
			}
		#endif /* ipconfigUSE_TCP == 1 */
			for( pxIterator = listGET_NEXT( pxEnd );
 801215a:	69fb      	ldr	r3, [r7, #28]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	623b      	str	r3, [r7, #32]
 8012160:	e0d0      	b.n	8012304 <vSocketSelect+0x1d0>
				 pxIterator != pxEnd;
				 pxIterator = listGET_NEXT( pxIterator ) )
			{
				FreeRTOS_Socket_t *pxSocket =  ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8012162:	6a3b      	ldr	r3, [r7, #32]
 8012164:	68db      	ldr	r3, [r3, #12]
 8012166:	4618      	mov	r0, r3
 8012168:	f7fe fd44 	bl	8010bf4 <vCastPointerTo_FreeRTOS_Socket_t>
 801216c:	60b8      	str	r0, [r7, #8]
				if( pxSocket->pxSocketSet != pxSocketSet )
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012172:	687a      	ldr	r2, [r7, #4]
 8012174:	429a      	cmp	r2, r3
 8012176:	f040 80c1 	bne.w	80122fc <vSocketSelect+0x1c8>
				{
					/* Socket does not belong to this select group. */
					continue;
				}
				xSocketBits = 0;
 801217a:	2300      	movs	r3, #0
 801217c:	62bb      	str	r3, [r7, #40]	; 0x28

			#if( ipconfigUSE_TCP == 1 )
				if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012184:	2b06      	cmp	r3, #6
 8012186:	f040 80a3 	bne.w	80122d0 <vSocketSelect+0x19c>
				{
					/* Check if the socket has already been accepted by the
					owner.  If not, it is useless to return it from a
					select(). */
					BaseType_t bAccepted = pdFALSE;
 801218a:	2300      	movs	r3, #0
 801218c:	61bb      	str	r3, [r7, #24]

					if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012194:	f003 0304 	and.w	r3, r3, #4
 8012198:	b2db      	uxtb	r3, r3
 801219a:	2b00      	cmp	r3, #0
 801219c:	d109      	bne.n	80121b2 <vSocketSelect+0x7e>
					{
						if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80121a4:	f003 0302 	and.w	r3, r3, #2
 80121a8:	b2db      	uxtb	r3, r3
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d101      	bne.n	80121b2 <vSocketSelect+0x7e>
						{
							bAccepted = pdTRUE;
 80121ae:	2301      	movs	r3, #1
 80121b0:	61bb      	str	r3, [r7, #24]
						}
					}

					/* Is the set owner interested in READ events? */
					if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121b6:	f003 0301 	and.w	r3, r3, #1
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d038      	beq.n	8012230 <vSocketSelect+0xfc>
					{
						if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	d111      	bne.n	80121ec <vSocketSelect+0xb8>
						{
							if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d02f      	beq.n	8012230 <vSocketSelect+0xfc>
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80121d8:	f003 0302 	and.w	r3, r3, #2
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d026      	beq.n	8012230 <vSocketSelect+0xfc>
							{
								xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80121e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e4:	f043 0301 	orr.w	r3, r3, #1
 80121e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80121ea:	e021      	b.n	8012230 <vSocketSelect+0xfc>
							}
						}
						else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80121f2:	f003 0308 	and.w	r3, r3, #8
 80121f6:	b2db      	uxtb	r3, r3
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d00c      	beq.n	8012216 <vSocketSelect+0xe2>
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012202:	f003 0302 	and.w	r3, r3, #2
 8012206:	b2db      	uxtb	r3, r3
 8012208:	2b00      	cmp	r3, #0
 801220a:	d004      	beq.n	8012216 <vSocketSelect+0xe2>
						{
							/* This socket has the re-use flag. After connecting it turns into
							aconnected socket. Set the READ event, so that accept() will be called. */
							xSocketBits |= ( EventBits_t ) eSELECT_READ;
 801220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801220e:	f043 0301 	orr.w	r3, r3, #1
 8012212:	62bb      	str	r3, [r7, #40]	; 0x28
 8012214:	e00c      	b.n	8012230 <vSocketSelect+0xfc>
						}
						else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 8012216:	69bb      	ldr	r3, [r7, #24]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d009      	beq.n	8012230 <vSocketSelect+0xfc>
 801221c:	68b8      	ldr	r0, [r7, #8]
 801221e:	f7ff fee1 	bl	8011fe4 <FreeRTOS_rx_size>
 8012222:	4603      	mov	r3, r0
 8012224:	2b00      	cmp	r3, #0
 8012226:	dd03      	ble.n	8012230 <vSocketSelect+0xfc>
						{
							xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8012228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222a:	f043 0301 	orr.w	r3, r3, #1
 801222e:	62bb      	str	r3, [r7, #40]	; 0x28
						{
							/* Nothing. */
						}
					}
					/* Is the set owner interested in EXCEPTION events? */
					if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012234:	f003 0304 	and.w	r3, r3, #4
 8012238:	2b00      	cmp	r3, #0
 801223a:	d00d      	beq.n	8012258 <vSocketSelect+0x124>
					{
						if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) )
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8012242:	2b08      	cmp	r3, #8
 8012244:	d004      	beq.n	8012250 <vSocketSelect+0x11c>
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801224c:	2b00      	cmp	r3, #0
 801224e:	d103      	bne.n	8012258 <vSocketSelect+0x124>
						{
							xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 8012250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012252:	f043 0304 	orr.w	r3, r3, #4
 8012256:	62bb      	str	r3, [r7, #40]	; 0x28
						}
					}

					/* Is the set owner interested in WRITE events? */
					if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801225c:	f003 0302 	and.w	r3, r3, #2
 8012260:	2b00      	cmp	r3, #0
 8012262:	d043      	beq.n	80122ec <vSocketSelect+0x1b8>
					{
						BaseType_t bMatch = pdFALSE;
 8012264:	2300      	movs	r3, #0
 8012266:	617b      	str	r3, [r7, #20]

						if( bAccepted != 0 )
 8012268:	69bb      	ldr	r3, [r7, #24]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d007      	beq.n	801227e <vSocketSelect+0x14a>
						{
							if( FreeRTOS_tx_space( pxSocket ) > 0 )
 801226e:	68b8      	ldr	r0, [r7, #8]
 8012270:	f7ff fe73 	bl	8011f5a <FreeRTOS_tx_space>
 8012274:	4603      	mov	r3, r0
 8012276:	2b00      	cmp	r3, #0
 8012278:	dd01      	ble.n	801227e <vSocketSelect+0x14a>
							{
								bMatch = pdTRUE;
 801227a:	2301      	movs	r3, #1
 801227c:	617b      	str	r3, [r7, #20]
							}
						}

						if( bMatch == pdFALSE )
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d11d      	bne.n	80122c0 <vSocketSelect+0x18c>
						{
							if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8012284:	68bb      	ldr	r3, [r7, #8]
 8012286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801228a:	f003 0308 	and.w	r3, r3, #8
 801228e:	b2db      	uxtb	r3, r3
 8012290:	2b00      	cmp	r3, #0
 8012292:	d015      	beq.n	80122c0 <vSocketSelect+0x18c>
								( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
							if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 801229a:	2b04      	cmp	r3, #4
 801229c:	d910      	bls.n	80122c0 <vSocketSelect+0x18c>
								( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80122a4:	f003 0310 	and.w	r3, r3, #16
 80122a8:	b2db      	uxtb	r3, r3
								( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d108      	bne.n	80122c0 <vSocketSelect+0x18c>
							{
								pxSocket->u.xTCP.bits.bConnPassed = pdTRUE;
 80122ae:	68ba      	ldr	r2, [r7, #8]
 80122b0:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 80122b4:	f043 0310 	orr.w	r3, r3, #16
 80122b8:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
								bMatch = pdTRUE;
 80122bc:	2301      	movs	r3, #1
 80122be:	617b      	str	r3, [r7, #20]
							}
						}

						if( bMatch != pdFALSE )
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d012      	beq.n	80122ec <vSocketSelect+0x1b8>
						{
							xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 80122c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c8:	f043 0302 	orr.w	r3, r3, #2
 80122cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80122ce:	e00d      	b.n	80122ec <vSocketSelect+0x1b8>
				}
				else
			#endif /* ipconfigUSE_TCP == 1 */
				{
					/* Select events for UDP are simpler. */
					if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122d4:	f003 0301 	and.w	r3, r3, #1
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d007      	beq.n	80122ec <vSocketSelect+0x1b8>
						( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
					if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d003      	beq.n	80122ec <vSocketSelect+0x1b8>
					{
						xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80122e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e6:	f043 0301 	orr.w	r3, r3, #1
 80122ea:	62bb      	str	r3, [r7, #40]	; 0x28
					/* The WRITE and EXCEPT bits are not used for UDP */
				}	/* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

				/* Each socket keeps its own event flags, which are looked-up
				by FreeRTOS_FD_ISSSET() */
				pxSocket->xSocketBits = xSocketBits;
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122f0:	635a      	str	r2, [r3, #52]	; 0x34

				/* The ORed value will be used to set the bits in the event
				group. */
				xGroupBits |= xSocketBits;
 80122f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f6:	4313      	orrs	r3, r2
 80122f8:	627b      	str	r3, [r7, #36]	; 0x24
 80122fa:	e000      	b.n	80122fe <vSocketSelect+0x1ca>
					continue;
 80122fc:	bf00      	nop
				 pxIterator = listGET_NEXT( pxIterator ) )
 80122fe:	6a3b      	ldr	r3, [r7, #32]
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	623b      	str	r3, [r7, #32]
			for( pxIterator = listGET_NEXT( pxEnd );
 8012304:	6a3a      	ldr	r2, [r7, #32]
 8012306:	69fb      	ldr	r3, [r7, #28]
 8012308:	429a      	cmp	r2, r3
 801230a:	f47f af2a 	bne.w	8012162 <vSocketSelect+0x2e>
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 801230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012310:	3301      	adds	r3, #1
 8012312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	429a      	cmp	r2, r3
 801231a:	f77f af16 	ble.w	801214a <vSocketSelect+0x16>

			}	/* for( pxIterator ... ) */
		}	/* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	2100      	movs	r1, #0
 8012324:	4618      	mov	r0, r3
 8012326:	f7f9 fe13 	bl	800bf50 <xEventGroupClearBits>
 801232a:	60f8      	str	r0, [r7, #12]

		/* Now set the necessary bits. */
		xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 801232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232e:	43da      	mvns	r2, r3
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	4013      	ands	r3, r2
 8012334:	f003 030f 	and.w	r3, r3, #15
 8012338:	60fb      	str	r3, [r7, #12]
			and cleared in FreeRTOS_select(). */
			xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0U )
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d005      	beq.n	801234c <vSocketSelect+0x218>
		{
			( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	68f9      	ldr	r1, [r7, #12]
 8012346:	4618      	mov	r0, r3
 8012348:	f7f9 fe02 	bl	800bf50 <xEventGroupClearBits>
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681a      	ldr	r2, [r3, #0]
 8012350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012352:	f043 0310 	orr.w	r3, r3, #16
 8012356:	4619      	mov	r1, r3
 8012358:	4610      	mov	r0, r2
 801235a:	f7f9 fe33 	bl	800bfc4 <xEventGroupSetBits>
	}
 801235e:	bf00      	nop
 8012360:	3730      	adds	r7, #48	; 0x30
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}
 8012366:	bf00      	nop
 8012368:	2400531c 	.word	0x2400531c
 801236c:	24006558 	.word	0x24006558

08012370 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return ( a <= b ) ? a : b; }
 8012370:	b480      	push	{r7}
 8012372:	b083      	sub	sp, #12
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	6039      	str	r1, [r7, #0]
 801237a:	687a      	ldr	r2, [r7, #4]
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	4293      	cmp	r3, r2
 8012380:	bf28      	it	cs
 8012382:	4613      	movcs	r3, r2
 8012384:	4618      	mov	r0, r3
 8012386:	370c      	adds	r7, #12
 8012388:	46bd      	mov	sp, r7
 801238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238e:	4770      	bx	lr

08012390 <uxStreamBufferSpace>:
{
 8012390:	b480      	push	{r7}
 8012392:	b087      	sub	sp, #28
 8012394:	af00      	add	r7, sp, #0
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	691a      	ldr	r2, [r3, #16]
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	441a      	add	r2, r3
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	1ad3      	subs	r3, r2, r3
 80123a8:	3b01      	subs	r3, #1
 80123aa:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	691b      	ldr	r3, [r3, #16]
 80123b0:	697a      	ldr	r2, [r7, #20]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d304      	bcc.n	80123c0 <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	691b      	ldr	r3, [r3, #16]
 80123ba:	697a      	ldr	r2, [r7, #20]
 80123bc:	1ad3      	subs	r3, r2, r3
 80123be:	617b      	str	r3, [r7, #20]
	return uxCount;
 80123c0:	697b      	ldr	r3, [r7, #20]
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	371c      	adds	r7, #28
 80123c6:	46bd      	mov	sp, r7
 80123c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123cc:	4770      	bx	lr

080123ce <uxStreamBufferDistance>:
{
 80123ce:	b480      	push	{r7}
 80123d0:	b087      	sub	sp, #28
 80123d2:	af00      	add	r7, sp, #0
 80123d4:	60f8      	str	r0, [r7, #12]
 80123d6:	60b9      	str	r1, [r7, #8]
 80123d8:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	691a      	ldr	r2, [r3, #16]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	441a      	add	r2, r3
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	1ad3      	subs	r3, r2, r3
 80123e6:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	691b      	ldr	r3, [r3, #16]
 80123ec:	697a      	ldr	r2, [r7, #20]
 80123ee:	429a      	cmp	r2, r3
 80123f0:	d304      	bcc.n	80123fc <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	691b      	ldr	r3, [r3, #16]
 80123f6:	697a      	ldr	r2, [r7, #20]
 80123f8:	1ad3      	subs	r3, r2, r3
 80123fa:	617b      	str	r3, [r7, #20]
	return uxCount;
 80123fc:	697b      	ldr	r3, [r7, #20]
}
 80123fe:	4618      	mov	r0, r3
 8012400:	371c      	adds	r7, #28
 8012402:	46bd      	mov	sp, r7
 8012404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012408:	4770      	bx	lr

0801240a <uxStreamBufferGetSpace>:
{
 801240a:	b580      	push	{r7, lr}
 801240c:	b084      	sub	sp, #16
 801240e:	af00      	add	r7, sp, #0
 8012410:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	689b      	ldr	r3, [r3, #8]
 8012416:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 801241e:	68ba      	ldr	r2, [r7, #8]
 8012420:	68f9      	ldr	r1, [r7, #12]
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f7ff ffb4 	bl	8012390 <uxStreamBufferSpace>
 8012428:	4603      	mov	r3, r0
}
 801242a:	4618      	mov	r0, r3
 801242c:	3710      	adds	r7, #16
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <uxStreamBufferGetSize>:
{
 8012432:	b580      	push	{r7, lr}
 8012434:	b084      	sub	sp, #16
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	689b      	ldr	r3, [r3, #8]
 801243e:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 8012446:	68fa      	ldr	r2, [r7, #12]
 8012448:	68b9      	ldr	r1, [r7, #8]
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f7ff ffbf 	bl	80123ce <uxStreamBufferDistance>
 8012450:	4603      	mov	r3, r0
}
 8012452:	4618      	mov	r0, r3
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}

0801245a <xStreamBufferLessThenEqual>:
}
/*-----------------------------------------------------------*/

static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight );
static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight )
{
 801245a:	b480      	push	{r7}
 801245c:	b087      	sub	sp, #28
 801245e:	af00      	add	r7, sp, #0
 8012460:	60f8      	str	r0, [r7, #12]
 8012462:	60b9      	str	r1, [r7, #8]
 8012464:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
size_t uxTail = pxBuffer->uxTail;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	613b      	str	r3, [r7, #16]

	/* Returns true if ( uxLeft < uxRight ) */
	if( ( ( ( uxLeft < uxTail ) ? 1U : 0U ) ^ ( ( uxRight < uxTail ) ? 1U : 0U )  ) != 0U )
 801246c:	68ba      	ldr	r2, [r7, #8]
 801246e:	693b      	ldr	r3, [r7, #16]
 8012470:	429a      	cmp	r2, r3
 8012472:	d201      	bcs.n	8012478 <xStreamBufferLessThenEqual+0x1e>
 8012474:	2201      	movs	r2, #1
 8012476:	e000      	b.n	801247a <xStreamBufferLessThenEqual+0x20>
 8012478:	2200      	movs	r2, #0
 801247a:	6879      	ldr	r1, [r7, #4]
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	4299      	cmp	r1, r3
 8012480:	d201      	bcs.n	8012486 <xStreamBufferLessThenEqual+0x2c>
 8012482:	2301      	movs	r3, #1
 8012484:	e000      	b.n	8012488 <xStreamBufferLessThenEqual+0x2e>
 8012486:	2300      	movs	r3, #0
 8012488:	429a      	cmp	r2, r3
 801248a:	d009      	beq.n	80124a0 <xStreamBufferLessThenEqual+0x46>
	{
		if( uxRight < uxTail )
 801248c:	687a      	ldr	r2, [r7, #4]
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	429a      	cmp	r2, r3
 8012492:	d202      	bcs.n	801249a <xStreamBufferLessThenEqual+0x40>
		{
			xReturn = pdTRUE;
 8012494:	2301      	movs	r3, #1
 8012496:	617b      	str	r3, [r7, #20]
 8012498:	e00b      	b.n	80124b2 <xStreamBufferLessThenEqual+0x58>
		}
		else
		{
			xReturn = pdFALSE;
 801249a:	2300      	movs	r3, #0
 801249c:	617b      	str	r3, [r7, #20]
 801249e:	e008      	b.n	80124b2 <xStreamBufferLessThenEqual+0x58>
		}
	}
	else
	{
		if( uxLeft <= uxRight )
 80124a0:	68ba      	ldr	r2, [r7, #8]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d802      	bhi.n	80124ae <xStreamBufferLessThenEqual+0x54>
		{
			xReturn = pdTRUE;
 80124a8:	2301      	movs	r3, #1
 80124aa:	617b      	str	r3, [r7, #20]
 80124ac:	e001      	b.n	80124b2 <xStreamBufferLessThenEqual+0x58>
		}
		else
		{
			xReturn = pdFALSE;
 80124ae:	2300      	movs	r3, #0
 80124b0:	617b      	str	r3, [r7, #20]
		}
	}
	return xReturn;
 80124b2:	697b      	ldr	r3, [r7, #20]
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	371c      	adds	r7, #28
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	4770      	bx	lr

080124c0 <uxStreamBufferAdd>:
 * an offset from uxHead while uxHead will not be moved yet.  This possibility
 * will be used when TCP data is received while earlier data is still missing.
 * If 'pucData' equals NULL, the function is called to advance 'uxHead' only.
 */
size_t uxStreamBufferAdd( StreamBuffer_t *pxBuffer, size_t uxOffset, const uint8_t *pucData, size_t uxByteCount )
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b088      	sub	sp, #32
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	60f8      	str	r0, [r7, #12]
 80124c8:	60b9      	str	r1, [r7, #8]
 80124ca:	607a      	str	r2, [r7, #4]
 80124cc:	603b      	str	r3, [r7, #0]
size_t uxSpace, uxNextHead, uxFirst;
size_t uxCount = uxByteCount;
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	617b      	str	r3, [r7, #20]

	uxSpace = uxStreamBufferGetSpace( pxBuffer );
 80124d2:	68f8      	ldr	r0, [r7, #12]
 80124d4:	f7ff ff99 	bl	801240a <uxStreamBufferGetSpace>
 80124d8:	61f8      	str	r0, [r7, #28]

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
 80124da:	69fa      	ldr	r2, [r7, #28]
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d904      	bls.n	80124ec <uxStreamBufferAdd+0x2c>
	{
		uxSpace -= uxOffset;
 80124e2:	69fa      	ldr	r2, [r7, #28]
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	1ad3      	subs	r3, r2, r3
 80124e8:	61fb      	str	r3, [r7, #28]
 80124ea:	e001      	b.n	80124f0 <uxStreamBufferAdd+0x30>
	}
	else
	{
		uxSpace = 0U;
 80124ec:	2300      	movs	r3, #0
 80124ee:	61fb      	str	r3, [r7, #28]
	}

	/* The number of bytes that can be written is the minimum of the number of
	bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 80124f0:	6979      	ldr	r1, [r7, #20]
 80124f2:	69f8      	ldr	r0, [r7, #28]
 80124f4:	f7ff ff3c 	bl	8012370 <FreeRTOS_min_uint32>
 80124f8:	6178      	str	r0, [r7, #20]

	if( uxCount != 0U )
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d05a      	beq.n	80125b6 <uxStreamBufferAdd+0xf6>
	{
		uxNextHead = pxBuffer->uxHead;
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	689b      	ldr	r3, [r3, #8]
 8012504:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0U )
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d00d      	beq.n	8012528 <uxStreamBufferAdd+0x68>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
 801250c:	69ba      	ldr	r2, [r7, #24]
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	4413      	add	r3, r2
 8012512:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	691b      	ldr	r3, [r3, #16]
 8012518:	69ba      	ldr	r2, [r7, #24]
 801251a:	429a      	cmp	r2, r3
 801251c:	d304      	bcc.n	8012528 <uxStreamBufferAdd+0x68>
			{
				uxNextHead -= pxBuffer->LENGTH;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	691b      	ldr	r3, [r3, #16]
 8012522:	69ba      	ldr	r2, [r7, #24]
 8012524:	1ad3      	subs	r3, r2, r3
 8012526:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d022      	beq.n	8012574 <uxStreamBufferAdd+0xb4>
		{
			/* Calculate the number of bytes that can be added in the first
			write - which may be less than the total number of bytes that need
			to be added if the buffer will wrap back to the beginning. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	691a      	ldr	r2, [r3, #16]
 8012532:	69bb      	ldr	r3, [r7, #24]
 8012534:	1ad3      	subs	r3, r2, r3
 8012536:	6979      	ldr	r1, [r7, #20]
 8012538:	4618      	mov	r0, r3
 801253a:	f7ff ff19 	bl	8012370 <FreeRTOS_min_uint32>
 801253e:	6138      	str	r0, [r7, #16]

			/* Write as many bytes as can be written in the first write. */
			( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 8012540:	69bb      	ldr	r3, [r7, #24]
 8012542:	3310      	adds	r3, #16
 8012544:	68fa      	ldr	r2, [r7, #12]
 8012546:	4413      	add	r3, r2
 8012548:	3304      	adds	r3, #4
 801254a:	693a      	ldr	r2, [r7, #16]
 801254c:	6879      	ldr	r1, [r7, #4]
 801254e:	4618      	mov	r0, r3
 8012550:	f004 fe95 	bl	801727e <memcpy>

			/* If the number of bytes written was less than the number that
			could be written in the first write... */
			if( uxCount > uxFirst )
 8012554:	697a      	ldr	r2, [r7, #20]
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	429a      	cmp	r2, r3
 801255a:	d90b      	bls.n	8012574 <uxStreamBufferAdd+0xb4>
			{
				/* ...then write the remaining bytes to the start of the
				buffer. */
				( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	f103 0014 	add.w	r0, r3, #20
 8012562:	687a      	ldr	r2, [r7, #4]
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	18d1      	adds	r1, r2, r3
 8012568:	697a      	ldr	r2, [r7, #20]
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	1ad3      	subs	r3, r2, r3
 801256e:	461a      	mov	r2, r3
 8012570:	f004 fe85 	bl	801727e <memcpy>
			}
		}

		if( uxOffset == 0U )
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d110      	bne.n	801259c <uxStreamBufferAdd+0xdc>
		{
			/* ( uxOffset == 0 ) means: write at uxHead position */
			uxNextHead += uxCount;
 801257a:	69ba      	ldr	r2, [r7, #24]
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	4413      	add	r3, r2
 8012580:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	691b      	ldr	r3, [r3, #16]
 8012586:	69ba      	ldr	r2, [r7, #24]
 8012588:	429a      	cmp	r2, r3
 801258a:	d304      	bcc.n	8012596 <uxStreamBufferAdd+0xd6>
			{
				uxNextHead -= pxBuffer->LENGTH;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	691b      	ldr	r3, [r3, #16]
 8012590:	69ba      	ldr	r2, [r7, #24]
 8012592:	1ad3      	subs	r3, r2, r3
 8012594:	61bb      	str	r3, [r7, #24]
			}
			pxBuffer->uxHead = uxNextHead;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	69ba      	ldr	r2, [r7, #24]
 801259a:	609a      	str	r2, [r3, #8]
		}

		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	68db      	ldr	r3, [r3, #12]
 80125a0:	69ba      	ldr	r2, [r7, #24]
 80125a2:	4619      	mov	r1, r3
 80125a4:	68f8      	ldr	r0, [r7, #12]
 80125a6:	f7ff ff58 	bl	801245a <xStreamBufferLessThenEqual>
 80125aa:	4603      	mov	r3, r0
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d002      	beq.n	80125b6 <uxStreamBufferAdd+0xf6>
		{
			/* Advance the front pointer */
			pxBuffer->uxFront = uxNextHead;
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	69ba      	ldr	r2, [r7, #24]
 80125b4:	60da      	str	r2, [r3, #12]
		}
	}

	return uxCount;
 80125b6:	697b      	ldr	r3, [r7, #20]
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3720      	adds	r7, #32
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <uxStreamBufferGet>:
 * If 'pucData' equals NULL, the function is called to advance 'lTail' only.
 * if 'xPeek' is pdTRUE, or if 'uxOffset' is non-zero, the 'lTail' pointer will
 * not be advanced.
 */
size_t uxStreamBufferGet( StreamBuffer_t *pxBuffer, size_t uxOffset, uint8_t *pucData, size_t uxMaxCount, BaseType_t xPeek )
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b088      	sub	sp, #32
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	60b9      	str	r1, [r7, #8]
 80125ca:	607a      	str	r2, [r7, #4]
 80125cc:	603b      	str	r3, [r7, #0]
size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );
 80125ce:	68f8      	ldr	r0, [r7, #12]
 80125d0:	f7ff ff2f 	bl	8012432 <uxStreamBufferGetSize>
 80125d4:	61f8      	str	r0, [r7, #28]

	if( uxSize > uxOffset )
 80125d6:	69fa      	ldr	r2, [r7, #28]
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	429a      	cmp	r2, r3
 80125dc:	d904      	bls.n	80125e8 <uxStreamBufferGet+0x28>
	{
		uxSize -= uxOffset;
 80125de:	69fa      	ldr	r2, [r7, #28]
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	1ad3      	subs	r3, r2, r3
 80125e4:	61fb      	str	r3, [r7, #28]
 80125e6:	e001      	b.n	80125ec <uxStreamBufferGet+0x2c>
	}
	else
	{
		uxSize = 0U;
 80125e8:	2300      	movs	r3, #0
 80125ea:	61fb      	str	r3, [r7, #28]
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 80125ec:	6839      	ldr	r1, [r7, #0]
 80125ee:	69f8      	ldr	r0, [r7, #28]
 80125f0:	f7ff febe 	bl	8012370 <FreeRTOS_min_uint32>
 80125f4:	6178      	str	r0, [r7, #20]

	if( uxCount > 0U )
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d050      	beq.n	801269e <uxStreamBufferGet+0xde>
	{
		uxNextTail = pxBuffer->uxTail;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0U )
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d00d      	beq.n	8012624 <uxStreamBufferGet+0x64>
		{
			uxNextTail += uxOffset;
 8012608:	69ba      	ldr	r2, [r7, #24]
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	4413      	add	r3, r2
 801260e:	61bb      	str	r3, [r7, #24]
			if( uxNextTail >= pxBuffer->LENGTH )
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	691b      	ldr	r3, [r3, #16]
 8012614:	69ba      	ldr	r2, [r7, #24]
 8012616:	429a      	cmp	r2, r3
 8012618:	d304      	bcc.n	8012624 <uxStreamBufferGet+0x64>
			{
				uxNextTail -= pxBuffer->LENGTH;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	691b      	ldr	r3, [r3, #16]
 801261e:	69ba      	ldr	r2, [r7, #24]
 8012620:	1ad3      	subs	r3, r2, r3
 8012622:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d022      	beq.n	8012670 <uxStreamBufferGet+0xb0>
		{
			/* Calculate the number of bytes that can be read - which may be
			less than the number wanted if the data wraps around to the start of
			the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	691a      	ldr	r2, [r3, #16]
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	1ad3      	subs	r3, r2, r3
 8012632:	6979      	ldr	r1, [r7, #20]
 8012634:	4618      	mov	r0, r3
 8012636:	f7ff fe9b 	bl	8012370 <FreeRTOS_min_uint32>
 801263a:	6138      	str	r0, [r7, #16]

			/* Obtain the number of bytes it is possible to obtain in the first
			read. */
			( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 801263c:	69bb      	ldr	r3, [r7, #24]
 801263e:	3310      	adds	r3, #16
 8012640:	68fa      	ldr	r2, [r7, #12]
 8012642:	4413      	add	r3, r2
 8012644:	3304      	adds	r3, #4
 8012646:	693a      	ldr	r2, [r7, #16]
 8012648:	4619      	mov	r1, r3
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f004 fe17 	bl	801727e <memcpy>

			/* If the total number of wanted bytes is greater than the number
			that could be read in the first read... */
			if( uxCount > uxFirst )
 8012650:	697a      	ldr	r2, [r7, #20]
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	429a      	cmp	r2, r3
 8012656:	d90b      	bls.n	8012670 <uxStreamBufferGet+0xb0>
			{
				/*...then read the remaining bytes from the start of the buffer. */
				( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 8012658:	687a      	ldr	r2, [r7, #4]
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	18d0      	adds	r0, r2, r3
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	f103 0114 	add.w	r1, r3, #20
 8012664:	697a      	ldr	r2, [r7, #20]
 8012666:	693b      	ldr	r3, [r7, #16]
 8012668:	1ad3      	subs	r3, r2, r3
 801266a:	461a      	mov	r2, r3
 801266c:	f004 fe07 	bl	801727e <memcpy>
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 8012670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012672:	2b00      	cmp	r3, #0
 8012674:	d113      	bne.n	801269e <uxStreamBufferGet+0xde>
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d110      	bne.n	801269e <uxStreamBufferGet+0xde>
		{
			/* Move the tail pointer to effecively remove the data read from
			the buffer. */
			uxNextTail += uxCount;
 801267c:	69ba      	ldr	r2, [r7, #24]
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	4413      	add	r3, r2
 8012682:	61bb      	str	r3, [r7, #24]

			if( uxNextTail >= pxBuffer->LENGTH )
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	691b      	ldr	r3, [r3, #16]
 8012688:	69ba      	ldr	r2, [r7, #24]
 801268a:	429a      	cmp	r2, r3
 801268c:	d304      	bcc.n	8012698 <uxStreamBufferGet+0xd8>
			{
				uxNextTail -= pxBuffer->LENGTH;
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	691b      	ldr	r3, [r3, #16]
 8012692:	69ba      	ldr	r2, [r7, #24]
 8012694:	1ad3      	subs	r3, r2, r3
 8012696:	61bb      	str	r3, [r7, #24]
			}

			pxBuffer->uxTail = uxNextTail;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	69ba      	ldr	r2, [r7, #24]
 801269c:	601a      	str	r2, [r3, #0]
		}
	}

	return uxCount;
 801269e:	697b      	ldr	r3, [r7, #20]
}
 80126a0:	4618      	mov	r0, r3
 80126a2:	3720      	adds	r7, #32
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}

080126a8 <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return ( a <= b ) ? a : b; }
 80126a8:	b480      	push	{r7}
 80126aa:	b083      	sub	sp, #12
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
 80126b2:	687a      	ldr	r2, [r7, #4]
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	4293      	cmp	r3, r2
 80126b8:	bfa8      	it	ge
 80126ba:	4613      	movge	r3, r2
 80126bc:	4618      	mov	r0, r3
 80126be:	370c      	adds	r7, #12
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr

080126c8 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return ( a <= b ) ? a : b; }
 80126c8:	b480      	push	{r7}
 80126ca:	b083      	sub	sp, #12
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	4293      	cmp	r3, r2
 80126d8:	bf28      	it	cs
 80126da:	4613      	movcs	r3, r2
 80126dc:	4618      	mov	r0, r3
 80126de:	370c      	adds	r7, #12
 80126e0:	46bd      	mov	sp, r7
 80126e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e6:	4770      	bx	lr

080126e8 <uxStreamBufferSpace>:
{
 80126e8:	b480      	push	{r7}
 80126ea:	b087      	sub	sp, #28
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	60f8      	str	r0, [r7, #12]
 80126f0:	60b9      	str	r1, [r7, #8]
 80126f2:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	691a      	ldr	r2, [r3, #16]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	441a      	add	r2, r3
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	1ad3      	subs	r3, r2, r3
 8012700:	3b01      	subs	r3, #1
 8012702:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	691b      	ldr	r3, [r3, #16]
 8012708:	697a      	ldr	r2, [r7, #20]
 801270a:	429a      	cmp	r2, r3
 801270c:	d304      	bcc.n	8012718 <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	691b      	ldr	r3, [r3, #16]
 8012712:	697a      	ldr	r2, [r7, #20]
 8012714:	1ad3      	subs	r3, r2, r3
 8012716:	617b      	str	r3, [r7, #20]
	return uxCount;
 8012718:	697b      	ldr	r3, [r7, #20]
}
 801271a:	4618      	mov	r0, r3
 801271c:	371c      	adds	r7, #28
 801271e:	46bd      	mov	sp, r7
 8012720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012724:	4770      	bx	lr

08012726 <uxStreamBufferDistance>:
{
 8012726:	b480      	push	{r7}
 8012728:	b087      	sub	sp, #28
 801272a:	af00      	add	r7, sp, #0
 801272c:	60f8      	str	r0, [r7, #12]
 801272e:	60b9      	str	r1, [r7, #8]
 8012730:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	691a      	ldr	r2, [r3, #16]
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	441a      	add	r2, r3
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	691b      	ldr	r3, [r3, #16]
 8012744:	697a      	ldr	r2, [r7, #20]
 8012746:	429a      	cmp	r2, r3
 8012748:	d304      	bcc.n	8012754 <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	691b      	ldr	r3, [r3, #16]
 801274e:	697a      	ldr	r2, [r7, #20]
 8012750:	1ad3      	subs	r3, r2, r3
 8012752:	617b      	str	r3, [r7, #20]
	return uxCount;
 8012754:	697b      	ldr	r3, [r7, #20]
}
 8012756:	4618      	mov	r0, r3
 8012758:	371c      	adds	r7, #28
 801275a:	46bd      	mov	sp, r7
 801275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012760:	4770      	bx	lr

08012762 <uxStreamBufferGetSpace>:
{
 8012762:	b580      	push	{r7, lr}
 8012764:	b084      	sub	sp, #16
 8012766:	af00      	add	r7, sp, #0
 8012768:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	689b      	ldr	r3, [r3, #8]
 801276e:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 8012776:	68ba      	ldr	r2, [r7, #8]
 8012778:	68f9      	ldr	r1, [r7, #12]
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f7ff ffb4 	bl	80126e8 <uxStreamBufferSpace>
 8012780:	4603      	mov	r3, r0
}
 8012782:	4618      	mov	r0, r3
 8012784:	3710      	adds	r7, #16
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}

0801278a <uxStreamBufferFrontSpace>:
{
 801278a:	b580      	push	{r7, lr}
 801278c:	b084      	sub	sp, #16
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
size_t uxFront = pxBuffer->uxFront;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	68db      	ldr	r3, [r3, #12]
 8012796:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 801279e:	68ba      	ldr	r2, [r7, #8]
 80127a0:	68f9      	ldr	r1, [r7, #12]
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	f7ff ffa0 	bl	80126e8 <uxStreamBufferSpace>
 80127a8:	4603      	mov	r3, r0
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3710      	adds	r7, #16
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}

080127b2 <uxStreamBufferMidSpace>:
{
 80127b2:	b580      	push	{r7, lr}
 80127b4:	b084      	sub	sp, #16
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	689b      	ldr	r3, [r3, #8]
 80127be:	60fb      	str	r3, [r7, #12]
size_t uxMid = pxBuffer->uxMid;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 80127c6:	68fa      	ldr	r2, [r7, #12]
 80127c8:	68b9      	ldr	r1, [r7, #8]
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f7ff ffab 	bl	8012726 <uxStreamBufferDistance>
 80127d0:	4603      	mov	r3, r0
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3710      	adds	r7, #16
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}

080127da <vStreamBufferMoveMid>:
{
 80127da:	b580      	push	{r7, lr}
 80127dc:	b084      	sub	sp, #16
 80127de:	af00      	add	r7, sp, #0
 80127e0:	6078      	str	r0, [r7, #4]
 80127e2:	6039      	str	r1, [r7, #0]
size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f7ff ffe4 	bl	80127b2 <uxStreamBufferMidSpace>
 80127ea:	60b8      	str	r0, [r7, #8]
size_t uxMoveCount = uxCount;
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	60fb      	str	r3, [r7, #12]
	if( uxMoveCount > uxSize )
 80127f0:	68fa      	ldr	r2, [r7, #12]
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d901      	bls.n	80127fc <vStreamBufferMoveMid+0x22>
		uxMoveCount = uxSize;
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	60fb      	str	r3, [r7, #12]
	pxBuffer->uxMid += uxMoveCount;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	685a      	ldr	r2, [r3, #4]
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	441a      	add	r2, r3
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	605a      	str	r2, [r3, #4]
	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	685a      	ldr	r2, [r3, #4]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	691b      	ldr	r3, [r3, #16]
 8012810:	429a      	cmp	r2, r3
 8012812:	d306      	bcc.n	8012822 <vStreamBufferMoveMid+0x48>
		pxBuffer->uxMid -= pxBuffer->LENGTH;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	685a      	ldr	r2, [r3, #4]
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	691b      	ldr	r3, [r3, #16]
 801281c:	1ad2      	subs	r2, r2, r3
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	605a      	str	r2, [r3, #4]
}
 8012822:	bf00      	nop
 8012824:	3710      	adds	r7, #16
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <vCastConstPointerTo_IPHeader_t>:
{
 801282a:	b480      	push	{r7}
 801282c:	b083      	sub	sp, #12
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
	return ( const IPHeader_t *) pvArgument;
 8012832:	687b      	ldr	r3, [r7, #4]
}
 8012834:	4618      	mov	r0, r3
 8012836:	370c      	adds	r7, #12
 8012838:	46bd      	mov	sp, r7
 801283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283e:	4770      	bx	lr

08012840 <vCastPointerTo_TCPPacket_t>:
{
 8012840:	b480      	push	{r7}
 8012842:	b083      	sub	sp, #12
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
    return ( TCPPacket_t *)pvArgument;
 8012848:	687b      	ldr	r3, [r7, #4]
}
 801284a:	4618      	mov	r0, r3
 801284c:	370c      	adds	r7, #12
 801284e:	46bd      	mov	sp, r7
 8012850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012854:	4770      	bx	lr

08012856 <vCastConstPointerTo_TCPPacket_t>:
{
 8012856:	b480      	push	{r7}
 8012858:	b083      	sub	sp, #12
 801285a:	af00      	add	r7, sp, #0
 801285c:	6078      	str	r0, [r7, #4]
	return ( const TCPPacket_t *) pvArgument;
 801285e:	687b      	ldr	r3, [r7, #4]
}
 8012860:	4618      	mov	r0, r3
 8012862:	370c      	adds	r7, #12
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr

0801286c <vCastPointerTo_ProtocolHeaders_t>:
{
 801286c:	b480      	push	{r7}
 801286e:	b083      	sub	sp, #12
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
	return ( ProtocolHeaders_t *)pvArgument;
 8012874:	687b      	ldr	r3, [r7, #4]
}
 8012876:	4618      	mov	r0, r3
 8012878:	370c      	adds	r7, #12
 801287a:	46bd      	mov	sp, r7
 801287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012880:	4770      	bx	lr

08012882 <vCastConstPointerTo_ProtocolHeaders_t>:
{
 8012882:	b480      	push	{r7}
 8012884:	b083      	sub	sp, #12
 8012886:	af00      	add	r7, sp, #0
 8012888:	6078      	str	r0, [r7, #4]
	return ( const ProtocolHeaders_t *) pvArgument;
 801288a:	687b      	ldr	r3, [r7, #4]
}
 801288c:	4618      	mov	r0, r3
 801288e:	370c      	adds	r7, #12
 8012890:	46bd      	mov	sp, r7
 8012892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012896:	4770      	bx	lr

08012898 <vCastPointerTo_FreeRTOS_Socket_t>:
{
 8012898:	b480      	push	{r7}
 801289a:	b083      	sub	sp, #12
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
	return ( FreeRTOS_Socket_t *)pvArgument;
 80128a0:	687b      	ldr	r3, [r7, #4]
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	370c      	adds	r7, #12
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr

080128ae <ulChar2u32>:
{
 80128ae:	b480      	push	{r7}
 80128b0:	b083      	sub	sp, #12
 80128b2:	af00      	add	r7, sp, #0
 80128b4:	6078      	str	r0, [r7, #4]
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	061a      	lsls	r2, r3, #24
			( ( ( uint32_t )apChr[1] ) << 16) |
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	3301      	adds	r3, #1
 80128c0:	781b      	ldrb	r3, [r3, #0]
 80128c2:	041b      	lsls	r3, r3, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 80128c4:	431a      	orrs	r2, r3
			( ( ( uint32_t )apChr[2] ) << 8) |
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	3302      	adds	r3, #2
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	021b      	lsls	r3, r3, #8
			( ( ( uint32_t )apChr[1] ) << 16) |
 80128ce:	4313      	orrs	r3, r2
			( ( ( uint32_t )apChr[3] ) );
 80128d0:	687a      	ldr	r2, [r7, #4]
 80128d2:	3203      	adds	r2, #3
 80128d4:	7812      	ldrb	r2, [r2, #0]
			( ( ( uint32_t )apChr[2] ) << 8) |
 80128d6:	4313      	orrs	r3, r2
}
 80128d8:	4618      	mov	r0, r3
 80128da:	370c      	adds	r7, #12
 80128dc:	46bd      	mov	sp, r7
 80128de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e2:	4770      	bx	lr

080128e4 <usChar2u16>:
{
 80128e4:	b480      	push	{r7}
 80128e6:	b083      	sub	sp, #12
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	021b      	lsls	r3, r3, #8
 80128f4:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	3301      	adds	r3, #1
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	b29b      	uxth	r3, r3
	return ( uint16_t )
 80128fe:	4313      	orrs	r3, r2
 8012900:	b29b      	uxth	r3, r3
}
 8012902:	4618      	mov	r0, r3
 8012904:	370c      	adds	r7, #12
 8012906:	46bd      	mov	sp, r7
 8012908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290c:	4770      	bx	lr
	...

08012910 <prvTCPSocketIsActive>:

/* prvTCPSocketIsActive() returns true if the socket must be checked.
 * Non-active sockets are waiting for user action, either connect()
 * or close(). */
static BaseType_t prvTCPSocketIsActive( eIPTCPState_t xStatus )
{
 8012910:	b480      	push	{r7}
 8012912:	b085      	sub	sp, #20
 8012914:	af00      	add	r7, sp, #0
 8012916:	4603      	mov	r3, r0
 8012918:	71fb      	strb	r3, [r7, #7]
BaseType_t xResult;
	switch( xStatus )
 801291a:	79fb      	ldrb	r3, [r7, #7]
 801291c:	2b0b      	cmp	r3, #11
 801291e:	d81e      	bhi.n	801295e <prvTCPSocketIsActive+0x4e>
 8012920:	a201      	add	r2, pc, #4	; (adr r2, 8012928 <prvTCPSocketIsActive+0x18>)
 8012922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012926:	bf00      	nop
 8012928:	08012959 	.word	0x08012959
 801292c:	0801295f 	.word	0x0801295f
 8012930:	0801295f 	.word	0x0801295f
 8012934:	0801295f 	.word	0x0801295f
 8012938:	0801295f 	.word	0x0801295f
 801293c:	0801295f 	.word	0x0801295f
 8012940:	0801295f 	.word	0x0801295f
 8012944:	08012959 	.word	0x08012959
 8012948:	08012959 	.word	0x08012959
 801294c:	08012959 	.word	0x08012959
 8012950:	0801295f 	.word	0x0801295f
 8012954:	08012959 	.word	0x08012959
	case eCLOSED:
	case eCLOSE_WAIT:
	case eFIN_WAIT_2:
	case eCLOSING:
	case eTIME_WAIT:
		xResult = pdFALSE;
 8012958:	2300      	movs	r3, #0
 801295a:	60fb      	str	r3, [r7, #12]
		break;
 801295c:	e002      	b.n	8012964 <prvTCPSocketIsActive+0x54>
	case eSYN_RECEIVED:
	case eESTABLISHED:
	case eFIN_WAIT_1:
	case eLAST_ACK:
	default:
		xResult = pdTRUE;
 801295e:	2301      	movs	r3, #1
 8012960:	60fb      	str	r3, [r7, #12]
		break;
 8012962:	bf00      	nop
	}
	return xResult;
 8012964:	68fb      	ldr	r3, [r7, #12]
}
 8012966:	4618      	mov	r0, r3
 8012968:	3714      	adds	r7, #20
 801296a:	46bd      	mov	sp, r7
 801296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012970:	4770      	bx	lr
 8012972:	bf00      	nop

08012974 <prvTCPStatusAgeCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigTCP_HANG_PROTECTION == 1 )

	static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t *pxSocket )
	{
 8012974:	b580      	push	{r7, lr}
 8012976:	b086      	sub	sp, #24
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
	BaseType_t xResult;
	eIPTCPState_t eState = ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState );
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8012982:	74fb      	strb	r3, [r7, #19]

		switch( eState )
 8012984:	7cfb      	ldrb	r3, [r7, #19]
 8012986:	2b08      	cmp	r3, #8
 8012988:	d81a      	bhi.n	80129c0 <prvTCPStatusAgeCheck+0x4c>
 801298a:	a201      	add	r2, pc, #4	; (adr r2, 8012990 <prvTCPStatusAgeCheck+0x1c>)
 801298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012990:	080129bb 	.word	0x080129bb
 8012994:	080129bb 	.word	0x080129bb
 8012998:	080129c1 	.word	0x080129c1
 801299c:	080129c1 	.word	0x080129c1
 80129a0:	080129c1 	.word	0x080129c1
 80129a4:	080129b5 	.word	0x080129b5
 80129a8:	080129c1 	.word	0x080129c1
 80129ac:	080129c1 	.word	0x080129c1
 80129b0:	080129bb 	.word	0x080129bb
		{
		case eESTABLISHED:
			/* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
			state ESTABLISHED can be protected using keep-alive messages. */
			xResult = pdFALSE;
 80129b4:	2300      	movs	r3, #0
 80129b6:	617b      	str	r3, [r7, #20]
			break;
 80129b8:	e005      	b.n	80129c6 <prvTCPStatusAgeCheck+0x52>
		case eCLOSED:
		case eTCP_LISTEN:
		case eCLOSE_WAIT:
			/* These 3 states may last for ever, up to the owner. */
			xResult = pdFALSE;
 80129ba:	2300      	movs	r3, #0
 80129bc:	617b      	str	r3, [r7, #20]
			break;
 80129be:	e002      	b.n	80129c6 <prvTCPStatusAgeCheck+0x52>
		case eLAST_ACK:
		case eTIME_WAIT:
		default:
			/* All other (non-connected) states will get anti-hanging
			protection. */
			xResult = pdTRUE;
 80129c0:	2301      	movs	r3, #1
 80129c2:	617b      	str	r3, [r7, #20]
			break;
 80129c4:	bf00      	nop
		}
		if( xResult != pdFALSE )
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d025      	beq.n	8012a18 <prvTCPStatusAgeCheck+0xa4>
		{
			/* How much time has past since the last active moment which is
			defined as A) a state change or B) a packet has arrived. */
			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
 80129cc:	f7fa fcc2 	bl	800d354 <xTaskGetTickCount>
 80129d0:	4602      	mov	r2, r0
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80129d6:	1ad3      	subs	r3, r2, r3
 80129d8:	60fb      	str	r3, [r7, #12]

			/* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
			if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	f247 5230 	movw	r2, #30000	; 0x7530
 80129e0:	4293      	cmp	r3, r2
 80129e2:	d919      	bls.n	8012a18 <prvTCPStatusAgeCheck+0xa4>
						FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				/* Move to eCLOSE_WAIT, user may close the socket. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80129e4:	2108      	movs	r1, #8
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f000 fe39 	bl	801365e <vTCPStateChange>

				/* When 'bPassQueued' true, this socket is an orphan until it
				gets connected. */
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129f2:	f003 0304 	and.w	r3, r3, #4
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d00d      	beq.n	8012a18 <prvTCPStatusAgeCheck+0xa4>
				{
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a02:	f003 0308 	and.w	r3, r3, #8
 8012a06:	b2db      	uxtb	r3, r3
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d102      	bne.n	8012a12 <prvTCPStatusAgeCheck+0x9e>
					{
						/* As it did not get connected, and the user can never
						accept() it anymore, it will be deleted now.  Called from
						the IP-task, so it's safe to call the internal Close
						function: vSocketClose(). */
						( void ) vSocketClose( pxSocket );
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f7fe fd0d 	bl	801142c <vSocketClose>
					}
					/* Return a negative value to tell to inform the caller
					xTCPTimerCheck()
					that the socket got closed and may not be accessed anymore. */
					xResult = -1;
 8012a12:	f04f 33ff 	mov.w	r3, #4294967295
 8012a16:	617b      	str	r3, [r7, #20]
				}
			}
		}
		return xResult;
 8012a18:	697b      	ldr	r3, [r7, #20]
	}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3718      	adds	r7, #24
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}
 8012a22:	bf00      	nop

08012a24 <xTCPSocketCheck>:
 *		prvTCPSendRepeated()			// Send at most 8 messages on a row
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t *pxSocket )
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
BaseType_t xResult = 0;
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	60fb      	str	r3, [r7, #12]
BaseType_t xReady = pdFALSE;
 8012a30:	2300      	movs	r3, #0
 8012a32:	60bb      	str	r3, [r7, #8]

	if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8012a3a:	2b04      	cmp	r3, #4
 8012a3c:	d906      	bls.n	8012a4c <xTCPSocketCheck+0x28>
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d002      	beq.n	8012a4c <xTCPSocketCheck+0x28>
	{
		/* The API FreeRTOS_send() might have added data to the TX stream.  Add
		this data to the windowing system so it can be transmitted. */
		prvTCPAddTxData( pxSocket );
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f001 f940 	bl	8013ccc <prvTCPAddTxData>
	}

	#if( ipconfigUSE_TCP_WIN == 1 )
	{
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d02d      	beq.n	8012ab0 <xTCPSocketCheck+0x8c>
		{
			/* The first task of this regular socket check is to send-out delayed
			ACK's. */
			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a5a:	f003 0320 	and.w	r3, r3, #32
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d119      	bne.n	8012a98 <xTCPSocketCheck+0x74>
			{
				/* Earlier data was received but not yet acknowledged.  This
				function is called when the TCP timer for the socket expires, the
				ACK may be sent now. */
				if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSED )
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d00c      	beq.n	8012a88 <xTCPSocketCheck+0x64>
				{
					if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 8012a6e:	4b1e      	ldr	r3, [pc, #120]	; (8012ae8 <xTCPSocketCheck+0xc4>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2b01      	cmp	r3, #1
							pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
							pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber   - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
							( unsigned ) ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
					}

					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8012a78:	2301      	movs	r3, #1
 8012a7a:	2228      	movs	r2, #40	; 0x28
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f000 f8cd 	bl	8012c1c <prvTCPReturnPacket>

					#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
					{
						/* The ownership has been passed to the SEND routine,
						clear the pointer to it. */
						pxSocket->u.xTCP.pxAckMessage = NULL;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	2200      	movs	r2, #0
 8012a86:	67da      	str	r2, [r3, #124]	; 0x7c
					}
					#endif /* ipconfigZERO_COPY_TX_DRIVER */
				}
				if( prvTCPNextTimeout( pxSocket ) > 1U )
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f001 f89f 	bl	8013bcc <prvTCPNextTimeout>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	2b01      	cmp	r3, #1
 8012a92:	d901      	bls.n	8012a98 <xTCPSocketCheck+0x74>
				{
					/* Tell the code below that this function is ready. */
					xReady = pdTRUE;
 8012a94:	2301      	movs	r3, #1
 8012a96:	60bb      	str	r3, [r7, #8]
				/* The user wants to perform an active shutdown(), skip sending
				the	delayed	ACK.  The function prvTCPSendPacket() will send the
				FIN	along with the ACK's. */
			}

			if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d007      	beq.n	8012ab0 <xTCPSocketCheck+0x8c>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f003 fd0b 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = NULL;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2200      	movs	r2, #0
 8012aae:	67da      	str	r2, [r3, #124]	; 0x7c
			}
		}
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xReady == pdFALSE )
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d113      	bne.n	8012ade <xTCPSocketCheck+0xba>
	{
		/* The second task of this regular socket check is sending out data. */
		if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8012abc:	2b04      	cmp	r3, #4
 8012abe:	d804      	bhi.n	8012aca <xTCPSocketCheck+0xa6>
			( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN ) )
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
		if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 8012ac6:	2b02      	cmp	r3, #2
 8012ac8:	d102      	bne.n	8012ad0 <xTCPSocketCheck+0xac>
		{
			( void ) prvTCPSendPacket( pxSocket );
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f000 f80e 	bl	8012aec <prvTCPSendPacket>
		}

		/* Set the time-out for the next wakeup for this socket. */
		( void ) prvTCPNextTimeout( pxSocket );
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f001 f87b 	bl	8013bcc <prvTCPNextTimeout>

		#if( ipconfigTCP_HANG_PROTECTION == 1 )
		{
			/* In all (non-connected) states in which keep-alive messages can not be sent
			the anti-hang protocol will close sockets that are 'hanging'. */
			xResult = prvTCPStatusAgeCheck( pxSocket );
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7ff ff4c 	bl	8012974 <prvTCPStatusAgeCheck>
 8012adc:	60f8      	str	r0, [r7, #12]
		}
		#endif
	}

	return xResult;
 8012ade:	68fb      	ldr	r3, [r7, #12]
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3710      	adds	r7, #16
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	24005344 	.word	0x24005344

08012aec <prvTCPSendPacket>:
/*
 * prvTCPSendPacket() will be called when the socket time-out has been reached.
 * It is only called by xTCPSocketCheck().
 */
static int32_t prvTCPSendPacket( FreeRTOS_Socket_t *pxSocket )
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b088      	sub	sp, #32
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
int32_t lResult = 0;
 8012af4:	2300      	movs	r3, #0
 8012af6:	61fb      	str	r3, [r7, #28]
UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8012af8:	2300      	movs	r3, #0
 8012afa:	61bb      	str	r3, [r7, #24]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCONNECT_SYN )
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8012b02:	2b02      	cmp	r3, #2
 8012b04:	d010      	beq.n	8012b28 <prvTCPSendPacket+0x3c>
	{
		/* The connection is in a state other than SYN. */
		pxNetworkBuffer = NULL;
 8012b06:	2300      	movs	r3, #0
 8012b08:	60bb      	str	r3, [r7, #8]

		/* prvTCPSendRepeated() will only create a network buffer if necessary,
		i.e. when data must be sent to the peer. */
		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8012b0a:	f107 0308 	add.w	r3, r7, #8
 8012b0e:	4619      	mov	r1, r3
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f000 f853 	bl	8012bbc <prvTCPSendRepeated>
 8012b16:	61f8      	str	r0, [r7, #28]

		if( pxNetworkBuffer != NULL )
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d049      	beq.n	8012bb2 <prvTCPSendPacket+0xc6>
		{
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	4618      	mov	r0, r3
 8012b22:	f003 fccd 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
 8012b26:	e044      	b.n	8012bb2 <prvTCPSendPacket+0xc6>
		}
	}
	else
	{
		if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8012b2e:	2b02      	cmp	r3, #2
 8012b30:	d904      	bls.n	8012b3c <prvTCPSendPacket+0x50>
			to most 3 times.  When there is no response, the socket get the
			status 'eCLOSE_WAIT'. */
			FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
				pxSocket->u.xTCP.ulRemoteIP,		/* IP address of remote machine. */
				pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012b32:	2108      	movs	r1, #8
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f000 fd92 	bl	801365e <vTCPStateChange>
 8012b3a:	e03a      	b.n	8012bb2 <prvTCPSendPacket+0xc6>
		}
		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012b42:	f003 0308 	and.w	r3, r3, #8
 8012b46:	b2db      	uxtb	r3, r3
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d105      	bne.n	8012b58 <prvTCPSendPacket+0x6c>
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f000 fa81 	bl	8013054 <prvTCPPrepareConnect>
 8012b52:	4603      	mov	r3, r0
 8012b54:	2b01      	cmp	r3, #1
 8012b56:	d12c      	bne.n	8012bb2 <prvTCPSendPacket+0xc6>
		{
		ProtocolHeaders_t *pxProtocolHeaders;
		const UBaseType_t uxHeaderSize = ipSIZE_OF_IPv4_HEADER;
 8012b58:	2314      	movs	r3, #20
 8012b5a:	617b      	str	r3, [r7, #20]
			/* Or else, if the connection has been prepared, or can be prepared
			now, proceed to send the packet with the SYN flag.
			prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
			the Ethernet address of the peer or the gateway is found. */
			pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxHeaderSize ] ) );
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	330e      	adds	r3, #14
 8012b60:	3380      	adds	r3, #128	; 0x80
 8012b62:	687a      	ldr	r2, [r7, #4]
 8012b64:	4413      	add	r3, r2
 8012b66:	3302      	adds	r3, #2
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f7ff fe7f 	bl	801286c <vCastPointerTo_ProtocolHeaders_t>
 8012b6e:	6138      	str	r0, [r7, #16]

			/* About to send a SYN packet.  Call prvSetSynAckOptions() to set
			the proper options: The size of MSS and whether SACK's are
			allowed. */
			uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	4619      	mov	r1, r3
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f000 fcfd 	bl	8013574 <prvSetSynAckOptions>
 8012b7a:	60f8      	str	r0, [r7, #12]

			/* Return the number of bytes to be sent. */
			uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	3328      	adds	r3, #40	; 0x28
 8012b80:	61bb      	str	r3, [r7, #24]
			lResult = ( int32_t ) uxIntermediateResult;
 8012b82:	69bb      	ldr	r3, [r7, #24]
 8012b84:	61fb      	str	r3, [r7, #28]

			/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
			uxOptionsLength is always a multiple of 4.  The complete expression
			would be:
			ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	3314      	adds	r3, #20
 8012b8c:	b2db      	uxtb	r3, r3
 8012b8e:	009b      	lsls	r3, r3, #2
 8012b90:	b2da      	uxtb	r2, r3
 8012b92:	693b      	ldr	r3, [r7, #16]
 8012b94:	731a      	strb	r2, [r3, #12]

			/* Repeat Count is used for a connecting socket, to limit the number
			of tries. */
			pxSocket->u.xTCP.ucRepCount++;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8012b9c:	3301      	adds	r3, #1
 8012b9e:	b2da      	uxtb	r2, r3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

			/* Send the SYN message to make a connection.  The messages is
			stored in the socket field 'xPacket'.  It will be wrapped in a
			pseudo network buffer descriptor before it will be sent. */
			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8012ba6:	69fa      	ldr	r2, [r7, #28]
 8012ba8:	2300      	movs	r3, #0
 8012baa:	2100      	movs	r1, #0
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f000 f835 	bl	8012c1c <prvTCPReturnPacket>
			/* Nothing to do. */
		}
	}

	/* Return the total number of bytes sent. */
	return lResult;
 8012bb2:	69fb      	ldr	r3, [r7, #28]
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3720      	adds	r7, #32
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <prvTCPSendRepeated>:
/*
 * prvTCPSendRepeated will try to send a series of messages, as long as there is
 * data to be sent and as long as the transmit window isn't full.
 */
static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b086      	sub	sp, #24
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	6039      	str	r1, [r7, #0]
UBaseType_t uxIndex;
int32_t lResult = 0;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	613b      	str	r3, [r7, #16]
UBaseType_t uxOptionsLength = 0U;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	60fb      	str	r3, [r7, #12]
int32_t xSendLength;

	for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012bce:	2300      	movs	r3, #0
 8012bd0:	617b      	str	r3, [r7, #20]
 8012bd2:	e019      	b.n	8012c08 <prvTCPSendRepeated+0x4c>
	{
		/* prvTCPPrepareSend() might allocate a network buffer if there is data
		to be sent. */
		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8012bd4:	68fa      	ldr	r2, [r7, #12]
 8012bd6:	6839      	ldr	r1, [r7, #0]
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f000 fe91 	bl	8013900 <prvTCPPrepareSend>
 8012bde:	60b8      	str	r0, [r7, #8]
		if( xSendLength <= 0 )
 8012be0:	68bb      	ldr	r3, [r7, #8]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	dd14      	ble.n	8012c10 <prvTCPSendRepeated+0x54>
		{
			break;
		}

		/* And return the packet to the peer. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	6819      	ldr	r1, [r3, #0]
 8012bea:	68ba      	ldr	r2, [r7, #8]
 8012bec:	2301      	movs	r3, #1
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f000 f814 	bl	8012c1c <prvTCPReturnPacket>

		#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
		{
			*ppxNetworkBuffer = NULL;
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	601a      	str	r2, [r3, #0]
		}
		#endif /* ipconfigZERO_COPY_TX_DRIVER */

		lResult += xSendLength;
 8012bfa:	693a      	ldr	r2, [r7, #16]
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	4413      	add	r3, r2
 8012c00:	613b      	str	r3, [r7, #16]
	for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012c02:	697b      	ldr	r3, [r7, #20]
 8012c04:	3301      	adds	r3, #1
 8012c06:	617b      	str	r3, [r7, #20]
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	2b07      	cmp	r3, #7
 8012c0c:	d9e2      	bls.n	8012bd4 <prvTCPSendRepeated+0x18>
 8012c0e:	e000      	b.n	8012c12 <prvTCPSendRepeated+0x56>
			break;
 8012c10:	bf00      	nop
	}

	/* Return the total number of bytes sent. */
	return lResult;
 8012c12:	693b      	ldr	r3, [r7, #16]
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3718      	adds	r7, #24
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}

08012c1c <prvTCPReturnPacket>:
 * which may either point to a real network buffer or to a TCP socket field
 * called 'xTCP.xPacket'.   A temporary xNetworkBuffer will be used to pass
 * the data to the NIC.
 */
static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxDescriptor, uint32_t ulLen, BaseType_t xReleaseAfterSend )
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b09a      	sub	sp, #104	; 0x68
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	60f8      	str	r0, [r7, #12]
 8012c24:	60b9      	str	r1, [r7, #8]
 8012c26:	607a      	str	r2, [r7, #4]
 8012c28:	603b      	str	r3, [r7, #0]
TCPPacket_t * pxTCPPacket;
IPHeader_t *pxIPHeader;
BaseType_t xDoRelease = xReleaseAfterSend;
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	667b      	str	r3, [r7, #100]	; 0x64
EthernetHeader_t *pxEthernetHeader;
uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
const TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t *pxNetworkBuffer = pxDescriptor;
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	653b      	str	r3, [r7, #80]	; 0x50
NetworkBufferDescriptor_t xTempBuffer;
/* For sending, a pseudo network buffer will be used, as explained above. */

	if( pxNetworkBuffer == NULL )
 8012c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d10c      	bne.n	8012c52 <prvTCPReturnPacket+0x36>
	{
		pxNetworkBuffer = &xTempBuffer;
 8012c38:	f107 0310 	add.w	r3, r7, #16
 8012c3c:	653b      	str	r3, [r7, #80]	; 0x50
		#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		{
			pxNetworkBuffer->pxNextBuffer = NULL;
		}
		#endif
		pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	f103 0282 	add.w	r2, r3, #130	; 0x82
 8012c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c46:	619a      	str	r2, [r3, #24]
		pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8012c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c4a:	2246      	movs	r2, #70	; 0x46
 8012c4c:	61da      	str	r2, [r3, #28]
		xDoRelease = pdFALSE;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	667b      	str	r3, [r7, #100]	; 0x64
	}

	#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
	{
		if( xDoRelease == pdFALSE )
 8012c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d108      	bne.n	8012c6a <prvTCPReturnPacket+0x4e>
		{
			pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8012c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c5a:	69db      	ldr	r3, [r3, #28]
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012c60:	f7fc ff42 	bl	800fae8 <pxDuplicateNetworkBufferWithDescriptor>
 8012c64:	6538      	str	r0, [r7, #80]	; 0x50
			if( pxNetworkBuffer == NULL )
			{
				FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
			}
			xDoRelease = pdTRUE;
 8012c66:	2301      	movs	r3, #1
 8012c68:	667b      	str	r3, [r7, #100]	; 0x64
		}
	}
	#endif /* ipconfigZERO_COPY_TX_DRIVER */

	#ifndef __COVERITY__
	if( pxNetworkBuffer != NULL )
 8012c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	f000 81c0 	beq.w	8012ff2 <prvTCPReturnPacket+0x3d6>
	#endif
	{
		/* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
		pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8012c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c74:	699b      	ldr	r3, [r3, #24]
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7ff fde2 	bl	8012840 <vCastPointerTo_TCPPacket_t>
 8012c7c:	64f8      	str	r0, [r7, #76]	; 0x4c
		pxIPHeader = &pxTCPPacket->xIPHeader;
 8012c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c80:	330e      	adds	r3, #14
 8012c82:	64bb      	str	r3, [r7, #72]	; 0x48
		pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 8012c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c86:	647b      	str	r3, [r7, #68]	; 0x44

		/* Fill the packet, using hton translations. */
		if( pxSocket != NULL )
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	f000 80ea 	beq.w	8012e64 <prvTCPReturnPacket+0x248>
		{
			/* Calculate the space in the RX buffer in order to advertise the
			size of this socket's reception window. */
			pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	33d8      	adds	r3, #216	; 0xd8
 8012c94:	63fb      	str	r3, [r7, #60]	; 0x3c

			if( pxSocket->u.xTCP.rxStream != NULL )
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d006      	beq.n	8012cac <prvTCPReturnPacket+0x90>
			{
				/* An RX stream was created already, see how much space is
				available. */
				ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7ff fd71 	bl	801278a <uxStreamBufferFrontSpace>
 8012ca8:	6638      	str	r0, [r7, #96]	; 0x60
 8012caa:	e002      	b.n	8012cb2 <prvTCPReturnPacket+0x96>
			}
			else
			{
				/* No RX stream has been created, the full stream size is
				available. */
				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cb0:	663b      	str	r3, [r7, #96]	; 0x60
			}

			/* Take the minimum of the RX buffer space and the RX window size. */
			ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8012cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7ff fd05 	bl	80126c8 <FreeRTOS_min_uint32>
 8012cbe:	65f8      	str	r0, [r7, #92]	; 0x5c

			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012cc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012cca:	b2db      	uxtb	r3, r3
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d107      	bne.n	8012ce0 <prvTCPReturnPacket+0xc4>
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012cd6:	f003 0304 	and.w	r3, r3, #4
 8012cda:	b2db      	uxtb	r3, r3
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d001      	beq.n	8012ce4 <prvTCPReturnPacket+0xc8>
			{
				/* The low-water mark was reached, meaning there was little
				space left.  The socket will wait until the application has read
				or flushed the incoming data, and 'zero-window' will be
				advertised. */
				ulSpace = 0U;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* If possible, advertise an RX window size of at least 1 MSS, otherwise
			the peer might start 'zero window probing', i.e. sending small packets
			(1, 2, 4, 8... bytes). */
			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012cea:	461a      	mov	r2, r3
 8012cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	d20a      	bcs.n	8012d08 <prvTCPReturnPacket+0xec>
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012cf8:	461a      	mov	r2, r3
 8012cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012cfc:	4293      	cmp	r3, r2
 8012cfe:	d303      	bcc.n	8012d08 <prvTCPReturnPacket+0xec>
			{
				ulSpace = pxSocket->u.xTCP.usCurMSS;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012d06:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* Avoid overflow of the 16-bit win field. */
			#if( ipconfigUSE_TCP_WIN != 0 )
			{
				ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8012d0e:	461a      	mov	r2, r3
 8012d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012d12:	40d3      	lsrs	r3, r2
 8012d14:	657b      	str	r3, [r7, #84]	; 0x54
			#else
			{
				ulWinSize = ulSpace;
			}
			#endif
			if( ulWinSize > 0xfffcUL )
 8012d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d18:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	d902      	bls.n	8012d26 <prvTCPReturnPacket+0x10a>
			{
				ulWinSize = 0xfffcUL;
 8012d20:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012d24:	657b      	str	r3, [r7, #84]	; 0x54
			}

			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8012d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	021b      	lsls	r3, r3, #8
 8012d2c:	b21a      	sxth	r2, r3
 8012d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	0a1b      	lsrs	r3, r3, #8
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	b21b      	sxth	r3, r3
 8012d38:	4313      	orrs	r3, r2
 8012d3a:	b21b      	sxth	r3, r3
 8012d3c:	b29a      	uxth	r2, r3
 8012d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d40:	861a      	strh	r2, [r3, #48]	; 0x30

			/* The new window size has been advertised, switch off the flag. */
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8012d42:	68fa      	ldr	r2, [r7, #12]
 8012d44:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8012d48:	f36f 0300 	bfc	r3, #0, #1
 8012d4c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Later on, when deciding to delay an ACK, a precise estimate is needed
			of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
			highest sequence number minus 1 that the socket will accept. */
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8012d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d52:	691a      	ldr	r2, [r3, #16]
 8012d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012d56:	441a      	add	r2, r3
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	645a      	str	r2, [r3, #68]	; 0x44

		#if( ipconfigTCP_KEEP_ALIVE == 1 )
			if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012d62:	f003 0302 	and.w	r3, r3, #2
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d02f      	beq.n	8012dcc <prvTCPReturnPacket+0x1b0>
			{
				/* Sending a keep-alive packet, send the current sequence number
				minus 1, which will	be recognised as a keep-alive packet an
				responded to by acknowledging the last byte. */
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8012d6c:	68fa      	ldr	r2, [r7, #12]
 8012d6e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8012d72:	f36f 0341 	bfc	r3, #1, #1
 8012d76:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
				pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8012d7a:	68fa      	ldr	r2, [r7, #12]
 8012d7c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8012d80:	f043 0304 	orr.w	r3, r3, #4
 8012d84:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

				pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8012d8e:	1e5a      	subs	r2, r3, #1
 8012d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d92:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8012d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d98:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 8012d9c:	061a      	lsls	r2, r3, #24
 8012d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012da0:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 8012da4:	021b      	lsls	r3, r3, #8
 8012da6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012daa:	431a      	orrs	r2, r3
 8012dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dae:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 8012db2:	0a1b      	lsrs	r3, r3, #8
 8012db4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012db8:	431a      	orrs	r2, r3
 8012dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dbc:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 8012dc0:	0e1b      	lsrs	r3, r3, #24
 8012dc2:	431a      	orrs	r2, r3
 8012dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dc6:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 8012dca:	e034      	b.n	8012e36 <prvTCPReturnPacket+0x21a>
			}
			else
		#endif
			{
				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8012dd2:	061a      	lsls	r2, r3, #24
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8012dda:	021b      	lsls	r3, r3, #8
 8012ddc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012de0:	431a      	orrs	r2, r3
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8012de8:	0a1b      	lsrs	r3, r3, #8
 8012dea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012dee:	431a      	orrs	r2, r3
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8012df6:	0e1b      	lsrs	r3, r3, #24
 8012df8:	431a      	orrs	r2, r3
 8012dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dfc:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 8012e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012e06:	f003 0301 	and.w	r3, r3, #1
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d013      	beq.n	8012e36 <prvTCPReturnPacket+0x21a>
				{
					/* Suppress FIN in case this packet carries earlier data to be
					retransmitted. */
					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	3b28      	subs	r3, #40	; 0x28
 8012e12:	63bb      	str	r3, [r7, #56]	; 0x38
					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8012e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e1a:	441a      	add	r2, r3
 8012e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e20:	429a      	cmp	r2, r3
 8012e22:	d008      	beq.n	8012e36 <prvTCPReturnPacket+0x21a>
					{
						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8012e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e26:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012e2a:	f023 0301 	bic.w	r3, r3, #1
 8012e2e:	b2da      	uxtb	r2, r3
 8012e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
					}
				}
			}

			/* Tell which sequence number is expected next time */
			pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8012e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e38:	691b      	ldr	r3, [r3, #16]
 8012e3a:	061a      	lsls	r2, r3, #24
 8012e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e3e:	691b      	ldr	r3, [r3, #16]
 8012e40:	021b      	lsls	r3, r3, #8
 8012e42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012e46:	431a      	orrs	r2, r3
 8012e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e4a:	691b      	ldr	r3, [r3, #16]
 8012e4c:	0a1b      	lsrs	r3, r3, #8
 8012e4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012e52:	431a      	orrs	r2, r3
 8012e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e56:	691b      	ldr	r3, [r3, #16]
 8012e58:	0e1b      	lsrs	r3, r3, #24
 8012e5a:	431a      	orrs	r2, r3
 8012e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e5e:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 8012e62:	e00d      	b.n	8012e80 <prvTCPReturnPacket+0x264>
		}
		else
		{
			/* Sending data without a socket, probably replying with a RST flag
			Just swap the two sequence numbers. */
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 8012e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e66:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 8012e6a:	643b      	str	r3, [r7, #64]	; 0x40
 8012e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e6e:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 8012e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e74:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 8012e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012e7c:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
		}

		pxIPHeader->ucTimeToLive		   = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8012e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e82:	2280      	movs	r2, #128	; 0x80
 8012e84:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usLength			   = FreeRTOS_htons( ulLen );
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	b29b      	uxth	r3, r3
 8012e8a:	021b      	lsls	r3, r3, #8
 8012e8c:	b29a      	uxth	r2, r3
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	0a1b      	lsrs	r3, r3, #8
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	4313      	orrs	r3, r2
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e9a:	805a      	strh	r2, [r3, #2]
		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d003      	beq.n	8012eaa <prvTCPReturnPacket+0x28e>
 8012ea2:	4b56      	ldr	r3, [pc, #344]	; (8012ffc <prvTCPReturnPacket+0x3e0>)
 8012ea4:	695b      	ldr	r3, [r3, #20]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d103      	bne.n	8012eb2 <prvTCPReturnPacket+0x296>
		{
			/* When pxSocket is NULL, this function is called by prvTCPSendReset()
			and the IP-addresses must be swapped.
			Also swap the IP-addresses in case the IP-tack doesn't have an
			IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ). */
			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 8012eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012eac:	691b      	ldr	r3, [r3, #16]
 8012eae:	65bb      	str	r3, [r7, #88]	; 0x58
 8012eb0:	e002      	b.n	8012eb8 <prvTCPReturnPacket+0x29c>
		}
		else
		{
			ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8012eb2:	4b52      	ldr	r3, [pc, #328]	; (8012ffc <prvTCPReturnPacket+0x3e0>)
 8012eb4:	695b      	ldr	r3, [r3, #20]
 8012eb6:	65bb      	str	r3, [r7, #88]	; 0x58
		}
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8012eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012eba:	68da      	ldr	r2, [r3, #12]
 8012ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ebe:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 8012ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ec4:	60da      	str	r2, [r3, #12]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8012ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ec8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8012ecc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012ed0:	021b      	lsls	r3, r3, #8
 8012ed2:	4313      	orrs	r3, r2
 8012ed4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8012ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ed8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012eda:	b29a      	uxth	r2, r3
 8012edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ede:	845a      	strh	r2, [r3, #34]	; 0x22
 8012ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ee2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012ee4:	849a      	strh	r2, [r3, #36]	; 0x24

		/* Just an increasing number. */
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8012ee6:	4b46      	ldr	r3, [pc, #280]	; (8013000 <prvTCPReturnPacket+0x3e4>)
 8012ee8:	881b      	ldrh	r3, [r3, #0]
 8012eea:	021b      	lsls	r3, r3, #8
 8012eec:	b21a      	sxth	r2, r3
 8012eee:	4b44      	ldr	r3, [pc, #272]	; (8013000 <prvTCPReturnPacket+0x3e4>)
 8012ef0:	881b      	ldrh	r3, [r3, #0]
 8012ef2:	0a1b      	lsrs	r3, r3, #8
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	b21b      	sxth	r3, r3
 8012ef8:	4313      	orrs	r3, r2
 8012efa:	b21b      	sxth	r3, r3
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f00:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 8012f02:	4b3f      	ldr	r3, [pc, #252]	; (8013000 <prvTCPReturnPacket+0x3e4>)
 8012f04:	881b      	ldrh	r3, [r3, #0]
 8012f06:	3301      	adds	r3, #1
 8012f08:	b29a      	uxth	r2, r3
 8012f0a:	4b3d      	ldr	r3, [pc, #244]	; (8013000 <prvTCPReturnPacket+0x3e4>)
 8012f0c:	801a      	strh	r2, [r3, #0]
		pxIPHeader->usFragmentOffset = 0U;
 8012f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f10:	2200      	movs	r2, #0
 8012f12:	719a      	strb	r2, [r3, #6]
 8012f14:	2200      	movs	r2, #0
 8012f16:	71da      	strb	r2, [r3, #7]

		/* Important: tell NIC driver how many bytes must be sent. */
		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f103 020e 	add.w	r2, r3, #14
 8012f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f20:	61da      	str	r2, [r3, #28]

		#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
		{
			/* calculate the IP header checksum, in case the driver won't do that. */
			pxIPHeader->usHeaderChecksum = 0x00U;
 8012f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f24:	2200      	movs	r2, #0
 8012f26:	729a      	strb	r2, [r3, #10]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	72da      	strb	r2, [r3, #11]
			pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0U, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 8012f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f2e:	2214      	movs	r2, #20
 8012f30:	4619      	mov	r1, r3
 8012f32:	2000      	movs	r0, #0
 8012f34:	f7fd fc64 	bl	8010800 <usGenerateChecksum>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	461a      	mov	r2, r3
 8012f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f3e:	815a      	strh	r2, [r3, #10]
			pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 8012f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f42:	895b      	ldrh	r3, [r3, #10]
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	021b      	lsls	r3, r3, #8
 8012f48:	b21a      	sxth	r2, r3
 8012f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f4c:	895b      	ldrh	r3, [r3, #10]
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	0a1b      	lsrs	r3, r3, #8
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	b21b      	sxth	r3, r3
 8012f56:	4313      	orrs	r3, r2
 8012f58:	b21b      	sxth	r3, r3
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	43db      	mvns	r3, r3
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f62:	815a      	strh	r2, [r3, #10]

			/* calculate the TCP checksum for an outgoing packet. */
			( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 8012f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f66:	69db      	ldr	r3, [r3, #28]
 8012f68:	2201      	movs	r2, #1
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012f6e:	f7fd fb29 	bl	80105c4 <usGenerateProtocolChecksum>

			/* A calculated checksum of 0 must be inverted as 0 means the checksum
			is disabled. */
			if( pxTCPPacket->xTCPHeader.usChecksum == 0U )
 8012f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d108      	bne.n	8012f8e <prvTCPReturnPacket+0x372>
			{
				pxTCPPacket->xTCPHeader.usChecksum = 0xffffU;
 8012f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f82:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8012f86:	f04f 32ff 	mov.w	r2, #4294967295
 8012f8a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			pxNetworkBuffer->pxNextBuffer = NULL;
		}
		#endif

		/* Fill in the destination MAC addresses. */
		( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 8012f8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
						 ( const void * ) ( &( pxEthernetHeader->xSourceAddress ) ),
 8012f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f92:	3306      	adds	r3, #6
		( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 8012f94:	2206      	movs	r2, #6
 8012f96:	4619      	mov	r1, r3
 8012f98:	f004 f971 	bl	801727e <memcpy>
						 sizeof( pxEthernetHeader->xDestinationAddress ) );

		/* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
		( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xSourceAddress ) ), ( const void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8012f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f9e:	3306      	adds	r3, #6
 8012fa0:	2206      	movs	r2, #6
 8012fa2:	4916      	ldr	r1, [pc, #88]	; (8012ffc <prvTCPReturnPacket+0x3e0>)
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f004 f96a 	bl	801727e <memcpy>
			}
		}
		#endif

		/* Send! */
		( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xDoRelease );
 8012faa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012fac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012fae:	f003 ff97 	bl	8016ee0 <xNetworkInterfaceOutput>

		if( xDoRelease == pdFALSE )
 8012fb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d11c      	bne.n	8012ff2 <prvTCPReturnPacket+0x3d6>
		{
			/* Swap-back some fields, as pxBuffer probably points to a socket field
			containing the packet header. */
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 8012fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fba:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8012fbe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012fc2:	021b      	lsls	r3, r3, #8
 8012fc4:	4313      	orrs	r3, r2
 8012fc6:	86bb      	strh	r3, [r7, #52]	; 0x34
 8012fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012fcc:	b29a      	uxth	r2, r3
 8012fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fd0:	845a      	strh	r2, [r3, #34]	; 0x22
 8012fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fd4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8012fd6:	849a      	strh	r2, [r3, #36]	; 0x24
			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 8012fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fda:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8012fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fe0:	f8c3 201a 	str.w	r2, [r3, #26]
			( void ) memcpy( ( void * ) ( pxEthernetHeader->xSourceAddress.ucBytes ), ( const void * ) ( pxEthernetHeader->xDestinationAddress.ucBytes ), ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8012fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fe6:	3306      	adds	r3, #6
 8012fe8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012fea:	2206      	movs	r2, #6
 8012fec:	4618      	mov	r0, r3
 8012fee:	f004 f946 	bl	801727e <memcpy>
		else
		{
			/* Nothing to do: the buffer has been passed to DMA and will be released after use */
		}
	} /* if( pxNetworkBuffer != NULL ) */
}
 8012ff2:	bf00      	nop
 8012ff4:	3768      	adds	r7, #104	; 0x68
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	2400001c 	.word	0x2400001c
 8013000:	2400528c 	.word	0x2400528c

08013004 <prvTCPCreateWindow>:
 * random starting value, are being synchronised.  The sliding window manager
 * (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 * Size (MSS) in use.
 */
static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket )
{
 8013004:	b5b0      	push	{r4, r5, r7, lr}
 8013006:	b084      	sub	sp, #16
 8013008:	af02      	add	r7, sp, #8
 801300a:	6078      	str	r0, [r7, #4]
			( unsigned ) pxSocket->u.xTCP.uxRxWinSize * ipconfigTCP_MSS,
			( unsigned ) pxSocket->u.xTCP.uxLittleSpace ,
			( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
			( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
	}
	vTCPWindowCreate(
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
		&pxSocket->u.xTCP.xTCPWindow,
		( ( size_t ) ipconfigTCP_MSS ) * pxSocket->u.xTCP.uxRxWinSize,
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8013018:	f44f 6291 	mov.w	r2, #1160	; 0x488
 801301c:	fb02 f103 	mul.w	r1, r2, r3
		( ( size_t ) ipconfigTCP_MSS ) * pxSocket->u.xTCP.uxTxWinSize,
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8013026:	f44f 6291 	mov.w	r2, #1160	; 0x488
 801302a:	fb02 f403 	mul.w	r4, r2, r3
	vTCPWindowCreate(
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f8d3 50e8 	ldr.w	r5, [r3, #232]	; 0xe8
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
		( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 801303a:	687a      	ldr	r2, [r7, #4]
 801303c:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
	vTCPWindowCreate(
 8013040:	9201      	str	r2, [sp, #4]
 8013042:	9300      	str	r3, [sp, #0]
 8013044:	462b      	mov	r3, r5
 8013046:	4622      	mov	r2, r4
 8013048:	f002 fa40 	bl	80154cc <vTCPWindowCreate>
}
 801304c:	bf00      	nop
 801304e:	3708      	adds	r7, #8
 8013050:	46bd      	mov	sp, r7
 8013052:	bdb0      	pop	{r4, r5, r7, pc}

08013054 <prvTCPPrepareConnect>:
 * the Ethernet address of the target will be found using ARP.  In case the
 * target IP address is not within the netmask, the hardware address of the
 * gateway will be used.
 */
static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t *pxSocket )
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b08c      	sub	sp, #48	; 0x30
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
TCPPacket_t *pxTCPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulRemoteIP;
MACAddress_t xEthAddress;
BaseType_t xReturn = pdTRUE;
 801305c:	2301      	movs	r3, #1
 801305e:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t ulInitialSequenceNumber = 0;
 8013060:	2300      	movs	r3, #0
 8013062:	62bb      	str	r3, [r7, #40]	; 0x28

	#if( ipconfigHAS_PRINTF != 0 )
	{
		/* Only necessary for nicer logging. */
		( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8013064:	f107 030c 	add.w	r3, r7, #12
 8013068:	2206      	movs	r2, #6
 801306a:	2100      	movs	r1, #0
 801306c:	4618      	mov	r0, r3
 801306e:	f004 f92a 	bl	80172c6 <memset>
	}
	#endif /* ipconfigHAS_PRINTF != 0 */

	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013076:	061a      	lsls	r2, r3, #24
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801307c:	021b      	lsls	r3, r3, #8
 801307e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013082:	431a      	orrs	r2, r3
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013088:	0a1b      	lsrs	r3, r3, #8
 801308a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801308e:	431a      	orrs	r2, r3
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013094:	0e1b      	lsrs	r3, r3, #24
 8013096:	4313      	orrs	r3, r2
 8013098:	617b      	str	r3, [r7, #20]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 801309a:	f107 020c 	add.w	r2, r7, #12
 801309e:	f107 0314 	add.w	r3, r7, #20
 80130a2:	4611      	mov	r1, r2
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7fb fc1b 	bl	800e8e0 <eARPGetCacheEntry>
 80130aa:	4603      	mov	r3, r0
 80130ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch( eReturned )
 80130b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	d00e      	beq.n	80130d6 <prvTCPPrepareConnect+0x82>
		break;				/* We can now prepare the SYN packet. */
	case eARPCacheMiss:		/* An ARP table lookup did not find a valid entry. */
	case eCantSendPacket:	/* There is no IP address, or an ARP is still in progress. */
	default:
		/* Count the number of times it couldn't find the ARP address. */
		pxSocket->u.xTCP.ucRepCount++;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80130be:	3301      	adds	r3, #1
 80130c0:	b2da      	uxtb	r2, r3
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			xEthAddress.ucBytes[ 3 ],
			xEthAddress.ucBytes[ 4 ],
			xEthAddress.ucBytes[ 5 ] ) );

		/* And issue a (new) ARP request */
		FreeRTOS_OutputARPRequest( ulRemoteIP );
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7fb fd4a 	bl	800eb64 <FreeRTOS_OutputARPRequest>
		xReturn = pdFALSE;
 80130d0:	2300      	movs	r3, #0
 80130d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 80130d4:	e000      	b.n	80130d8 <prvTCPPrepareConnect+0x84>
		break;				/* We can now prepare the SYN packet. */
 80130d6:	bf00      	nop
	}

	if( xReturn != pdFALSE )
 80130d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d00f      	beq.n	80130fe <prvTCPPrepareConnect+0xaa>
	{
		/* Get a difficult-to-predict initial sequence number for this 4-tuple. */
		ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 80130de:	4b53      	ldr	r3, [pc, #332]	; (801322c <prvTCPPrepareConnect+0x1d8>)
 80130e0:	6958      	ldr	r0, [r3, #20]
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80130ee:	f7ed ff5d 	bl	8000fac <ulApplicationGetNextSequenceNumber>
 80130f2:	62b8      	str	r0, [r7, #40]	; 0x28
																	  pxSocket->usLocalPort,
																	  pxSocket->u.xTCP.ulRemoteIP,
																	  pxSocket->u.xTCP.usRemotePort );

		/* Check for a random number generation error. */
		if( ulInitialSequenceNumber == 0UL )
 80130f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d101      	bne.n	80130fe <prvTCPPrepareConnect+0xaa>
		{
			xReturn = pdFALSE;
 80130fa:	2300      	movs	r3, #0
 80130fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}

	if( xReturn != pdFALSE )
 80130fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013100:	2b00      	cmp	r3, #0
 8013102:	f000 808d 	beq.w	8013220 <prvTCPPrepareConnect+0x1cc>
	uint16_t usLength;

		/* The MAC-address of the peer (or gateway) has been found,
		 * now prepare the initial TCP packet and some fields in the socket. Map
		 * the buffer onto the TCPPacket_t struct to easily access it's field. */
		pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	3382      	adds	r3, #130	; 0x82
 801310a:	4618      	mov	r0, r3
 801310c:	f7ff fb98 	bl	8012840 <vCastPointerTo_TCPPacket_t>
 8013110:	6238      	str	r0, [r7, #32]
		pxIPHeader = &pxTCPPacket->xIPHeader;
 8013112:	6a3b      	ldr	r3, [r7, #32]
 8013114:	330e      	adds	r3, #14
 8013116:	61fb      	str	r3, [r7, #28]

		/* reset the retry counter to zero. */
		pxSocket->u.xTCP.ucRepCount = 0U;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	2200      	movs	r2, #0
 801311c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		/* And remember that the connect/SYN data are prepared. */
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8013126:	f043 0308 	orr.w	r3, r3, #8
 801312a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

		/* Now that the Ethernet address is known, the initial packet can be
		prepared. */
		( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	3382      	adds	r3, #130	; 0x82
 8013132:	2246      	movs	r2, #70	; 0x46
 8013134:	2100      	movs	r1, #0
 8013136:	4618      	mov	r0, r3
 8013138:	f004 f8c5 	bl	80172c6 <memset>

		/* Write the Ethernet address in Source, because it will be swapped by
		prvTCPReturnPacket(). */
		( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 801313c:	6a3b      	ldr	r3, [r7, #32]
 801313e:	3306      	adds	r3, #6
 8013140:	461a      	mov	r2, r3
 8013142:	f107 030c 	add.w	r3, r7, #12
 8013146:	6818      	ldr	r0, [r3, #0]
 8013148:	6010      	str	r0, [r2, #0]
 801314a:	889b      	ldrh	r3, [r3, #4]
 801314c:	8093      	strh	r3, [r2, #4]

		/* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 801314e:	6a3b      	ldr	r3, [r7, #32]
 8013150:	2200      	movs	r2, #0
 8013152:	f042 0208 	orr.w	r2, r2, #8
 8013156:	731a      	strb	r2, [r3, #12]
 8013158:	2200      	movs	r2, #0
 801315a:	735a      	strb	r2, [r3, #13]

		pxIPHeader->ucVersionHeaderLength = 0x45U;
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	2245      	movs	r2, #69	; 0x45
 8013160:	701a      	strb	r2, [r3, #0]
		usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 8013162:	2338      	movs	r3, #56	; 0x38
 8013164:	837b      	strh	r3, [r7, #26]
		pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8013166:	8b7b      	ldrh	r3, [r7, #26]
 8013168:	021b      	lsls	r3, r3, #8
 801316a:	b21a      	sxth	r2, r3
 801316c:	8b7b      	ldrh	r3, [r7, #26]
 801316e:	0a1b      	lsrs	r3, r3, #8
 8013170:	b29b      	uxth	r3, r3
 8013172:	b21b      	sxth	r3, r3
 8013174:	4313      	orrs	r3, r2
 8013176:	b21b      	sxth	r3, r3
 8013178:	b29a      	uxth	r2, r3
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	805a      	strh	r2, [r3, #2]
		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 801317e:	69fb      	ldr	r3, [r7, #28]
 8013180:	2280      	movs	r2, #128	; 0x80
 8013182:	721a      	strb	r2, [r3, #8]

		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 8013184:	69fb      	ldr	r3, [r7, #28]
 8013186:	2206      	movs	r2, #6
 8013188:	725a      	strb	r2, [r3, #9]

		/* Addresses and ports will be stored swapped because prvTCPReturnPacket
		will swap them back while replying. */
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 801318a:	4b28      	ldr	r3, [pc, #160]	; (801322c <prvTCPPrepareConnect+0x1d8>)
 801318c:	695a      	ldr	r2, [r3, #20]
 801318e:	69fb      	ldr	r3, [r7, #28]
 8013190:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013196:	061a      	lsls	r2, r3, #24
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801319c:	021b      	lsls	r3, r3, #8
 801319e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80131a2:	431a      	orrs	r2, r3
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131a8:	0a1b      	lsrs	r3, r3, #8
 80131aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80131ae:	431a      	orrs	r2, r3
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131b4:	0e1b      	lsrs	r3, r3, #24
 80131b6:	431a      	orrs	r2, r3
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	60da      	str	r2, [r3, #12]

		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80131c0:	021b      	lsls	r3, r3, #8
 80131c2:	b21a      	sxth	r2, r3
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80131c8:	0a1b      	lsrs	r3, r3, #8
 80131ca:	b29b      	uxth	r3, r3
 80131cc:	b21b      	sxth	r3, r3
 80131ce:	4313      	orrs	r3, r2
 80131d0:	b21b      	sxth	r3, r3
 80131d2:	b29a      	uxth	r2, r3
 80131d4:	6a3b      	ldr	r3, [r7, #32]
 80131d6:	845a      	strh	r2, [r3, #34]	; 0x22
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80131dc:	021b      	lsls	r3, r3, #8
 80131de:	b21a      	sxth	r2, r3
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80131e4:	0a1b      	lsrs	r3, r3, #8
 80131e6:	b29b      	uxth	r3, r3
 80131e8:	b21b      	sxth	r3, r3
 80131ea:	4313      	orrs	r3, r2
 80131ec:	b21b      	sxth	r3, r3
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	6a3b      	ldr	r3, [r7, #32]
 80131f2:	849a      	strh	r2, [r3, #36]	; 0x24

		/* We are actively connecting, so the peer's Initial Sequence Number (ISN)
		isn't known yet. */
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0UL;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2200      	movs	r2, #0
 80131f8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

		/* Start with ISN (Initial Sequence Number). */
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013200:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

		/* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
		the high nibble of the TCP offset field. */
		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8013204:	6a3b      	ldr	r3, [r7, #32]
 8013206:	2250      	movs	r2, #80	; 0x50
 8013208:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		/* Only set the SYN flag. */
		pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 801320c:	6a3b      	ldr	r3, [r7, #32]
 801320e:	2202      	movs	r2, #2
 8013210:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		/* Set the values of usInitMSS / usCurMSS for this socket. */
		prvSocketSetMSS( pxSocket );
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f001 fb81 	bl	801491c <prvSocketSetMSS>

		/* The initial sequence numbers at our side are known.  Later
		vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
		first wait for a SYN+ACK reply. */
		prvTCPCreateWindow( pxSocket );
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	f7ff fef2 	bl	8013004 <prvTCPCreateWindow>
	}

	return xReturn;
 8013220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013222:	4618      	mov	r0, r3
 8013224:	3730      	adds	r7, #48	; 0x30
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
 801322a:	bf00      	nop
 801322c:	2400001c 	.word	0x2400001c

08013230 <prvCheckOptions>:
 * Parse the TCP option(s) received, if present.  It has already been verified
 * that: ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that the TP header
 * is longer than the usual 20 (5 x 4) bytes.
 */
_static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, const NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b08c      	sub	sp, #48	; 0x30
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6039      	str	r1, [r7, #0]
size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer );
 801323a:	2322      	movs	r3, #34	; 0x22
 801323c:	623b      	str	r3, [r7, #32]
const ProtocolHeaders_t *pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	699a      	ldr	r2, [r3, #24]
 8013242:	6a3b      	ldr	r3, [r7, #32]
 8013244:	4413      	add	r3, r2
 8013246:	4618      	mov	r0, r3
 8013248:	f7ff fb10 	bl	801286c <vCastPointerTo_ProtocolHeaders_t>
 801324c:	61f8      	str	r0, [r7, #28]
	&( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
const TCPHeader_t * pxTCPHeader;
const uint8_t *pucPtr;
BaseType_t xHasSYNFlag;
/* Offset in the network packet where the first option byte is stored. */
size_t uxOptionOffset = uxTCPHeaderOffset + ( sizeof( TCPHeader_t ) - sizeof( pxTCPHeader->ucOptdata ) );
 801324e:	6a3b      	ldr	r3, [r7, #32]
 8013250:	3314      	adds	r3, #20
 8013252:	61bb      	str	r3, [r7, #24]
size_t uxOptionsLength;
size_t uxResult;
uint8_t ucLength;

	pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8013254:	69fb      	ldr	r3, [r7, #28]
 8013256:	617b      	str	r3, [r7, #20]


	/* A character pointer to iterate through the option data */
	pucPtr = pxTCPHeader->ucOptdata;
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	3314      	adds	r3, #20
 801325c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 801325e:	697b      	ldr	r3, [r7, #20]
 8013260:	7b1b      	ldrb	r3, [r3, #12]
 8013262:	2b50      	cmp	r3, #80	; 0x50
 8013264:	d93f      	bls.n	80132e6 <prvCheckOptions+0xb6>
	{
		/* Avoid integer underflow in computation of ucLength. */
	}
	else
	{
		ucLength = ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	7b1b      	ldrb	r3, [r3, #12]
 801326a:	091b      	lsrs	r3, r3, #4
 801326c:	b2db      	uxtb	r3, r3
 801326e:	3b05      	subs	r3, #5
 8013270:	b2db      	uxtb	r3, r3
 8013272:	009b      	lsls	r3, r3, #2
 8013274:	74fb      	strb	r3, [r7, #19]
		uxOptionsLength = ( size_t ) ucLength;
 8013276:	7cfb      	ldrb	r3, [r7, #19]
 8013278:	627b      	str	r3, [r7, #36]	; 0x24
		if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	69db      	ldr	r3, [r3, #28]
 801327e:	69ba      	ldr	r2, [r7, #24]
 8013280:	429a      	cmp	r2, r3
 8013282:	d230      	bcs.n	80132e6 <prvCheckOptions+0xb6>
		{
			/* Validate options size calculation. */
			if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	69db      	ldr	r3, [r3, #28]
 8013288:	69ba      	ldr	r2, [r7, #24]
 801328a:	429a      	cmp	r2, r3
 801328c:	d22b      	bcs.n	80132e6 <prvCheckOptions+0xb6>
				( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) ) )
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	69da      	ldr	r2, [r3, #28]
 8013292:	69bb      	ldr	r3, [r7, #24]
 8013294:	1ad3      	subs	r3, r2, r3
			if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 8013296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013298:	429a      	cmp	r2, r3
 801329a:	d824      	bhi.n	80132e6 <prvCheckOptions+0xb6>
			{
				if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	7b5b      	ldrb	r3, [r3, #13]
 80132a0:	f003 0302 	and.w	r3, r3, #2
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d002      	beq.n	80132ae <prvCheckOptions+0x7e>
				{
					xHasSYNFlag = pdTRUE;
 80132a8:	2301      	movs	r3, #1
 80132aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80132ac:	e001      	b.n	80132b2 <prvCheckOptions+0x82>
				}
				else
				{
					xHasSYNFlag = pdFALSE;
 80132ae:	2300      	movs	r3, #0
 80132b0:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				/* The length check is only necessary in case the option data are
				corrupted, we don't like to run into invalid memory and crash. */
				for( ;; )
				{
					if( uxOptionsLength == 0U )
 80132b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d012      	beq.n	80132de <prvCheckOptions+0xae>
					{
						/* coverity[break_stmt] : Break statement terminating the loop */
						break;
					}
					uxResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 80132b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ba:	687a      	ldr	r2, [r7, #4]
 80132bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80132be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132c0:	f000 f815 	bl	80132ee <prvSingleStepTCPHeaderOptions>
 80132c4:	60f8      	str	r0, [r7, #12]
					if( uxResult == 0UL )
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d00a      	beq.n	80132e2 <prvCheckOptions+0xb2>
					{
						break;
					}
					uxOptionsLength -= uxResult;
 80132cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	1ad3      	subs	r3, r2, r3
 80132d2:	627b      	str	r3, [r7, #36]	; 0x24
					pucPtr = &( pucPtr[ uxResult ] );
 80132d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	4413      	add	r3, r2
 80132da:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( uxOptionsLength == 0U )
 80132dc:	e7e9      	b.n	80132b2 <prvCheckOptions+0x82>
						break;
 80132de:	bf00      	nop
 80132e0:	e000      	b.n	80132e4 <prvCheckOptions+0xb4>
						break;
 80132e2:	bf00      	nop
				}
			}
		}
	}

	return;
 80132e4:	bf00      	nop
 80132e6:	bf00      	nop
}
 80132e8:	3730      	adds	r7, #48	; 0x30
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}

080132ee <prvSingleStepTCPHeaderOptions>:

_static size_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
											 size_t uxTotalLength,
											 FreeRTOS_Socket_t * const pxSocket,
											 BaseType_t xHasSYNFlag )
{
 80132ee:	b580      	push	{r7, lr}
 80132f0:	b08a      	sub	sp, #40	; 0x28
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	60f8      	str	r0, [r7, #12]
 80132f6:	60b9      	str	r1, [r7, #8]
 80132f8:	607a      	str	r2, [r7, #4]
 80132fa:	603b      	str	r3, [r7, #0]
UBaseType_t uxNewMSS;
size_t uxRemainingOptionsBytes = uxTotalLength;
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	61bb      	str	r3, [r7, #24]
uint8_t ucLen;
size_t uxIndex;
TCPWindow_t *pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	33d8      	adds	r3, #216	; 0xd8
 8013304:	617b      	str	r3, [r7, #20]
BaseType_t xReturn = pdFALSE;
 8013306:	2300      	movs	r3, #0
 8013308:	61fb      	str	r3, [r7, #28]

	if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d102      	bne.n	8013318 <prvSingleStepTCPHeaderOptions+0x2a>
	{
		/* End of options. */
		uxIndex = 0U;
 8013312:	2300      	movs	r3, #0
 8013314:	623b      	str	r3, [r7, #32]
 8013316:	e0c4      	b.n	80134a2 <prvSingleStepTCPHeaderOptions+0x1b4>
	}
	else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	2b01      	cmp	r3, #1
 801331e:	d102      	bne.n	8013326 <prvSingleStepTCPHeaderOptions+0x38>
	{
		/* NOP option, inserted to make the length a multiple of 4. */
		uxIndex = 1U;
 8013320:	2301      	movs	r3, #1
 8013322:	623b      	str	r3, [r7, #32]
 8013324:	e0bd      	b.n	80134a2 <prvSingleStepTCPHeaderOptions+0x1b4>
	}
	else if( uxRemainingOptionsBytes < 2U )
 8013326:	69bb      	ldr	r3, [r7, #24]
 8013328:	2b01      	cmp	r3, #1
 801332a:	d802      	bhi.n	8013332 <prvSingleStepTCPHeaderOptions+0x44>
	{
		/* Any other well-formed option must be at least two bytes: the option
		type byte followed by a length byte. */
		uxIndex = 0U;
 801332c:	2300      	movs	r3, #0
 801332e:	623b      	str	r3, [r7, #32]
 8013330:	e0b7      	b.n	80134a2 <prvSingleStepTCPHeaderOptions+0x1b4>
	}
#if( ipconfigUSE_TCP_WIN != 0 )
	else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	2b03      	cmp	r3, #3
 8013338:	d11c      	bne.n	8013374 <prvSingleStepTCPHeaderOptions+0x86>
	{
		/* The TCP Window Scale Option. */
		/* Confirm that the option fits in the remaining buffer space. */
		if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 801333a:	69bb      	ldr	r3, [r7, #24]
 801333c:	2b02      	cmp	r3, #2
 801333e:	d904      	bls.n	801334a <prvSingleStepTCPHeaderOptions+0x5c>
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	3301      	adds	r3, #1
 8013344:	781b      	ldrb	r3, [r3, #0]
 8013346:	2b03      	cmp	r3, #3
 8013348:	d002      	beq.n	8013350 <prvSingleStepTCPHeaderOptions+0x62>
		{
			uxIndex = 0U;
 801334a:	2300      	movs	r3, #0
 801334c:	623b      	str	r3, [r7, #32]
 801334e:	e0a8      	b.n	80134a2 <prvSingleStepTCPHeaderOptions+0x1b4>
		}
		else
		{
			/* Option is only valid in SYN phase. */
			if( xHasSYNFlag != 0 )
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d00b      	beq.n	801336e <prvSingleStepTCPHeaderOptions+0x80>
			{
				pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	789a      	ldrb	r2, [r3, #2]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
				pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 8013360:	687a      	ldr	r2, [r7, #4]
 8013362:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8013366:	f043 0310 	orr.w	r3, r3, #16
 801336a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			}
			uxIndex = tcpTCP_OPT_WSOPT_LEN;
 801336e:	2303      	movs	r3, #3
 8013370:	623b      	str	r3, [r7, #32]
 8013372:	e096      	b.n	80134a2 <prvSingleStepTCPHeaderOptions+0x1b4>
		}
	}
#endif	/* ipconfigUSE_TCP_WIN */
	else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	2b02      	cmp	r3, #2
 801337a:	d15d      	bne.n	8013438 <prvSingleStepTCPHeaderOptions+0x14a>
	{
		/* Confirm that the option fits in the remaining buffer space. */
		if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 801337c:	69bb      	ldr	r3, [r7, #24]
 801337e:	2b03      	cmp	r3, #3
 8013380:	d904      	bls.n	801338c <prvSingleStepTCPHeaderOptions+0x9e>
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	3301      	adds	r3, #1
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	2b04      	cmp	r3, #4
 801338a:	d002      	beq.n	8013392 <prvSingleStepTCPHeaderOptions+0xa4>
		{
			uxIndex = 0U;
 801338c:	2300      	movs	r3, #0
 801338e:	623b      	str	r3, [r7, #32]
 8013390:	e087      	b.n	80134a2 <prvSingleStepTCPHeaderOptions+0x1b4>
		else
		{
			/* An MSS option with the correct option length.  FreeRTOS_htons()
			is not needed here because usChar2u16() already returns a host
			endian number. */
			uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	3302      	adds	r3, #2
 8013396:	4618      	mov	r0, r3
 8013398:	f7ff faa4 	bl	80128e4 <usChar2u16>
 801339c:	4603      	mov	r3, r0
 801339e:	613b      	str	r3, [r7, #16]

			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80133a6:	461a      	mov	r2, r3
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	4293      	cmp	r3, r2
 80133ac:	d006      	beq.n	80133bc <prvSingleStepTCPHeaderOptions+0xce>
			{
				/* Perform a basic check on the the new MSS. */
				if( uxNewMSS == 0U )
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d103      	bne.n	80133bc <prvSingleStepTCPHeaderOptions+0xce>
				{
					uxIndex = 0U;
 80133b4:	2300      	movs	r3, #0
 80133b6:	623b      	str	r3, [r7, #32]

					/* Return Condition found. */
					xReturn = pdTRUE;
 80133b8:	2301      	movs	r3, #1
 80133ba:	61fb      	str	r3, [r7, #28]
					FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
				}
			}

			/* If a 'return' condition has not been found. */
			if( xReturn == pdFALSE )
 80133bc:	69fb      	ldr	r3, [r7, #28]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d16f      	bne.n	80134a2 <prvSingleStepTCPHeaderOptions+0x1b4>
			{
				if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80133c8:	461a      	mov	r2, r3
 80133ca:	693b      	ldr	r3, [r7, #16]
 80133cc:	4293      	cmp	r3, r2
 80133ce:	d230      	bcs.n	8013432 <prvSingleStepTCPHeaderOptions+0x144>
				{
					/* our MSS was bigger than the MSS of the other party: adapt it. */
					pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 80133d6:	f043 0301 	orr.w	r3, r3, #1
 80133da:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
					if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80133e4:	461a      	mov	r2, r3
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	4293      	cmp	r3, r2
 80133ea:	d204      	bcs.n	80133f6 <prvSingleStepTCPHeaderOptions+0x108>
					{
						/* The peer advertises a smaller MSS than this socket was
						using.  Use that as well. */
						FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
						pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
					}
					pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	685a      	ldr	r2, [r3, #4]
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8013400:	693a      	ldr	r2, [r7, #16]
 8013402:	fb02 f203 	mul.w	r2, r2, r3
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	605a      	str	r2, [r3, #4]
					pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	b29a      	uxth	r2, r3
 801340e:	697b      	ldr	r3, [r7, #20]
 8013410:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
					pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	b29a      	uxth	r2, r3
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
					pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	b29a      	uxth	r2, r3
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 8013428:	693b      	ldr	r3, [r7, #16]
 801342a:	b29a      	uxth	r2, r3
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				}

				uxIndex = tcpTCP_OPT_MSS_LEN;
 8013432:	2304      	movs	r3, #4
 8013434:	623b      	str	r3, [r7, #32]
 8013436:	e034      	b.n	80134a2 <prvSingleStepTCPHeaderOptions+0x1b4>
	}
	else
	{
		/* All other options have a length field, so that we easily
		can skip past them. */
		ucLen = pucPtr[ 1 ];
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	785b      	ldrb	r3, [r3, #1]
 801343c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 8013440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013444:	2b01      	cmp	r3, #1
 8013446:	d904      	bls.n	8013452 <prvSingleStepTCPHeaderOptions+0x164>
 8013448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801344c:	69ba      	ldr	r2, [r7, #24]
 801344e:	429a      	cmp	r2, r3
 8013450:	d202      	bcs.n	8013458 <prvSingleStepTCPHeaderOptions+0x16a>
		{
			/* If the length field is too small or too big, the options are
			 * malformed, don't process them further.
			 */
			uxIndex = 0U;
 8013452:	2300      	movs	r3, #0
 8013454:	623b      	str	r3, [r7, #32]
 8013456:	e024      	b.n	80134a2 <prvSingleStepTCPHeaderOptions+0x1b4>
		}
		else
		{
			uxIndex = 0U;
 8013458:	2300      	movs	r3, #0
 801345a:	623b      	str	r3, [r7, #32]
			{
				/* Selective ACK: the peer has received a packet but it is missing
				 * earlier packets. At least this packet does not need retransmission
				 * anymore. ulTCPWindowTxSack( ) takes care of this administration.
				 */
				if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	2b05      	cmp	r3, #5
 8013462:	d119      	bne.n	8013498 <prvSingleStepTCPHeaderOptions+0x1aa>
				{
					ucLen -= 2U;
 8013464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013468:	3b02      	subs	r3, #2
 801346a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					uxIndex += 2U;
 801346e:	6a3b      	ldr	r3, [r7, #32]
 8013470:	3302      	adds	r3, #2
 8013472:	623b      	str	r3, [r7, #32]

					while( ucLen >= ( uint8_t ) 8U )
 8013474:	e00c      	b.n	8013490 <prvSingleStepTCPHeaderOptions+0x1a2>
					{
						prvReadSackOption( pucPtr, uxIndex, pxSocket );
 8013476:	687a      	ldr	r2, [r7, #4]
 8013478:	6a39      	ldr	r1, [r7, #32]
 801347a:	68f8      	ldr	r0, [r7, #12]
 801347c:	f000 f816 	bl	80134ac <prvReadSackOption>
						uxIndex += 8U;
 8013480:	6a3b      	ldr	r3, [r7, #32]
 8013482:	3308      	adds	r3, #8
 8013484:	623b      	str	r3, [r7, #32]
						ucLen -= 8U;
 8013486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801348a:	3b08      	subs	r3, #8
 801348c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while( ucLen >= ( uint8_t ) 8U )
 8013490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013494:	2b07      	cmp	r3, #7
 8013496:	d8ee      	bhi.n	8013476 <prvSingleStepTCPHeaderOptions+0x188>
					/* ucLen should be 0 by now. */
				}
			}
			#endif	/* ipconfigUSE_TCP_WIN == 1 */

			uxIndex += ( size_t ) ucLen;
 8013498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801349c:	6a3a      	ldr	r2, [r7, #32]
 801349e:	4413      	add	r3, r2
 80134a0:	623b      	str	r3, [r7, #32]
		}
	}
	return uxIndex;
 80134a2:	6a3b      	ldr	r3, [r7, #32]
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	3728      	adds	r7, #40	; 0x28
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}

080134ac <prvReadSackOption>:

#if( ipconfigUSE_TCP_WIN == 1 )
	_static void prvReadSackOption( const uint8_t * const pucPtr,
								   size_t uxIndex,
								   FreeRTOS_Socket_t * const pxSocket )
	{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b08a      	sub	sp, #40	; 0x28
 80134b0:	af02      	add	r7, sp, #8
 80134b2:	60f8      	str	r0, [r7, #12]
 80134b4:	60b9      	str	r1, [r7, #8]
 80134b6:	607a      	str	r2, [r7, #4]
	uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 80134b8:	68fa      	ldr	r2, [r7, #12]
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	4413      	add	r3, r2
 80134be:	4618      	mov	r0, r3
 80134c0:	f7ff f9f5 	bl	80128ae <ulChar2u32>
 80134c4:	61f8      	str	r0, [r7, #28]
	uint32_t ulLast  = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	3304      	adds	r3, #4
 80134ca:	68fa      	ldr	r2, [r7, #12]
 80134cc:	4413      	add	r3, r2
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7ff f9ed 	bl	80128ae <ulChar2u32>
 80134d4:	61b8      	str	r0, [r7, #24]
	uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	33d8      	adds	r3, #216	; 0xd8
 80134da:	69ba      	ldr	r2, [r7, #24]
 80134dc:	69f9      	ldr	r1, [r7, #28]
 80134de:	4618      	mov	r0, r3
 80134e0:	f002 fd56 	bl	8015f90 <ulTCPWindowTxSack>
 80134e4:	6178      	str	r0, [r7, #20]

		/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
		 * starting from the head position.  Advance the tail pointer in txStream.
		 */
		if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0U ) )
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d01d      	beq.n	801352a <prvReadSackOption+0x7e>
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d01a      	beq.n	801352a <prvReadSackOption+0x7e>
		{
			/* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
			( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80134f8:	2300      	movs	r3, #0
 80134fa:	9300      	str	r3, [sp, #0]
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	2200      	movs	r2, #0
 8013500:	2100      	movs	r1, #0
 8013502:	f7ff f85d 	bl	80125c0 <uxStreamBufferGet>
			pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	f043 0202 	orr.w	r2, r3, #2
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	601a      	str	r2, [r3, #0]

			#if ipconfigSUPPORT_SELECT_FUNCTION == 1
			{
				if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013516:	f003 0302 	and.w	r3, r3, #2
 801351a:	2b00      	cmp	r3, #0
 801351c:	d005      	beq.n	801352a <prvReadSackOption+0x7e>
				{
					/* The field 'xEventBits' is used to store regular socket events
					 * (at most 8), as well as 'select events', which will be left-shifted.
					 */
					pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	601a      	str	r2, [r3, #0]
					pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
				}
			}
			#endif /* ipconfigUSE_CALLBACKS == 1  */
		}
	}
 801352a:	bf00      	nop
 801352c:	3720      	adds	r7, #32
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}

08013532 <prvWinScaleFactor>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN != 0 )

	static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t *pxSocket )
	{
 8013532:	b480      	push	{r7}
 8013534:	b085      	sub	sp, #20
 8013536:	af00      	add	r7, sp, #0
 8013538:	6078      	str	r0, [r7, #4]
	size_t uxWinSize;
	uint8_t ucFactor;

		/* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8013546:	fb02 f303 	mul.w	r3, r2, r3
 801354a:	60fb      	str	r3, [r7, #12]
		ucFactor = 0U;
 801354c:	2300      	movs	r3, #0
 801354e:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xffffUL )
 8013550:	e005      	b.n	801355e <prvWinScaleFactor+0x2c>
		{
			/* Divide by two and increase the binary factor by 1. */
			uxWinSize >>= 1;
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	085b      	lsrs	r3, r3, #1
 8013556:	60fb      	str	r3, [r7, #12]
			ucFactor++;
 8013558:	7afb      	ldrb	r3, [r7, #11]
 801355a:	3301      	adds	r3, #1
 801355c:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xffffUL )
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013564:	d2f5      	bcs.n	8013552 <prvWinScaleFactor+0x20>
		FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
			( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
			( unsigned ) pxSocket->u.xTCP.usInitMSS,
			ucFactor ) );

		return ucFactor;
 8013566:	7afb      	ldrb	r3, [r7, #11]
	}
 8013568:	4618      	mov	r0, r3
 801356a:	3714      	adds	r7, #20
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr

08013574 <prvSetSynAckOptions>:
 * When opening a TCP connection, while SYN's are being sent, the  parties may
 * communicate what MSS (Maximum Segment Size) they intend to use.   MSS is the
 * nett size of the payload, always smaller than MTU.
*/
static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t *pxSocket, TCPHeader_t * pxTCPHeader )
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	6039      	str	r1, [r7, #0]
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8013584:	81fb      	strh	r3, [r7, #14]
UBaseType_t uxOptionsLength;

	/* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	2202      	movs	r2, #2
 801358a:	751a      	strb	r2, [r3, #20]
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	2204      	movs	r2, #4
 8013590:	755a      	strb	r2, [r3, #21]
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8013592:	89fb      	ldrh	r3, [r7, #14]
 8013594:	0a1b      	lsrs	r3, r3, #8
 8013596:	b29b      	uxth	r3, r3
 8013598:	b2da      	uxtb	r2, r3
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	759a      	strb	r2, [r3, #22]
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 801359e:	89fb      	ldrh	r3, [r7, #14]
 80135a0:	b2da      	uxtb	r2, r3
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	75da      	strb	r2, [r3, #23]

	#if( ipconfigUSE_TCP_WIN != 0 )
	{
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 80135a6:	6878      	ldr	r0, [r7, #4]
 80135a8:	f7ff ffc3 	bl	8013532 <prvWinScaleFactor>
 80135ac:	4603      	mov	r3, r0
 80135ae:	461a      	mov	r2, r3
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	2201      	movs	r2, #1
 80135ba:	761a      	strb	r2, [r3, #24]
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	2203      	movs	r2, #3
 80135c0:	765a      	strb	r2, [r3, #25]
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	2203      	movs	r2, #3
 80135c6:	769a      	strb	r2, [r3, #26]
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	76da      	strb	r2, [r3, #27]
		uxOptionsLength = 8U;
 80135d2:	2308      	movs	r3, #8
 80135d4:	60bb      	str	r3, [r7, #8]
	}
	#endif

	#if( ipconfigUSE_TCP_WIN != 0 )
	{
		pxTCPHeader->ucOptdata[ uxOptionsLength      ] = tcpTCP_OPT_NOOP;
 80135d6:	683a      	ldr	r2, [r7, #0]
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	4413      	add	r3, r2
 80135dc:	3314      	adds	r3, #20
 80135de:	2201      	movs	r2, #1
 80135e0:	701a      	strb	r2, [r3, #0]
		pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	3301      	adds	r3, #1
 80135e6:	683a      	ldr	r2, [r7, #0]
 80135e8:	4413      	add	r3, r2
 80135ea:	2201      	movs	r2, #1
 80135ec:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	3302      	adds	r3, #2
 80135f2:	683a      	ldr	r2, [r7, #0]
 80135f4:	4413      	add	r3, r2
 80135f6:	2204      	movs	r2, #4
 80135f8:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;	/* 2: length of this option. */
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	3303      	adds	r3, #3
 80135fe:	683a      	ldr	r2, [r7, #0]
 8013600:	4413      	add	r3, r2
 8013602:	2202      	movs	r2, #2
 8013604:	751a      	strb	r2, [r3, #20]
		uxOptionsLength += 4U;
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	3304      	adds	r3, #4
 801360a:	60bb      	str	r3, [r7, #8]

	}
	#endif	/* ipconfigUSE_TCP_WIN == 0 */
	return uxOptionsLength; /* bytes, not words. */
 801360c:	68bb      	ldr	r3, [r7, #8]
}
 801360e:	4618      	mov	r0, r3
 8013610:	3710      	adds	r7, #16
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}

08013616 <prvTCPTouchSocket>:
 * For anti-hanging protection and TCP keep-alive messages.  Called in two
 * places: after receiving a packet and after a state change.  The socket's
 * alive timer may be reset.
 */
static void prvTCPTouchSocket( FreeRTOS_Socket_t *pxSocket )
{
 8013616:	b580      	push	{r7, lr}
 8013618:	b082      	sub	sp, #8
 801361a:	af00      	add	r7, sp, #0
 801361c:	6078      	str	r0, [r7, #4]
	#if( ipconfigTCP_HANG_PROTECTION == 1 )
	{
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 801361e:	f7f9 fe99 	bl	800d354 <xTaskGetTickCount>
 8013622:	4602      	mov	r2, r0
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif

	#if( ipconfigTCP_KEEP_ALIVE == 1 )
	{
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 801362e:	f36f 0382 	bfc	r3, #2, #1
 8013632:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8013636:	687a      	ldr	r2, [r7, #4]
 8013638:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 801363c:	f36f 0341 	bfc	r3, #1, #1
 8013640:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0U;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2200      	movs	r2, #0
 8013648:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 801364c:	f7f9 fe82 	bl	800d354 <xTaskGetTickCount>
 8013650:	4602      	mov	r2, r0
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	( void ) pxSocket;
}
 8013656:	bf00      	nop
 8013658:	3708      	adds	r7, #8
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}

0801365e <vTCPStateChange>:
 * resetting the alive timer, calling the user's OnConnect handler to notify
 * that a socket has got (dis)connected, and setting bit to unblock a call to
 * FreeRTOS_select()
 */
void vTCPStateChange( FreeRTOS_Socket_t *pxSocket, enum eTCP_STATE eTCPState )
{
 801365e:	b580      	push	{r7, lr}
 8013660:	b086      	sub	sp, #24
 8013662:	af00      	add	r7, sp, #0
 8013664:	6078      	str	r0, [r7, #4]
 8013666:	460b      	mov	r3, r1
 8013668:	70fb      	strb	r3, [r7, #3]
FreeRTOS_Socket_t *xParent = NULL;
 801366a:	2300      	movs	r3, #0
 801366c:	617b      	str	r3, [r7, #20]
BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) );	/* Was it connected ? */
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8013674:	2b04      	cmp	r3, #4
 8013676:	d906      	bls.n	8013686 <vTCPStateChange+0x28>
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801367e:	2b08      	cmp	r3, #8
 8013680:	d001      	beq.n	8013686 <vTCPStateChange+0x28>
 8013682:	2301      	movs	r3, #1
 8013684:	e000      	b.n	8013688 <vTCPStateChange+0x2a>
 8013686:	2300      	movs	r3, #0
 8013688:	613b      	str	r3, [r7, #16]
BaseType_t bAfter  = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );					/* Is it connected now ? */
 801368a:	78fb      	ldrb	r3, [r7, #3]
 801368c:	2b04      	cmp	r3, #4
 801368e:	d904      	bls.n	801369a <vTCPStateChange+0x3c>
 8013690:	78fb      	ldrb	r3, [r7, #3]
 8013692:	2b08      	cmp	r3, #8
 8013694:	d001      	beq.n	801369a <vTCPStateChange+0x3c>
 8013696:	2301      	movs	r3, #1
 8013698:	e000      	b.n	801369c <vTCPStateChange+0x3e>
 801369a:	2300      	movs	r3, #0
 801369c:	60fb      	str	r3, [r7, #12]
#if( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *xConnected = NULL;
#endif

	/* Has the connected status changed? */
	if( bBefore != bAfter )
 801369e:	693a      	ldr	r2, [r7, #16]
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	429a      	cmp	r2, r3
 80136a4:	f000 8089 	beq.w	80137ba <vTCPStateChange+0x15c>
	{
		/* Is the socket connected now ? */
		if( bAfter != pdFALSE )
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d065      	beq.n	801377a <vTCPStateChange+0x11c>
		{
			/* if bPassQueued is true, this socket is an orphan until it gets connected. */
			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80136b4:	f003 0304 	and.w	r3, r3, #4
 80136b8:	b2db      	uxtb	r3, r3
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d04a      	beq.n	8013754 <vTCPStateChange+0xf6>
			{
				/* Now that it is connected, find it's parent. */
				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80136c4:	f003 0308 	and.w	r3, r3, #8
 80136c8:	b2db      	uxtb	r3, r3
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d002      	beq.n	80136d4 <vTCPStateChange+0x76>
				{
					xParent = pxSocket;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	617b      	str	r3, [r7, #20]
 80136d2:	e011      	b.n	80136f8 <vTCPStateChange+0x9a>
				}
				else
				{
					xParent = pxSocket->u.xTCP.pxPeerSocket;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136d8:	617b      	str	r3, [r7, #20]
					configASSERT( xParent != NULL );
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d10b      	bne.n	80136f8 <vTCPStateChange+0x9a>
 80136e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136e4:	b672      	cpsid	i
 80136e6:	f383 8811 	msr	BASEPRI, r3
 80136ea:	f3bf 8f6f 	isb	sy
 80136ee:	f3bf 8f4f 	dsb	sy
 80136f2:	b662      	cpsie	i
 80136f4:	60bb      	str	r3, [r7, #8]
 80136f6:	e7fe      	b.n	80136f6 <vTCPStateChange+0x98>
				}
				if( xParent != NULL )
 80136f8:	697b      	ldr	r3, [r7, #20]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d018      	beq.n	8013730 <vTCPStateChange+0xd2>
				{
					if( xParent->u.xTCP.pxPeerSocket == NULL )
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013702:	2b00      	cmp	r3, #0
 8013704:	d102      	bne.n	801370c <vTCPStateChange+0xae>
					{
						xParent->u.xTCP.pxPeerSocket = pxSocket;
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	687a      	ldr	r2, [r7, #4]
 801370a:	655a      	str	r2, [r3, #84]	; 0x54
					}

					xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	f043 0204 	orr.w	r2, r3, #4
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	601a      	str	r2, [r3, #0]

					#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
					{
						/* Library support FreeRTOS_select().  Receiving a new
						connection is being translated as a READ event. */
						if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801371c:	f003 0301 	and.w	r3, r3, #1
 8013720:	2b00      	cmp	r3, #0
 8013722:	d005      	beq.n	8013730 <vTCPStateChange+0xd2>
						{
							xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	601a      	str	r2, [r3, #0]
					#endif
				}

				/* Don't need to access the parent socket anymore, so the
				reference 'pxPeerSocket' may be cleared. */
				pxSocket->u.xTCP.pxPeerSocket = NULL;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2200      	movs	r2, #0
 8013734:	655a      	str	r2, [r3, #84]	; 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8013736:	687a      	ldr	r2, [r7, #4]
 8013738:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801373c:	f36f 0382 	bfc	r3, #2, #1
 8013740:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

				/* When true, this socket may be returned in a call to accept(). */
				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8013744:	687a      	ldr	r2, [r7, #4]
 8013746:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801374a:	f043 0302 	orr.w	r3, r3, #2
 801374e:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 8013752:	e024      	b.n	801379e <vTCPStateChange+0x140>
			}
			else
			{
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	f043 0208 	orr.w	r2, r3, #8
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	601a      	str	r2, [r3, #0]

				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013764:	f003 0302 	and.w	r3, r3, #2
 8013768:	2b00      	cmp	r3, #0
 801376a:	d018      	beq.n	801379e <vTCPStateChange+0x140>
					{
						pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	601a      	str	r2, [r3, #0]
 8013778:	e011      	b.n	801379e <vTCPStateChange+0x140>
			}
		}
		else  /* bAfter == pdFALSE, connection is closed. */
		{
			/* Notify/wake-up the socket-owner by setting a semaphore. */
			pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	f043 0220 	orr.w	r2, r3, #32
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	601a      	str	r2, [r3, #0]

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801378a:	f003 0304 	and.w	r3, r3, #4
 801378e:	2b00      	cmp	r3, #0
 8013790:	d005      	beq.n	801379e <vTCPStateChange+0x140>
				{
					pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	601a      	str	r2, [r3, #0]
				xConnected = pxSocket;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80137a4:	4618      	mov	r0, r3
 80137a6:	f7ff f8b3 	bl	8012910 <prvTCPSocketIsActive>
 80137aa:	4603      	mov	r3, r0
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d122      	bne.n	80137f6 <vTCPStateChange+0x198>
		{
			/* Now the socket isn't in an active state anymore so it
			won't need further attention of the IP-task.
			Setting time-out to zero means that the socket won't get checked during
			timer events. */
			pxSocket->u.xTCP.usTimeout = 0U;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2200      	movs	r2, #0
 80137b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80137b8:	e01d      	b.n	80137f6 <vTCPStateChange+0x198>
		}
	}
	else
	{
		if( ( ( BaseType_t ) eTCPState ) ==  ( ( BaseType_t ) eCLOSED ) )
 80137ba:	78fb      	ldrb	r3, [r7, #3]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d11a      	bne.n	80137f6 <vTCPStateChange+0x198>
		{
			/* Socket goes to status eCLOSED because of a RST.
			When nobody owns the socket yet, delete it. */
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80137c6:	f003 0304 	and.w	r3, r3, #4
 80137ca:	b2db      	uxtb	r3, r3
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d107      	bne.n	80137e0 <vTCPStateChange+0x182>
				( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80137d6:	f003 0302 	and.w	r3, r3, #2
 80137da:	b2db      	uxtb	r3, r3
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d00a      	beq.n	80137f6 <vTCPStateChange+0x198>
			{
				FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80137e6:	f003 0308 	and.w	r3, r3, #8
 80137ea:	b2db      	uxtb	r3, r3
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d102      	bne.n	80137f6 <vTCPStateChange+0x198>
				{
					( void ) FreeRTOS_closesocket( pxSocket );
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f7fd fdf5 	bl	80113e0 <FreeRTOS_closesocket>
			}
		}
	}

	/* Fill in the new state. */
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	78fa      	ldrb	r2, [r7, #3]
 80137fa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* Touch the alive timers because moving to another state. */
	prvTCPTouchSocket( pxSocket );
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f7ff ff09 	bl	8013616 <prvTCPTouchSocket>
			/* The 'connected' state has changed, call the OnConnect handler of the parent. */
			xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
		}
	}
	#endif
	if( xParent != NULL )
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d002      	beq.n	8013810 <vTCPStateChange+0x1b2>
	{
		vSocketWakeUpUser( xParent );
 801380a:	6978      	ldr	r0, [r7, #20]
 801380c:	f7fe f9d3 	bl	8011bb6 <vSocketWakeUpUser>
	}
}
 8013810:	bf00      	nop
 8013812:	3718      	adds	r7, #24
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}

08013818 <prvTCPBufferResize>:
/*-----------------------------------------------------------*/

static NetworkBufferDescriptor_t *prvTCPBufferResize( const FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer,
	int32_t lDataLen, UBaseType_t uxOptionsLength )
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b088      	sub	sp, #32
 801381c:	af00      	add	r7, sp, #0
 801381e:	60f8      	str	r0, [r7, #12]
 8013820:	60b9      	str	r1, [r7, #8]
 8013822:	607a      	str	r2, [r7, #4]
 8013824:	603b      	str	r3, [r7, #0]
NetworkBufferDescriptor_t *pxReturn;
size_t uxNeeded;
BaseType_t xResize;

	if( xBufferAllocFixedSize != pdFALSE )
 8013826:	4b35      	ldr	r3, [pc, #212]	; (80138fc <prvTCPBufferResize+0xe4>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d00b      	beq.n	8013846 <prvTCPBufferResize+0x2e>
	{
		/* Network buffers are created with a fixed size and can hold the largest
		MTU. */
		uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 801382e:	f240 43c6 	movw	r3, #1222	; 0x4c6
 8013832:	61bb      	str	r3, [r7, #24]
		/* and therefore, the buffer won't be too small.
		Only ask for a new network buffer in case none was supplied. */
		if( pxNetworkBuffer == NULL )
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d102      	bne.n	8013840 <prvTCPBufferResize+0x28>
		{
			xResize = pdTRUE;
 801383a:	2301      	movs	r3, #1
 801383c:	617b      	str	r3, [r7, #20]
 801383e:	e019      	b.n	8013874 <prvTCPBufferResize+0x5c>
		}
		else
		{
			xResize = pdFALSE;
 8013840:	2300      	movs	r3, #0
 8013842:	617b      	str	r3, [r7, #20]
 8013844:	e016      	b.n	8013874 <prvTCPBufferResize+0x5c>
	}
	else
	{
		/* Network buffers are created with a variable size. See if it must
		grow. */
		uxNeeded = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen;
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	4413      	add	r3, r2
 801384c:	3336      	adds	r3, #54	; 0x36
 801384e:	61bb      	str	r3, [r7, #24]

		if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 8013850:	69bb      	ldr	r3, [r7, #24]
 8013852:	2b45      	cmp	r3, #69	; 0x45
 8013854:	d801      	bhi.n	801385a <prvTCPBufferResize+0x42>
		{
			uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013856:	2346      	movs	r3, #70	; 0x46
 8013858:	61bb      	str	r3, [r7, #24]
		}

		/* In case we were called from a TCP timer event, a buffer must be
		created.  Otherwise, test 'xDataLength' of the provided buffer. */
		if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d004      	beq.n	801386a <prvTCPBufferResize+0x52>
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	69db      	ldr	r3, [r3, #28]
 8013864:	69ba      	ldr	r2, [r7, #24]
 8013866:	429a      	cmp	r2, r3
 8013868:	d902      	bls.n	8013870 <prvTCPBufferResize+0x58>
		{
			xResize = pdTRUE;
 801386a:	2301      	movs	r3, #1
 801386c:	617b      	str	r3, [r7, #20]
 801386e:	e001      	b.n	8013874 <prvTCPBufferResize+0x5c>
		}
		else
		{
			xResize = pdFALSE;
 8013870:	2300      	movs	r3, #0
 8013872:	617b      	str	r3, [r7, #20]
		}
	}

	if( xResize != pdFALSE )
 8013874:	697b      	ldr	r3, [r7, #20]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d023      	beq.n	80138c2 <prvTCPBufferResize+0xaa>
	{
		/* The caller didn't provide a network buffer or the provided buffer is
		too small.  As we must send-out a data packet, a buffer will be created
		here. */
		pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 801387a:	2100      	movs	r1, #0
 801387c:	69b8      	ldr	r0, [r7, #24]
 801387e:	f002 fda1 	bl	80163c4 <pxGetNetworkBufferWithDescriptor>
 8013882:	61f8      	str	r0, [r7, #28]

		if( pxReturn != NULL )
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d033      	beq.n	80138f2 <prvTCPBufferResize+0xda>
		{
			/* Set the actual packet size, in case the returned buffer is larger. */
			pxReturn->xDataLength = uxNeeded;
 801388a:	69fb      	ldr	r3, [r7, #28]
 801388c:	69ba      	ldr	r2, [r7, #24]
 801388e:	61da      	str	r2, [r3, #28]

			/* Copy the existing data to the new created buffer. */
			if( pxNetworkBuffer != NULL )
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d00c      	beq.n	80138b0 <prvTCPBufferResize+0x98>
			{
				/* Either from the previous buffer... */
				( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8013896:	69fb      	ldr	r3, [r7, #28]
 8013898:	6998      	ldr	r0, [r3, #24]
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	6999      	ldr	r1, [r3, #24]
 801389e:	68bb      	ldr	r3, [r7, #8]
 80138a0:	69db      	ldr	r3, [r3, #28]
 80138a2:	461a      	mov	r2, r3
 80138a4:	f003 fceb 	bl	801727e <memcpy>

				/* ...and release it. */
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80138a8:	68b8      	ldr	r0, [r7, #8]
 80138aa:	f002 fe09 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
 80138ae:	e020      	b.n	80138f2 <prvTCPBufferResize+0xda>
			}
			else
			{
				/* Or from the socket field 'xTCP.xPacket'. */
				( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	6998      	ldr	r0, [r3, #24]
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	3382      	adds	r3, #130	; 0x82
 80138b8:	2246      	movs	r2, #70	; 0x46
 80138ba:	4619      	mov	r1, r3
 80138bc:	f003 fcdf 	bl	801727e <memcpy>
 80138c0:	e017      	b.n	80138f2 <prvTCPBufferResize+0xda>
		}
	}
	else
	{
		/* xResize is false, the network buffer provided was big enough. */
		configASSERT( pxNetworkBuffer != NULL );	/* to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d10b      	bne.n	80138e0 <prvTCPBufferResize+0xc8>
 80138c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138cc:	b672      	cpsid	i
 80138ce:	f383 8811 	msr	BASEPRI, r3
 80138d2:	f3bf 8f6f 	isb	sy
 80138d6:	f3bf 8f4f 	dsb	sy
 80138da:	b662      	cpsie	i
 80138dc:	613b      	str	r3, [r7, #16]
 80138de:	e7fe      	b.n	80138de <prvTCPBufferResize+0xc6>
		pxReturn = pxNetworkBuffer;
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	61fb      	str	r3, [r7, #28]

		/* Thanks to Andrey Ivanov from swissEmbedded for reporting that the
		xDataLength member must get the correct length too! */
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 80138e4:	687a      	ldr	r2, [r7, #4]
 80138e6:	683b      	ldr	r3, [r7, #0]
 80138e8:	4413      	add	r3, r2
 80138ea:	f103 0236 	add.w	r2, r3, #54	; 0x36
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	61da      	str	r2, [r3, #28]
	}

	return pxReturn;
 80138f2:	69fb      	ldr	r3, [r7, #28]
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	3720      	adds	r7, #32
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}
 80138fc:	080187c8 	.word	0x080187c8

08013900 <prvTCPPrepareSend>:

/*
 * Prepare an outgoing message, in case anything has to be sent.
 */
static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer, UBaseType_t uxOptionsLength )
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b094      	sub	sp, #80	; 0x50
 8013904:	af02      	add	r7, sp, #8
 8013906:	60f8      	str	r0, [r7, #12]
 8013908:	60b9      	str	r1, [r7, #8]
 801390a:	607a      	str	r2, [r7, #4]
size_t uxOffset;
uint32_t ulDataGot, ulDistance;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t *pxNewBuffer;
int32_t lStreamPos;
UBaseType_t uxIntermediateResult = 0;
 801390c:	2300      	movs	r3, #0
 801390e:	637b      	str	r3, [r7, #52]	; 0x34

	if( ( *ppxNetworkBuffer ) != NULL )
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d004      	beq.n	8013922 <prvTCPPrepareSend+0x22>
	{
		/* A network buffer descriptor was already supplied */
		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	699b      	ldr	r3, [r3, #24]
 801391e:	643b      	str	r3, [r7, #64]	; 0x40
 8013920:	e002      	b.n	8013928 <prvTCPPrepareSend+0x28>
	}
	else
	{
		/* For now let it point to the last packet header */
		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	3382      	adds	r3, #130	; 0x82
 8013926:	643b      	str	r3, [r7, #64]	; 0x40
	}

	/* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
	pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801392a:	3322      	adds	r3, #34	; 0x22
 801392c:	4618      	mov	r0, r3
 801392e:	f7fe ff9d 	bl	801286c <vCastPointerTo_ProtocolHeaders_t>
 8013932:	63f8      	str	r0, [r7, #60]	; 0x3c
	pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	33d8      	adds	r3, #216	; 0xd8
 8013938:	633b      	str	r3, [r7, #48]	; 0x30
	lDataLen = 0;
 801393a:	2300      	movs	r3, #0
 801393c:	647b      	str	r3, [r7, #68]	; 0x44
	lStreamPos = 0;
 801393e:	2300      	movs	r3, #0
 8013940:	617b      	str	r3, [r7, #20]
	pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 8013942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013944:	7b5b      	ldrb	r3, [r3, #13]
 8013946:	f043 0310 	orr.w	r3, r3, #16
 801394a:	b2da      	uxtb	r2, r3
 801394c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801394e:	735a      	strb	r2, [r3, #13]

	if( pxSocket->u.xTCP.txStream != NULL )
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013954:	2b00      	cmp	r3, #0
 8013956:	d07a      	beq.n	8013a4e <prvTCPPrepareSend+0x14e>
	{
		/* ulTCPWindowTxGet will return the amount of data which may be sent
		along with the position in the txStream.
		Why check for MSS > 1 ?
		Because some TCP-stacks (like uIP) use it for flow-control. */
		if( pxSocket->u.xTCP.usCurMSS > 1U )
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801395e:	2b01      	cmp	r3, #1
 8013960:	d90a      	bls.n	8013978 <prvTCPPrepareSend+0x78>
		{
			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013968:	f107 0214 	add.w	r2, r7, #20
 801396c:	4619      	mov	r1, r3
 801396e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013970:	f002 f8fa 	bl	8015b68 <ulTCPWindowTxGet>
 8013974:	4603      	mov	r3, r0
 8013976:	647b      	str	r3, [r7, #68]	; 0x44
		}

		if( lDataLen > 0 )
 8013978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801397a:	2b00      	cmp	r3, #0
 801397c:	dd67      	ble.n	8013a4e <prvTCPPrepareSend+0x14e>
		{
			/* Check if the current network buffer is big enough, if not,
			resize it. */
			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	6819      	ldr	r1, [r3, #0]
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013986:	68f8      	ldr	r0, [r7, #12]
 8013988:	f7ff ff46 	bl	8013818 <prvTCPBufferResize>
 801398c:	62f8      	str	r0, [r7, #44]	; 0x2c

			if( pxNewBuffer != NULL )
 801398e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013990:	2b00      	cmp	r3, #0
 8013992:	d059      	beq.n	8013a48 <prvTCPPrepareSend+0x148>
			{
				*ppxNetworkBuffer = pxNewBuffer;
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013998:	601a      	str	r2, [r3, #0]
				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 801399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801399c:	699b      	ldr	r3, [r3, #24]
 801399e:	643b      	str	r3, [r7, #64]	; 0x40

				/* Map the byte stream onto ProtocolHeaders_t struct for easy
				 * access to the fields. */
				pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80139a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139a2:	3322      	adds	r3, #34	; 0x22
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7fe ff61 	bl	801286c <vCastPointerTo_ProtocolHeaders_t>
 80139aa:	63f8      	str	r0, [r7, #60]	; 0x3c

				pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	3336      	adds	r3, #54	; 0x36
 80139b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80139b2:	4413      	add	r3, r2
 80139b4:	62bb      	str	r3, [r7, #40]	; 0x28

				/* Translate the position in txStream to an offset from the tail
				marker. */
				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	697a      	ldr	r2, [r7, #20]
 80139c2:	4619      	mov	r1, r3
 80139c4:	f7fe feaf 	bl	8012726 <uxStreamBufferDistance>
 80139c8:	6278      	str	r0, [r7, #36]	; 0x24

				/* Here data is copied from the txStream in 'peek' mode.  Only
				when the packets are acked, the tail marker will be updated. */
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80139ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139d0:	2301      	movs	r3, #1
 80139d2:	9300      	str	r3, [sp, #0]
 80139d4:	4613      	mov	r3, r2
 80139d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80139da:	f7fe fdf1 	bl	80125c0 <uxStreamBufferGet>
 80139de:	6238      	str	r0, [r7, #32]
				}
				#endif

				/* If the owner of the socket requests a closure, add the FIN
				flag to the last packet. */
				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80139e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139ea:	b2db      	uxtb	r3, r3
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d02e      	beq.n	8013a4e <prvTCPPrepareSend+0x14e>
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80139f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139fa:	b2db      	uxtb	r3, r3
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d126      	bne.n	8013a4e <prvTCPPrepareSend+0x14e>
				{
					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	4619      	mov	r1, r3
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013a0c:	689b      	ldr	r3, [r3, #8]
 8013a0e:	461a      	mov	r2, r3
 8013a10:	f7fe fe89 	bl	8012726 <uxStreamBufferDistance>
 8013a14:	61f8      	str	r0, [r7, #28]

					if( ulDistance == ulDataGot )
 8013a16:	69fa      	ldr	r2, [r7, #28]
 8013a18:	6a3b      	ldr	r3, [r7, #32]
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d117      	bne.n	8013a4e <prvTCPPrepareSend+0x14e>
						}
						#endif
						/* Although the socket sends a FIN, it will stay in
						ESTABLISHED until all current data has been received or
						delivered. */
						pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a20:	7b5b      	ldrb	r3, [r3, #13]
 8013a22:	f043 0301 	orr.w	r3, r3, #1
 8013a26:	b2da      	uxtb	r2, r3
 8013a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a2a:	735a      	strb	r2, [r3, #13]
						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8013a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a32:	441a      	add	r2, r3
 8013a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a36:	625a      	str	r2, [r3, #36]	; 0x24
						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013a38:	68fa      	ldr	r2, [r7, #12]
 8013a3a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8013a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a42:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 8013a46:	e002      	b.n	8013a4e <prvTCPPrepareSend+0x14e>
					}
				}
			}
			else
			{
				lDataLen = -1;
 8013a48:	f04f 33ff 	mov.w	r3, #4294967295
 8013a4c:	647b      	str	r3, [r7, #68]	; 0x44
			}
		}
	}

	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 8013a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	db7c      	blt.n	8013b4e <prvTCPPrepareSend+0x24e>
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8013a5a:	2b05      	cmp	r3, #5
 8013a5c:	d177      	bne.n	8013b4e <prvTCPPrepareSend+0x24e>
	{
		/* See if the socket owner wants to shutdown this connection. */
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a64:	f003 0320 	and.w	r3, r3, #32
 8013a68:	b2db      	uxtb	r3, r3
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d029      	beq.n	8013ac2 <prvTCPPrepareSend+0x1c2>
			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8013a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a70:	f001 ffc2 	bl	80159f8 <xTCPWindowTxDone>
 8013a74:	4603      	mov	r3, r0
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d023      	beq.n	8013ac2 <prvTCPPrepareSend+0x1c2>
		{
			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8013a7a:	68fa      	ldr	r2, [r7, #12]
 8013a7c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8013a80:	f36f 1345 	bfc	r3, #5, #1
 8013a84:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
			pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a8a:	7b5b      	ldrb	r3, [r3, #13]
 8013a8c:	f043 0301 	orr.w	r3, r3, #1
 8013a90:	b2da      	uxtb	r2, r3
 8013a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a94:	735a      	strb	r2, [r3, #13]
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013a96:	68fa      	ldr	r2, [r7, #12]
 8013a98:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8013a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013aa0:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8013aa4:	68fa      	ldr	r2, [r7, #12]
 8013aa6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8013aaa:	f043 0301 	orr.w	r3, r3, #1
 8013aae:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8013ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab4:	6a1a      	ldr	r2, [r3, #32]
 8013ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab8:	625a      	str	r2, [r3, #36]	; 0x24
			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8013aba:	2106      	movs	r1, #6
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f7ff fdce 	bl	801365e <vTCPStateChange>
		}

		#if( ipconfigTCP_KEEP_ALIVE != 0 )
		{
			if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013ac8:	2b03      	cmp	r3, #3
 8013aca:	d906      	bls.n	8013ada <prvTCPPrepareSend+0x1da>
			{
				FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
					pxSocket->u.xTCP.ulRemoteIP,			/* IP address of remote machine. */
					pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8013acc:	2108      	movs	r1, #8
 8013ace:	68f8      	ldr	r0, [r7, #12]
 8013ad0:	f7ff fdc5 	bl	801365e <vTCPStateChange>
				lDataLen = -1;
 8013ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ad8:	647b      	str	r3, [r7, #68]	; 0x44
			}
			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 8013ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d136      	bne.n	8013b4e <prvTCPPrepareSend+0x24e>
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013ae6:	f003 0301 	and.w	r3, r3, #1
 8013aea:	b2db      	uxtb	r3, r3
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d12e      	bne.n	8013b4e <prvTCPPrepareSend+0x24e>
			{
				/* If there is no data to be sent, and no window-update message,
				we might want to send a keep-alive message. */
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 8013af0:	f7f9 fc30 	bl	800d354 <xTaskGetTickCount>
 8013af4:	4602      	mov	r2, r0
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013afa:	1ad3      	subs	r3, r2, r3
 8013afc:	61bb      	str	r3, [r7, #24]
				TickType_t xMax;
				xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 8013afe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013b02:	63bb      	str	r3, [r7, #56]	; 0x38
				if( pxSocket->u.xTCP.ucKeepRepCount != ( uint8_t ) 0U )
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d002      	beq.n	8013b14 <prvTCPPrepareSend+0x214>
				{
					xMax = ( TickType_t ) ( 3U * configTICK_RATE_HZ );
 8013b0e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8013b12:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if( xAge > xMax )
 8013b14:	69ba      	ldr	r2, [r7, #24]
 8013b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d918      	bls.n	8013b4e <prvTCPPrepareSend+0x24e>
				{
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 8013b1c:	f7f9 fc1a 	bl	800d354 <xTaskGetTickCount>
 8013b20:	4602      	mov	r2, r0
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	65da      	str	r2, [r3, #92]	; 0x5c
						FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
							pxSocket->u.xTCP.ulRemoteIP,
							pxSocket->u.xTCP.usRemotePort,
							pxSocket->u.xTCP.ucKeepRepCount ) );
					}
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8013b26:	68fa      	ldr	r2, [r7, #12]
 8013b28:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8013b2c:	f043 0302 	orr.w	r3, r3, #2
 8013b30:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8013b3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
					pxSocket->u.xTCP.ucKeepRepCount++;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013b44:	3301      	adds	r3, #1
 8013b46:	b2da      	uxtb	r2, r3
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		#endif /* ipconfigTCP_KEEP_ALIVE */
	}

	/* Anything to send, a change of the advertised window size, or maybe send a
	keep-alive message? */
	if( ( lDataLen > 0 ) ||
 8013b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	dc0f      	bgt.n	8013b74 <prvTCPPrepareSend+0x274>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013b5a:	f003 0301 	and.w	r3, r3, #1
 8013b5e:	b2db      	uxtb	r3, r3
	if( ( lDataLen > 0 ) ||
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d107      	bne.n	8013b74 <prvTCPPrepareSend+0x274>
		( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013b6a:	f003 0302 	and.w	r3, r3, #2
 8013b6e:	b2db      	uxtb	r3, r3
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d026      	beq.n	8013bc2 <prvTCPPrepareSend+0x2c2>
	{
		pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8013b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b76:	7b5b      	ldrb	r3, [r3, #13]
 8013b78:	f023 0308 	bic.w	r3, r3, #8
 8013b7c:	b2da      	uxtb	r2, r3
 8013b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b80:	735a      	strb	r2, [r3, #13]
		pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	b2db      	uxtb	r3, r3
 8013b86:	3314      	adds	r3, #20
 8013b88:	b2db      	uxtb	r3, r3
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	b2da      	uxtb	r2, r3
 8013b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b90:	731a      	strb	r2, [r3, #12]

		pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8013b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b94:	7b5b      	ldrb	r3, [r3, #13]
 8013b96:	f043 0310 	orr.w	r3, r3, #16
 8013b9a:	b2da      	uxtb	r2, r3
 8013b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b9e:	735a      	strb	r2, [r3, #13]

		if( lDataLen != 0L )
 8013ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d006      	beq.n	8013bb4 <prvTCPPrepareSend+0x2b4>
		{
			pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8013ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ba8:	7b5b      	ldrb	r3, [r3, #13]
 8013baa:	f043 0308 	orr.w	r3, r3, #8
 8013bae:	b2da      	uxtb	r2, r3
 8013bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bb2:	735a      	strb	r2, [r3, #13]
		}

		uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	3328      	adds	r3, #40	; 0x28
 8013bb8:	637b      	str	r3, [r7, #52]	; 0x34
		lDataLen += ( int32_t ) uxIntermediateResult;
 8013bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013bbe:	4413      	add	r3, r2
 8013bc0:	647b      	str	r3, [r7, #68]	; 0x44
	}

	return lDataLen;
 8013bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	3748      	adds	r7, #72	; 0x48
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}

08013bcc <prvTCPNextTimeout>:

/*
 * Calculate after how much time this socket needs to be checked again.
 */
static TickType_t prvTCPNextTimeout ( FreeRTOS_Socket_t *pxSocket )
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b084      	sub	sp, #16
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8013bd4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013bd8:	60bb      	str	r3, [r7, #8]

	if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8013be0:	2b02      	cmp	r3, #2
 8013be2:	d135      	bne.n	8013c50 <prvTCPNextTimeout+0x84>
	{
		/* The socket is actively connecting to a peer. */
		if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013bea:	f003 0308 	and.w	r3, r3, #8
 8013bee:	b2db      	uxtb	r3, r3
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d012      	beq.n	8013c1a <prvTCPNextTimeout+0x4e>
		{
			/* Ethernet address has been found, use progressive timeout for
			active connect(). */
			if( pxSocket->u.xTCP.ucRepCount < 3U )
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8013bfa:	2b02      	cmp	r3, #2
 8013bfc:	d809      	bhi.n	8013c12 <prvTCPNextTimeout+0x46>
			{
				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1U ) );
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8013c04:	3b01      	subs	r3, #1
 8013c06:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8013c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8013c0e:	60bb      	str	r3, [r7, #8]
 8013c10:	e006      	b.n	8013c20 <prvTCPNextTimeout+0x54>
			}
			else
			{
				ulDelayMs = 11000UL;
 8013c12:	f642 23f8 	movw	r3, #11000	; 0x2af8
 8013c16:	60bb      	str	r3, [r7, #8]
 8013c18:	e002      	b.n	8013c20 <prvTCPNextTimeout+0x54>
			}
		}
		else
		{
			/* Still in the ARP phase: check every half second. */
			ulDelayMs = 500UL;
 8013c1a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013c1e:	60bb      	str	r3, [r7, #8]
		}

		FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
			pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
			pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
		pxSocket->u.xTCP.usTimeout = ( uint16_t )ipMS_TO_MIN_TICKS( ulDelayMs );
 8013c20:	68bb      	ldr	r3, [r7, #8]
 8013c22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013c26:	fb02 f303 	mul.w	r3, r2, r3
 8013c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013c2e:	d30a      	bcc.n	8013c46 <prvTCPNextTimeout+0x7a>
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013c36:	fb02 f303 	mul.w	r3, r2, r3
 8013c3a:	4a23      	ldr	r2, [pc, #140]	; (8013cc8 <prvTCPNextTimeout+0xfc>)
 8013c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8013c40:	099b      	lsrs	r3, r3, #6
 8013c42:	b29a      	uxth	r2, r3
 8013c44:	e000      	b.n	8013c48 <prvTCPNextTimeout+0x7c>
 8013c46:	2201      	movs	r2, #1
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013c4e:	e033      	b.n	8013cb8 <prvTCPNextTimeout+0xec>
	}
	else if( pxSocket->u.xTCP.usTimeout == 0U )
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d12e      	bne.n	8013cb8 <prvTCPNextTimeout+0xec>
	{
		/* Let the sliding window mechanism decide what time-out is appropriate. */
		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013c66:	f107 0208 	add.w	r2, r7, #8
 8013c6a:	4619      	mov	r1, r3
 8013c6c:	f001 ff1c 	bl	8015aa8 <xTCPWindowTxHasData>
 8013c70:	60f8      	str	r0, [r7, #12]
		if( ulDelayMs == 0U )
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d108      	bne.n	8013c8a <prvTCPNextTimeout+0xbe>
		{
			if( xResult != ( BaseType_t )0 )
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d002      	beq.n	8013c84 <prvTCPNextTimeout+0xb8>
			{
				ulDelayMs = 1UL;
 8013c7e:	2301      	movs	r3, #1
 8013c80:	60bb      	str	r3, [r7, #8]
 8013c82:	e002      	b.n	8013c8a <prvTCPNextTimeout+0xbe>
			}
			else
			{
				ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8013c84:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013c88:	60bb      	str	r3, [r7, #8]
		}
		else
		{
			/* ulDelayMs contains the time to wait before a re-transmission. */
		}
		pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013c90:	fb02 f303 	mul.w	r3, r2, r3
 8013c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013c98:	d30a      	bcc.n	8013cb0 <prvTCPNextTimeout+0xe4>
 8013c9a:	68bb      	ldr	r3, [r7, #8]
 8013c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013ca0:	fb02 f303 	mul.w	r3, r2, r3
 8013ca4:	4a08      	ldr	r2, [pc, #32]	; (8013cc8 <prvTCPNextTimeout+0xfc>)
 8013ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8013caa:	099b      	lsrs	r3, r3, #6
 8013cac:	b29a      	uxth	r2, r3
 8013cae:	e000      	b.n	8013cb2 <prvTCPNextTimeout+0xe6>
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		/* field '.usTimeout' has already been set (by the
		keep-alive/delayed-ACK mechanism). */
	}

	/* Return the number of clock ticks before the timer expires. */
	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3710      	adds	r7, #16
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
 8013cc6:	bf00      	nop
 8013cc8:	10624dd3 	.word	0x10624dd3

08013ccc <prvTCPAddTxData>:
/*-----------------------------------------------------------*/

static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket )
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b084      	sub	sp, #16
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
	the sliding window.

	uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
	contains new Tx data which has not been passed to the sliding window yet.
	The oldest data not-yet-confirmed can be found at rxTail. */
	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7fe fd6a 	bl	80127b2 <uxStreamBufferMidSpace>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	60fb      	str	r3, [r7, #12]

	if( lLength > 0 )
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	dd17      	ble.n	8013d18 <prvTCPAddTxData+0x4c>
		window manager, so it can start transmitting them.

		Hand over the new data to the sliding window handler.  It will be
		split-up in chunks of 1460 bytes each (or less, depending on
		ipconfigTCP_MSS). */
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8013cee:	68f9      	ldr	r1, [r7, #12]
								( uint32_t ) lLength,
								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cf4:	685b      	ldr	r3, [r3, #4]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 8013cf6:	461a      	mov	r2, r3
								( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cfc:	691b      	ldr	r3, [r3, #16]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 8013cfe:	f001 fdc5 	bl	801588c <lTCPWindowTxAdd>
 8013d02:	60b8      	str	r0, [r7, #8]

		/* Move the rxMid pointer forward up to rxHead. */
		if( lCount > 0 )
 8013d04:	68bb      	ldr	r3, [r7, #8]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	dd06      	ble.n	8013d18 <prvTCPAddTxData+0x4c>
		{
			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d0e:	68ba      	ldr	r2, [r7, #8]
 8013d10:	4611      	mov	r1, r2
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7fe fd61 	bl	80127da <vStreamBufferMoveMid>
		}
	}
}
 8013d18:	bf00      	nop
 8013d1a:	3710      	adds	r7, #16
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}

08013d20 <prvTCPHandleFin>:
 * Or when the socket has sent a FIN flag to the peer
 * Before being called, it has been checked that both reception and transmission
 * are complete.
 */
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, const NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b088      	sub	sp, #32
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
 8013d28:	6039      	str	r1, [r7, #0]
/* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
ProtocolHeaders_t *pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	699b      	ldr	r3, [r3, #24]
 8013d2e:	3322      	adds	r3, #34	; 0x22
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7fe fd9b 	bl	801286c <vCastPointerTo_ProtocolHeaders_t>
 8013d36:	61b8      	str	r0, [r7, #24]
	&( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
TCPHeader_t *pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8013d38:	69bb      	ldr	r3, [r7, #24]
 8013d3a:	617b      	str	r3, [r7, #20]
uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	74fb      	strb	r3, [r7, #19]
 8013d40:	697b      	ldr	r3, [r7, #20]
 8013d42:	7b5b      	ldrb	r3, [r3, #13]
 8013d44:	74bb      	strb	r3, [r7, #18]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	33d8      	adds	r3, #216	; 0xd8
 8013d4a:	60fb      	str	r3, [r7, #12]
BaseType_t xSendLength = 0;
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	61fb      	str	r3, [r7, #28]
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	689b      	ldr	r3, [r3, #8]
 8013d54:	061a      	lsls	r2, r3, #24
 8013d56:	697b      	ldr	r3, [r7, #20]
 8013d58:	689b      	ldr	r3, [r3, #8]
 8013d5a:	021b      	lsls	r3, r3, #8
 8013d5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013d60:	431a      	orrs	r2, r3
 8013d62:	697b      	ldr	r3, [r7, #20]
 8013d64:	689b      	ldr	r3, [r3, #8]
 8013d66:	0a1b      	lsrs	r3, r3, #8
 8013d68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013d6c:	431a      	orrs	r2, r3
 8013d6e:	697b      	ldr	r3, [r7, #20]
 8013d70:	689b      	ldr	r3, [r3, #8]
 8013d72:	0e1b      	lsrs	r3, r3, #24
 8013d74:	4313      	orrs	r3, r2
 8013d76:	60bb      	str	r3, [r7, #8]

	if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 8013d78:	7cbb      	ldrb	r3, [r7, #18]
 8013d7a:	f003 0301 	and.w	r3, r3, #1
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d004      	beq.n	8013d8c <prvTCPHandleFin+0x6c>
	{
		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	695b      	ldr	r3, [r3, #20]
 8013d86:	1c5a      	adds	r2, r3, #1
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	611a      	str	r2, [r3, #16]
	}
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d10b      	bne.n	8013db4 <prvTCPHandleFin+0x94>
	{
		/* We haven't yet replied with a FIN, do so now. */
		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	6a1a      	ldr	r2, [r3, #32]
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	625a      	str	r2, [r3, #36]	; 0x24
		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013da4:	687a      	ldr	r2, [r7, #4]
 8013da6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8013daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dae:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 8013db2:	e00c      	b.n	8013dce <prvTCPHandleFin+0xae>
	}
	else
	{
		/* We did send a FIN already, see if it's ACK'd. */
		if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1UL ) )
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013db8:	3301      	adds	r3, #1
 8013dba:	68ba      	ldr	r2, [r7, #8]
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	d106      	bne.n	8013dce <prvTCPHandleFin+0xae>
		{
			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8013dc0:	687a      	ldr	r2, [r7, #4]
 8013dc2:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8013dc6:	f043 0301 	orr.w	r3, r3, #1
 8013dca:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
		}
	}

	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013dd4:	f003 0301 	and.w	r3, r3, #1
 8013dd8:	b2db      	uxtb	r3, r3
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d10b      	bne.n	8013df6 <prvTCPHandleFin+0xd6>
	{
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	621a      	str	r2, [r3, #32]
		pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	2211      	movs	r2, #17
 8013dea:	735a      	strb	r2, [r3, #13]

		/* And wait for the final ACK. */
		vTCPStateChange( pxSocket, eLAST_ACK );
 8013dec:	210a      	movs	r1, #10
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f7ff fc35 	bl	801365e <vTCPStateChange>
 8013df4:	e023      	b.n	8013e3e <prvTCPHandleFin+0x11e>
	}
	else
	{
		/* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dfa:	1c5a      	adds	r2, r3, #1
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	621a      	str	r2, [r3, #32]
		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013e06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013e0a:	b2db      	uxtb	r3, r3
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d103      	bne.n	8013e18 <prvTCPHandleFin+0xf8>
		{
			/* We have sent out a FIN but the peer hasn't replied with a FIN
			yet. Do nothing for the moment. */
			pxTCPHeader->ucTCPFlags = 0U;
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	2200      	movs	r2, #0
 8013e14:	735a      	strb	r2, [r3, #13]
 8013e16:	e012      	b.n	8013e3e <prvTCPHandleFin+0x11e>
		}
		else
		{
			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e1e:	f003 0302 	and.w	r3, r3, #2
 8013e22:	b2db      	uxtb	r3, r3
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d103      	bne.n	8013e30 <prvTCPHandleFin+0x110>
			{
				/* This is the third of the three-way hand shake: the last
				ACK. */
				pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8013e28:	697b      	ldr	r3, [r7, #20]
 8013e2a:	2210      	movs	r2, #16
 8013e2c:	735a      	strb	r2, [r3, #13]
 8013e2e:	e002      	b.n	8013e36 <prvTCPHandleFin+0x116>
			}
			else
			{
				/* The other party started the closure, so we just wait for the
				last ACK. */
				pxTCPHeader->ucTCPFlags = 0U;
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	2200      	movs	r2, #0
 8013e34:	735a      	strb	r2, [r3, #13]
			}

			/* And wait for the user to close this socket. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8013e36:	2108      	movs	r1, #8
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f7ff fc10 	bl	801365e <vTCPStateChange>
		}
	}

	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	6a1a      	ldr	r2, [r3, #32]
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	62da      	str	r2, [r3, #44]	; 0x2c

	if( pxTCPHeader->ucTCPFlags != 0U )
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	7b5b      	ldrb	r3, [r3, #13]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d006      	beq.n	8013e5c <prvTCPHandleFin+0x13c>
	{
		ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013e54:	3328      	adds	r3, #40	; 0x28
 8013e56:	74fb      	strb	r3, [r7, #19]
		xSendLength = ( BaseType_t ) ucIntermediateResult;
 8013e58:	7cfb      	ldrb	r3, [r7, #19]
 8013e5a:	61fb      	str	r3, [r7, #28]
	}

	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013e62:	3314      	adds	r3, #20
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	009b      	lsls	r3, r3, #2
 8013e68:	b2da      	uxtb	r2, r3
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	731a      	strb	r2, [r3, #12]
			pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
	}

	return xSendLength;
 8013e6e:	69fb      	ldr	r3, [r7, #28]
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3720      	adds	r7, #32
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}

08013e78 <prvCheckRxData>:
 *
 * The first thing that will be done is find the TCP payload data
 * and check the length of this data.
 */
static BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t *pxNetworkBuffer, uint8_t **ppucRecvData )
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b08c      	sub	sp, #48	; 0x30
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	6039      	str	r1, [r7, #0]
/* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
const ProtocolHeaders_t *pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	699b      	ldr	r3, [r3, #24]
 8013e86:	3322      	adds	r3, #34	; 0x22
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7fe fcef 	bl	801286c <vCastPointerTo_ProtocolHeaders_t>
 8013e8e:	62b8      	str	r0, [r7, #40]	; 0x28
	&( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
const TCPHeader_t *pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8013e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e92:	627b      	str	r3, [r7, #36]	; 0x24
int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

/* Map the buffer onto an IPHeader_t struct for easy access to fields. */
const IPHeader_t *pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	699b      	ldr	r3, [r3, #24]
 8013e98:	330e      	adds	r3, #14
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7fe fcc5 	bl	801282a <vCastConstPointerTo_IPHeader_t>
 8013ea0:	6238      	str	r0, [r7, #32]
const size_t xIPHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8013ea2:	2314      	movs	r3, #20
 8013ea4:	61fb      	str	r3, [r7, #28]
uint16_t usLength;
uint8_t ucIntermediateResult = 0;
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	76fb      	strb	r3, [r7, #27]
	node.

	The size of the TCP header is given in a multiple of 4-byte words (single
	byte, needs no ntoh() translation).  A shift-right 2: is the same as
	(offset >> 4) * 4. */
	ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8013eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eac:	7b1b      	ldrb	r3, [r3, #12]
 8013eae:	089b      	lsrs	r3, r3, #2
 8013eb0:	b2db      	uxtb	r3, r3
 8013eb2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8013eb6:	76fb      	strb	r3, [r7, #27]
	lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 8013eb8:	7efb      	ldrb	r3, [r7, #27]
 8013eba:	617b      	str	r3, [r7, #20]

	/* Let pucRecvData point to the first byte received. */
	*ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	699a      	ldr	r2, [r3, #24]
 8013ec0:	6979      	ldr	r1, [r7, #20]
 8013ec2:	69fb      	ldr	r3, [r7, #28]
 8013ec4:	440b      	add	r3, r1
 8013ec6:	330e      	adds	r3, #14
 8013ec8:	441a      	add	r2, r3
 8013eca:	683b      	ldr	r3, [r7, #0]
 8013ecc:	601a      	str	r2, [r3, #0]

	/* Calculate lReceiveLength - the length of the TCP data received.  This is
	equal to the total packet length minus:
	( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
	lReceiveLength = ipNUMERIC_CAST( int32_t, pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	69db      	ldr	r3, [r3, #28]
 8013ed2:	3b0e      	subs	r3, #14
 8013ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

	usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8013ed6:	6a3b      	ldr	r3, [r7, #32]
 8013ed8:	885b      	ldrh	r3, [r3, #2]
 8013eda:	b29b      	uxth	r3, r3
 8013edc:	021b      	lsls	r3, r3, #8
 8013ede:	b21a      	sxth	r2, r3
 8013ee0:	6a3b      	ldr	r3, [r7, #32]
 8013ee2:	885b      	ldrh	r3, [r3, #2]
 8013ee4:	b29b      	uxth	r3, r3
 8013ee6:	0a1b      	lsrs	r3, r3, #8
 8013ee8:	b29b      	uxth	r3, r3
 8013eea:	b21b      	sxth	r3, r3
 8013eec:	4313      	orrs	r3, r2
 8013eee:	b21b      	sxth	r3, r3
 8013ef0:	827b      	strh	r3, [r7, #18]
	lLength =  ( int32_t ) usLength;
 8013ef2:	8a7b      	ldrh	r3, [r7, #18]
 8013ef4:	60fb      	str	r3, [r7, #12]

	if( lReceiveLength > lLength )
 8013ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	429a      	cmp	r2, r3
 8013efc:	dd01      	ble.n	8013f02 <prvCheckRxData+0x8a>
	{
		/* More bytes were received than the reported length, often because of
		padding bytes at the end. */
		lReceiveLength = lLength;
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Subtract the size of the TCP and IP headers and the actual data size is
	known. */
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8013f02:	69fa      	ldr	r2, [r7, #28]
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	4413      	add	r3, r2
 8013f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	dd06      	ble.n	8013f1c <prvCheckRxData+0xa4>
	{
		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 8013f0e:	69fa      	ldr	r2, [r7, #28]
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	4413      	add	r3, r2
 8013f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f16:	1ad3      	subs	r3, r2, r3
 8013f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f1a:	e001      	b.n	8013f20 <prvCheckRxData+0xa8>
	}
	else
	{
		lReceiveLength = 0;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	This field communicates the current value of the urgent pointer as a
	positive offset from the sequence number in this segment.  The urgent
	pointer points to the sequence number of the octet following the urgent
	data.  This field is only be interpreted in segments with the URG control
	bit set. */
	if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 8013f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f22:	7b5b      	ldrb	r3, [r3, #13]
 8013f24:	f003 0320 	and.w	r3, r3, #32
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d01c      	beq.n	8013f66 <prvCheckRxData+0xee>
	{
		/* Although we ignore the urgent data, we have to skip it. */
		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 8013f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f2e:	8a5b      	ldrh	r3, [r3, #18]
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	021b      	lsls	r3, r3, #8
 8013f34:	b21a      	sxth	r2, r3
 8013f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f38:	8a5b      	ldrh	r3, [r3, #18]
 8013f3a:	b29b      	uxth	r3, r3
 8013f3c:	0a1b      	lsrs	r3, r3, #8
 8013f3e:	b29b      	uxth	r3, r3
 8013f40:	b21b      	sxth	r3, r3
 8013f42:	4313      	orrs	r3, r2
 8013f44:	b21b      	sxth	r3, r3
 8013f46:	b29b      	uxth	r3, r3
 8013f48:	60bb      	str	r3, [r7, #8]
		*ppucRecvData += lUrgentLength;
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	681a      	ldr	r2, [r3, #0]
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	441a      	add	r2, r3
 8013f52:	683b      	ldr	r3, [r7, #0]
 8013f54:	601a      	str	r2, [r3, #0]
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8013f56:	68b9      	ldr	r1, [r7, #8]
 8013f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f5a:	f7fe fba5 	bl	80126a8 <FreeRTOS_min_int32>
 8013f5e:	4602      	mov	r2, r0
 8013f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f62:	1a9b      	subs	r3, r3, r2
 8013f64:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return ( BaseType_t ) lReceiveLength;
 8013f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3730      	adds	r7, #48	; 0x30
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <prvStoreRxData>:
 * The second thing is to do is check if the payload data may be accepted
 * If so, they will be added to the reception queue.
 */
static BaseType_t prvStoreRxData( FreeRTOS_Socket_t *pxSocket, const uint8_t *pucRecvData,
	NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulReceiveLength )
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b08c      	sub	sp, #48	; 0x30
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	60f8      	str	r0, [r7, #12]
 8013f78:	60b9      	str	r1, [r7, #8]
 8013f7a:	607a      	str	r2, [r7, #4]
 8013f7c:	603b      	str	r3, [r7, #0]
/* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
const ProtocolHeaders_t *pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	699b      	ldr	r3, [r3, #24]
 8013f82:	3322      	adds	r3, #34	; 0x22
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7fe fc7c 	bl	8012882 <vCastConstPointerTo_ProtocolHeaders_t>
 8013f8a:	6278      	str	r0, [r7, #36]	; 0x24
	&( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
const TCPHeader_t *pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8013f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f8e:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	33d8      	adds	r3, #216	; 0xd8
 8013f94:	61fb      	str	r3, [r7, #28]
uint32_t ulSequenceNumber, ulSpace;
int32_t lOffset, lStored;
BaseType_t xResult = 0;
 8013f96:	2300      	movs	r3, #0
 8013f98:	62bb      	str	r3, [r7, #40]	; 0x28

	ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8013f9a:	6a3b      	ldr	r3, [r7, #32]
 8013f9c:	685b      	ldr	r3, [r3, #4]
 8013f9e:	061a      	lsls	r2, r3, #24
 8013fa0:	6a3b      	ldr	r3, [r7, #32]
 8013fa2:	685b      	ldr	r3, [r3, #4]
 8013fa4:	021b      	lsls	r3, r3, #8
 8013fa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013faa:	431a      	orrs	r2, r3
 8013fac:	6a3b      	ldr	r3, [r7, #32]
 8013fae:	685b      	ldr	r3, [r3, #4]
 8013fb0:	0a1b      	lsrs	r3, r3, #8
 8013fb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013fb6:	431a      	orrs	r2, r3
 8013fb8:	6a3b      	ldr	r3, [r7, #32]
 8013fba:	685b      	ldr	r3, [r3, #4]
 8013fbc:	0e1b      	lsrs	r3, r3, #24
 8013fbe:	4313      	orrs	r3, r2
 8013fc0:	61bb      	str	r3, [r7, #24]

	if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d03f      	beq.n	8014048 <prvStoreRxData+0xd8>
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8013fce:	2b03      	cmp	r3, #3
 8013fd0:	d93a      	bls.n	8014048 <prvStoreRxData+0xd8>

		If it can't be "accept"ed it may have to be stored and send a selective
		ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
		called later to store an out-of-order packet (in case lOffset is
		negative). */
		if ( pxSocket->u.xTCP.rxStream != NULL )
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d006      	beq.n	8013fe8 <prvStoreRxData+0x78>
		{
			ulSpace = ( uint32_t )uxStreamBufferGetSpace ( pxSocket->u.xTCP.rxStream );
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7fe fbbf 	bl	8012762 <uxStreamBufferGetSpace>
 8013fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8013fe6:	e002      	b.n	8013fee <prvStoreRxData+0x7e>
		}
		else
		{
			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fec:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 8013fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff0:	683a      	ldr	r2, [r7, #0]
 8013ff2:	69b9      	ldr	r1, [r7, #24]
 8013ff4:	69f8      	ldr	r0, [r7, #28]
 8013ff6:	f001 fb4b 	bl	8015690 <lTCPWindowRxCheck>
 8013ffa:	6178      	str	r0, [r7, #20]

		if( lOffset >= 0 )
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	db10      	blt.n	8014024 <prvStoreRxData+0xb4>
		{
			/* New data has arrived and may be made available to the user.  See
			if the head marker in rxStream may be advanced,	only if lOffset == 0.
			In case the low-water mark is reached, bLowWater will be set
			"low-water" here stands for "little space". */
			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 8014002:	6979      	ldr	r1, [r7, #20]
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	68ba      	ldr	r2, [r7, #8]
 8014008:	68f8      	ldr	r0, [r7, #12]
 801400a:	f7fd ff3f 	bl	8011e8c <lTCPAddRxdata>
 801400e:	6138      	str	r0, [r7, #16]

			if( lStored != ( int32_t ) ulReceiveLength )
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	693a      	ldr	r2, [r7, #16]
 8014014:	429a      	cmp	r2, r3
 8014016:	d005      	beq.n	8014024 <prvStoreRxData+0xb4>
				FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes? ?\n", lStored, ulReceiveLength ) );

				/* Received data could not be stored.  The socket's flag
				bMallocError has been set.  The socket now has the status
				eCLOSE_WAIT and a RST packet will be sent back. */
				( void ) prvTCPSendReset( pxNetworkBuffer );
 8014018:	6878      	ldr	r0, [r7, #4]
 801401a:	f000 fc71 	bl	8014900 <prvTCPSendReset>
				xResult = -1;
 801401e:	f04f 33ff 	mov.w	r3, #4294967295
 8014022:	62bb      	str	r3, [r7, #40]	; 0x28
		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			/* Now lTCPAddRxdata() will move the rxHead pointer forward
			so data becomes available to the user immediately
			In case the low-water mark is reached, bLowWater will be set. */
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 8014024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014026:	2b00      	cmp	r3, #0
 8014028:	d113      	bne.n	8014052 <prvStoreRxData+0xe2>
 801402a:	69fb      	ldr	r3, [r7, #28]
 801402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801402e:	2b00      	cmp	r3, #0
 8014030:	d00f      	beq.n	8014052 <prvStoreRxData+0xe2>
			{
				( void ) lTCPAddRxdata( pxSocket, 0UL, NULL, pxTCPWindow->ulUserDataLength );
 8014032:	69fb      	ldr	r3, [r7, #28]
 8014034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014036:	2200      	movs	r2, #0
 8014038:	2100      	movs	r1, #0
 801403a:	68f8      	ldr	r0, [r7, #12]
 801403c:	f7fd ff26 	bl	8011e8c <lTCPAddRxdata>
				pxTCPWindow->ulUserDataLength = 0;
 8014040:	69fb      	ldr	r3, [r7, #28]
 8014042:	2200      	movs	r2, #0
 8014044:	631a      	str	r2, [r3, #48]	; 0x30
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 8014046:	e004      	b.n	8014052 <prvStoreRxData+0xe2>
		}
		#endif /* ipconfigUSE_TCP_WIN */
	}
	else
	{
		pxTCPWindow->ucOptionLength = 0U;
 8014048:	69fb      	ldr	r3, [r7, #28]
 801404a:	2200      	movs	r2, #0
 801404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8014050:	e000      	b.n	8014054 <prvStoreRxData+0xe4>
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 8014052:	bf00      	nop
	}

	return xResult;
 8014054:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8014056:	4618      	mov	r0, r3
 8014058:	3730      	adds	r7, #48	; 0x30
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}

0801405e <prvSetOptions>:
/*-----------------------------------------------------------*/

/* Set the TCP options (if any) for the outgoing packet. */
static UBaseType_t prvSetOptions( FreeRTOS_Socket_t *pxSocket, const NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 801405e:	b580      	push	{r7, lr}
 8014060:	b086      	sub	sp, #24
 8014062:	af00      	add	r7, sp, #0
 8014064:	6078      	str	r0, [r7, #4]
 8014066:	6039      	str	r1, [r7, #0]
/* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
ProtocolHeaders_t *pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	699b      	ldr	r3, [r3, #24]
 801406c:	3322      	adds	r3, #34	; 0x22
 801406e:	4618      	mov	r0, r3
 8014070:	f7fe fbfc 	bl	801286c <vCastPointerTo_ProtocolHeaders_t>
 8014074:	6138      	str	r0, [r7, #16]
	&( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
TCPHeader_t *pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	60fb      	str	r3, [r7, #12]
const TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	33d8      	adds	r3, #216	; 0xd8
 801407e:	60bb      	str	r3, [r7, #8]
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014086:	617b      	str	r3, [r7, #20]

#if(	ipconfigUSE_TCP_WIN == 1 )
	if( uxOptionsLength != 0U )
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d011      	beq.n	80140b2 <prvSetOptions+0x54>
				pxSocket->u.xTCP.usRemotePort,
				uxOptionsLength,
				FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 1 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
				FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 2 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ) );
		}
		( void ) memcpy( ( void * ) ( pxTCPHeader->ucOptdata ), ( const void * ) ( pxTCPWindow->ulOptionsData ), ( size_t ) uxOptionsLength );
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	f103 0014 	add.w	r0, r3, #20
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	3380      	adds	r3, #128	; 0x80
 8014098:	697a      	ldr	r2, [r7, #20]
 801409a:	4619      	mov	r1, r3
 801409c:	f003 f8ef 	bl	801727e <memcpy>

		/* The header length divided by 4, goes into the higher nibble,
		effectively a shift-left 2. */
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	b2db      	uxtb	r3, r3
 80140a4:	3314      	adds	r3, #20
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	009b      	lsls	r3, r3, #2
 80140aa:	b2da      	uxtb	r2, r3
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	731a      	strb	r2, [r3, #12]
 80140b0:	e031      	b.n	8014116 <prvSetOptions+0xb8>
	}
	else
#endif	/* ipconfigUSE_TCP_WIN */
	if( ( pxSocket->u.xTCP.ucTCPState >= ( EventBits_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80140b8:	2b04      	cmp	r3, #4
 80140ba:	d92c      	bls.n	8014116 <prvSetOptions+0xb8>
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80140c2:	f003 0301 	and.w	r3, r3, #1
 80140c6:	b2db      	uxtb	r3, r3
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d024      	beq.n	8014116 <prvSetOptions+0xb8>
	{
		/* TCP options must be sent because the MSS has changed. */
		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 80140cc:	687a      	ldr	r2, [r7, #4]
 80140ce:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 80140d2:	f36f 0300 	bfc	r3, #0, #1
 80140d6:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		if( xTCPWindowLoggingLevel >= 0 )
		{
			FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
		}

		pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	2202      	movs	r2, #2
 80140de:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2204      	movs	r2, #4
 80140e4:	755a      	strb	r2, [r3, #21]
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80140ec:	0a1b      	lsrs	r3, r3, #8
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	b2da      	uxtb	r2, r3
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	759a      	strb	r2, [r3, #22]
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffU );
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80140fc:	b2da      	uxtb	r2, r3
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	75da      	strb	r2, [r3, #23]
		uxOptionsLength = 4U;
 8014102:	2304      	movs	r3, #4
 8014104:	617b      	str	r3, [r7, #20]
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	b2db      	uxtb	r3, r3
 801410a:	3314      	adds	r3, #20
 801410c:	b2db      	uxtb	r3, r3
 801410e:	009b      	lsls	r3, r3, #2
 8014110:	b2da      	uxtb	r2, r3
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	731a      	strb	r2, [r3, #12]
	else
	{
		/* Nothing. */
	}

	return uxOptionsLength;
 8014116:	697b      	ldr	r3, [r7, #20]
}
 8014118:	4618      	mov	r0, r3
 801411a:	3718      	adds	r7, #24
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}

08014120 <prvHandleSynReceived>:
 * Called from the states: eSYN_RECEIVED and eCONNECT_SYN
 * If the flags received are correct, the socket will move to eESTABLISHED.
 */
static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t *pxSocket, const NetworkBufferDescriptor_t *pxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b08e      	sub	sp, #56	; 0x38
 8014124:	af00      	add	r7, sp, #0
 8014126:	60f8      	str	r0, [r7, #12]
 8014128:	60b9      	str	r1, [r7, #8]
 801412a:	607a      	str	r2, [r7, #4]
 801412c:	603b      	str	r3, [r7, #0]
/* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
ProtocolHeaders_t *pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	699b      	ldr	r3, [r3, #24]
 8014132:	3322      	adds	r3, #34	; 0x22
 8014134:	4618      	mov	r0, r3
 8014136:	f7fe fb99 	bl	801286c <vCastPointerTo_ProtocolHeaders_t>
 801413a:	62f8      	str	r0, [r7, #44]	; 0x2c
	&( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
TCPHeader_t *pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 801413c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801413e:	62bb      	str	r3, [r7, #40]	; 0x28
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	33d8      	adds	r3, #216	; 0xd8
 8014144:	627b      	str	r3, [r7, #36]	; 0x24
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8014146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014148:	7b5b      	ldrb	r3, [r3, #13]
 801414a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014150:	685b      	ldr	r3, [r3, #4]
 8014152:	061a      	lsls	r2, r3, #24
 8014154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014156:	685b      	ldr	r3, [r3, #4]
 8014158:	021b      	lsls	r3, r3, #8
 801415a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801415e:	431a      	orrs	r2, r3
 8014160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014162:	685b      	ldr	r3, [r3, #4]
 8014164:	0a1b      	lsrs	r3, r3, #8
 8014166:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801416a:	431a      	orrs	r2, r3
 801416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	0e1b      	lsrs	r3, r3, #24
 8014172:	4313      	orrs	r3, r2
 8014174:	61fb      	str	r3, [r7, #28]
BaseType_t xSendLength = 0;
 8014176:	2300      	movs	r3, #0
 8014178:	637b      	str	r3, [r7, #52]	; 0x34
UBaseType_t uxIntermediateResult = 0;
 801417a:	2300      	movs	r3, #0
 801417c:	61bb      	str	r3, [r7, #24]

	/* Either expect a ACK or a SYN+ACK. */
	uint8_t ucExpect = tcpTCP_FLAG_ACK;
 801417e:	2310      	movs	r3, #16
 8014180:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801418a:	2b02      	cmp	r3, #2
 801418c:	d105      	bne.n	801419a <prvHandleSynReceived+0x7a>
	{
		ucExpect |= tcpTCP_FLAG_SYN;
 801418e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014192:	f043 0302 	orr.w	r3, r3, #2
 8014196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	}

	const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 801419a:	2317      	movs	r3, #23
 801419c:	75fb      	strb	r3, [r7, #23]

	if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 801419e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80141a2:	7dfb      	ldrb	r3, [r7, #23]
 80141a4:	4013      	ands	r3, r2
 80141a6:	b2db      	uxtb	r3, r3
 80141a8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d030      	beq.n	8014212 <prvHandleSynReceived+0xf2>
		/* eSYN_RECEIVED: flags 0010 expected, not 0002. */
		/* eSYN_RECEIVED: flags ACK  expected, not SYN. */
		FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
			( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
			ucExpect, ucTCPFlags ) );
		vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80141b0:	2108      	movs	r1, #8
 80141b2:	68f8      	ldr	r0, [r7, #12]
 80141b4:	f7ff fa53 	bl	801365e <vTCPStateChange>
		/* Send RST with the expected sequence and ACK numbers,
		otherwise the packet will be ignored. */
		pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 80141b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ba:	689b      	ldr	r3, [r3, #8]
 80141bc:	061a      	lsls	r2, r3, #24
 80141be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c0:	689b      	ldr	r3, [r3, #8]
 80141c2:	021b      	lsls	r3, r3, #8
 80141c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80141c8:	431a      	orrs	r2, r3
 80141ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141cc:	689b      	ldr	r3, [r3, #8]
 80141ce:	0a1b      	lsrs	r3, r3, #8
 80141d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80141d4:	431a      	orrs	r2, r3
 80141d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d8:	689b      	ldr	r3, [r3, #8]
 80141da:	0e1b      	lsrs	r3, r3, #24
 80141dc:	431a      	orrs	r2, r3
 80141de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e0:	62da      	str	r2, [r3, #44]	; 0x2c
		pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 80141e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e4:	69fa      	ldr	r2, [r7, #28]
 80141e6:	611a      	str	r2, [r3, #16]

		pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 80141e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ea:	7b5b      	ldrb	r3, [r3, #13]
 80141ec:	f043 0304 	orr.w	r3, r3, #4
 80141f0:	b2da      	uxtb	r2, r3
 80141f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f4:	735a      	strb	r2, [r3, #13]

		uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	3328      	adds	r3, #40	; 0x28
 80141fa:	61bb      	str	r3, [r7, #24]
		xSendLength = ( BaseType_t ) uxIntermediateResult;
 80141fc:	69bb      	ldr	r3, [r7, #24]
 80141fe:	637b      	str	r3, [r7, #52]	; 0x34

		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	b2db      	uxtb	r3, r3
 8014204:	3314      	adds	r3, #20
 8014206:	b2db      	uxtb	r3, r3
 8014208:	009b      	lsls	r3, r3, #2
 801420a:	b2da      	uxtb	r2, r3
 801420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420e:	731a      	strb	r2, [r3, #12]
 8014210:	e070      	b.n	80142f4 <prvHandleSynReceived+0x1d4>
	}
	else
	{
		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8014216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014218:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8014220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014222:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

		if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801422c:	2b02      	cmp	r3, #2
 801422e:	d12a      	bne.n	8014286 <prvHandleSynReceived+0x166>
		{
		/* Map the Last packet onto the ProtocolHeader_t struct for easy access to the fields. */
		ProtocolHeaders_t *pxLastHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	33a4      	adds	r3, #164	; 0xa4
 8014234:	4618      	mov	r0, r3
 8014236:	f7fe fb19 	bl	801286c <vCastPointerTo_ProtocolHeaders_t>
 801423a:	6138      	str	r0, [r7, #16]
			&( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );

			/* Clear the SYN flag in lastPacket. */
			pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 801423c:	693b      	ldr	r3, [r7, #16]
 801423e:	2210      	movs	r2, #16
 8014240:	735a      	strb	r2, [r3, #13]
			pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8014242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014244:	2210      	movs	r2, #16
 8014246:	735a      	strb	r2, [r3, #13]

			/* This socket was the one connecting actively so now perform the
			synchronisation. */
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
				ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 801425a:	69f9      	ldr	r1, [r7, #28]
 801425c:	f001 f96e 	bl	801553c <vTCPWindowInit>
			pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	1c5a      	adds	r2, r3, #1
 8014264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014266:	619a      	str	r2, [r3, #24]
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8014268:	69fb      	ldr	r3, [r7, #28]
 801426a:	1c5a      	adds	r2, r3, #1
 801426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426e:	611a      	str	r2, [r3, #16]
			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8014270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014272:	6a1b      	ldr	r3, [r3, #32]
 8014274:	1c5a      	adds	r2, r3, #1
 8014276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014278:	621a      	str	r2, [r3, #32]
			pxTCPWindow->ulNextTxSequenceNumber++;
 801427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801427c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801427e:	1c5a      	adds	r2, r3, #1
 8014280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014282:	635a      	str	r2, [r3, #52]	; 0x34
 8014284:	e005      	b.n	8014292 <prvHandleSynReceived+0x172>
		}
		else if( ulReceiveLength == 0U )
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d102      	bne.n	8014292 <prvHandleSynReceived+0x172>
		{
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 801428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428e:	69fa      	ldr	r2, [r7, #28]
 8014290:	611a      	str	r2, [r3, #16]
			/* Nothing. */
		}

		/* The SYN+ACK has been confirmed, increase the next sequence number by
		1. */
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8014292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014294:	69db      	ldr	r3, [r3, #28]
 8014296:	1c5a      	adds	r2, r3, #1
 8014298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429a:	62da      	str	r2, [r3, #44]	; 0x2c
				pxSocket->u.xTCP.usRemotePort,
				( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
		}
		#endif /* ipconfigUSE_TCP_WIN */

		if( ( pxSocket->u.xTCP.ucTCPState == ( EventBits_t ) eCONNECT_SYN ) || ( ulReceiveLength != 0UL ) )
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80142a2:	2b02      	cmp	r3, #2
 80142a4:	d002      	beq.n	80142ac <prvHandleSynReceived+0x18c>
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d00f      	beq.n	80142cc <prvHandleSynReceived+0x1ac>
		{
			pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80142ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ae:	2210      	movs	r2, #16
 80142b0:	735a      	strb	r2, [r3, #13]

			uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80142b2:	683b      	ldr	r3, [r7, #0]
 80142b4:	3328      	adds	r3, #40	; 0x28
 80142b6:	61bb      	str	r3, [r7, #24]
			xSendLength = ( BaseType_t ) uxIntermediateResult;
 80142b8:	69bb      	ldr	r3, [r7, #24]
 80142ba:	637b      	str	r3, [r7, #52]	; 0x34
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80142bc:	683b      	ldr	r3, [r7, #0]
 80142be:	b2db      	uxtb	r3, r3
 80142c0:	3314      	adds	r3, #20
 80142c2:	b2db      	uxtb	r3, r3
 80142c4:	009b      	lsls	r3, r3, #2
 80142c6:	b2da      	uxtb	r2, r3
 80142c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ca:	731a      	strb	r2, [r3, #12]
		}
		#if( ipconfigUSE_TCP_WIN != 0 )
		{
			if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80142d2:	f003 0310 	and.w	r3, r3, #16
 80142d6:	b2db      	uxtb	r3, r3
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d107      	bne.n	80142ec <prvHandleSynReceived+0x1cc>
			{
				/* The other party did not send a scaling factor.
				A shifting factor in this side must be canceled. */
				pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	2200      	movs	r2, #0
 80142e0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	2200      	movs	r2, #0
 80142e8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
			}
		}
		#endif /* ipconfigUSE_TCP_WIN */
		/* This was the third step of connecting: SYN, SYN+ACK, ACK	so now the
		connection is established. */
		vTCPStateChange( pxSocket, eESTABLISHED );
 80142ec:	2105      	movs	r1, #5
 80142ee:	68f8      	ldr	r0, [r7, #12]
 80142f0:	f7ff f9b5 	bl	801365e <vTCPStateChange>
	}

	return xSendLength;
 80142f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	3738      	adds	r7, #56	; 0x38
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}

080142fe <prvHandleEstablished>:
 * the code will check if it may be accepted, i.e. if all expected data has been
 * completely received.
 */
static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 80142fe:	b580      	push	{r7, lr}
 8014300:	b096      	sub	sp, #88	; 0x58
 8014302:	af02      	add	r7, sp, #8
 8014304:	60f8      	str	r0, [r7, #12]
 8014306:	60b9      	str	r1, [r7, #8]
 8014308:	607a      	str	r2, [r7, #4]
 801430a:	603b      	str	r3, [r7, #0]
/* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
ProtocolHeaders_t *pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	699b      	ldr	r3, [r3, #24]
 8014312:	3322      	adds	r3, #34	; 0x22
 8014314:	4618      	mov	r0, r3
 8014316:	f7fe faa9 	bl	801286c <vCastPointerTo_ProtocolHeaders_t>
 801431a:	6478      	str	r0, [r7, #68]	; 0x44
	&( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
TCPHeader_t *pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 801431c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801431e:	643b      	str	r3, [r7, #64]	; 0x40
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	33d8      	adds	r3, #216	; 0xd8
 8014324:	63fb      	str	r3, [r7, #60]	; 0x3c
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8014326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014328:	7b5b      	ldrb	r3, [r3, #13]
 801432a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 801432e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	061a      	lsls	r2, r3, #24
 8014334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014336:	685b      	ldr	r3, [r3, #4]
 8014338:	021b      	lsls	r3, r3, #8
 801433a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801433e:	431a      	orrs	r2, r3
 8014340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014342:	685b      	ldr	r3, [r3, #4]
 8014344:	0a1b      	lsrs	r3, r3, #8
 8014346:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801434a:	431a      	orrs	r2, r3
 801434c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	0e1b      	lsrs	r3, r3, #24
 8014352:	4313      	orrs	r3, r2
 8014354:	637b      	str	r3, [r7, #52]	; 0x34
 8014356:	2300      	movs	r3, #0
 8014358:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 801435a:	2300      	movs	r3, #0
 801435c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801435e:	2300      	movs	r3, #0
 8014360:	64bb      	str	r3, [r7, #72]	; 0x48
int32_t lDistance, lSendResult;
uint16_t usWindow;
UBaseType_t uxIntermediateResult = 0;
 8014362:	2300      	movs	r3, #0
 8014364:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Remember the window size the peer is advertising. */
	usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8014366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014368:	89db      	ldrh	r3, [r3, #14]
 801436a:	b29b      	uxth	r3, r3
 801436c:	021b      	lsls	r3, r3, #8
 801436e:	b21a      	sxth	r2, r3
 8014370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014372:	89db      	ldrh	r3, [r3, #14]
 8014374:	b29b      	uxth	r3, r3
 8014376:	0a1b      	lsrs	r3, r3, #8
 8014378:	b29b      	uxth	r3, r3
 801437a:	b21b      	sxth	r3, r3
 801437c:	4313      	orrs	r3, r2
 801437e:	b21b      	sxth	r3, r3
 8014380:	857b      	strh	r3, [r7, #42]	; 0x2a
	pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8014382:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	#if( ipconfigUSE_TCP_WIN != 0 )
	{
		pxSocket->u.xTCP.ulWindowSize =
			( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014390:	68fa      	ldr	r2, [r7, #12]
 8014392:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 8014396:	fa03 f202 	lsl.w	r2, r3, r2
		pxSocket->u.xTCP.ulWindowSize =
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) != 0U )
 80143a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80143a4:	f003 0310 	and.w	r3, r3, #16
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d03c      	beq.n	8014426 <prvHandleEstablished+0x128>
	{
		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 80143ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143ae:	689b      	ldr	r3, [r3, #8]
 80143b0:	061a      	lsls	r2, r3, #24
 80143b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143b4:	689b      	ldr	r3, [r3, #8]
 80143b6:	021b      	lsls	r3, r3, #8
 80143b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80143bc:	431a      	orrs	r2, r3
 80143be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143c0:	689b      	ldr	r3, [r3, #8]
 80143c2:	0a1b      	lsrs	r3, r3, #8
 80143c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80143c8:	431a      	orrs	r2, r3
 80143ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143cc:	689b      	ldr	r3, [r3, #8]
 80143ce:	0e1b      	lsrs	r3, r3, #24
 80143d0:	4313      	orrs	r3, r2
 80143d2:	4619      	mov	r1, r3
 80143d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80143d6:	f001 fdbd 	bl	8015f54 <ulTCPWindowTxAck>
 80143da:	6278      	str	r0, [r7, #36]	; 0x24

		/* ulTCPWindowTxAck() returns the number of bytes which have been acked,
		starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
		txStream. */
		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d020      	beq.n	8014426 <prvHandleEstablished+0x128>
 80143e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d01d      	beq.n	8014426 <prvHandleEstablished+0x128>
		{
			/* Just advancing the tail index, 'ulCount' bytes have been
			confirmed, and because there is new space in the txStream, the
			user/owner should be woken up. */
			/* _HT_ : only in case the socket's waiting? */
			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80143ee:	2300      	movs	r3, #0
 80143f0:	9300      	str	r3, [sp, #0]
 80143f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f4:	2200      	movs	r2, #0
 80143f6:	2100      	movs	r1, #0
 80143f8:	f7fe f8e2 	bl	80125c0 <uxStreamBufferGet>
 80143fc:	4603      	mov	r3, r0
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d011      	beq.n	8014426 <prvHandleEstablished+0x128>
			{
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	f043 0202 	orr.w	r2, r3, #2
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014412:	f003 0302 	and.w	r3, r3, #2
 8014416:	2b00      	cmp	r3, #0
 8014418:	d005      	beq.n	8014426 <prvHandleEstablished+0x128>
					{
						pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	601a      	str	r2, [r3, #0]
		}
	}

	/* If this socket has a stream for transmission, add the data to the
	outgoing segment(s). */
	if( pxSocket->u.xTCP.txStream != NULL )
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801442a:	2b00      	cmp	r3, #0
 801442c:	d002      	beq.n	8014434 <prvHandleEstablished+0x136>
	{
		prvTCPAddTxData( pxSocket );
 801442e:	68f8      	ldr	r0, [r7, #12]
 8014430:	f7ff fc4c 	bl	8013ccc <prvTCPAddTxData>
	}

	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8014434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014436:	6a1a      	ldr	r2, [r3, #32]
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014444:	f003 0320 	and.w	r3, r3, #32
 8014448:	b2db      	uxtb	r3, r3
 801444a:	2b00      	cmp	r3, #0
 801444c:	d105      	bne.n	801445a <prvHandleEstablished+0x15c>
 801444e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014452:	f003 0301 	and.w	r3, r3, #1
 8014456:	2b00      	cmp	r3, #0
 8014458:	d039      	beq.n	80144ce <prvHandleEstablished+0x1d0>
	{
		/* Peer is requesting to stop, see if we're really finished. */
		xMayClose = pdTRUE;
 801445a:	2301      	movs	r3, #1
 801445c:	64bb      	str	r3, [r7, #72]	; 0x48

		/* Checks are only necessary if we haven't sent a FIN yet. */
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014468:	b2db      	uxtb	r3, r3
 801446a:	2b00      	cmp	r3, #0
 801446c:	d11e      	bne.n	80144ac <prvHandleEstablished+0x1ae>
		{
			/* xTCPWindowTxDone returns true when all Tx queues are empty. */
			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 801446e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014470:	f000 ff7a 	bl	8015368 <xTCPWindowRxEmpty>
 8014474:	6238      	str	r0, [r7, #32]
			bTxDone		= xTCPWindowTxDone( pxTCPWindow );
 8014476:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014478:	f001 fabe 	bl	80159f8 <xTCPWindowTxDone>
 801447c:	61f8      	str	r0, [r7, #28]

			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 801447e:	6a3b      	ldr	r3, [r7, #32]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d002      	beq.n	801448a <prvHandleEstablished+0x18c>
 8014484:	69fb      	ldr	r3, [r7, #28]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d102      	bne.n	8014490 <prvHandleEstablished+0x192>
				/* Refusing FIN: Rx incomp 1 optlen 4 tx done 1. */
				FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					bRxComplete, bTxDone ) );
				xMayClose = pdFALSE;
 801448a:	2300      	movs	r3, #0
 801448c:	64bb      	str	r3, [r7, #72]	; 0x48
 801448e:	e00d      	b.n	80144ac <prvHandleEstablished+0x1ae>
			}
			else
			{
				ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8014490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	441a      	add	r2, r3
 8014496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014498:	691b      	ldr	r3, [r3, #16]
 801449a:	1ad3      	subs	r3, r2, r3
 801449c:	633b      	str	r3, [r7, #48]	; 0x30
				lDistance = ( int32_t ) ulIntermediateResult;
 801449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144a0:	61bb      	str	r3, [r7, #24]

				if( lDistance > 1 )
 80144a2:	69bb      	ldr	r3, [r7, #24]
 80144a4:	2b01      	cmp	r3, #1
 80144a6:	dd01      	ble.n	80144ac <prvHandleEstablished+0x1ae>
				{
					FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
						lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
						pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

					xMayClose = pdFALSE;
 80144a8:	2300      	movs	r3, #0
 80144aa:	64bb      	str	r3, [r7, #72]	; 0x48
			FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
				xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
				pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
		}

		if( xMayClose != pdFALSE )
 80144ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d00d      	beq.n	80144ce <prvHandleEstablished+0x1d0>
		{
			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 80144b2:	68fa      	ldr	r2, [r7, #12]
 80144b4:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 80144b8:	f043 0320 	orr.w	r3, r3, #32
 80144bc:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	4619      	mov	r1, r3
 80144c6:	68f8      	ldr	r0, [r7, #12]
 80144c8:	f7ff fc2a 	bl	8013d20 <prvTCPHandleFin>
 80144cc:	64f8      	str	r0, [r7, #76]	; 0x4c
		}
	}

	if( xMayClose == pdFALSE )
 80144ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d12c      	bne.n	801452e <prvHandleEstablished+0x230>
	{
		pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80144d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144d6:	2210      	movs	r2, #16
 80144d8:	735a      	strb	r2, [r3, #13]

		if( ulReceiveLength != 0U )
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d018      	beq.n	8014512 <prvHandleEstablished+0x214>
		{
			uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	3328      	adds	r3, #40	; 0x28
 80144e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			xSendLength = ( BaseType_t ) uxIntermediateResult;
 80144e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e8:	64fb      	str	r3, [r7, #76]	; 0x4c
			/* TCP-offsett equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	b2db      	uxtb	r3, r3
 80144ee:	3314      	adds	r3, #20
 80144f0:	b2db      	uxtb	r3, r3
 80144f2:	009b      	lsls	r3, r3, #2
 80144f4:	b2da      	uxtb	r2, r3
 80144f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144f8:	731a      	strb	r2, [r3, #12]

			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014504:	b2db      	uxtb	r3, r3
 8014506:	2b00      	cmp	r3, #0
 8014508:	d003      	beq.n	8014512 <prvHandleEstablished+0x214>
			{
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 801450a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801450c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801450e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014510:	621a      	str	r2, [r3, #32]
		/* Now get data to be transmitted. */
		/* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
		can not	send-out both TCP options and also a full packet. Sending
		options (SACK) is always more urgent than sending data, which can be
		sent later. */
		if( uxOptionsLength == 0U )
 8014512:	683b      	ldr	r3, [r7, #0]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d10a      	bne.n	801452e <prvHandleEstablished+0x230>
		{
			/* prvTCPPrepareSend might allocate a bigger network buffer, if
			necessary. */
			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8014518:	683a      	ldr	r2, [r7, #0]
 801451a:	68b9      	ldr	r1, [r7, #8]
 801451c:	68f8      	ldr	r0, [r7, #12]
 801451e:	f7ff f9ef 	bl	8013900 <prvTCPPrepareSend>
 8014522:	6178      	str	r0, [r7, #20]
			if( lSendResult > 0 )
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	2b00      	cmp	r3, #0
 8014528:	dd01      	ble.n	801452e <prvHandleEstablished+0x230>
			{
				xSendLength = ( BaseType_t ) lSendResult;
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
		}
	}

	return xSendLength;
 801452e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014530:	4618      	mov	r0, r3
 8014532:	3750      	adds	r7, #80	; 0x50
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}

08014538 <prvSendData>:
 * ipconfigUSE_TCP_WIN is defined, and if only an ACK must be sent, it will be
 * checked if it would better be postponed for efficiency.
 */
static BaseType_t prvSendData( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, BaseType_t xByteCount )
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b08c      	sub	sp, #48	; 0x30
 801453c:	af00      	add	r7, sp, #0
 801453e:	60f8      	str	r0, [r7, #12]
 8014540:	60b9      	str	r1, [r7, #8]
 8014542:	607a      	str	r2, [r7, #4]
 8014544:	603b      	str	r3, [r7, #0]
/* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
const ProtocolHeaders_t *pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	699b      	ldr	r3, [r3, #24]
 801454c:	3322      	adds	r3, #34	; 0x22
 801454e:	4618      	mov	r0, r3
 8014550:	f7fe f98c 	bl	801286c <vCastPointerTo_ProtocolHeaders_t>
 8014554:	62b8      	str	r0, [r7, #40]	; 0x28
	&( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
const TCPHeader_t *pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8014556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014558:	627b      	str	r3, [r7, #36]	; 0x24
const TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	33d8      	adds	r3, #216	; 0xd8
 801455e:	623b      	str	r3, [r7, #32]
/* Find out what window size we may advertised. */
int32_t lRxSpace;
BaseType_t xSendLength = xByteCount;
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	62fb      	str	r3, [r7, #44]	; 0x2c
	#endif
#endif

	/* Set the time-out field, so that we'll be called by the IP-task in case no
	next message will be received. */
	ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014568:	6a3b      	ldr	r3, [r7, #32]
 801456a:	691b      	ldr	r3, [r3, #16]
 801456c:	1ad3      	subs	r3, r2, r3
 801456e:	61fb      	str	r3, [r7, #28]
	lRxSpace = ( int32_t ) ulRxBufferSpace;
 8014570:	69fb      	ldr	r3, [r7, #28]
 8014572:	61bb      	str	r3, [r7, #24]
	#if ipconfigUSE_TCP_WIN == 1
	{

		#if( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
		{
			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801457a:	005b      	lsls	r3, r3, #1
 801457c:	617b      	str	r3, [r7, #20]
		#endif /* ipconfigTCP_ACK_EARLIER_PACKET */

		/* In case we're receiving data continuously, we might postpone sending
		an ACK to gain performance. */
		/* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
		if( ( ulReceiveLength > 0U ) &&							/* Data was sent to this socket. */
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d04b      	beq.n	801461c <prvSendData+0xe4>
 8014584:	69ba      	ldr	r2, [r7, #24]
 8014586:	697b      	ldr	r3, [r7, #20]
 8014588:	429a      	cmp	r2, r3
 801458a:	db47      	blt.n	801461c <prvSendData+0xe4>
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014596:	b2db      	uxtb	r3, r3
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
 8014598:	2b00      	cmp	r3, #0
 801459a:	d13f      	bne.n	801461c <prvSendData+0xe4>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 801459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801459e:	2b28      	cmp	r3, #40	; 0x28
 80145a0:	d13c      	bne.n	801461c <prvSendData+0xe4>
			( xSendLength == ipNUMERIC_CAST( BaseType_t, uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
			( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&	/* Connection established. */
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
			( xSendLength == ipNUMERIC_CAST( BaseType_t, uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
 80145a8:	2b05      	cmp	r3, #5
 80145aa:	d137      	bne.n	801461c <prvSendData+0xe4>
			( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */
 80145ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ae:	7b5b      	ldrb	r3, [r3, #13]
			( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&	/* Connection established. */
 80145b0:	2b10      	cmp	r3, #16
 80145b2:	d133      	bne.n	801461c <prvSendData+0xe4>
		{
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	429a      	cmp	r2, r3
 80145be:	d00c      	beq.n	80145da <prvSendData+0xa2>
			{
				/* There was still a delayed in queue, delete it. */
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d004      	beq.n	80145d2 <prvSendData+0x9a>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80145cc:	4618      	mov	r0, r3
 80145ce:	f001 ff77 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
				}

				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 80145d2:	68bb      	ldr	r3, [r7, #8]
 80145d4:	681a      	ldr	r2, [r3, #0]
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	67da      	str	r2, [r3, #124]	; 0x7c
			}
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80145e0:	461a      	mov	r2, r3
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	4293      	cmp	r3, r2
 80145e6:	d307      	bcc.n	80145f8 <prvSendData+0xc0>
				( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS space in the Rx buffer. */
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80145ee:	005b      	lsls	r3, r3, #1
 80145f0:	461a      	mov	r2, r3
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	4293      	cmp	r3, r2
 80145f6:	da04      	bge.n	8014602 <prvSendData+0xca>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	2202      	movs	r2, #2
 80145fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014600:	e003      	b.n	801460a <prvSendData+0xd2>
			else
			{
				/* Normally a delayed ACK should wait 200 ms for a next incoming
				packet.  Only wait 20 ms here to gain performance.  A slow ACK
				for full-size message. */
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	2214      	movs	r2, #20
 8014606:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			}

			if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801460a:	4b18      	ldr	r3, [pc, #96]	; (801466c <prvSendData+0x134>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	2b01      	cmp	r3, #1
					pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
					xSendLength,
					pxSocket->u.xTCP.usTimeout, lRxSpace ) );
			}

			*ppxNetworkBuffer = NULL;
 8014610:	68bb      	ldr	r3, [r7, #8]
 8014612:	2200      	movs	r2, #0
 8014614:	601a      	str	r2, [r3, #0]
			xSendLength = 0;
 8014616:	2300      	movs	r3, #0
 8014618:	62fb      	str	r3, [r7, #44]	; 0x2c
 801461a:	e011      	b.n	8014640 <prvSendData+0x108>
		}
		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014620:	2b00      	cmp	r3, #0
 8014622:	d00d      	beq.n	8014640 <prvSendData+0x108>
		{
			/* As an ACK is not being delayed, remove any earlier delayed ACK
			message. */
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	429a      	cmp	r2, r3
 801462e:	d004      	beq.n	801463a <prvSendData+0x102>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014634:	4618      	mov	r0, r3
 8014636:	f001 ff43 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
			}

			pxSocket->u.xTCP.pxAckMessage = NULL;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	2200      	movs	r2, #0
 801463e:	67da      	str	r2, [r3, #124]	; 0x7c
		( void ) pxTCPHeader;
		( void ) lRxSpace;
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xSendLength != 0 )
 8014640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014642:	2b00      	cmp	r3, #0
 8014644:	d00c      	beq.n	8014660 <prvSendData+0x128>
	{
		if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8014646:	4b09      	ldr	r3, [pc, #36]	; (801466c <prvSendData+0x134>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	2b01      	cmp	r3, #1
				xSendLength ) );
		}

		/* Set the parameter 'xReleaseAfterSend' to the value of
		ipconfigZERO_COPY_TX_DRIVER. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	6819      	ldr	r1, [r3, #0]
 8014650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014652:	2301      	movs	r3, #1
 8014654:	68f8      	ldr	r0, [r7, #12]
 8014656:	f7fe fae1 	bl	8012c1c <prvTCPReturnPacket>
		#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
		{
			/* The driver has taken ownership of the Network Buffer. */
			*ppxNetworkBuffer = NULL;
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	2200      	movs	r2, #0
 801465e:	601a      	str	r2, [r3, #0]
		}
		#endif
	}

	return xSendLength;
 8014660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8014662:	4618      	mov	r0, r3
 8014664:	3730      	adds	r7, #48	; 0x30
 8014666:	46bd      	mov	sp, r7
 8014668:	bd80      	pop	{r7, pc}
 801466a:	bf00      	nop
 801466c:	24005344 	.word	0x24005344

08014670 <prvTCPHandleState>:
 *
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b08c      	sub	sp, #48	; 0x30
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	6039      	str	r1, [r7, #0]
/* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
ProtocolHeaders_t *pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	699b      	ldr	r3, [r3, #24]
 8014680:	3322      	adds	r3, #34	; 0x22
 8014682:	4618      	mov	r0, r3
 8014684:	f7fe f8f2 	bl	801286c <vCastPointerTo_ProtocolHeaders_t>
 8014688:	62b8      	str	r0, [r7, #40]	; 0x28
	&( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
TCPHeader_t *pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801468c:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0;
 801468e:	2300      	movs	r3, #0
 8014690:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t ulReceiveLength;	/* Number of bytes contained in the TCP message. */
uint8_t *pucRecvData;
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 8014692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	061a      	lsls	r2, r3, #24
 8014698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	021b      	lsls	r3, r3, #8
 801469e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80146a2:	431a      	orrs	r2, r3
 80146a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a6:	685b      	ldr	r3, [r3, #4]
 80146a8:	0a1b      	lsrs	r3, r3, #8
 80146aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80146ae:	431a      	orrs	r2, r3
 80146b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b2:	685b      	ldr	r3, [r3, #4]
 80146b4:	0e1b      	lsrs	r3, r3, #24
 80146b6:	4313      	orrs	r3, r2
 80146b8:	623b      	str	r3, [r7, #32]
	/* uxOptionsLength: the size of the options to be sent (always a multiple of
	4 bytes)
	1. in the SYN phase, we shall communicate the MSS
	2. in case of a SACK, Selective ACK, ack a segment which comes in
	out-of-order. */
UBaseType_t uxOptionsLength = 0U;
 80146ba:	2300      	movs	r3, #0
 80146bc:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80146be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c0:	7b5b      	ldrb	r3, [r3, #13]
 80146c2:	76fb      	strb	r3, [r7, #27]
TCPWindow_t *pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	33d8      	adds	r3, #216	; 0xd8
 80146c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxIntermediateResult = 0;
 80146ca:	2300      	movs	r3, #0
 80146cc:	613b      	str	r3, [r7, #16]

	/* First get the length and the position of the received data, if any.
	pucRecvData will point to the first byte of the TCP payload. */
	ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 80146ce:	683b      	ldr	r3, [r7, #0]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	f107 0208 	add.w	r2, r7, #8
 80146d6:	4611      	mov	r1, r2
 80146d8:	4618      	mov	r0, r3
 80146da:	f7ff fbcd 	bl	8013e78 <prvCheckRxData>
 80146de:	4603      	mov	r3, r0
 80146e0:	60fb      	str	r3, [r7, #12]

	if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80146e8:	2b04      	cmp	r3, #4
 80146ea:	d90c      	bls.n	8014706 <prvTCPHandleState+0x96>
	{
		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	691a      	ldr	r2, [r3, #16]
 80146f0:	6a3b      	ldr	r3, [r7, #32]
 80146f2:	3301      	adds	r3, #1
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d106      	bne.n	8014706 <prvTCPHandleState+0x96>
		{
			/* This is most probably a keep-alive message from peer.  Setting
			'bWinChange' doesn't cause a window-size-change, the flag is used
			here to force sending an immediate ACK. */
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80146f8:	687a      	ldr	r2, [r7, #4]
 80146fa:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 80146fe:	f043 0301 	orr.w	r3, r3, #1
 8014702:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		}
	}

	/* Keep track of the highest sequence number that might be expected within
	this connection. */
	if( ( ipNUMERIC_CAST( int32_t, ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0L )
 8014706:	6a3a      	ldr	r2, [r7, #32]
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	441a      	add	r2, r3
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	699b      	ldr	r3, [r3, #24]
 8014710:	1ad3      	subs	r3, r2, r3
 8014712:	2b00      	cmp	r3, #0
 8014714:	dd04      	ble.n	8014720 <prvTCPHandleState+0xb0>
	{
		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8014716:	6a3a      	ldr	r2, [r7, #32]
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	441a      	add	r2, r3
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	619a      	str	r2, [r3, #24]
	}

	/* Storing data may result in a fatal error if malloc() fails. */
	if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 8014720:	68b9      	ldr	r1, [r7, #8]
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	681a      	ldr	r2, [r3, #0]
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7ff fc21 	bl	8013f70 <prvStoreRxData>
 801472e:	4603      	mov	r3, r0
 8014730:	2b00      	cmp	r3, #0
 8014732:	da03      	bge.n	801473c <prvTCPHandleState+0xcc>
	{
		xSendLength = -1;
 8014734:	f04f 33ff 	mov.w	r3, #4294967295
 8014738:	62fb      	str	r3, [r7, #44]	; 0x2c
 801473a:	e0a3      	b.n	8014884 <prvTCPHandleState+0x214>
	}
	else
	{
		uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	4619      	mov	r1, r3
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f7ff fc8b 	bl	801405e <prvSetOptions>
 8014748:	61f8      	str	r0, [r7, #28]

		if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8014750:	2b04      	cmp	r3, #4
 8014752:	d108      	bne.n	8014766 <prvTCPHandleState+0xf6>
 8014754:	7efb      	ldrb	r3, [r7, #27]
 8014756:	f003 031f 	and.w	r3, r3, #31
 801475a:	2b02      	cmp	r3, #2
 801475c:	d103      	bne.n	8014766 <prvTCPHandleState+0xf6>

			/* In eSYN_RECEIVED a simple ACK is expected, but apparently the
			'SYN+ACK' didn't arrive.  Step back to the previous state in which
			a first incoming SYN is handled.  The SYN was counted already so
			decrease it first. */
			vTCPStateChange( pxSocket, eSYN_FIRST );
 801475e:	2103      	movs	r1, #3
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f7fe ff7c 	bl	801365e <vTCPStateChange>
		}

		if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 8014766:	7efb      	ldrb	r3, [r7, #27]
 8014768:	f003 0301 	and.w	r3, r3, #1
 801476c:	2b00      	cmp	r3, #0
 801476e:	d022      	beq.n	80147b6 <prvTCPHandleState+0x146>
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014776:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801477a:	b2db      	uxtb	r3, r3
 801477c:	2b00      	cmp	r3, #0
 801477e:	d11a      	bne.n	80147b6 <prvTCPHandleState+0x146>
		{
			/* It's the first time a FIN has been received, remember its
			sequence number. */
			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8014780:	6a3a      	ldr	r2, [r7, #32]
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	441a      	add	r2, r3
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	615a      	str	r2, [r3, #20]
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 801478a:	687a      	ldr	r2, [r7, #4]
 801478c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8014790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014794:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Was peer the first one to send a FIN? */
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d106      	bne.n	80147b6 <prvTCPHandleState+0x146>
			{
				/* If so, don't send the-last-ACK. */
				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 80147a8:	687a      	ldr	r2, [r7, #4]
 80147aa:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 80147ae:	f043 0302 	orr.w	r3, r3, #2
 80147b2:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			}
		}

		switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80147bc:	2b0b      	cmp	r3, #11
 80147be:	d860      	bhi.n	8014882 <prvTCPHandleState+0x212>
 80147c0:	a201      	add	r2, pc, #4	; (adr r2, 80147c8 <prvTCPHandleState+0x158>)
 80147c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c6:	bf00      	nop
 80147c8:	08014883 	.word	0x08014883
 80147cc:	08014883 	.word	0x08014883
 80147d0:	08014851 	.word	0x08014851
 80147d4:	080147f9 	.word	0x080147f9
 80147d8:	08014851 	.word	0x08014851
 80147dc:	08014863 	.word	0x08014863
 80147e0:	08014873 	.word	0x08014873
 80147e4:	08014873 	.word	0x08014873
 80147e8:	08014883 	.word	0x08014883
 80147ec:	08014883 	.word	0x08014883
 80147f0:	08014873 	.word	0x08014873
 80147f4:	08014883 	.word	0x08014883
							socket. */
			{
				/* A new socket has been created, reply with a SYN+ACK.
				Acknowledge with seq+1 because the SYN is seen as pseudo data
				with len = 1. */
				uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 80147f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f7fe feba 	bl	8013574 <prvSetSynAckOptions>
 8014800:	61f8      	str	r0, [r7, #28]
				pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 8014802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014804:	2212      	movs	r2, #18
 8014806:	735a      	strb	r2, [r3, #13]

				uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8014808:	69fb      	ldr	r3, [r7, #28]
 801480a:	3328      	adds	r3, #40	; 0x28
 801480c:	613b      	str	r3, [r7, #16]
				xSendLength = ( BaseType_t ) uxIntermediateResult;
 801480e:	693b      	ldr	r3, [r7, #16]
 8014810:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
				uxOptionsLength is a multiple of 4.  The complete expression is:
				ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8014812:	69fb      	ldr	r3, [r7, #28]
 8014814:	b2db      	uxtb	r3, r3
 8014816:	3314      	adds	r3, #20
 8014818:	b2db      	uxtb	r3, r3
 801481a:	009b      	lsls	r3, r3, #2
 801481c:	b2da      	uxtb	r2, r3
 801481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014820:	731a      	strb	r2, [r3, #12]
				vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8014822:	2104      	movs	r1, #4
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f7fe ff1a 	bl	801365e <vTCPStateChange>

				pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1UL;
 801482a:	6a3b      	ldr	r3, [r7, #32]
 801482c:	1c5a      	adds	r2, r3, #1
 801482e:	697b      	ldr	r3, [r7, #20]
 8014830:	619a      	str	r2, [r3, #24]
				pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1UL;
 8014832:	6a3b      	ldr	r3, [r7, #32]
 8014834:	1c5a      	adds	r2, r3, #1
 8014836:	697b      	ldr	r3, [r7, #20]
 8014838:	611a      	str	r2, [r3, #16]
				pxTCPWindow->ulNextTxSequenceNumber     = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 801483a:	697b      	ldr	r3, [r7, #20]
 801483c:	69db      	ldr	r3, [r3, #28]
 801483e:	1c5a      	adds	r2, r3, #1
 8014840:	697b      	ldr	r3, [r7, #20]
 8014842:	635a      	str	r2, [r3, #52]	; 0x34
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */
 8014844:	697b      	ldr	r3, [r7, #20]
 8014846:	69db      	ldr	r3, [r3, #28]
 8014848:	1c5a      	adds	r2, r3, #1
 801484a:	697b      	ldr	r3, [r7, #20]
 801484c:	621a      	str	r2, [r3, #32]
			}
			break;
 801484e:	e019      	b.n	8014884 <prvTCPHandleState+0x214>
		case eCONNECT_SYN:	/* (client) also called SYN_SENT: we've just send a
							SYN, expect	a SYN+ACK and send a ACK now. */
			/* Fall through */
		case eSYN_RECEIVED:	/* (server) we've had a SYN, replied with SYN+SCK
							expect a ACK and do nothing. */
			xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	6819      	ldr	r1, [r3, #0]
 8014854:	69fb      	ldr	r3, [r7, #28]
 8014856:	68fa      	ldr	r2, [r7, #12]
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f7ff fc61 	bl	8014120 <prvHandleSynReceived>
 801485e:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 8014860:	e010      	b.n	8014884 <prvTCPHandleState+0x214>
		case eESTABLISHED:	/* (server + client) an open connection, data
							received can be	delivered to the user. The normal
							state for the data transfer phase of the connection
							The closing states are also handled here with the
							use of some flags. */
			xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 8014862:	69fb      	ldr	r3, [r7, #28]
 8014864:	68fa      	ldr	r2, [r7, #12]
 8014866:	6839      	ldr	r1, [r7, #0]
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f7ff fd48 	bl	80142fe <prvHandleEstablished>
 801486e:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 8014870:	e008      	b.n	8014884 <prvTCPHandleState+0x214>
			/* Fall through */
		case eFIN_WAIT_1:	/* (server + client) waiting for a connection termination request from the remote TCP,
							 * or an acknowledgement of the connection termination request previously sent. */
			/* Fall through */
		case eFIN_WAIT_2:	/* (server + client) waiting for a connection termination request from the remote TCP. */
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	4619      	mov	r1, r3
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f7ff fa51 	bl	8013d20 <prvTCPHandleFin>
 801487e:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 8014880:	e000      	b.n	8014884 <prvTCPHandleState+0x214>
							implemented implicitly by settings flags like
							'bFinSent', 'bFinRecv', and 'bFinAcked'. */
			break;
		default:
			/* No more known states. */
			break;
 8014882:	bf00      	nop
		}
	}

	if( xSendLength > 0 )
 8014884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014886:	2b00      	cmp	r3, #0
 8014888:	dd06      	ble.n	8014898 <prvTCPHandleState+0x228>
	{
		xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 801488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801488c:	68fa      	ldr	r2, [r7, #12]
 801488e:	6839      	ldr	r1, [r7, #0]
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	f7ff fe51 	bl	8014538 <prvSendData>
 8014896:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	return xSendLength;
 8014898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801489a:	4618      	mov	r0, r3
 801489c:	3730      	adds	r7, #48	; 0x30
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}
 80148a2:	bf00      	nop

080148a4 <prvTCPSendSpecialPacketHelper>:
/*-----------------------------------------------------------*/

static BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t *pxNetworkBuffer,
												 uint8_t ucTCPFlags )
{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b084      	sub	sp, #16
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
 80148ac:	460b      	mov	r3, r1
 80148ae:	70fb      	strb	r3, [r7, #3]
	( void ) pxNetworkBuffer;
	( void ) ucTCPFlags;
#else
	{
		/* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */
		TCPPacket_t *pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	699b      	ldr	r3, [r3, #24]
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7fd ffc3 	bl	8012840 <vCastPointerTo_TCPPacket_t>
 80148ba:	60f8      	str	r0, [r7, #12]
		const uint32_t ulSendLength = ( uint32_t )
 80148bc:	2328      	movs	r3, #40	; 0x28
 80148be:	60bb      	str	r3, [r7, #8]
			( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ); /* Plus 0 options. */

		pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	78fa      	ldrb	r2, [r7, #3]
 80148c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2250      	movs	r2, #80	; 0x50
 80148cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80148d0:	2300      	movs	r3, #0
 80148d2:	68ba      	ldr	r2, [r7, #8]
 80148d4:	6879      	ldr	r1, [r7, #4]
 80148d6:	2000      	movs	r0, #0
 80148d8:	f7fe f9a0 	bl	8012c1c <prvTCPReturnPacket>
	}
#endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

	/* The packet was not consumed. */
	return pdFAIL;
 80148dc:	2300      	movs	r3, #0
}
 80148de:	4618      	mov	r0, r3
 80148e0:	3710      	adds	r7, #16
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bd80      	pop	{r7, pc}

080148e6 <prvTCPSendChallengeAck>:
/*-----------------------------------------------------------*/

static BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 80148e6:	b580      	push	{r7, lr}
 80148e8:	b082      	sub	sp, #8
 80148ea:	af00      	add	r7, sp, #0
 80148ec:	6078      	str	r0, [r7, #4]
	return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 80148ee:	2110      	movs	r1, #16
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f7ff ffd7 	bl	80148a4 <prvTCPSendSpecialPacketHelper>
 80148f6:	4603      	mov	r3, r0
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3708      	adds	r7, #8
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}

08014900 <prvTCPSendReset>:
/*-----------------------------------------------------------*/

static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
	return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 8014908:	2114      	movs	r1, #20
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f7ff ffca 	bl	80148a4 <prvTCPSendSpecialPacketHelper>
 8014910:	4603      	mov	r3, r0
										  ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
}
 8014912:	4618      	mov	r0, r3
 8014914:	3708      	adds	r7, #8
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}
	...

0801491c <prvSocketSetMSS>:
/*-----------------------------------------------------------*/

static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket )
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
uint32_t ulMSS = ipconfigTCP_MSS;
 8014924:	f44f 6391 	mov.w	r3, #1160	; 0x488
 8014928:	60fb      	str	r3, [r7, #12]

	if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801492e:	061a      	lsls	r2, r3, #24
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014934:	021b      	lsls	r3, r3, #8
 8014936:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801493a:	431a      	orrs	r2, r3
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014940:	0a1b      	lsrs	r3, r3, #8
 8014942:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014946:	431a      	orrs	r2, r3
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801494c:	0e1b      	lsrs	r3, r3, #24
 801494e:	431a      	orrs	r2, r3
 8014950:	4b0d      	ldr	r3, [pc, #52]	; (8014988 <prvSocketSetMSS+0x6c>)
 8014952:	695b      	ldr	r3, [r3, #20]
 8014954:	405a      	eors	r2, r3
 8014956:	4b0d      	ldr	r3, [pc, #52]	; (801498c <prvSocketSetMSS+0x70>)
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	4013      	ands	r3, r2
 801495c:	2b00      	cmp	r3, #0
 801495e:	d005      	beq.n	801496c <prvSocketSetMSS+0x50>
	{
		/* Data for this peer will pass through a router, and maybe through
		the internet.  Limit the MSS to 1400 bytes or less. */
		ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8014960:	68f9      	ldr	r1, [r7, #12]
 8014962:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8014966:	f7fd feaf 	bl	80126c8 <FreeRTOS_min_uint32>
 801496a:	60f8      	str	r0, [r7, #12]
	}

	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

	pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ulMSS;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	b29a      	uxth	r2, r3
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	pxSocket->u.xTCP.usCurMSS  = ( uint16_t ) ulMSS;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	b29a      	uxth	r2, r3
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 8014980:	bf00      	nop
 8014982:	3710      	adds	r7, #16
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}
 8014988:	2400001c 	.word	0x2400001c
 801498c:	24005290 	.word	0x24005290

08014990 <xProcessReceivedTCPPacket>:
 *		prvTCPSendRepeated()
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC
*/
BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t *pxDescriptor )
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b092      	sub	sp, #72	; 0x48
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
/* Function might modify the parameter. */
NetworkBufferDescriptor_t *pxNetworkBuffer = pxDescriptor;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	60bb      	str	r3, [r7, #8]

/* Map the buffer onto a ProtocolHeaders_t struct for easy access to the fields. */
const ProtocolHeaders_t *pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	699b      	ldr	r3, [r3, #24]
 80149a0:	3322      	adds	r3, #34	; 0x22
 80149a2:	4618      	mov	r0, r3
 80149a4:	f7fd ff6d 	bl	8012882 <vCastConstPointerTo_ProtocolHeaders_t>
 80149a8:	63f8      	str	r0, [r7, #60]	; 0x3c
	&( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
FreeRTOS_Socket_t *pxSocket;
uint16_t ucTCPFlags = pxProtocolHeaders->xTCPHeader.ucTCPFlags;
 80149aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149ac:	7b5b      	ldrb	r3, [r3, #13]
 80149ae:	877b      	strh	r3, [r7, #58]	; 0x3a
uint32_t ulLocalIP;
uint16_t xLocalPort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usDestinationPort );
 80149b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149b2:	885b      	ldrh	r3, [r3, #2]
 80149b4:	b29b      	uxth	r3, r3
 80149b6:	021b      	lsls	r3, r3, #8
 80149b8:	b21a      	sxth	r2, r3
 80149ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149bc:	885b      	ldrh	r3, [r3, #2]
 80149be:	b29b      	uxth	r3, r3
 80149c0:	0a1b      	lsrs	r3, r3, #8
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	b21b      	sxth	r3, r3
 80149c6:	4313      	orrs	r3, r2
 80149c8:	b21b      	sxth	r3, r3
 80149ca:	873b      	strh	r3, [r7, #56]	; 0x38
uint16_t xRemotePort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usSourcePort );
 80149cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149ce:	881b      	ldrh	r3, [r3, #0]
 80149d0:	b29b      	uxth	r3, r3
 80149d2:	021b      	lsls	r3, r3, #8
 80149d4:	b21a      	sxth	r2, r3
 80149d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149d8:	881b      	ldrh	r3, [r3, #0]
 80149da:	b29b      	uxth	r3, r3
 80149dc:	0a1b      	lsrs	r3, r3, #8
 80149de:	b29b      	uxth	r3, r3
 80149e0:	b21b      	sxth	r3, r3
 80149e2:	4313      	orrs	r3, r2
 80149e4:	b21b      	sxth	r3, r3
 80149e6:	86fb      	strh	r3, [r7, #54]	; 0x36
uint32_t ulRemoteIP;
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80149e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	061a      	lsls	r2, r3, #24
 80149ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149f0:	685b      	ldr	r3, [r3, #4]
 80149f2:	021b      	lsls	r3, r3, #8
 80149f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80149f8:	431a      	orrs	r2, r3
 80149fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149fc:	685b      	ldr	r3, [r3, #4]
 80149fe:	0a1b      	lsrs	r3, r3, #8
 8014a00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014a04:	431a      	orrs	r2, r3
 8014a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a08:	685b      	ldr	r3, [r3, #4]
 8014a0a:	0e1b      	lsrs	r3, r3, #24
 8014a0c:	4313      	orrs	r3, r2
 8014a0e:	633b      	str	r3, [r7, #48]	; 0x30
uint32_t ulAckNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulAckNr );;
 8014a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a12:	689b      	ldr	r3, [r3, #8]
 8014a14:	061a      	lsls	r2, r3, #24
 8014a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a18:	689b      	ldr	r3, [r3, #8]
 8014a1a:	021b      	lsls	r3, r3, #8
 8014a1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014a20:	431a      	orrs	r2, r3
 8014a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a24:	689b      	ldr	r3, [r3, #8]
 8014a26:	0a1b      	lsrs	r3, r3, #8
 8014a28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014a2c:	431a      	orrs	r2, r3
 8014a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a30:	689b      	ldr	r3, [r3, #8]
 8014a32:	0e1b      	lsrs	r3, r3, #24
 8014a34:	4313      	orrs	r3, r2
 8014a36:	62fb      	str	r3, [r7, #44]	; 0x2c
BaseType_t xResult = pdPASS;
 8014a38:	2301      	movs	r3, #1
 8014a3a:	643b      	str	r3, [r7, #64]	; 0x40
configASSERT( pxNetworkBuffer != NULL );
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d10b      	bne.n	8014a5a <xProcessReceivedTCPPacket+0xca>
 8014a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a46:	b672      	cpsid	i
 8014a48:	f383 8811 	msr	BASEPRI, r3
 8014a4c:	f3bf 8f6f 	isb	sy
 8014a50:	f3bf 8f4f 	dsb	sy
 8014a54:	b662      	cpsie	i
 8014a56:	617b      	str	r3, [r7, #20]
 8014a58:	e7fe      	b.n	8014a58 <xProcessReceivedTCPPacket+0xc8>
configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	699b      	ldr	r3, [r3, #24]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d10b      	bne.n	8014a7a <xProcessReceivedTCPPacket+0xea>
 8014a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a66:	b672      	cpsid	i
 8014a68:	f383 8811 	msr	BASEPRI, r3
 8014a6c:	f3bf 8f6f 	isb	sy
 8014a70:	f3bf 8f4f 	dsb	sy
 8014a74:	b662      	cpsie	i
 8014a76:	613b      	str	r3, [r7, #16]
 8014a78:	e7fe      	b.n	8014a78 <xProcessReceivedTCPPacket+0xe8>
const IPHeader_t *pxIPHeader;

	/* Check for a minimum packet size. */
	if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	69db      	ldr	r3, [r3, #28]
 8014a7e:	2b35      	cmp	r3, #53	; 0x35
 8014a80:	d802      	bhi.n	8014a88 <xProcessReceivedTCPPacket+0xf8>
	{
		xResult = pdFAIL;
 8014a82:	2300      	movs	r3, #0
 8014a84:	643b      	str	r3, [r7, #64]	; 0x40
 8014a86:	e12b      	b.n	8014ce0 <xProcessReceivedTCPPacket+0x350>
	}
	else
	{
		/* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
		pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	699b      	ldr	r3, [r3, #24]
 8014a8c:	330e      	adds	r3, #14
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f7fd fecb 	bl	801282a <vCastConstPointerTo_IPHeader_t>
 8014a94:	62b8      	str	r0, [r7, #40]	; 0x28
		ulLocalIP = FreeRTOS_htonl( pxIPHeader->ulDestinationIPAddress );
 8014a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a98:	691b      	ldr	r3, [r3, #16]
 8014a9a:	061a      	lsls	r2, r3, #24
 8014a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a9e:	691b      	ldr	r3, [r3, #16]
 8014aa0:	021b      	lsls	r3, r3, #8
 8014aa2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014aa6:	431a      	orrs	r2, r3
 8014aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aaa:	691b      	ldr	r3, [r3, #16]
 8014aac:	0a1b      	lsrs	r3, r3, #8
 8014aae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014ab2:	431a      	orrs	r2, r3
 8014ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab6:	691b      	ldr	r3, [r3, #16]
 8014ab8:	0e1b      	lsrs	r3, r3, #24
 8014aba:	4313      	orrs	r3, r2
 8014abc:	627b      	str	r3, [r7, #36]	; 0x24
		ulRemoteIP = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8014abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac0:	68db      	ldr	r3, [r3, #12]
 8014ac2:	061a      	lsls	r2, r3, #24
 8014ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac6:	68db      	ldr	r3, [r3, #12]
 8014ac8:	021b      	lsls	r3, r3, #8
 8014aca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014ace:	431a      	orrs	r2, r3
 8014ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ad2:	68db      	ldr	r3, [r3, #12]
 8014ad4:	0a1b      	lsrs	r3, r3, #8
 8014ad6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014ada:	431a      	orrs	r2, r3
 8014adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	0e1b      	lsrs	r3, r3, #24
 8014ae2:	4313      	orrs	r3, r2
 8014ae4:	623b      	str	r3, [r7, #32]

		/* Find the destination socket, and if not found: return a socket listing to
		the destination PORT. */
		pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 8014ae6:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8014ae8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014aea:	6a3a      	ldr	r2, [r7, #32]
 8014aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014aee:	f7fd f91b 	bl	8011d28 <pxTCPSocketLookup>
 8014af2:	6478      	str	r0, [r7, #68]	; 0x44

		if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == pdFALSE ) )
 8014af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d008      	beq.n	8014b0c <xProcessReceivedTCPPacket+0x17c>
 8014afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014afc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7fd ff05 	bl	8012910 <prvTCPSocketIsActive>
 8014b06:	4603      	mov	r3, r0
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d110      	bne.n	8014b2e <xProcessReceivedTCPPacket+0x19e>
			the other party will get a ECONN error.  There are two exceptions:
			1) A packet that already has the RST flag set.
			2) A packet that only has the ACK flag set.
			A packet with only the ACK flag set might be the last ACK in
			a three-way hand-shake that closes a connection. */
			if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8014b0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b0e:	f003 031f 	and.w	r3, r3, #31
 8014b12:	2b10      	cmp	r3, #16
 8014b14:	d008      	beq.n	8014b28 <xProcessReceivedTCPPacket+0x198>
				( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 8014b16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b18:	f003 0304 	and.w	r3, r3, #4
			if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d103      	bne.n	8014b28 <xProcessReceivedTCPPacket+0x198>
			{
				( void ) prvTCPSendReset( pxNetworkBuffer );
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7ff feec 	bl	8014900 <prvTCPSendReset>
			}

			/* The packet can't be handled. */
			xResult = pdFAIL;
 8014b28:	2300      	movs	r3, #0
 8014b2a:	643b      	str	r3, [r7, #64]	; 0x40
 8014b2c:	e079      	b.n	8014c22 <xProcessReceivedTCPPacket+0x292>
		}
		else
		{
			pxSocket->u.xTCP.ucRepCount = 0U;
 8014b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b30:	2200      	movs	r2, #0
 8014b32:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

			if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8014b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b38:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8014b3c:	2b01      	cmp	r3, #1
 8014b3e:	d11c      	bne.n	8014b7a <xProcessReceivedTCPPacket+0x1ea>
			{
				/* The matching socket is in a listening state.  Test if the peer
				has set the SYN flag. */
				if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 8014b40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b42:	f003 031f 	and.w	r3, r3, #31
 8014b46:	2b02      	cmp	r3, #2
 8014b48:	d00b      	beq.n	8014b62 <xProcessReceivedTCPPacket+0x1d2>
					FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
						prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
					}
					#endif /* ipconfigHAS_DEBUG_PRINTF */

					if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8014b4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b4c:	f003 0304 	and.w	r3, r3, #4
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d103      	bne.n	8014b5c <xProcessReceivedTCPPacket+0x1cc>
					{
						( void ) prvTCPSendReset( pxNetworkBuffer );
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7ff fed2 	bl	8014900 <prvTCPSendReset>
					}
					xResult = pdFAIL;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8014b60:	e05f      	b.n	8014c22 <xProcessReceivedTCPPacket+0x292>
				else
				{
					/* prvHandleListen() will either return a newly created socket
					(if bReuseSocket is false), otherwise it returns the current
					socket which will later get connected. */
					pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 8014b62:	68bb      	ldr	r3, [r7, #8]
 8014b64:	4619      	mov	r1, r3
 8014b66:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014b68:	f000 f8c0 	bl	8014cec <prvHandleListen>
 8014b6c:	6478      	str	r0, [r7, #68]	; 0x44

					if( pxSocket == NULL )
 8014b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d156      	bne.n	8014c22 <xProcessReceivedTCPPacket+0x292>
					{
						xResult = pdFAIL;
 8014b74:	2300      	movs	r3, #0
 8014b76:	643b      	str	r3, [r7, #64]	; 0x40
 8014b78:	e053      	b.n	8014c22 <xProcessReceivedTCPPacket+0x292>
			}	/* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
			else
			{
				/* This is not a socket in listening mode. Check for the RST
				flag. */
				if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 8014b7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b7c:	f003 0304 	and.w	r3, r3, #4
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d032      	beq.n	8014bea <xProcessReceivedTCPPacket+0x25a>
				{
					FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );

					/* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
					if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 8014b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b86:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8014b8a:	2b02      	cmp	r3, #2
 8014b8c:	d10b      	bne.n	8014ba6 <xProcessReceivedTCPPacket+0x216>
					{
						/* Per the above RFC, "In the SYN-SENT state ... the RST is
						acceptable if the ACK field acknowledges the SYN." */
						if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1UL ) )
 8014b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b90:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8014b94:	3301      	adds	r3, #1
 8014b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b98:	429a      	cmp	r2, r3
 8014b9a:	d123      	bne.n	8014be4 <xProcessReceivedTCPPacket+0x254>
						{
							vTCPStateChange( pxSocket, eCLOSED );
 8014b9c:	2100      	movs	r1, #0
 8014b9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014ba0:	f7fe fd5d 	bl	801365e <vTCPStateChange>
 8014ba4:	e01e      	b.n	8014be4 <xProcessReceivedTCPPacket+0x254>
						}
					}
					else
					{
						/* Check whether the packet matches the next expected sequence number. */
						if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 8014ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bae:	429a      	cmp	r2, r3
 8014bb0:	d104      	bne.n	8014bbc <xProcessReceivedTCPPacket+0x22c>
						{
							vTCPStateChange( pxSocket, eCLOSED );
 8014bb2:	2100      	movs	r1, #0
 8014bb4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014bb6:	f7fe fd52 	bl	801365e <vTCPStateChange>
 8014bba:	e013      	b.n	8014be4 <xProcessReceivedTCPPacket+0x254>
						}
						/* Otherwise, check whether the packet is within the receive window. */
						else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 8014bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	d90d      	bls.n	8014be4 <xProcessReceivedTCPPacket+0x254>
								 ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8014bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
													  pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) ) )
 8014bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bd0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
								 ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8014bd4:	4413      	add	r3, r2
						else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 8014bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	d203      	bcs.n	8014be4 <xProcessReceivedTCPPacket+0x254>
						{
							/* Send a challenge ACK. */
							( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7ff fe81 	bl	80148e6 <prvTCPSendChallengeAck>
							/* Nothing. */
						}
					}

					/* Otherwise, do nothing. In any case, the packet cannot be handled. */
					xResult = pdFAIL;
 8014be4:	2300      	movs	r3, #0
 8014be6:	643b      	str	r3, [r7, #64]	; 0x40
 8014be8:	e01b      	b.n	8014c22 <xProcessReceivedTCPPacket+0x292>
				}
				else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) )
 8014bea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014bec:	f003 031f 	and.w	r3, r3, #31
 8014bf0:	2b02      	cmp	r3, #2
 8014bf2:	d107      	bne.n	8014c04 <xProcessReceivedTCPPacket+0x274>
 8014bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bf6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8014bfa:	2b04      	cmp	r3, #4
 8014bfc:	d902      	bls.n	8014c04 <xProcessReceivedTCPPacket+0x274>
				{
					/* SYN flag while this socket is already connected. */
					FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );

					/* The packet cannot be handled. */
					xResult = pdFAIL;
 8014bfe:	2300      	movs	r3, #0
 8014c00:	643b      	str	r3, [r7, #64]	; 0x40
 8014c02:	e00e      	b.n	8014c22 <xProcessReceivedTCPPacket+0x292>
				else
				{
					/* Update the copy of the TCP header only (skipping eth and IP
					headers).  It might be used later on, whenever data must be sent
					to the peer. */
					const size_t lOffset = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) );
 8014c04:	2322      	movs	r3, #34	; 0x22
 8014c06:	61fb      	str	r3, [r7, #28]
					( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ lOffset ] ) ),
 8014c08:	69fb      	ldr	r3, [r7, #28]
 8014c0a:	3380      	adds	r3, #128	; 0x80
 8014c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014c0e:	4413      	add	r3, r2
 8014c10:	1c98      	adds	r0, r3, #2
									 ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ lOffset ] ) ),
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	699a      	ldr	r2, [r3, #24]
 8014c16:	69fb      	ldr	r3, [r7, #28]
 8014c18:	4413      	add	r3, r2
					( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ lOffset ] ) ),
 8014c1a:	2214      	movs	r2, #20
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	f002 fb2e 	bl	801727e <memcpy>
									 ipSIZE_OF_TCP_HEADER );
				}
			}
		}

		if( xResult != pdFAIL )
 8014c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d05b      	beq.n	8014ce0 <xProcessReceivedTCPPacket+0x350>
		{
		uint16_t usWindow;

			/* pxSocket is not NULL when xResult != pdFAIL. */
			configASSERT( pxSocket != NULL );
 8014c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d10b      	bne.n	8014c46 <xProcessReceivedTCPPacket+0x2b6>
 8014c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c32:	b672      	cpsid	i
 8014c34:	f383 8811 	msr	BASEPRI, r3
 8014c38:	f3bf 8f6f 	isb	sy
 8014c3c:	f3bf 8f4f 	dsb	sy
 8014c40:	b662      	cpsie	i
 8014c42:	60fb      	str	r3, [r7, #12]
 8014c44:	e7fe      	b.n	8014c44 <xProcessReceivedTCPPacket+0x2b4>
			/* Touch the alive timers because we received a message	for this
			socket. */
			prvTCPTouchSocket( pxSocket );
 8014c46:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014c48:	f7fe fce5 	bl	8013616 <prvTCPTouchSocket>
			/* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
			then we MUST assume an MSS size of 536 bytes for backward compatibility. */

			/* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
			the number 5 (words) in the higher nibble of the TCP-offset byte. */
			if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8014c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c4e:	7b1b      	ldrb	r3, [r3, #12]
 8014c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c54:	2b50      	cmp	r3, #80	; 0x50
 8014c56:	d904      	bls.n	8014c62 <xProcessReceivedTCPPacket+0x2d2>
			{
				prvCheckOptions( pxSocket, pxNetworkBuffer );
 8014c58:	68bb      	ldr	r3, [r7, #8]
 8014c5a:	4619      	mov	r1, r3
 8014c5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014c5e:	f7fe fae7 	bl	8013230 <prvCheckOptions>
			}

			usWindow = FreeRTOS_ntohs( pxProtocolHeaders->xTCPHeader.usWindow );
 8014c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c64:	89db      	ldrh	r3, [r3, #14]
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	021b      	lsls	r3, r3, #8
 8014c6a:	b21a      	sxth	r2, r3
 8014c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c6e:	89db      	ldrh	r3, [r3, #14]
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	0a1b      	lsrs	r3, r3, #8
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	b21b      	sxth	r3, r3
 8014c78:	4313      	orrs	r3, r2
 8014c7a:	b21b      	sxth	r3, r3
 8014c7c:	837b      	strh	r3, [r7, #26]
			pxSocket->u.xTCP.ulWindowSize = (uint32_t ) usWindow;
 8014c7e:	8b7a      	ldrh	r2, [r7, #26]
 8014c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c82:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				/* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
				segment itself is never scaled. */
				if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8014c86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014c88:	f003 0302 	and.w	r3, r3, #2
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d10a      	bne.n	8014ca6 <xProcessReceivedTCPPacket+0x316>
				{
					pxSocket->u.xTCP.ulWindowSize =
						( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8014c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c92:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014c98:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 8014c9c:	fa03 f202 	lsl.w	r2, r3, r2
					pxSocket->u.xTCP.ulWindowSize =
 8014ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ca2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			}
			#endif /* ipconfigUSE_TCP_WIN */

			/* In prvTCPHandleState() the incoming messages will be handled
			depending on the current state of the connection. */
			if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 8014ca6:	f107 0308 	add.w	r3, r7, #8
 8014caa:	4619      	mov	r1, r3
 8014cac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014cae:	f7ff fcdf 	bl	8014670 <prvTCPHandleState>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	dd05      	ble.n	8014cc4 <xProcessReceivedTCPPacket+0x334>
			{
				/* prvTCPHandleState() has sent a message, see if there are more to
				be transmitted. */
				#if( ipconfigUSE_TCP_WIN == 1 )
				{
					( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8014cb8:	f107 0308 	add.w	r3, r7, #8
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014cc0:	f7fd ff7c 	bl	8012bbc <prvTCPSendRepeated>
				}
				#endif /* ipconfigUSE_TCP_WIN */
			}

			if( pxNetworkBuffer != NULL )
 8014cc4:	68bb      	ldr	r3, [r7, #8]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d005      	beq.n	8014cd6 <xProcessReceivedTCPPacket+0x346>
			{
				/* We must check if the buffer is unequal to NULL, because the
				socket might keep a reference to it in case a delayed ACK must be
				sent. */
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014cca:	68bb      	ldr	r3, [r7, #8]
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f001 fbf7 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
				#ifndef _lint
				/* Clear pointers that are freed. */
				pxNetworkBuffer = NULL;
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	60bb      	str	r3, [r7, #8]
				#endif
			}

			/* And finally, calculate when this socket wants to be woken up. */
			( void ) prvTCPNextTimeout ( pxSocket );
 8014cd6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014cd8:	f7fe ff78 	bl	8013bcc <prvTCPNextTimeout>
			/* Return pdPASS to tell that the network buffer is 'consumed'. */
			xResult = pdPASS;
 8014cdc:	2301      	movs	r3, #1
 8014cde:	643b      	str	r3, [r7, #64]	; 0x40
		}
	}
	/* pdPASS being returned means the buffer has been consumed. */
	return xResult;
 8014ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3748      	adds	r7, #72	; 0x48
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
	...

08014cec <prvHandleListen>:
/*-----------------------------------------------------------*/

static FreeRTOS_Socket_t *prvHandleListen( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b088      	sub	sp, #32
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	6039      	str	r1, [r7, #0]
/* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
const TCPPacket_t * pxTCPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	699b      	ldr	r3, [r3, #24]
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7fd fdab 	bl	8012856 <vCastConstPointerTo_TCPPacket_t>
 8014d00:	61b8      	str	r0, [r7, #24]
FreeRTOS_Socket_t *pxReturn = NULL;
 8014d02:	2300      	movs	r3, #0
 8014d04:	61fb      	str	r3, [r7, #28]
uint32_t ulInitialSequenceNumber;

	/* Assume that a new Initial Sequence Number will be required. Request
	it now in order to fail out if necessary. */
	ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 8014d06:	4b5a      	ldr	r3, [pc, #360]	; (8014e70 <prvHandleListen+0x184>)
 8014d08:	6958      	ldr	r0, [r3, #20]
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8014d0e:	69bb      	ldr	r3, [r7, #24]
 8014d10:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8014d14:	69bb      	ldr	r3, [r7, #24]
 8014d16:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8014d18:	b29b      	uxth	r3, r3
 8014d1a:	f7ec f947 	bl	8000fac <ulApplicationGetNextSequenceNumber>
 8014d1e:	6178      	str	r0, [r7, #20]
																  pxTCPPacket->xIPHeader.ulSourceIPAddress,
																  pxTCPPacket->xTCPHeader.usSourcePort );

	/* A pure SYN (without ACK) has come in, create a new socket to answer
	it. */
	if( ulInitialSequenceNumber != 0UL )
 8014d20:	697b      	ldr	r3, [r7, #20]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d03c      	beq.n	8014da0 <prvHandleListen+0xb4>
	{
		if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014d2c:	f003 0308 	and.w	r3, r3, #8
 8014d30:	b2db      	uxtb	r3, r3
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d00c      	beq.n	8014d50 <prvHandleListen+0x64>
		{
			/* The flag bReuseSocket indicates that the same instance of the
			listening socket should be used for the connection. */
			pxReturn = pxSocket;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	61fb      	str	r3, [r7, #28]
			pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8014d3a:	687a      	ldr	r2, [r7, #4]
 8014d3c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8014d40:	f043 0304 	orr.w	r3, r3, #4
 8014d44:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
			pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	687a      	ldr	r2, [r7, #4]
 8014d4c:	655a      	str	r2, [r3, #84]	; 0x54
 8014d4e:	e027      	b.n	8014da0 <prvHandleListen+0xb4>
		}
		else
		{
			/* The socket does not have the bReuseSocket flag set meaning create a
			new socket when a connection comes in. */
			pxReturn = NULL;
 8014d50:	2300      	movs	r3, #0
 8014d52:	61fb      	str	r3, [r7, #28]

			if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014d60:	429a      	cmp	r2, r3
 8014d62:	d303      	bcc.n	8014d6c <prvHandleListen+0x80>
				FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usChildCount,
					pxSocket->u.xTCP.usBacklog,
					( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
				( void ) prvTCPSendReset( pxNetworkBuffer );
 8014d64:	6838      	ldr	r0, [r7, #0]
 8014d66:	f7ff fdcb 	bl	8014900 <prvTCPSendReset>
 8014d6a:	e019      	b.n	8014da0 <prvHandleListen+0xb4>
			}
			else
			{
				FreeRTOS_Socket_t *pxNewSocket = ( FreeRTOS_Socket_t * )
 8014d6c:	2206      	movs	r2, #6
 8014d6e:	2101      	movs	r1, #1
 8014d70:	2002      	movs	r0, #2
 8014d72:	f7fc f83d 	bl	8010df0 <FreeRTOS_socket>
 8014d76:	6138      	str	r0, [r7, #16]
					FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

				if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d003      	beq.n	8014d86 <prvHandleListen+0x9a>
 8014d7e:	693b      	ldr	r3, [r7, #16]
 8014d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d84:	d103      	bne.n	8014d8e <prvHandleListen+0xa2>
				{
					FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
					( void ) prvTCPSendReset( pxNetworkBuffer );
 8014d86:	6838      	ldr	r0, [r7, #0]
 8014d88:	f7ff fdba 	bl	8014900 <prvTCPSendReset>
 8014d8c:	e008      	b.n	8014da0 <prvHandleListen+0xb4>
				}
				else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8014d8e:	6879      	ldr	r1, [r7, #4]
 8014d90:	6938      	ldr	r0, [r7, #16]
 8014d92:	f000 f86f 	bl	8014e74 <prvTCPSocketCopy>
 8014d96:	4603      	mov	r3, r0
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d001      	beq.n	8014da0 <prvHandleListen+0xb4>
				{
					/* The socket will be connected immediately, no time for the
					owner to setsockopt's, therefore copy properties of the server
					socket to the new socket.  Only the binding might fail (due to
					lack of resources). */
					pxReturn = pxNewSocket;
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	61fb      	str	r3, [r7, #28]
				}
			}
		}
	}

	if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8014da0:	697b      	ldr	r3, [r7, #20]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d05f      	beq.n	8014e66 <prvHandleListen+0x17a>
 8014da6:	69fb      	ldr	r3, [r7, #28]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d05c      	beq.n	8014e66 <prvHandleListen+0x17a>
	{
	/* Map the byte stream onto the ProtocolHeaders_t for easy access to the fields. */
	const ProtocolHeaders_t *pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	699b      	ldr	r3, [r3, #24]
 8014db0:	3322      	adds	r3, #34	; 0x22
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7fd fd65 	bl	8012882 <vCastConstPointerTo_ProtocolHeaders_t>
 8014db8:	60f8      	str	r0, [r7, #12]
		&( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );

		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8014dba:	69bb      	ldr	r3, [r7, #24]
 8014dbc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8014dbe:	b29b      	uxth	r3, r3
 8014dc0:	021b      	lsls	r3, r3, #8
 8014dc2:	b21a      	sxth	r2, r3
 8014dc4:	69bb      	ldr	r3, [r7, #24]
 8014dc6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8014dc8:	b29b      	uxth	r3, r3
 8014dca:	0a1b      	lsrs	r3, r3, #8
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	b21b      	sxth	r3, r3
 8014dd0:	4313      	orrs	r3, r2
 8014dd2:	b21b      	sxth	r3, r3
 8014dd4:	b29a      	uxth	r2, r3
 8014dd6:	69fb      	ldr	r3, [r7, #28]
 8014dd8:	879a      	strh	r2, [r3, #60]	; 0x3c
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8014dda:	69bb      	ldr	r3, [r7, #24]
 8014ddc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8014de0:	061a      	lsls	r2, r3, #24
 8014de2:	69bb      	ldr	r3, [r7, #24]
 8014de4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8014de8:	021b      	lsls	r3, r3, #8
 8014dea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014dee:	431a      	orrs	r2, r3
 8014df0:	69bb      	ldr	r3, [r7, #24]
 8014df2:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8014df6:	0a1b      	lsrs	r3, r3, #8
 8014df8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014dfc:	431a      	orrs	r2, r3
 8014dfe:	69bb      	ldr	r3, [r7, #24]
 8014e00:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8014e04:	0e1b      	lsrs	r3, r3, #24
 8014e06:	431a      	orrs	r2, r3
 8014e08:	69fb      	ldr	r3, [r7, #28]
 8014e0a:	639a      	str	r2, [r3, #56]	; 0x38
		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	697a      	ldr	r2, [r7, #20]
 8014e10:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

		/* Here is the SYN action. */
		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	685b      	ldr	r3, [r3, #4]
 8014e18:	061a      	lsls	r2, r3, #24
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	685b      	ldr	r3, [r3, #4]
 8014e1e:	021b      	lsls	r3, r3, #8
 8014e20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014e24:	431a      	orrs	r2, r3
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	685b      	ldr	r3, [r3, #4]
 8014e2a:	0a1b      	lsrs	r3, r3, #8
 8014e2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014e30:	431a      	orrs	r2, r3
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	685b      	ldr	r3, [r3, #4]
 8014e36:	0e1b      	lsrs	r3, r3, #24
 8014e38:	431a      	orrs	r2, r3
 8014e3a:	69fb      	ldr	r3, [r7, #28]
 8014e3c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		prvSocketSetMSS( pxReturn );
 8014e40:	69f8      	ldr	r0, [r7, #28]
 8014e42:	f7ff fd6b 	bl	801491c <prvSocketSetMSS>

		prvTCPCreateWindow( pxReturn );
 8014e46:	69f8      	ldr	r0, [r7, #28]
 8014e48:	f7fe f8dc 	bl	8013004 <prvTCPCreateWindow>

		vTCPStateChange( pxReturn, eSYN_FIRST );
 8014e4c:	2103      	movs	r1, #3
 8014e4e:	69f8      	ldr	r0, [r7, #28]
 8014e50:	f7fe fc05 	bl	801365e <vTCPStateChange>

		/* Make a copy of the header up to the TCP header.  It is needed later
		on, whenever data must be sent to the peer. */
		( void ) memcpy( ( void * ) ( pxReturn->u.xTCP.xPacket.u.ucLastPacket ), ( const void * ) ( pxNetworkBuffer->pucEthernetBuffer ), sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 8014e54:	69fb      	ldr	r3, [r7, #28]
 8014e56:	f103 0082 	add.w	r0, r3, #130	; 0x82
 8014e5a:	683b      	ldr	r3, [r7, #0]
 8014e5c:	699b      	ldr	r3, [r3, #24]
 8014e5e:	2246      	movs	r2, #70	; 0x46
 8014e60:	4619      	mov	r1, r3
 8014e62:	f002 fa0c 	bl	801727e <memcpy>
	}
	return pxReturn;
 8014e66:	69fb      	ldr	r3, [r7, #28]
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3720      	adds	r7, #32
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	2400001c 	.word	0x2400001c

08014e74 <prvTCPSocketCopy>:

/*
 * Duplicates a socket after a listening socket receives a connection.
 */
static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket )
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b086      	sub	sp, #24
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
 8014e7c:	6039      	str	r1, [r7, #0]
struct freertos_sockaddr xAddress;
BaseType_t xResult;

	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	69da      	ldr	r2, [r3, #28]
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	61da      	str	r2, [r3, #28]
	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 8014e86:	683b      	ldr	r3, [r7, #0]
 8014e88:	6a1a      	ldr	r2, [r3, #32]
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	621a      	str	r2, [r3, #32]
	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	66da      	str	r2, [r3, #108]	; 0x6c
	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	671a      	str	r2, [r3, #112]	; 0x70
	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	665a      	str	r2, [r3, #100]	; 0x64
	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	669a      	str	r2, [r3, #104]	; 0x68
	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		/* Child socket of listening sockets will inherit the Socket Set
		Otherwise the owner has no chance of including it into the set. */
		if( pxSocket->pxSocketSet != NULL )
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d009      	beq.n	8014eee <prvTCPSocketCopy+0x7a>
		{
			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	62da      	str	r2, [r3, #44]	; 0x2c
			pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ee6:	f043 0205 	orr.w	r2, r3, #5
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	/* And bind it to the same local port as its parent. */
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 8014eee:	4b1c      	ldr	r3, [pc, #112]	; (8014f60 <prvTCPSocketCopy+0xec>)
 8014ef0:	695b      	ldr	r3, [r3, #20]
 8014ef2:	613b      	str	r3, [r7, #16]
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014ef8:	021b      	lsls	r3, r3, #8
 8014efa:	b21a      	sxth	r2, r3
 8014efc:	683b      	ldr	r3, [r7, #0]
 8014efe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014f00:	0a1b      	lsrs	r3, r3, #8
 8014f02:	b29b      	uxth	r3, r3
 8014f04:	b21b      	sxth	r3, r3
 8014f06:	4313      	orrs	r3, r2
 8014f08:	b21b      	sxth	r3, r3
 8014f0a:	b29b      	uxth	r3, r3
 8014f0c:	81fb      	strh	r3, [r7, #14]
		orphan temporarily.  Once this socket is really connected, the owner of
		the server socket will be notified. */

		/* When bPassQueued is true, the socket is an orphan until it gets
		connected. */
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8014f0e:	687a      	ldr	r2, [r7, #4]
 8014f10:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8014f14:	f043 0304 	orr.w	r3, r3, #4
 8014f18:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	683a      	ldr	r2, [r7, #0]
 8014f20:	655a      	str	r2, [r3, #84]	; 0x54
			pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
		}
	}
	#endif

	pxSocket->u.xTCP.usChildCount++;
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8014f28:	3301      	adds	r3, #1
 8014f2a:	b29a      	uxth	r2, r3
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		pxSocket->u.xTCP.usChildCount,
		pxSocket->u.xTCP.usBacklog,
		( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );

	/* Now bind the child socket to the same port as the listening socket. */
	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 8014f32:	f107 010c 	add.w	r1, r7, #12
 8014f36:	2301      	movs	r3, #1
 8014f38:	2208      	movs	r2, #8
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f7fc f9b6 	bl	80112ac <vSocketBind>
 8014f40:	4603      	mov	r3, r0
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d005      	beq.n	8014f52 <prvTCPSocketCopy+0xde>
	{
		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
		( void ) vSocketClose( pxNewSocket );
 8014f46:	6878      	ldr	r0, [r7, #4]
 8014f48:	f7fc fa70 	bl	801142c <vSocketClose>
		xResult = pdFALSE;
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	617b      	str	r3, [r7, #20]
 8014f50:	e001      	b.n	8014f56 <prvTCPSocketCopy+0xe2>
	}
	else
	{
		xResult = pdTRUE;
 8014f52:	2301      	movs	r3, #1
 8014f54:	617b      	str	r3, [r7, #20]
	}

	return xResult;
 8014f56:	697b      	ldr	r3, [r7, #20]
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3718      	adds	r7, #24
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}
 8014f60:	2400001c 	.word	0x2400001c

08014f64 <xTCPCheckNewClient>:
/*
 * In the API accept(), the user asks is there is a new client?  As API's can
 * not walk through the xBoundTCPSocketsList the IP-task will do this.
 */
BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b088      	sub	sp, #32
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014f70:	021b      	lsls	r3, r3, #8
 8014f72:	b21a      	sxth	r2, r3
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014f78:	0a1b      	lsrs	r3, r3, #8
 8014f7a:	b29b      	uxth	r3, r3
 8014f7c:	b21b      	sxth	r3, r3
 8014f7e:	4313      	orrs	r3, r2
 8014f80:	b21b      	sxth	r3, r3
 8014f82:	b29b      	uxth	r3, r3
 8014f84:	617b      	str	r3, [r7, #20]
const ListItem_t *pxIterator;
FreeRTOS_Socket_t *pxFound;
BaseType_t xResult = pdFALSE;
 8014f86:	2300      	movs	r3, #0
 8014f88:	61bb      	str	r3, [r7, #24]
const ListItem_t *pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 8014f8a:	4b18      	ldr	r3, [pc, #96]	; (8014fec <xTCPCheckNewClient+0x88>)
 8014f8c:	613b      	str	r3, [r7, #16]

	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
	who has access. */
	for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8014f8e:	4b18      	ldr	r3, [pc, #96]	; (8014ff0 <xTCPCheckNewClient+0x8c>)
 8014f90:	68db      	ldr	r3, [r3, #12]
 8014f92:	61fb      	str	r3, [r7, #28]
 8014f94:	e020      	b.n	8014fd8 <xTCPCheckNewClient+0x74>
		pxIterator != pxEndTCP;
		pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
	{
		if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 8014f96:	69fb      	ldr	r3, [r7, #28]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	697a      	ldr	r2, [r7, #20]
 8014f9c:	429a      	cmp	r2, r3
 8014f9e:	d118      	bne.n	8014fd2 <xTCPCheckNewClient+0x6e>
		{
			pxFound = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8014fa0:	69fb      	ldr	r3, [r7, #28]
 8014fa2:	68db      	ldr	r3, [r3, #12]
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f7fd fc77 	bl	8012898 <vCastPointerTo_FreeRTOS_Socket_t>
 8014faa:	60f8      	str	r0, [r7, #12]
			if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8014fb2:	2b06      	cmp	r3, #6
 8014fb4:	d10d      	bne.n	8014fd2 <xTCPCheckNewClient+0x6e>
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014fbc:	f003 0302 	and.w	r3, r3, #2
 8014fc0:	b2db      	uxtb	r3, r3
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d005      	beq.n	8014fd2 <xTCPCheckNewClient+0x6e>
			{
				pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	68fa      	ldr	r2, [r7, #12]
 8014fca:	655a      	str	r2, [r3, #84]	; 0x54
				FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
				xResult = pdTRUE;
 8014fcc:	2301      	movs	r3, #1
 8014fce:	61bb      	str	r3, [r7, #24]
				break;
 8014fd0:	e006      	b.n	8014fe0 <xTCPCheckNewClient+0x7c>
		pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8014fd2:	69fb      	ldr	r3, [r7, #28]
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	61fb      	str	r3, [r7, #28]
	for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8014fd8:	69fa      	ldr	r2, [r7, #28]
 8014fda:	693b      	ldr	r3, [r7, #16]
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d1da      	bne.n	8014f96 <xTCPCheckNewClient+0x32>
			}
		}
	}
	return xResult;
 8014fe0:	69bb      	ldr	r3, [r7, #24]
}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	3720      	adds	r7, #32
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}
 8014fea:	bf00      	nop
 8014fec:	24006558 	.word	0x24006558
 8014ff0:	24006550 	.word	0x24006550

08014ff4 <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return ( a <= b ) ? a : b; }
 8014ff4:	b480      	push	{r7}
 8014ff6:	b083      	sub	sp, #12
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	6039      	str	r1, [r7, #0]
 8014ffe:	687a      	ldr	r2, [r7, #4]
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	4293      	cmp	r3, r2
 8015004:	bfa8      	it	ge
 8015006:	4613      	movge	r3, r2
 8015008:	4618      	mov	r0, r3
 801500a:	370c      	adds	r7, #12
 801500c:	46bd      	mov	sp, r7
 801500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015012:	4770      	bx	lr

08015014 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return ( a <= b ) ? a : b; }
 8015014:	b480      	push	{r7}
 8015016:	b083      	sub	sp, #12
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
 801501c:	6039      	str	r1, [r7, #0]
 801501e:	687a      	ldr	r2, [r7, #4]
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	4293      	cmp	r3, r2
 8015024:	bf28      	it	cs
 8015026:	4613      	movcs	r3, r2
 8015028:	4618      	mov	r0, r3
 801502a:	370c      	adds	r7, #12
 801502c:	46bd      	mov	sp, r7
 801502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015032:	4770      	bx	lr

08015034 <vCastPointerTo_TCPSegment_t>:
#define	winSRTT_DECREMENT_NEW 		1
#define winSRTT_DECREMENT_CURRENT 	7
#define winSRTT_CAP_mS				50

static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( TCPSegment_t )
{
 8015034:	b480      	push	{r7}
 8015036:	b083      	sub	sp, #12
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
	return ( TCPSegment_t *)pvArgument;
 801503c:	687b      	ldr	r3, [r7, #4]
}
 801503e:	4618      	mov	r0, r3
 8015040:	370c      	adds	r7, #12
 8015042:	46bd      	mov	sp, r7
 8015044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015048:	4770      	bx	lr

0801504a <xSequenceLessThanOrEqual>:

#if( ipconfigUSE_TCP_WIN == 1 )
	/* Some 32-bit arithmetic: comparing sequence numbers */
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b )
	{
 801504a:	b480      	push	{r7}
 801504c:	b085      	sub	sp, #20
 801504e:	af00      	add	r7, sp, #0
 8015050:	6078      	str	r0, [r7, #4]
 8015052:	6039      	str	r1, [r7, #0]
	BaseType_t xResult;

		/* Test if a <= b
		Return true if the unsigned subtraction of (b-a) doesn't generate an
		arithmetic overflow. */
		if( ( ( b - a ) & 0x80000000UL ) == 0UL )
 8015054:	683a      	ldr	r2, [r7, #0]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	1ad3      	subs	r3, r2, r3
 801505a:	2b00      	cmp	r3, #0
 801505c:	db02      	blt.n	8015064 <xSequenceLessThanOrEqual+0x1a>
		{
			xResult = pdTRUE;
 801505e:	2301      	movs	r3, #1
 8015060:	60fb      	str	r3, [r7, #12]
 8015062:	e001      	b.n	8015068 <xSequenceLessThanOrEqual+0x1e>
		}
		else
		{
			xResult = pdFALSE;
 8015064:	2300      	movs	r3, #0
 8015066:	60fb      	str	r3, [r7, #12]
		}
		return xResult;
 8015068:	68fb      	ldr	r3, [r7, #12]
	}
 801506a:	4618      	mov	r0, r3
 801506c:	3714      	adds	r7, #20
 801506e:	46bd      	mov	sp, r7
 8015070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015074:	4770      	bx	lr

08015076 <xSequenceLessThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b )
	{
 8015076:	b480      	push	{r7}
 8015078:	b085      	sub	sp, #20
 801507a:	af00      	add	r7, sp, #0
 801507c:	6078      	str	r0, [r7, #4]
 801507e:	6039      	str	r1, [r7, #0]
	BaseType_t xResult;

		/* Test if a < b */
		if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 8015080:	683a      	ldr	r2, [r7, #0]
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	1ad3      	subs	r3, r2, r3
 8015086:	3b01      	subs	r3, #1
 8015088:	2b00      	cmp	r3, #0
 801508a:	db02      	blt.n	8015092 <xSequenceLessThan+0x1c>
		{
			xResult = pdTRUE;
 801508c:	2301      	movs	r3, #1
 801508e:	60fb      	str	r3, [r7, #12]
 8015090:	e001      	b.n	8015096 <xSequenceLessThan+0x20>
		}
		else
		{
			xResult = pdFALSE;
 8015092:	2300      	movs	r3, #0
 8015094:	60fb      	str	r3, [r7, #12]
		}
		return xResult;
 8015096:	68fb      	ldr	r3, [r7, #12]
	}
 8015098:	4618      	mov	r0, r3
 801509a:	3714      	adds	r7, #20
 801509c:	46bd      	mov	sp, r7
 801509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a2:	4770      	bx	lr

080150a4 <xSequenceGreaterThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b )
	{
 80150a4:	b480      	push	{r7}
 80150a6:	b085      	sub	sp, #20
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	6039      	str	r1, [r7, #0]
	BaseType_t xResult;

		/* Test if a > b */
		if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	1ad3      	subs	r3, r2, r3
 80150b4:	3b01      	subs	r3, #1
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	db02      	blt.n	80150c0 <xSequenceGreaterThan+0x1c>
		{
			xResult = pdTRUE;
 80150ba:	2301      	movs	r3, #1
 80150bc:	60fb      	str	r3, [r7, #12]
 80150be:	e001      	b.n	80150c4 <xSequenceGreaterThan+0x20>
		}
		else
		{
			xResult = pdFALSE;
 80150c0:	2300      	movs	r3, #0
 80150c2:	60fb      	str	r3, [r7, #12]
		}
		return xResult;
 80150c4:	68fb      	ldr	r3, [r7, #12]
	}
 80150c6:	4618      	mov	r0, r3
 80150c8:	3714      	adds	r7, #20
 80150ca:	46bd      	mov	sp, r7
 80150cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d0:	4770      	bx	lr

080150d2 <xSequenceGreaterThanOrEqual>:
#endif /* ipconfigUSE_TCP_WIN */

/*-----------------------------------------------------------*/
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b );
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b )
{
 80150d2:	b480      	push	{r7}
 80150d4:	b085      	sub	sp, #20
 80150d6:	af00      	add	r7, sp, #0
 80150d8:	6078      	str	r0, [r7, #4]
 80150da:	6039      	str	r1, [r7, #0]
BaseType_t xResult;

	/* Test if a >= b */
	if( ( ( a - b ) & 0x80000000UL ) == 0UL )
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	1ad3      	subs	r3, r2, r3
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	db02      	blt.n	80150ec <xSequenceGreaterThanOrEqual+0x1a>
	{
		xResult = pdTRUE;
 80150e6:	2301      	movs	r3, #1
 80150e8:	60fb      	str	r3, [r7, #12]
 80150ea:	e001      	b.n	80150f0 <xSequenceGreaterThanOrEqual+0x1e>
	}
	else
	{
		xResult = pdFALSE;
 80150ec:	2300      	movs	r3, #0
 80150ee:	60fb      	str	r3, [r7, #12]
	}
	return xResult;
 80150f0:	68fb      	ldr	r3, [r7, #12]
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	3714      	adds	r7, #20
 80150f6:	46bd      	mov	sp, r7
 80150f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fc:	4770      	bx	lr

080150fe <vListInsertFifo>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem );
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem )
	{
 80150fe:	b580      	push	{r7, lr}
 8015100:	b082      	sub	sp, #8
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]
 8015106:	6039      	str	r1, [r7, #0]
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	3308      	adds	r3, #8
 801510c:	461a      	mov	r2, r3
 801510e:	6839      	ldr	r1, [r7, #0]
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f000 f81f 	bl	8015154 <vListInsertGeneric>
	}
 8015116:	bf00      	nop
 8015118:	3708      	adds	r7, #8
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}

0801511e <vTCPTimerSet>:
#endif
/*-----------------------------------------------------------*/

static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer );
static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer )
{
 801511e:	b580      	push	{r7, lr}
 8015120:	b082      	sub	sp, #8
 8015122:	af00      	add	r7, sp, #0
 8015124:	6078      	str	r0, [r7, #4]
	pxTimer->ulBorn = xTaskGetTickCount ( );
 8015126:	f7f8 f915 	bl	800d354 <xTaskGetTickCount>
 801512a:	4602      	mov	r2, r0
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	601a      	str	r2, [r3, #0]
}
 8015130:	bf00      	nop
 8015132:	3708      	adds	r7, #8
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}

08015138 <ulTimerGetAge>:
/*-----------------------------------------------------------*/

static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t *pxTimer );
static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t *pxTimer )
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b082      	sub	sp, #8
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
	return ( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 8015140:	f7f8 f908 	bl	800d354 <xTaskGetTickCount>
 8015144:	4602      	mov	r2, r0
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	1ad3      	subs	r3, r2, r3
}
 801514c:	4618      	mov	r0, r3
 801514e:	3708      	adds	r7, #8
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}

08015154 <vListInsertGeneric>:
/*-----------------------------------------------------------*/

static void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere )
{
 8015154:	b480      	push	{r7}
 8015156:	b085      	sub	sp, #20
 8015158:	af00      	add	r7, sp, #0
 801515a:	60f8      	str	r0, [r7, #12]
 801515c:	60b9      	str	r1, [r7, #8]
 801515e:	607a      	str	r2, [r7, #4]
	/* Insert a new list item into pxList, it does not sort the list,
	but it puts the item just before xListEnd, so it will be the last item
	returned by listGET_HEAD_ENTRY() */
	pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE )pxWhere;
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	687a      	ldr	r2, [r7, #4]
 8015164:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	689a      	ldr	r2, [r3, #8]
 801516a:	68bb      	ldr	r3, [r7, #8]
 801516c:	609a      	str	r2, [r3, #8]
	pxWhere->pxPrevious->pxNext = pxNewListItem;
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	689b      	ldr	r3, [r3, #8]
 8015172:	68ba      	ldr	r2, [r7, #8]
 8015174:	605a      	str	r2, [r3, #4]
	pxWhere->pxPrevious = pxNewListItem;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	68ba      	ldr	r2, [r7, #8]
 801517a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE )pxList;
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	68fa      	ldr	r2, [r7, #12]
 8015180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	1c5a      	adds	r2, r3, #1
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	601a      	str	r2, [r3, #0]
}
 801518c:	bf00      	nop
 801518e:	3714      	adds	r7, #20
 8015190:	46bd      	mov	sp, r7
 8015192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015196:	4770      	bx	lr

08015198 <prvCreateSectors>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvCreateSectors( void )
	{
 8015198:	b580      	push	{r7, lr}
 801519a:	b082      	sub	sp, #8
 801519c:	af00      	add	r7, sp, #0
	BaseType_t xIndex, xReturn;

		/* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

		vListInitialise( &xSegmentList );
 801519e:	4826      	ldr	r0, [pc, #152]	; (8015238 <prvCreateSectors+0xa0>)
 80151a0:	f7f6 fff1 	bl	800c186 <vListInitialise>
		xTCPSegments = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 80151a4:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 80151a8:	f7f6 fbfa 	bl	800b9a0 <pvPortMalloc>
 80151ac:	4603      	mov	r3, r0
 80151ae:	4618      	mov	r0, r3
 80151b0:	f7ff ff40 	bl	8015034 <vCastPointerTo_TCPSegment_t>
 80151b4:	4602      	mov	r2, r0
 80151b6:	4b21      	ldr	r3, [pc, #132]	; (801523c <prvCreateSectors+0xa4>)
 80151b8:	601a      	str	r2, [r3, #0]

		if( xTCPSegments == NULL )
 80151ba:	4b20      	ldr	r3, [pc, #128]	; (801523c <prvCreateSectors+0xa4>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d102      	bne.n	80151c8 <prvCreateSectors+0x30>
		{
			FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
				( unsigned ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

			xReturn = pdFAIL;
 80151c2:	2300      	movs	r3, #0
 80151c4:	603b      	str	r3, [r7, #0]
 80151c6:	e032      	b.n	801522e <prvCreateSectors+0x96>
		}
		else
		{
			/* Clear the allocated space. */
			( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 80151c8:	4b1c      	ldr	r3, [pc, #112]	; (801523c <prvCreateSectors+0xa4>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80151d0:	2100      	movs	r1, #0
 80151d2:	4618      	mov	r0, r3
 80151d4:	f002 f877 	bl	80172c6 <memset>

			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 80151d8:	2300      	movs	r3, #0
 80151da:	607b      	str	r3, [r7, #4]
 80151dc:	e022      	b.n	8015224 <prvCreateSectors+0x8c>
			{
				/* Could call vListInitialiseItem here but all data has been
				nulled already.  Set the owner to a segment descriptor. */
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem  ),( void * ) &( xTCPSegments[ xIndex ] ) );
 80151de:	4b17      	ldr	r3, [pc, #92]	; (801523c <prvCreateSectors+0xa4>)
 80151e0:	6819      	ldr	r1, [r3, #0]
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	019a      	lsls	r2, r3, #6
 80151e6:	4b15      	ldr	r3, [pc, #84]	; (801523c <prvCreateSectors+0xa4>)
 80151e8:	6818      	ldr	r0, [r3, #0]
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	019b      	lsls	r3, r3, #6
 80151ee:	4403      	add	r3, r0
 80151f0:	440a      	add	r2, r1
 80151f2:	639a      	str	r2, [r3, #56]	; 0x38
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 80151f4:	4b11      	ldr	r3, [pc, #68]	; (801523c <prvCreateSectors+0xa4>)
 80151f6:	6819      	ldr	r1, [r3, #0]
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	019a      	lsls	r2, r3, #6
 80151fc:	4b0f      	ldr	r3, [pc, #60]	; (801523c <prvCreateSectors+0xa4>)
 80151fe:	6818      	ldr	r0, [r3, #0]
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	019b      	lsls	r3, r3, #6
 8015204:	4403      	add	r3, r0
 8015206:	440a      	add	r2, r1
 8015208:	625a      	str	r2, [r3, #36]	; 0x24

				/* And add it to the pool of available segments */
				vListInsertFifo( &xSegmentList, &( xTCPSegments[xIndex].xSegmentItem ) );
 801520a:	4b0c      	ldr	r3, [pc, #48]	; (801523c <prvCreateSectors+0xa4>)
 801520c:	681a      	ldr	r2, [r3, #0]
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	019b      	lsls	r3, r3, #6
 8015212:	4413      	add	r3, r2
 8015214:	332c      	adds	r3, #44	; 0x2c
 8015216:	4619      	mov	r1, r3
 8015218:	4807      	ldr	r0, [pc, #28]	; (8015238 <prvCreateSectors+0xa0>)
 801521a:	f7ff ff70 	bl	80150fe <vListInsertFifo>
			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	3301      	adds	r3, #1
 8015222:	607b      	str	r3, [r7, #4]
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	2bef      	cmp	r3, #239	; 0xef
 8015228:	ddd9      	ble.n	80151de <prvCreateSectors+0x46>
			}

			xReturn = pdPASS;
 801522a:	2301      	movs	r3, #1
 801522c:	603b      	str	r3, [r7, #0]
		}

		return xReturn;
 801522e:	683b      	ldr	r3, [r7, #0]
	}
 8015230:	4618      	mov	r0, r3
 8015232:	3708      	adds	r7, #8
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}
 8015238:	24005330 	.word	0x24005330
 801523c:	2400532c 	.word	0x2400532c

08015240 <xTCPWindowRxFind>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxFind( const TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 8015240:	b580      	push	{r7, lr}
 8015242:	b086      	sub	sp, #24
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
 8015248:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const ListItem_t* pxEnd;
	TCPSegment_t *pxSegment, *pxReturn = NULL;
 801524a:	2300      	movs	r3, #0
 801524c:	613b      	str	r3, [r7, #16]

		/* Find a segment with a given sequence number in the list of received
		segments. */
		pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	33ac      	adds	r3, #172	; 0xac
 8015252:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = listGET_NEXT( pxEnd );
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	685b      	ldr	r3, [r3, #4]
 8015258:	617b      	str	r3, [r7, #20]
 801525a:	e010      	b.n	801527e <xTCPWindowRxFind+0x3e>
			 pxIterator != pxEnd;
			 pxIterator  = listGET_NEXT( pxIterator ) )
		{
			pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 801525c:	697b      	ldr	r3, [r7, #20]
 801525e:	68db      	ldr	r3, [r3, #12]
 8015260:	4618      	mov	r0, r3
 8015262:	f7ff fee7 	bl	8015034 <vCastPointerTo_TCPSegment_t>
 8015266:	60b8      	str	r0, [r7, #8]

			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8015268:	68bb      	ldr	r3, [r7, #8]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	683a      	ldr	r2, [r7, #0]
 801526e:	429a      	cmp	r2, r3
 8015270:	d102      	bne.n	8015278 <xTCPWindowRxFind+0x38>
			{
				pxReturn = pxSegment;
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	613b      	str	r3, [r7, #16]
				break;
 8015276:	e006      	b.n	8015286 <xTCPWindowRxFind+0x46>
			 pxIterator  = listGET_NEXT( pxIterator ) )
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	617b      	str	r3, [r7, #20]
		for( pxIterator  = listGET_NEXT( pxEnd );
 801527e:	697a      	ldr	r2, [r7, #20]
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	429a      	cmp	r2, r3
 8015284:	d1ea      	bne.n	801525c <xTCPWindowRxFind+0x1c>
			}
		}

		return pxReturn;
 8015286:	693b      	ldr	r3, [r7, #16]
	}
 8015288:	4618      	mov	r0, r3
 801528a:	3718      	adds	r7, #24
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <xTCPWindowNew>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowNew( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, int32_t lCount, BaseType_t xIsForRx )
	{
 8015290:	b580      	push	{r7, lr}
 8015292:	b088      	sub	sp, #32
 8015294:	af00      	add	r7, sp, #0
 8015296:	60f8      	str	r0, [r7, #12]
 8015298:	60b9      	str	r1, [r7, #8]
 801529a:	607a      	str	r2, [r7, #4]
 801529c:	603b      	str	r3, [r7, #0]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Allocate a new segment.  The socket will borrow all segments from a
		common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 801529e:	4b31      	ldr	r3, [pc, #196]	; (8015364 <xTCPWindowNew+0xd4>)
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d102      	bne.n	80152ac <xTCPWindowNew+0x1c>
		{
			/* If the TCP-stack runs out of segments, you might consider
			increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
			FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
			pxSegment = NULL;
 80152a6:	2300      	movs	r3, #0
 80152a8:	61fb      	str	r3, [r7, #28]
 80152aa:	e055      	b.n	8015358 <xTCPWindowNew+0xc8>
		}
		else
		{
			/* Pop the item at the head of the list.  Semaphore protection is
			not required as only the IP task will call these functions.  */
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 80152ac:	4b2d      	ldr	r3, [pc, #180]	; (8015364 <xTCPWindowNew+0xd4>)
 80152ae:	68db      	ldr	r3, [r3, #12]
 80152b0:	61bb      	str	r3, [r7, #24]
			pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 80152b2:	69bb      	ldr	r3, [r7, #24]
 80152b4:	68db      	ldr	r3, [r3, #12]
 80152b6:	4618      	mov	r0, r3
 80152b8:	f7ff febc 	bl	8015034 <vCastPointerTo_TCPSegment_t>
 80152bc:	61f8      	str	r0, [r7, #28]

			configASSERT( pxItem != NULL );
 80152be:	69bb      	ldr	r3, [r7, #24]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d10b      	bne.n	80152dc <xTCPWindowNew+0x4c>
 80152c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152c8:	b672      	cpsid	i
 80152ca:	f383 8811 	msr	BASEPRI, r3
 80152ce:	f3bf 8f6f 	isb	sy
 80152d2:	f3bf 8f4f 	dsb	sy
 80152d6:	b662      	cpsie	i
 80152d8:	617b      	str	r3, [r7, #20]
 80152da:	e7fe      	b.n	80152da <xTCPWindowNew+0x4a>
			configASSERT( pxSegment != NULL );
 80152dc:	69fb      	ldr	r3, [r7, #28]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d10b      	bne.n	80152fa <xTCPWindowNew+0x6a>
 80152e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152e6:	b672      	cpsid	i
 80152e8:	f383 8811 	msr	BASEPRI, r3
 80152ec:	f3bf 8f6f 	isb	sy
 80152f0:	f3bf 8f4f 	dsb	sy
 80152f4:	b662      	cpsie	i
 80152f6:	613b      	str	r3, [r7, #16]
 80152f8:	e7fe      	b.n	80152f8 <xTCPWindowNew+0x68>

			/* Remove the item from xSegmentList. */
			( void ) uxListRemove( pxItem );
 80152fa:	69b8      	ldr	r0, [r7, #24]
 80152fc:	f7f6 ffcd 	bl	800c29a <uxListRemove>

			/* Add it to either the connections' Rx or Tx queue. */
			if( xIsForRx != 0 )
 8015300:	683b      	ldr	r3, [r7, #0]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d006      	beq.n	8015314 <xTCPWindowNew+0x84>
			{
				vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	33a4      	adds	r3, #164	; 0xa4
 801530a:	69b9      	ldr	r1, [r7, #24]
 801530c:	4618      	mov	r0, r3
 801530e:	f7ff fef6 	bl	80150fe <vListInsertFifo>
 8015312:	e005      	b.n	8015320 <xTCPWindowNew+0x90>
			}
			else
			{
				vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	3390      	adds	r3, #144	; 0x90
 8015318:	69b9      	ldr	r1, [r7, #24]
 801531a:	4618      	mov	r0, r3
 801531c:	f7ff feef 	bl	80150fe <vListInsertFifo>
			}

			/* And set the segment's timer to zero */
			vTCPTimerSet( &pxSegment->xTransmitTimer );
 8015320:	69fb      	ldr	r3, [r7, #28]
 8015322:	3310      	adds	r3, #16
 8015324:	4618      	mov	r0, r3
 8015326:	f7ff fefa 	bl	801511e <vTCPTimerSet>

			pxSegment->u.ulFlags = 0;
 801532a:	69fb      	ldr	r3, [r7, #28]
 801532c:	2200      	movs	r2, #0
 801532e:	615a      	str	r2, [r3, #20]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d001      	beq.n	801533a <xTCPWindowNew+0xaa>
 8015336:	2101      	movs	r1, #1
 8015338:	e000      	b.n	801533c <xTCPWindowNew+0xac>
 801533a:	2100      	movs	r1, #0
 801533c:	69fa      	ldr	r2, [r7, #28]
 801533e:	7d93      	ldrb	r3, [r2, #22]
 8015340:	f361 0382 	bfi	r3, r1, #2, #1
 8015344:	7593      	strb	r3, [r2, #22]
			pxSegment->lMaxLength = lCount;
 8015346:	69fb      	ldr	r3, [r7, #28]
 8015348:	687a      	ldr	r2, [r7, #4]
 801534a:	605a      	str	r2, [r3, #4]
			pxSegment->lDataLength = lCount;
 801534c:	69fb      	ldr	r3, [r7, #28]
 801534e:	687a      	ldr	r2, [r7, #4]
 8015350:	609a      	str	r2, [r3, #8]
			pxSegment->ulSequenceNumber = ulSequenceNumber;
 8015352:	69fb      	ldr	r3, [r7, #28]
 8015354:	68ba      	ldr	r2, [r7, #8]
 8015356:	601a      	str	r2, [r3, #0]
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF */
		}

		return pxSegment;
 8015358:	69fb      	ldr	r3, [r7, #28]
	}
 801535a:	4618      	mov	r0, r3
 801535c:	3720      	adds	r7, #32
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}
 8015362:	bf00      	nop
 8015364:	24005330 	.word	0x24005330

08015368 <xTCPWindowRxEmpty>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowRxEmpty( const TCPWindow_t *pxWindow )
	{
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
		/* When the peer has a close request (FIN flag), the driver will check
		if there are missing packets in the Rx-queue.  It will accept the
		closure of the connection if both conditions are true:
		  - the Rx-queue is empty
		  - the highest Rx sequence number has been ACK'ed */
		if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015376:	2b00      	cmp	r3, #0
 8015378:	d002      	beq.n	8015380 <xTCPWindowRxEmpty+0x18>
		{
			/* Rx data has been stored while earlier packets were missing. */
			xReturn = pdFALSE;
 801537a:	2300      	movs	r3, #0
 801537c:	60fb      	str	r3, [r7, #12]
 801537e:	e00f      	b.n	80153a0 <xTCPWindowRxEmpty+0x38>
		}
		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	691a      	ldr	r2, [r3, #16]
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	699b      	ldr	r3, [r3, #24]
 8015388:	4619      	mov	r1, r3
 801538a:	4610      	mov	r0, r2
 801538c:	f7ff fea1 	bl	80150d2 <xSequenceGreaterThanOrEqual>
 8015390:	4603      	mov	r3, r0
 8015392:	2b00      	cmp	r3, #0
 8015394:	d002      	beq.n	801539c <xTCPWindowRxEmpty+0x34>
		{
			/* No Rx packets are being stored and the highest sequence number
			that has been received has been ACKed. */
			xReturn = pdTRUE;
 8015396:	2301      	movs	r3, #1
 8015398:	60fb      	str	r3, [r7, #12]
 801539a:	e001      	b.n	80153a0 <xTCPWindowRxEmpty+0x38>
		else
		{
			FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
				( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
				( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
			xReturn = pdFALSE;
 801539c:	2300      	movs	r3, #0
 801539e:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 80153a0:	68fb      	ldr	r3, [r7, #12]
	}
 80153a2:	4618      	mov	r0, r3
 80153a4:	3710      	adds	r7, #16
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}

080153aa <xTCPWindowGetHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowGetHead( const List_t *pxList )
	{
 80153aa:	b580      	push	{r7, lr}
 80153ac:	b084      	sub	sp, #16
 80153ae:	af00      	add	r7, sp, #0
 80153b0:	6078      	str	r0, [r7, #4]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Detaches and returns the head of a queue. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d102      	bne.n	80153c0 <xTCPWindowGetHead+0x16>
		{
			pxSegment = NULL;
 80153ba:	2300      	movs	r3, #0
 80153bc:	60fb      	str	r3, [r7, #12]
 80153be:	e00b      	b.n	80153d8 <xTCPWindowGetHead+0x2e>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	68db      	ldr	r3, [r3, #12]
 80153c4:	60bb      	str	r3, [r7, #8]
			pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	68db      	ldr	r3, [r3, #12]
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7ff fe32 	bl	8015034 <vCastPointerTo_TCPSegment_t>
 80153d0:	60f8      	str	r0, [r7, #12]

			( void ) uxListRemove( pxItem );
 80153d2:	68b8      	ldr	r0, [r7, #8]
 80153d4:	f7f6 ff61 	bl	800c29a <uxListRemove>
		}

		return pxSegment;
 80153d8:	68fb      	ldr	r3, [r7, #12]
	}
 80153da:	4618      	mov	r0, r3
 80153dc:	3710      	adds	r7, #16
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}

080153e2 <xTCPWindowPeekHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowPeekHead( const List_t *pxList )
	{
 80153e2:	b580      	push	{r7, lr}
 80153e4:	b084      	sub	sp, #16
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	6078      	str	r0, [r7, #4]
	const ListItem_t *pxItem;
	TCPSegment_t *pxReturn;

		/* Returns the head of a queue but it won't be detached. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d102      	bne.n	80153f8 <xTCPWindowPeekHead+0x16>
		{
			pxReturn = NULL;
 80153f2:	2300      	movs	r3, #0
 80153f4:	60fb      	str	r3, [r7, #12]
 80153f6:	e008      	b.n	801540a <xTCPWindowPeekHead+0x28>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	68db      	ldr	r3, [r3, #12]
 80153fc:	60bb      	str	r3, [r7, #8]
			pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	68db      	ldr	r3, [r3, #12]
 8015402:	4618      	mov	r0, r3
 8015404:	f7ff fe16 	bl	8015034 <vCastPointerTo_TCPSegment_t>
 8015408:	60f8      	str	r0, [r7, #12]
		}

		return pxReturn;
 801540a:	68fb      	ldr	r3, [r7, #12]
	}
 801540c:	4618      	mov	r0, r3
 801540e:	3710      	adds	r7, #16
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}

08015414 <vTCPWindowFree>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static void vTCPWindowFree( TCPSegment_t *pxSegment )
	{
 8015414:	b580      	push	{r7, lr}
 8015416:	b082      	sub	sp, #8
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
		/*  Free entry pxSegment because it's not used any more.  The ownership
		will be passed back to the segment pool.

		Unlink it from one of the queues, if any. */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015420:	2b00      	cmp	r3, #0
 8015422:	d004      	beq.n	801542e <vTCPWindowFree+0x1a>
		{
			( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	3318      	adds	r3, #24
 8015428:	4618      	mov	r0, r3
 801542a:	f7f6 ff36 	bl	800c29a <uxListRemove>
		}

		pxSegment->ulSequenceNumber = 0UL;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	2200      	movs	r2, #0
 8015432:	601a      	str	r2, [r3, #0]
		pxSegment->lDataLength = 0L;
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	2200      	movs	r2, #0
 8015438:	609a      	str	r2, [r3, #8]
		pxSegment->u.ulFlags = 0UL;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2200      	movs	r2, #0
 801543e:	615a      	str	r2, [r3, #20]

		/* Take it out of xRxSegments/xTxSegments */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015444:	2b00      	cmp	r3, #0
 8015446:	d004      	beq.n	8015452 <vTCPWindowFree+0x3e>
		{
			( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	332c      	adds	r3, #44	; 0x2c
 801544c:	4618      	mov	r0, r3
 801544e:	f7f6 ff24 	bl	800c29a <uxListRemove>
		}

		/* Return it to xSegmentList */
		vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	332c      	adds	r3, #44	; 0x2c
 8015456:	4619      	mov	r1, r3
 8015458:	4803      	ldr	r0, [pc, #12]	; (8015468 <vTCPWindowFree+0x54>)
 801545a:	f7ff fe50 	bl	80150fe <vListInsertFifo>
	}
 801545e:	bf00      	nop
 8015460:	3708      	adds	r7, #8
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}
 8015466:	bf00      	nop
 8015468:	24005330 	.word	0x24005330

0801546c <vTCPWindowDestroy>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
	{
 801546c:	b580      	push	{r7, lr}
 801546e:	b086      	sub	sp, #24
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]

		/*  Destroy a window.  A TCP window doesn't serve any more.  Return all
		owned segments to the pool.  In order to save code, it will make 2 rounds,
		one to remove the segments from xRxSegments, and a second round to clear
		xTxSegments*/
		for( xRound = 0; xRound < 2; xRound++ )
 8015474:	2300      	movs	r3, #0
 8015476:	613b      	str	r3, [r7, #16]
 8015478:	e020      	b.n	80154bc <vTCPWindowDestroy+0x50>
		{
			if( xRound != 0 )
 801547a:	693b      	ldr	r3, [r7, #16]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d003      	beq.n	8015488 <vTCPWindowDestroy+0x1c>
			{
				pxSegments = &( pxWindow->xRxSegments );
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	33a4      	adds	r3, #164	; 0xa4
 8015484:	617b      	str	r3, [r7, #20]
 8015486:	e002      	b.n	801548e <vTCPWindowDestroy+0x22>
			}
			else
			{
				pxSegments = &( pxWindow->xTxSegments );
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	3390      	adds	r3, #144	; 0x90
 801548c:	617b      	str	r3, [r7, #20]
			}

			if( listLIST_IS_INITIALISED( pxSegments ) )
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	689b      	ldr	r3, [r3, #8]
 8015492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015496:	d10e      	bne.n	80154b6 <vTCPWindowDestroy+0x4a>
			{
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015498:	e009      	b.n	80154ae <vTCPWindowDestroy+0x42>
				{
					pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	68db      	ldr	r3, [r3, #12]
 801549e:	68db      	ldr	r3, [r3, #12]
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7ff fdc7 	bl	8015034 <vCastPointerTo_TCPSegment_t>
 80154a6:	60f8      	str	r0, [r7, #12]
					vTCPWindowFree( pxSegment );
 80154a8:	68f8      	ldr	r0, [r7, #12]
 80154aa:	f7ff ffb3 	bl	8015414 <vTCPWindowFree>
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 80154ae:	697b      	ldr	r3, [r7, #20]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d1f1      	bne.n	801549a <vTCPWindowDestroy+0x2e>
		for( xRound = 0; xRound < 2; xRound++ )
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	3301      	adds	r3, #1
 80154ba:	613b      	str	r3, [r7, #16]
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	2b01      	cmp	r3, #1
 80154c0:	dddb      	ble.n	801547a <vTCPWindowDestroy+0xe>
				}
			}
		}
	}
 80154c2:	bf00      	nop
 80154c4:	3718      	adds	r7, #24
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}
	...

080154cc <vTCPWindowCreate>:
#endif /* ipconfigUSE_TCP_WIN == 1 */
/*-----------------------------------------------------------*/

void vTCPWindowCreate( TCPWindow_t *pxWindow, uint32_t ulRxWindowLength,
	uint32_t ulTxWindowLength, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b084      	sub	sp, #16
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	60f8      	str	r0, [r7, #12]
 80154d4:	60b9      	str	r1, [r7, #8]
 80154d6:	607a      	str	r2, [r7, #4]
 80154d8:	603b      	str	r3, [r7, #0]
	/* Create and initialize a window. */

	#if( ipconfigUSE_TCP_WIN == 1 )
	{
		if( xTCPSegments == NULL )
 80154da:	4b17      	ldr	r3, [pc, #92]	; (8015538 <vTCPWindowCreate+0x6c>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d101      	bne.n	80154e6 <vTCPWindowCreate+0x1a>
		{
			( void ) prvCreateSectors();
 80154e2:	f7ff fe59 	bl	8015198 <prvCreateSectors>
		}

		vListInitialise( &( pxWindow->xTxSegments ) );
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	3390      	adds	r3, #144	; 0x90
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7f6 fe4b 	bl	800c186 <vListInitialise>
		vListInitialise( &( pxWindow->xRxSegments ) );
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	33a4      	adds	r3, #164	; 0xa4
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7f6 fe46 	bl	800c186 <vListInitialise>

		vListInitialise( &( pxWindow->xPriorityQueue ) );	/* Priority queue: segments which must be sent immediately */
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	3340      	adds	r3, #64	; 0x40
 80154fe:	4618      	mov	r0, r3
 8015500:	f7f6 fe41 	bl	800c186 <vListInitialise>
		vListInitialise( &( pxWindow->xTxQueue ) );			/* Transmit queue: segments queued for transmission */
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	3354      	adds	r3, #84	; 0x54
 8015508:	4618      	mov	r0, r3
 801550a:	f7f6 fe3c 	bl	800c186 <vListInitialise>
		vListInitialise( &( pxWindow->xWaitQueue ) );		/* Waiting queue:  outstanding segments */
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	3368      	adds	r3, #104	; 0x68
 8015512:	4618      	mov	r0, r3
 8015514:	f7f6 fe37 	bl	800c186 <vListInitialise>
	{
		FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
			ulRxWindowLength, ulTxWindowLength ) );
	}

	pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	68ba      	ldr	r2, [r7, #8]
 801551c:	605a      	str	r2, [r3, #4]
	pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	687a      	ldr	r2, [r7, #4]
 8015522:	609a      	str	r2, [r3, #8]

	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8015524:	69fb      	ldr	r3, [r7, #28]
 8015526:	69ba      	ldr	r2, [r7, #24]
 8015528:	6839      	ldr	r1, [r7, #0]
 801552a:	68f8      	ldr	r0, [r7, #12]
 801552c:	f000 f806 	bl	801553c <vTCPWindowInit>
}
 8015530:	bf00      	nop
 8015532:	3710      	adds	r7, #16
 8015534:	46bd      	mov	sp, r7
 8015536:	bd80      	pop	{r7, pc}
 8015538:	2400532c 	.word	0x2400532c

0801553c <vTCPWindowInit>:
/*-----------------------------------------------------------*/

void vTCPWindowInit( TCPWindow_t *pxWindow, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 801553c:	b480      	push	{r7}
 801553e:	b087      	sub	sp, #28
 8015540:	af00      	add	r7, sp, #0
 8015542:	60f8      	str	r0, [r7, #12]
 8015544:	60b9      	str	r1, [r7, #8]
 8015546:	607a      	str	r2, [r7, #4]
 8015548:	603b      	str	r3, [r7, #0]
const int32_t l500ms = 500;
 801554a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801554e:	617b      	str	r3, [r7, #20]

	pxWindow->u.ulFlags = 0UL;
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	2200      	movs	r2, #0
 8015554:	601a      	str	r2, [r3, #0]
	pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8015556:	68fa      	ldr	r2, [r7, #12]
 8015558:	7813      	ldrb	r3, [r2, #0]
 801555a:	f043 0301 	orr.w	r3, r3, #1
 801555e:	7013      	strb	r3, [r2, #0]

	if( ulMSS != 0UL )
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d024      	beq.n	80155b0 <vTCPWindowInit+0x74>
	{
		if( pxWindow->usMSSInit != 0U )
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 801556c:	2b00      	cmp	r3, #0
 801556e:	d004      	beq.n	801557a <vTCPWindowInit+0x3e>
		{
			pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	b29a      	uxth	r2, r3
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		}

		if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8015580:	461a      	mov	r2, r3
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	4293      	cmp	r3, r2
 8015586:	d304      	bcc.n	8015592 <vTCPWindowInit+0x56>
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 801558e:	2b00      	cmp	r3, #0
 8015590:	d10e      	bne.n	80155b0 <vTCPWindowInit+0x74>
		{
			pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	685a      	ldr	r2, [r3, #4]
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	fbb2 f3f3 	udiv	r3, r2, r3
 801559c:	683a      	ldr	r2, [r7, #0]
 801559e:	fb02 f203 	mul.w	r2, r2, r3
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	605a      	str	r2, [r3, #4]
			pxWindow->usMSS = ( uint16_t ) ulMSS;
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	b29a      	uxth	r2, r3
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
	}
	#endif /* ipconfigUSE_TCP_WIN == 1 */

	/*Start with a timeout of 2 * 500 ms (1 sec). */
	pxWindow->lSRTT = l500ms;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	697a      	ldr	r2, [r7, #20]
 80155b4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Just for logging, to print relative sequence numbers. */
	pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	68ba      	ldr	r2, [r7, #8]
 80155ba:	60da      	str	r2, [r3, #12]

	/* The segment asked for in the next transmission. */
	pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	68ba      	ldr	r2, [r7, #8]
 80155c0:	611a      	str	r2, [r3, #16]

	/* The right-hand side of the receive window. */
	pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	68ba      	ldr	r2, [r7, #8]
 80155c6:	619a      	str	r2, [r3, #24]

	pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	687a      	ldr	r2, [r7, #4]
 80155cc:	61da      	str	r2, [r3, #28]

	/* The segment asked for in next transmission. */
	pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	687a      	ldr	r2, [r7, #4]
 80155d2:	621a      	str	r2, [r3, #32]

	/* The sequence number given to the next outgoing byte to be added is
	maintained by lTCPWindowTxAdd(). */
	pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	687a      	ldr	r2, [r7, #4]
 80155d8:	635a      	str	r2, [r3, #52]	; 0x34

	/* The right-hand side of the transmit window. */
	pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	687a      	ldr	r2, [r7, #4]
 80155de:	629a      	str	r2, [r3, #40]	; 0x28
	pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	687a      	ldr	r2, [r7, #4]
 80155e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80155e6:	bf00      	nop
 80155e8:	371c      	adds	r7, #28
 80155ea:	46bd      	mov	sp, r7
 80155ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f0:	4770      	bx	lr

080155f2 <xTCPWindowRxConfirm>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxConfirm( const TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength )
	{
 80155f2:	b580      	push	{r7, lr}
 80155f4:	b08a      	sub	sp, #40	; 0x28
 80155f6:	af00      	add	r7, sp, #0
 80155f8:	60f8      	str	r0, [r7, #12]
 80155fa:	60b9      	str	r1, [r7, #8]
 80155fc:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxBest = NULL;
 80155fe:	2300      	movs	r3, #0
 8015600:	627b      	str	r3, [r7, #36]	; 0x24
	const ListItem_t *pxIterator;
	uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8015602:	68ba      	ldr	r2, [r7, #8]
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	4413      	add	r3, r2
 8015608:	61fb      	str	r3, [r7, #28]
	const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	33ac      	adds	r3, #172	; 0xac
 801560e:	61bb      	str	r3, [r7, #24]
		and (ulSequenceNumber+ulLength).  Normally none will be found, because
		the next RX segment should have a sequence number equal to
		'(ulSequenceNumber+ulLength)'. */

		/* Iterate through all RX segments that are stored: */
		for( pxIterator  = listGET_NEXT( pxEnd );
 8015610:	69bb      	ldr	r3, [r7, #24]
 8015612:	685b      	ldr	r3, [r3, #4]
 8015614:	623b      	str	r3, [r7, #32]
 8015616:	e02a      	b.n	801566e <xTCPWindowRxConfirm+0x7c>
			 pxIterator != pxEnd;
			 pxIterator  = listGET_NEXT( pxIterator ) )
		{
			pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015618:	6a3b      	ldr	r3, [r7, #32]
 801561a:	68db      	ldr	r3, [r3, #12]
 801561c:	4618      	mov	r0, r3
 801561e:	f7ff fd09 	bl	8015034 <vCastPointerTo_TCPSegment_t>
 8015622:	6178      	str	r0, [r7, #20]
			/* And see if there is a segment for which:
			'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
			If there are more matching segments, the one with the lowest sequence number
			shall be taken */
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	68b9      	ldr	r1, [r7, #8]
 801562a:	4618      	mov	r0, r3
 801562c:	f7ff fd51 	bl	80150d2 <xSequenceGreaterThanOrEqual>
 8015630:	4603      	mov	r3, r0
 8015632:	2b00      	cmp	r3, #0
 8015634:	d018      	beq.n	8015668 <xTCPWindowRxConfirm+0x76>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 8015636:	697b      	ldr	r3, [r7, #20]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	69f9      	ldr	r1, [r7, #28]
 801563c:	4618      	mov	r0, r3
 801563e:	f7ff fd1a 	bl	8015076 <xSequenceLessThan>
 8015642:	4603      	mov	r3, r0
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015644:	2b00      	cmp	r3, #0
 8015646:	d00f      	beq.n	8015668 <xTCPWindowRxConfirm+0x76>
			{
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8015648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801564a:	2b00      	cmp	r3, #0
 801564c:	d00a      	beq.n	8015664 <xTCPWindowRxConfirm+0x72>
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	681a      	ldr	r2, [r3, #0]
 8015652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	4619      	mov	r1, r3
 8015658:	4610      	mov	r0, r2
 801565a:	f7ff fd0c 	bl	8015076 <xSequenceLessThan>
 801565e:	4603      	mov	r3, r0
 8015660:	2b00      	cmp	r3, #0
 8015662:	d001      	beq.n	8015668 <xTCPWindowRxConfirm+0x76>
				{
					pxBest = pxSegment;
 8015664:	697b      	ldr	r3, [r7, #20]
 8015666:	627b      	str	r3, [r7, #36]	; 0x24
			 pxIterator  = listGET_NEXT( pxIterator ) )
 8015668:	6a3b      	ldr	r3, [r7, #32]
 801566a:	685b      	ldr	r3, [r3, #4]
 801566c:	623b      	str	r3, [r7, #32]
		for( pxIterator  = listGET_NEXT( pxEnd );
 801566e:	6a3a      	ldr	r2, [r7, #32]
 8015670:	69bb      	ldr	r3, [r7, #24]
 8015672:	429a      	cmp	r2, r3
 8015674:	d1d0      	bne.n	8015618 <xTCPWindowRxConfirm+0x26>
				}
			}
		}

		if( ( pxBest != NULL ) &&
 8015676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015678:	2b00      	cmp	r3, #0
 801567a:	d003      	beq.n	8015684 <xTCPWindowRxConfirm+0x92>
			( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 801567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567e:	681b      	ldr	r3, [r3, #0]
		if( ( pxBest != NULL ) &&
 8015680:	68ba      	ldr	r2, [r7, #8]
 8015682:	429a      	cmp	r2, r3
				pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
				pxBest->lDataLength,
				pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
		}

		return pxBest;
 8015684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015686:	4618      	mov	r0, r3
 8015688:	3728      	adds	r7, #40	; 0x28
 801568a:	46bd      	mov	sp, r7
 801568c:	bd80      	pop	{r7, pc}
	...

08015690 <lTCPWindowRxCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowRxCheck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength, uint32_t ulSpace )
	{
 8015690:	b580      	push	{r7, lr}
 8015692:	b08c      	sub	sp, #48	; 0x30
 8015694:	af00      	add	r7, sp, #0
 8015696:	60f8      	str	r0, [r7, #12]
 8015698:	60b9      	str	r1, [r7, #8]
 801569a:	607a      	str	r2, [r7, #4]
 801569c:	603b      	str	r3, [r7, #0]
	uint32_t ulCurrentSequenceNumber, ulLast, ulSavedSequenceNumber, ulIntermediateResult = 0;
 801569e:	2300      	movs	r3, #0
 80156a0:	623b      	str	r3, [r7, #32]
		or there is not enough space.

		As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
		if more Rx data may be passed to the user after this packet. */

		ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	691b      	ldr	r3, [r3, #16]
 80156a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* For Selective Ack (SACK), used when out-of-sequence data come in. */
		pxWindow->ucOptionLength = 0U;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	2200      	movs	r2, #0
 80156ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Non-zero if TCP-windows contains data which must be popped. */
		pxWindow->ulUserDataLength = 0UL;
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	2200      	movs	r2, #0
 80156b4:	631a      	str	r2, [r3, #48]	; 0x30

		if( ulCurrentSequenceNumber == ulSequenceNumber )
 80156b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d143      	bne.n	8015746 <lTCPWindowRxCheck+0xb6>
		{
			/* This is the packet with the lowest sequence number we're waiting
			for.  It can be passed directly to the rx stream. */
			if( ulLength > ulSpace )
 80156be:	687a      	ldr	r2, [r7, #4]
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d903      	bls.n	80156ce <lTCPWindowRxCheck+0x3e>
			{
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
				lReturn = -1;
 80156c6:	f04f 33ff 	mov.w	r3, #4294967295
 80156ca:	627b      	str	r3, [r7, #36]	; 0x24
 80156cc:	e0bd      	b.n	801584a <lTCPWindowRxCheck+0x1ba>
			}
			else
			{
				ulCurrentSequenceNumber += ulLength;
 80156ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	4413      	add	r3, r2
 80156d4:	62fb      	str	r3, [r7, #44]	; 0x2c

				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d02c      	beq.n	801573a <lTCPWindowRxCheck+0xaa>
				{
					ulSavedSequenceNumber = ulCurrentSequenceNumber;
 80156e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e2:	617b      	str	r3, [r7, #20]
                    If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                    So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                    clean them out. */
                    do
                    {
                        pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 80156e4:	687a      	ldr	r2, [r7, #4]
 80156e6:	68b9      	ldr	r1, [r7, #8]
 80156e8:	68f8      	ldr	r0, [r7, #12]
 80156ea:	f7ff ff82 	bl	80155f2 <xTCPWindowRxConfirm>
 80156ee:	61b8      	str	r0, [r7, #24]

                        if ( pxFound != NULL )
 80156f0:	69bb      	ldr	r3, [r7, #24]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d002      	beq.n	80156fc <lTCPWindowRxCheck+0x6c>
                        {
                            /* Remove it because it will be passed to user directly. */
                            vTCPWindowFree( pxFound );
 80156f6:	69b8      	ldr	r0, [r7, #24]
 80156f8:	f7ff fe8c 	bl	8015414 <vTCPWindowFree>
                        }
                    } while ( pxFound != NULL );
 80156fc:	69bb      	ldr	r3, [r7, #24]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d1f0      	bne.n	80156e4 <lTCPWindowRxCheck+0x54>

					/*  Check for following segments that are already in the
					queue and increment ulCurrentSequenceNumber. */
					for( ;; )
					{
						pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8015702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015704:	68f8      	ldr	r0, [r7, #12]
 8015706:	f7ff fd9b 	bl	8015240 <xTCPWindowRxFind>
 801570a:	61b8      	str	r0, [r7, #24]
						if( pxFound == NULL )
 801570c:	69bb      	ldr	r3, [r7, #24]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d009      	beq.n	8015726 <lTCPWindowRxCheck+0x96>
						{
							break;
						}
						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8015712:	69bb      	ldr	r3, [r7, #24]
 8015714:	689b      	ldr	r3, [r3, #8]
 8015716:	461a      	mov	r2, r3
 8015718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801571a:	4413      	add	r3, r2
 801571c:	62fb      	str	r3, [r7, #44]	; 0x2c

						/* As all packet below this one have been passed to the
						user it can be discarded. */
						vTCPWindowFree( pxFound );
 801571e:	69b8      	ldr	r0, [r7, #24]
 8015720:	f7ff fe78 	bl	8015414 <vTCPWindowFree>
						pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8015724:	e7ed      	b.n	8015702 <lTCPWindowRxCheck+0x72>
							break;
 8015726:	bf00      	nop
					}

					if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 8015728:	697a      	ldr	r2, [r7, #20]
 801572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801572c:	429a      	cmp	r2, r3
 801572e:	d004      	beq.n	801573a <lTCPWindowRxCheck+0xaa>
					{
						/*  After the current data-package, there is more data
						to be popped. */
						pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8015730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015732:	697b      	ldr	r3, [r7, #20]
 8015734:	1ad2      	subs	r2, r2, r3
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	631a      	str	r2, [r3, #48]	; 0x30
								listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
						}
					}
				}

				pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801573e:	611a      	str	r2, [r3, #16]

				/* Packet was expected, may be passed directly to the socket
				buffer or application.  Store the packet at offset 0. */
				lReturn = 0;
 8015740:	2300      	movs	r3, #0
 8015742:	627b      	str	r3, [r7, #36]	; 0x24
 8015744:	e081      	b.n	801584a <lTCPWindowRxCheck+0x1ba>
			}
		}
		else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	3301      	adds	r3, #1
 801574a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801574c:	429a      	cmp	r2, r3
 801574e:	d103      	bne.n	8015758 <lTCPWindowRxCheck+0xc8>
		{
			/* Looks like a TCP keep-alive message.  Do not accept/store Rx data
			ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
			lReturn = -1;
 8015750:	f04f 33ff 	mov.w	r3, #4294967295
 8015754:	627b      	str	r3, [r7, #36]	; 0x24
 8015756:	e078      	b.n	801584a <lTCPWindowRxCheck+0x1ba>
			/* The packet is not the one expected.  See if it falls within the Rx
			window so it can be stored. */

			/*  An "out-of-sequence" segment was received, must have missed one.
			Prepare a SACK (Selective ACK). */
			ulLast = ulSequenceNumber + ulLength;
 8015758:	68ba      	ldr	r2, [r7, #8]
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	4413      	add	r3, r2
 801575e:	62bb      	str	r3, [r7, #40]	; 0x28

			ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8015760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015764:	1ad3      	subs	r3, r2, r3
 8015766:	623b      	str	r3, [r7, #32]
			/* The cast from unsigned long to signed long is on purpose. */
			lDistance = ( int32_t ) ulIntermediateResult;
 8015768:	6a3b      	ldr	r3, [r7, #32]
 801576a:	61fb      	str	r3, [r7, #28]

			if( lDistance <= 0 )
 801576c:	69fb      	ldr	r3, [r7, #28]
 801576e:	2b00      	cmp	r3, #0
 8015770:	dc03      	bgt.n	801577a <lTCPWindowRxCheck+0xea>
			{
				/* An earlier has been received, must be a retransmission of a
				packet that has been accepted already.  No need to send out a
				Selective ACK (SACK). */
				lReturn = -1;
 8015772:	f04f 33ff 	mov.w	r3, #4294967295
 8015776:	627b      	str	r3, [r7, #36]	; 0x24
 8015778:	e067      	b.n	801584a <lTCPWindowRxCheck+0x1ba>
			}
			else if( lDistance > ( int32_t ) ulSpace )
 801577a:	683b      	ldr	r3, [r7, #0]
 801577c:	69fa      	ldr	r2, [r7, #28]
 801577e:	429a      	cmp	r2, r3
 8015780:	dd03      	ble.n	801578a <lTCPWindowRxCheck+0xfa>
			{
				/* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
				sequence number of this packet is too far ahead, ignore it. */
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
				lReturn = -1;
 8015782:	f04f 33ff 	mov.w	r3, #4294967295
 8015786:	627b      	str	r3, [r7, #36]	; 0x24
 8015788:	e05f      	b.n	801584a <lTCPWindowRxCheck+0x1ba>
				 * This is useful because subsequent packets will be SACK'd with
				 * single one message
				 */
				for( ;; )
				{
					pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 801578a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801578c:	68f8      	ldr	r0, [r7, #12]
 801578e:	f7ff fd57 	bl	8015240 <xTCPWindowRxFind>
 8015792:	61b8      	str	r0, [r7, #24]
					if( pxFound == NULL )
 8015794:	69bb      	ldr	r3, [r7, #24]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d006      	beq.n	80157a8 <lTCPWindowRxCheck+0x118>
					{
						break;
					}
					ulLast += ( uint32_t ) pxFound->lDataLength;
 801579a:	69bb      	ldr	r3, [r7, #24]
 801579c:	689b      	ldr	r3, [r3, #8]
 801579e:	461a      	mov	r2, r3
 80157a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a2:	4413      	add	r3, r2
 80157a4:	62bb      	str	r3, [r7, #40]	; 0x28
					pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 80157a6:	e7f0      	b.n	801578a <lTCPWindowRxCheck+0xfa>
						break;
 80157a8:	bf00      	nop
						( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
				}

				/* Now prepare the SACK message.
				Code OPTION_CODE_SINGLE_SACK already in network byte order. */
				pxWindow->ulOptionsData[0] = OPTION_CODE_SINGLE_SACK;
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	4a29      	ldr	r2, [pc, #164]	; (8015854 <lTCPWindowRxCheck+0x1c4>)
 80157ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				/* First sequence number that we received. */
				pxWindow->ulOptionsData[1] = FreeRTOS_htonl( ulSequenceNumber );
 80157b2:	68bb      	ldr	r3, [r7, #8]
 80157b4:	061a      	lsls	r2, r3, #24
 80157b6:	68bb      	ldr	r3, [r7, #8]
 80157b8:	021b      	lsls	r3, r3, #8
 80157ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80157be:	431a      	orrs	r2, r3
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	0a1b      	lsrs	r3, r3, #8
 80157c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80157c8:	431a      	orrs	r2, r3
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	0e1b      	lsrs	r3, r3, #24
 80157ce:	431a      	orrs	r2, r3
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

				/* Last + 1 */
				pxWindow->ulOptionsData[2] = FreeRTOS_htonl( ulLast );
 80157d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157d8:	061a      	lsls	r2, r3, #24
 80157da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157dc:	021b      	lsls	r3, r3, #8
 80157de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80157e2:	431a      	orrs	r2, r3
 80157e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e6:	0a1b      	lsrs	r3, r3, #8
 80157e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80157ec:	431a      	orrs	r2, r3
 80157ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f0:	0e1b      	lsrs	r3, r3, #24
 80157f2:	431a      	orrs	r2, r3
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				/* Which make 12 (3*4) option bytes. */
				pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	220c      	movs	r2, #12
 80157fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 8015802:	68b9      	ldr	r1, [r7, #8]
 8015804:	68f8      	ldr	r0, [r7, #12]
 8015806:	f7ff fd1b 	bl	8015240 <xTCPWindowRxFind>
 801580a:	61b8      	str	r0, [r7, #24]

				if( pxFound != NULL )
 801580c:	69bb      	ldr	r3, [r7, #24]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d003      	beq.n	801581a <lTCPWindowRxCheck+0x18a>
				{
					/* This out-of-sequence packet has been received for a
					second time.  It is already stored but do send a SACK
					again. */
					lReturn = -1;
 8015812:	f04f 33ff 	mov.w	r3, #4294967295
 8015816:	627b      	str	r3, [r7, #36]	; 0x24
 8015818:	e017      	b.n	801584a <lTCPWindowRxCheck+0x1ba>
				}
				else
				{
					pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 801581a:	687a      	ldr	r2, [r7, #4]
 801581c:	2301      	movs	r3, #1
 801581e:	68b9      	ldr	r1, [r7, #8]
 8015820:	68f8      	ldr	r0, [r7, #12]
 8015822:	f7ff fd35 	bl	8015290 <xTCPWindowNew>
 8015826:	61b8      	str	r0, [r7, #24]

					if( pxFound == NULL )
 8015828:	69bb      	ldr	r3, [r7, #24]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d107      	bne.n	801583e <lTCPWindowRxCheck+0x1ae>
					{
						/* Can not send a SACK, because the segment cannot be
						stored. */
						pxWindow->ucOptionLength = 0U;
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	2200      	movs	r2, #0
 8015832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

						/* Needs to be stored but there is no segment
						available. */
						lReturn = -1;
 8015836:	f04f 33ff 	mov.w	r3, #4294967295
 801583a:	627b      	str	r3, [r7, #36]	; 0x24
 801583c:	e005      	b.n	801584a <lTCPWindowRxCheck+0x1ba>
							FreeRTOS_flush_logging( );
						}

						/* Return a positive value.  The packet may be accepted
						and stored but an earlier packet is still missing. */
						ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 801583e:	68ba      	ldr	r2, [r7, #8]
 8015840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015842:	1ad3      	subs	r3, r2, r3
 8015844:	623b      	str	r3, [r7, #32]
						lReturn = ( int32_t ) ulIntermediateResult;
 8015846:	6a3b      	ldr	r3, [r7, #32]
 8015848:	627b      	str	r3, [r7, #36]	; 0x24
					}
				}
			}
		}

		return lReturn;
 801584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801584c:	4618      	mov	r0, r3
 801584e:	3730      	adds	r7, #48	; 0x30
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}
 8015854:	0a050101 	.word	0x0a050101

08015858 <lTCPIncrementTxPosition>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static int32_t lTCPIncrementTxPosition( int32_t lPosition, int32_t lMax, int32_t lCount )
	{
 8015858:	b480      	push	{r7}
 801585a:	b087      	sub	sp, #28
 801585c:	af00      	add	r7, sp, #0
 801585e:	60f8      	str	r0, [r7, #12]
 8015860:	60b9      	str	r1, [r7, #8]
 8015862:	607a      	str	r2, [r7, #4]
	int32_t lReturn;

		/* +TCP stores data in circular buffers.  Calculate the next position to
		store. */
		lReturn = lPosition + lCount;
 8015864:	68fa      	ldr	r2, [r7, #12]
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	4413      	add	r3, r2
 801586a:	617b      	str	r3, [r7, #20]
		if( lReturn >= lMax )
 801586c:	697a      	ldr	r2, [r7, #20]
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	429a      	cmp	r2, r3
 8015872:	db03      	blt.n	801587c <lTCPIncrementTxPosition+0x24>
		{
			lReturn -= lMax;
 8015874:	697a      	ldr	r2, [r7, #20]
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	1ad3      	subs	r3, r2, r3
 801587a:	617b      	str	r3, [r7, #20]
		}

		return lReturn;
 801587c:	697b      	ldr	r3, [r7, #20]
	}
 801587e:	4618      	mov	r0, r3
 8015880:	371c      	adds	r7, #28
 8015882:	46bd      	mov	sp, r7
 8015884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015888:	4770      	bx	lr
	...

0801588c <lTCPWindowTxAdd>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowTxAdd( TCPWindow_t *pxWindow, uint32_t ulLength, int32_t lPosition, int32_t lMax )
	{
 801588c:	b580      	push	{r7, lr}
 801588e:	b08a      	sub	sp, #40	; 0x28
 8015890:	af00      	add	r7, sp, #0
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
 8015898:	603b      	str	r3, [r7, #0]
	int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t lDone = 0;
 801589e:	2300      	movs	r3, #0
 80158a0:	623b      	str	r3, [r7, #32]
	int32_t lBufferIndex = lPosition;
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	61fb      	str	r3, [r7, #28]
	TCPSegment_t *pxSegment = pxWindow->pxHeadSegment;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80158aa:	61bb      	str	r3, [r7, #24]

		/* Puts a message in the Tx-window (after buffer size has been
		verified). */
		if( pxSegment != NULL )
 80158ac:	69bb      	ldr	r3, [r7, #24]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	f000 8096 	beq.w	80159e0 <lTCPWindowTxAdd+0x154>
		{
			if( pxSegment->lDataLength < pxSegment->lMaxLength )
 80158b4:	69bb      	ldr	r3, [r7, #24]
 80158b6:	689a      	ldr	r2, [r3, #8]
 80158b8:	69bb      	ldr	r3, [r7, #24]
 80158ba:	685b      	ldr	r3, [r3, #4]
 80158bc:	429a      	cmp	r2, r3
 80158be:	f280 808f 	bge.w	80159e0 <lTCPWindowTxAdd+0x154>
			{
				if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 80158c2:	69bb      	ldr	r3, [r7, #24]
 80158c4:	7d9b      	ldrb	r3, [r3, #22]
 80158c6:	f003 0301 	and.w	r3, r3, #1
 80158ca:	b2db      	uxtb	r3, r3
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	f040 8087 	bne.w	80159e0 <lTCPWindowTxAdd+0x154>
 80158d2:	69bb      	ldr	r3, [r7, #24]
 80158d4:	689b      	ldr	r3, [r3, #8]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	f000 8082 	beq.w	80159e0 <lTCPWindowTxAdd+0x154>
				{
					/* Adding data to a segment that was already in the TX queue.  It
					will be filled-up to a maximum of MSS (maximum segment size). */
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 80158dc:	69bb      	ldr	r3, [r7, #24]
 80158de:	685a      	ldr	r2, [r3, #4]
 80158e0:	69bb      	ldr	r3, [r7, #24]
 80158e2:	689b      	ldr	r3, [r3, #8]
 80158e4:	1ad3      	subs	r3, r2, r3
 80158e6:	4619      	mov	r1, r3
 80158e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158ea:	f7ff fb83 	bl	8014ff4 <FreeRTOS_min_int32>
 80158ee:	6178      	str	r0, [r7, #20]

					pxSegment->lDataLength += lToWrite;
 80158f0:	69bb      	ldr	r3, [r7, #24]
 80158f2:	689a      	ldr	r2, [r3, #8]
 80158f4:	697b      	ldr	r3, [r7, #20]
 80158f6:	441a      	add	r2, r3
 80158f8:	69bb      	ldr	r3, [r7, #24]
 80158fa:	609a      	str	r2, [r3, #8]

					if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 80158fc:	69bb      	ldr	r3, [r7, #24]
 80158fe:	689a      	ldr	r2, [r3, #8]
 8015900:	69bb      	ldr	r3, [r7, #24]
 8015902:	685b      	ldr	r3, [r3, #4]
 8015904:	429a      	cmp	r2, r3
 8015906:	db02      	blt.n	801590e <lTCPWindowTxAdd+0x82>
					{
						/* This segment is full, don't add more bytes. */
						pxWindow->pxHeadSegment = NULL;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	2200      	movs	r2, #0
 801590c:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					lBytesLeft -= lToWrite;
 801590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015910:	697b      	ldr	r3, [r7, #20]
 8015912:	1ad3      	subs	r3, r2, r3
 8015914:	627b      	str	r3, [r7, #36]	; 0x24

					/* ulNextTxSequenceNumber is the sequence number of the next byte to
					be stored for transmission. */
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	441a      	add	r2, r3
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	635a      	str	r2, [r3, #52]	; 0x34

					/* Increased the return value. */
					lDone += lToWrite;
 8015922:	6a3a      	ldr	r2, [r7, #32]
 8015924:	697b      	ldr	r3, [r7, #20]
 8015926:	4413      	add	r3, r2
 8015928:	623b      	str	r3, [r7, #32]

					/* Some detailed logging, for those who're interested. */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 801592a:	4b32      	ldr	r3, [pc, #200]	; (80159f4 <lTCPWindowTxAdd+0x168>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	2b01      	cmp	r3, #1
						FreeRTOS_flush_logging( );
					}

					/* Calculate the next position in the circular data buffer, knowing
					its maximum length 'lMax'. */
					lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8015930:	697a      	ldr	r2, [r7, #20]
 8015932:	6839      	ldr	r1, [r7, #0]
 8015934:	69f8      	ldr	r0, [r7, #28]
 8015936:	f7ff ff8f 	bl	8015858 <lTCPIncrementTxPosition>
 801593a:	61f8      	str	r0, [r7, #28]
				}
			}
		}

		while( lBytesLeft > 0 )
 801593c:	e050      	b.n	80159e0 <lTCPWindowTxAdd+0x154>
		{
			/* The current transmission segment is full, create new segments as
			needed. */
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8015948:	461a      	mov	r2, r3
 801594a:	2300      	movs	r3, #0
 801594c:	68f8      	ldr	r0, [r7, #12]
 801594e:	f7ff fc9f 	bl	8015290 <xTCPWindowNew>
 8015952:	61b8      	str	r0, [r7, #24]

			if( pxSegment != NULL )
 8015954:	69bb      	ldr	r3, [r7, #24]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d046      	beq.n	80159e8 <lTCPWindowTxAdd+0x15c>
			{
				/* Store as many as needed, but no more than the maximum
				(MSS). */
				lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 801595a:	69bb      	ldr	r3, [r7, #24]
 801595c:	685b      	ldr	r3, [r3, #4]
 801595e:	4619      	mov	r1, r3
 8015960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015962:	f7ff fb47 	bl	8014ff4 <FreeRTOS_min_int32>
 8015966:	6178      	str	r0, [r7, #20]

				pxSegment->lDataLength = lToWrite;
 8015968:	69bb      	ldr	r3, [r7, #24]
 801596a:	697a      	ldr	r2, [r7, #20]
 801596c:	609a      	str	r2, [r3, #8]
				pxSegment->lStreamPos = lBufferIndex;
 801596e:	69bb      	ldr	r3, [r7, #24]
 8015970:	69fa      	ldr	r2, [r7, #28]
 8015972:	60da      	str	r2, [r3, #12]
				lBytesLeft -= lToWrite;
 8015974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	1ad3      	subs	r3, r2, r3
 801597a:	627b      	str	r3, [r7, #36]	; 0x24
				lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 801597c:	697a      	ldr	r2, [r7, #20]
 801597e:	6839      	ldr	r1, [r7, #0]
 8015980:	69f8      	ldr	r0, [r7, #28]
 8015982:	f7ff ff69 	bl	8015858 <lTCPIncrementTxPosition>
 8015986:	61f8      	str	r0, [r7, #28]
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801598c:	697b      	ldr	r3, [r7, #20]
 801598e:	441a      	add	r2, r3
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	635a      	str	r2, [r3, #52]	; 0x34
				lDone += lToWrite;
 8015994:	6a3a      	ldr	r2, [r7, #32]
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	4413      	add	r3, r2
 801599a:	623b      	str	r3, [r7, #32]

				/* Link this segment in the Tx-Queue. */
				vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80159a2:	69bb      	ldr	r3, [r7, #24]
 80159a4:	3318      	adds	r3, #24
 80159a6:	4619      	mov	r1, r3
 80159a8:	4610      	mov	r0, r2
 80159aa:	f7ff fba8 	bl	80150fe <vListInsertFifo>

				/* Let 'pxHeadSegment' point to this segment if there is still
				space. */
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 80159ae:	69bb      	ldr	r3, [r7, #24]
 80159b0:	689a      	ldr	r2, [r3, #8]
 80159b2:	69bb      	ldr	r3, [r7, #24]
 80159b4:	685b      	ldr	r3, [r3, #4]
 80159b6:	429a      	cmp	r2, r3
 80159b8:	da03      	bge.n	80159c2 <lTCPWindowTxAdd+0x136>
				{
					pxWindow->pxHeadSegment = pxSegment;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	69ba      	ldr	r2, [r7, #24]
 80159be:	67da      	str	r2, [r3, #124]	; 0x7c
 80159c0:	e002      	b.n	80159c8 <lTCPWindowTxAdd+0x13c>
				}
				else
				{
					pxWindow->pxHeadSegment = NULL;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	2200      	movs	r2, #0
 80159c6:	67da      	str	r2, [r3, #124]	; 0x7c
				}

				if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80159ce:	2b17      	cmp	r3, #23
 80159d0:	d006      	beq.n	80159e0 <lTCPWindowTxAdd+0x154>
				{
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 80159d2:	4b08      	ldr	r3, [pc, #32]	; (80159f4 <lTCPWindowTxAdd+0x168>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	2b02      	cmp	r3, #2
 80159d8:	dc02      	bgt.n	80159e0 <lTCPWindowTxAdd+0x154>
						( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 80159da:	4b06      	ldr	r3, [pc, #24]	; (80159f4 <lTCPWindowTxAdd+0x168>)
 80159dc:	681b      	ldr	r3, [r3, #0]
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 80159de:	2b01      	cmp	r3, #1
		while( lBytesLeft > 0 )
 80159e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	dcab      	bgt.n	801593e <lTCPWindowTxAdd+0xb2>
 80159e6:	e000      	b.n	80159ea <lTCPWindowTxAdd+0x15e>
				No more data can be sent at the moment. */
				if( lDone != 0 )
				{
					FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
				}
				break;
 80159e8:	bf00      	nop
			}
		}

		return lDone;
 80159ea:	6a3b      	ldr	r3, [r7, #32]
	}
 80159ec:	4618      	mov	r0, r3
 80159ee:	3728      	adds	r7, #40	; 0x28
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}
 80159f4:	24005344 	.word	0x24005344

080159f8 <xTCPWindowTxDone>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxDone( const TCPWindow_t *pxWindow )
	{
 80159f8:	b480      	push	{r7}
 80159fa:	b083      	sub	sp, #12
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
		return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments) );
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d101      	bne.n	8015a0e <xTCPWindowTxDone+0x16>
 8015a0a:	2301      	movs	r3, #1
 8015a0c:	e000      	b.n	8015a10 <xTCPWindowTxDone+0x18>
 8015a0e:	2300      	movs	r3, #0
	}
 8015a10:	4618      	mov	r0, r3
 8015a12:	370c      	adds	r7, #12
 8015a14:	46bd      	mov	sp, r7
 8015a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1a:	4770      	bx	lr

08015a1c <prvTCPWindowTxHasSpace>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow, uint32_t ulWindowSize )
	{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b086      	sub	sp, #24
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
 8015a24:	6039      	str	r1, [r7, #0]
	uint32_t ulNettSize;

		/* This function will look if there is new transmission data.  It will
		return true if there is data to be sent. */

		pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	3354      	adds	r3, #84	; 0x54
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7ff fcd9 	bl	80153e2 <xTCPWindowPeekHead>
 8015a30:	60f8      	str	r0, [r7, #12]

		if( pxSegment == NULL )
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d102      	bne.n	8015a3e <prvTCPWindowTxHasSpace+0x22>
		{
			xHasSpace = pdFALSE;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	613b      	str	r3, [r7, #16]
 8015a3c:	e02f      	b.n	8015a9e <prvTCPWindowTxHasSpace+0x82>
		}
		else
		{
			/* How much data is outstanding, i.e. how much data has been sent
			but not yet acknowledged ? */
			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	6a1b      	ldr	r3, [r3, #32]
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d306      	bcc.n	8015a58 <prvTCPWindowTxHasSpace+0x3c>
			{
				ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	6a1b      	ldr	r3, [r3, #32]
 8015a52:	1ad3      	subs	r3, r2, r3
 8015a54:	617b      	str	r3, [r7, #20]
 8015a56:	e001      	b.n	8015a5c <prvTCPWindowTxHasSpace+0x40>
			}
			else
			{
				ulTxOutstanding = 0UL;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	617b      	str	r3, [r7, #20]
			}

			/* Subtract this from the peer's space. */
			ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8015a5c:	6979      	ldr	r1, [r7, #20]
 8015a5e:	6838      	ldr	r0, [r7, #0]
 8015a60:	f7ff fad8 	bl	8015014 <FreeRTOS_min_uint32>
 8015a64:	4602      	mov	r2, r0
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	1a9b      	subs	r3, r3, r2
 8015a6a:	60bb      	str	r3, [r7, #8]

			/* See if the next segment may be sent. */
			if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	689b      	ldr	r3, [r3, #8]
 8015a70:	461a      	mov	r2, r3
 8015a72:	68bb      	ldr	r3, [r7, #8]
 8015a74:	4293      	cmp	r3, r2
 8015a76:	d302      	bcc.n	8015a7e <prvTCPWindowTxHasSpace+0x62>
			{
				xHasSpace = pdTRUE;
 8015a78:	2301      	movs	r3, #1
 8015a7a:	613b      	str	r3, [r7, #16]
 8015a7c:	e001      	b.n	8015a82 <prvTCPWindowTxHasSpace+0x66>
			}
			else
			{
				xHasSpace = pdFALSE;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	613b      	str	r3, [r7, #16]

			/* If 'xHasSpace', it looks like the peer has at least space for 1
			more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
			limitation of the transmission window (in case of many resends it
			may be decreased). */
			if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8015a82:	697b      	ldr	r3, [r7, #20]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d00a      	beq.n	8015a9e <prvTCPWindowTxHasSpace+0x82>
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	689a      	ldr	r2, [r3, #8]
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	689b      	ldr	r3, [r3, #8]
 8015a90:	4619      	mov	r1, r3
 8015a92:	697b      	ldr	r3, [r7, #20]
 8015a94:	440b      	add	r3, r1
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d201      	bcs.n	8015a9e <prvTCPWindowTxHasSpace+0x82>
			{
				xHasSpace = pdFALSE;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	613b      	str	r3, [r7, #16]
			}
		}

		return xHasSpace;
 8015a9e:	693b      	ldr	r3, [r7, #16]
	}
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	3718      	adds	r7, #24
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd80      	pop	{r7, pc}

08015aa8 <xTCPWindowTxHasData>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow, uint32_t ulWindowSize, TickType_t *pulDelay )
	{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b088      	sub	sp, #32
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	60f8      	str	r0, [r7, #12]
 8015ab0:	60b9      	str	r1, [r7, #8]
 8015ab2:	607a      	str	r2, [r7, #4]
	TCPSegment_t const * pxSegment;
	BaseType_t xReturn;
	TickType_t ulAge, ulMaxAge;

		*pulDelay = 0U;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	601a      	str	r2, [r3, #0]

		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d002      	beq.n	8015ac8 <xTCPWindowTxHasData+0x20>
		{
			/* No need to look at retransmissions or new transmission as long as
			there are priority segments.  *pulDelay equals zero, meaning it must
			be sent out immediately. */
			xReturn = pdTRUE;
 8015ac2:	2301      	movs	r3, #1
 8015ac4:	61fb      	str	r3, [r7, #28]
 8015ac6:	e04a      	b.n	8015b5e <xTCPWindowTxHasData+0xb6>
		}
		else
		{
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	3368      	adds	r3, #104	; 0x68
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7ff fc88 	bl	80153e2 <xTCPWindowPeekHead>
 8015ad2:	61b8      	str	r0, [r7, #24]

			if( pxSegment != NULL )
 8015ad4:	69bb      	ldr	r3, [r7, #24]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d019      	beq.n	8015b0e <xTCPWindowTxHasData+0x66>
			{
				/* There is an outstanding segment, see if it is time to resend
				it. */
				ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 8015ada:	69bb      	ldr	r3, [r7, #24]
 8015adc:	3310      	adds	r3, #16
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f7ff fb2a 	bl	8015138 <ulTimerGetAge>
 8015ae4:	6178      	str	r0, [r7, #20]

				/* After a packet has been sent for the first time, it will wait
				'1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
				each time doubling the time-out */
				ulMaxAge = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015aea:	461a      	mov	r2, r3
 8015aec:	69bb      	ldr	r3, [r7, #24]
 8015aee:	7d1b      	ldrb	r3, [r3, #20]
 8015af0:	fa02 f303 	lsl.w	r3, r2, r3
 8015af4:	613b      	str	r3, [r7, #16]

				if( ulMaxAge > ulAge )
 8015af6:	693a      	ldr	r2, [r7, #16]
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d904      	bls.n	8015b08 <xTCPWindowTxHasData+0x60>
				{
					/* A segment must be sent after this amount of msecs */
					*pulDelay = ulMaxAge - ulAge;
 8015afe:	693a      	ldr	r2, [r7, #16]
 8015b00:	697b      	ldr	r3, [r7, #20]
 8015b02:	1ad2      	subs	r2, r2, r3
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	601a      	str	r2, [r3, #0]
				}

				xReturn = pdTRUE;
 8015b08:	2301      	movs	r3, #1
 8015b0a:	61fb      	str	r3, [r7, #28]
 8015b0c:	e027      	b.n	8015b5e <xTCPWindowTxHasData+0xb6>
			}
			else
			{
				/* No priority segment, no outstanding data, see if there is new
				transmission data. */
				pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	3354      	adds	r3, #84	; 0x54
 8015b12:	4618      	mov	r0, r3
 8015b14:	f7ff fc65 	bl	80153e2 <xTCPWindowPeekHead>
 8015b18:	61b8      	str	r0, [r7, #24]

				/* See if it fits in the peer's reception window. */
				if( pxSegment == NULL )
 8015b1a:	69bb      	ldr	r3, [r7, #24]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d102      	bne.n	8015b26 <xTCPWindowTxHasData+0x7e>
				{
					xReturn = pdFALSE;
 8015b20:	2300      	movs	r3, #0
 8015b22:	61fb      	str	r3, [r7, #28]
 8015b24:	e01b      	b.n	8015b5e <xTCPWindowTxHasData+0xb6>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8015b26:	68b9      	ldr	r1, [r7, #8]
 8015b28:	68f8      	ldr	r0, [r7, #12]
 8015b2a:	f7ff ff77 	bl	8015a1c <prvTCPWindowTxHasSpace>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d102      	bne.n	8015b3a <xTCPWindowTxHasData+0x92>
				{
					/* Too many outstanding messages. */
					xReturn = pdFALSE;
 8015b34:	2300      	movs	r3, #0
 8015b36:	61fb      	str	r3, [r7, #28]
 8015b38:	e011      	b.n	8015b5e <xTCPWindowTxHasData+0xb6>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	781b      	ldrb	r3, [r3, #0]
 8015b3e:	f003 0302 	and.w	r3, r3, #2
 8015b42:	b2db      	uxtb	r3, r3
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d008      	beq.n	8015b5a <xTCPWindowTxHasData+0xb2>
 8015b48:	69bb      	ldr	r3, [r7, #24]
 8015b4a:	689a      	ldr	r2, [r3, #8]
 8015b4c:	69bb      	ldr	r3, [r7, #24]
 8015b4e:	685b      	ldr	r3, [r3, #4]
 8015b50:	429a      	cmp	r2, r3
 8015b52:	da02      	bge.n	8015b5a <xTCPWindowTxHasData+0xb2>
				{
					/* 'bSendFullSize' is a special optimisation.  If true, the
					driver will only sent completely filled packets (of MSS
					bytes). */
					xReturn = pdFALSE;
 8015b54:	2300      	movs	r3, #0
 8015b56:	61fb      	str	r3, [r7, #28]
 8015b58:	e001      	b.n	8015b5e <xTCPWindowTxHasData+0xb6>
				}
				else
				{
					xReturn = pdTRUE;
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	61fb      	str	r3, [r7, #28]
				}
			}
		}

		return xReturn;
 8015b5e:	69fb      	ldr	r3, [r7, #28]
	}
 8015b60:	4618      	mov	r0, r3
 8015b62:	3720      	adds	r7, #32
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}

08015b68 <ulTCPWindowTxGet>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxGet( TCPWindow_t *pxWindow, uint32_t ulWindowSize, int32_t *plPosition )
	{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b08a      	sub	sp, #40	; 0x28
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	60f8      	str	r0, [r7, #12]
 8015b70:	60b9      	str	r1, [r7, #8]
 8015b72:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	uint32_t ulMaxTime;
	uint32_t ulReturn  = ~0UL;
 8015b74:	f04f 33ff 	mov.w	r3, #4294967295
 8015b78:	623b      	str	r3, [r7, #32]

		/* Fetches data to be sent-out now.

		Priority messages: segments with a resend need no check current sliding
		window size. */
		pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	3340      	adds	r3, #64	; 0x40
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7ff fc13 	bl	80153aa <xTCPWindowGetHead>
 8015b84:	6278      	str	r0, [r7, #36]	; 0x24
		pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	62da      	str	r2, [r3, #44]	; 0x2c

		if( pxSegment == NULL )
 8015b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d169      	bne.n	8015c68 <ulTCPWindowTxGet+0x100>
		{
			/* Waiting messages: outstanding messages with a running timer
			neither check peer's reception window size because these packets
			have been sent earlier. */
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	3368      	adds	r3, #104	; 0x68
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f7ff fc22 	bl	80153e2 <xTCPWindowPeekHead>
 8015b9e:	6278      	str	r0, [r7, #36]	; 0x24

			if( pxSegment != NULL )
 8015ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d01f      	beq.n	8015be6 <ulTCPWindowTxGet+0x7e>
			{
				/* Do check the timing. */
				ulMaxTime = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015baa:	461a      	mov	r2, r3
 8015bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bae:	7d1b      	ldrb	r3, [r3, #20]
 8015bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8015bb4:	61fb      	str	r3, [r7, #28]

				if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8015bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb8:	3310      	adds	r3, #16
 8015bba:	4618      	mov	r0, r3
 8015bbc:	f7ff fabc 	bl	8015138 <ulTimerGetAge>
 8015bc0:	4602      	mov	r2, r0
 8015bc2:	69fb      	ldr	r3, [r7, #28]
 8015bc4:	4293      	cmp	r3, r2
 8015bc6:	d20c      	bcs.n	8015be2 <ulTCPWindowTxGet+0x7a>
				{
					/* A normal (non-fast) retransmission.  Move it from the
					head of the waiting queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	3368      	adds	r3, #104	; 0x68
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7ff fbec 	bl	80153aa <xTCPWindowGetHead>
 8015bd2:	6278      	str	r0, [r7, #36]	; 0x24
					pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 8015bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	755a      	strb	r2, [r3, #21]

					/* Some detailed logging. */
					if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015bda:	4b52      	ldr	r3, [pc, #328]	; (8015d24 <ulTCPWindowTxGet+0x1bc>)
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	e001      	b.n	8015be6 <ulTCPWindowTxGet+0x7e>
						FreeRTOS_flush_logging( );
					}
				}
				else
				{
					pxSegment = NULL;
 8015be2:	2300      	movs	r3, #0
 8015be4:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}

			if( pxSegment == NULL )
 8015be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d13d      	bne.n	8015c68 <ulTCPWindowTxGet+0x100>
			{
				/* New messages: sent-out for the first time.  Check current
				sliding window size of peer. */
				pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	3354      	adds	r3, #84	; 0x54
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f7ff fbf6 	bl	80153e2 <xTCPWindowPeekHead>
 8015bf6:	6278      	str	r0, [r7, #36]	; 0x24

				if( pxSegment == NULL )
 8015bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d102      	bne.n	8015c04 <ulTCPWindowTxGet+0x9c>
				{
					/* No segments queued. */
					ulReturn = 0UL;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	623b      	str	r3, [r7, #32]
 8015c02:	e031      	b.n	8015c68 <ulTCPWindowTxGet+0x100>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	781b      	ldrb	r3, [r3, #0]
 8015c08:	f003 0302 	and.w	r3, r3, #2
 8015c0c:	b2db      	uxtb	r3, r3
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d008      	beq.n	8015c24 <ulTCPWindowTxGet+0xbc>
 8015c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c14:	689a      	ldr	r2, [r3, #8]
 8015c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	da02      	bge.n	8015c24 <ulTCPWindowTxGet+0xbc>
				{
					/* A segment has been queued but the driver waits until it
					has a full size of MSS. */
					ulReturn = 0;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	623b      	str	r3, [r7, #32]
 8015c22:	e021      	b.n	8015c68 <ulTCPWindowTxGet+0x100>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8015c24:	68b9      	ldr	r1, [r7, #8]
 8015c26:	68f8      	ldr	r0, [r7, #12]
 8015c28:	f7ff fef8 	bl	8015a1c <prvTCPWindowTxHasSpace>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d102      	bne.n	8015c38 <ulTCPWindowTxGet+0xd0>
				{
					/* Peer has no more space at this moment. */
					ulReturn = 0;
 8015c32:	2300      	movs	r3, #0
 8015c34:	623b      	str	r3, [r7, #32]
 8015c36:	e017      	b.n	8015c68 <ulTCPWindowTxGet+0x100>
				}
				else
				{
					/* Move it out of the Tx queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	3354      	adds	r3, #84	; 0x54
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f7ff fbb4 	bl	80153aa <xTCPWindowGetHead>
 8015c42:	6278      	str	r0, [r7, #36]	; 0x24

					/* Don't let pxHeadSegment point to this segment any more,
					so no more data will be added. */
					if( pxWindow->pxHeadSegment == pxSegment )
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d102      	bne.n	8015c54 <ulTCPWindowTxGet+0xec>
					{
						pxWindow->pxHeadSegment = NULL;
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	2200      	movs	r2, #0
 8015c52:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					/* pxWindow->tx.highest registers the highest sequence
					number in our transmission window. */
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8015c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c5a:	6892      	ldr	r2, [r2, #8]
 8015c5c:	441a      	add	r2, r3
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	629a      	str	r2, [r3, #40]	; 0x28

					/* ...and more detailed logging */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015c62:	4b30      	ldr	r3, [pc, #192]	; (8015d24 <ulTCPWindowTxGet+0x1bc>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	2b01      	cmp	r3, #1
				FreeRTOS_flush_logging( );
			}
		}

		/* See if it has already been determined to return 0. */
		if( ulReturn != 0UL )
 8015c68:	6a3b      	ldr	r3, [r7, #32]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d054      	beq.n	8015d18 <ulTCPWindowTxGet+0x1b0>
		{
			/* pxSegment is not NULL when ulReturn != 0UL. */
			configASSERT( pxSegment != NULL );
 8015c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d10b      	bne.n	8015c8c <ulTCPWindowTxGet+0x124>
 8015c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c78:	b672      	cpsid	i
 8015c7a:	f383 8811 	msr	BASEPRI, r3
 8015c7e:	f3bf 8f6f 	isb	sy
 8015c82:	f3bf 8f4f 	dsb	sy
 8015c86:	b662      	cpsie	i
 8015c88:	61bb      	str	r3, [r7, #24]
 8015c8a:	e7fe      	b.n	8015c8a <ulTCPWindowTxGet+0x122>
			configASSERT( listLIST_ITEM_CONTAINER( &(pxSegment->xQueueItem ) ) == NULL );
 8015c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d00b      	beq.n	8015cac <ulTCPWindowTxGet+0x144>
 8015c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c98:	b672      	cpsid	i
 8015c9a:	f383 8811 	msr	BASEPRI, r3
 8015c9e:	f3bf 8f6f 	isb	sy
 8015ca2:	f3bf 8f4f 	dsb	sy
 8015ca6:	b662      	cpsie	i
 8015ca8:	617b      	str	r3, [r7, #20]
 8015caa:	e7fe      	b.n	8015caa <ulTCPWindowTxGet+0x142>

			/* Now that the segment will be transmitted, add it to the tail of
			the waiting queue. */
			vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb4:	3318      	adds	r3, #24
 8015cb6:	4619      	mov	r1, r3
 8015cb8:	4610      	mov	r0, r2
 8015cba:	f7ff fa20 	bl	80150fe <vListInsertFifo>

			/* And mark it as outstanding. */
			pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8015cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cc0:	7d93      	ldrb	r3, [r2, #22]
 8015cc2:	f043 0301 	orr.w	r3, r3, #1
 8015cc6:	7593      	strb	r3, [r2, #22]

			/* Administer the transmit count, needed for fast
			retransmissions. */
			( pxSegment->u.bits.ucTransmitCount )++;
 8015cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cca:	7d1b      	ldrb	r3, [r3, #20]
 8015ccc:	3301      	adds	r3, #1
 8015cce:	b2da      	uxtb	r2, r3
 8015cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd2:	751a      	strb	r2, [r3, #20]

			/* If there have been several retransmissions (4), decrease the
			size of the transmission window to at most 2 times MSS. */
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 8015cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd6:	7d1b      	ldrb	r3, [r3, #20]
 8015cd8:	2b04      	cmp	r3, #4
 8015cda:	d10d      	bne.n	8015cf8 <ulTCPWindowTxGet+0x190>
			{
				if( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) )
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	689a      	ldr	r2, [r3, #8]
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8015ce6:	005b      	lsls	r3, r3, #1
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d905      	bls.n	8015cf8 <ulTCPWindowTxGet+0x190>
					FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
						pxWindow->usPeerPortNumber,
						pxWindow->usOurPortNumber,
						pxWindow->xSize.ulTxWindowLength,
						2U * pxWindow->usMSS ) );
					pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8015cf2:	005a      	lsls	r2, r3, #1
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	609a      	str	r2, [r3, #8]
				}
			}

			/* Clear the transmit timer. */
			vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8015cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cfa:	3310      	adds	r3, #16
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f7ff fa0e 	bl	801511e <vTCPTimerSet>

			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8015d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	62da      	str	r2, [r3, #44]	; 0x2c

			/* Inform the caller where to find the data within the queue. */
			*plPosition = pxSegment->lStreamPos;
 8015d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d0c:	68da      	ldr	r2, [r3, #12]
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	601a      	str	r2, [r3, #0]

			/* And return the length of the data segment */
			ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8015d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d14:	689b      	ldr	r3, [r3, #8]
 8015d16:	623b      	str	r3, [r7, #32]
		}

		return ulReturn;
 8015d18:	6a3b      	ldr	r3, [r7, #32]
	}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3728      	adds	r7, #40	; 0x28
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}
 8015d22:	bf00      	nop
 8015d24:	24005344 	.word	0x24005344

08015d28 <prvTCPWindowTxCheckAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b08c      	sub	sp, #48	; 0x30
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	60f8      	str	r0, [r7, #12]
 8015d30:	60b9      	str	r1, [r7, #8]
 8015d32:	607a      	str	r2, [r7, #4]
	uint32_t ulBytesConfirmed = 0U;
 8015d34:	2300      	movs	r3, #0
 8015d36:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	62bb      	str	r3, [r7, #40]	; 0x28
	const ListItem_t *pxIterator;
	const ListItem_t *pxEnd = listGET_END_MARKER( &pxWindow->xTxSegments );
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	3398      	adds	r3, #152	; 0x98
 8015d40:	61fb      	str	r3, [r7, #28]
		  RTO is Retransmit timeout

		 A Smoothed RTT will increase quickly, but it is conservative when
		 becoming smaller. */

		pxIterator  = listGET_NEXT( pxEnd );
 8015d42:	69fb      	ldr	r3, [r7, #28]
 8015d44:	685b      	ldr	r3, [r3, #4]
 8015d46:	627b      	str	r3, [r7, #36]	; 0x24
		while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015d48:	e099      	b.n	8015e7e <prvTCPWindowTxCheckAck+0x156>
		{
			xDoUnlink = pdFALSE;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	623b      	str	r3, [r7, #32]
			pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d50:	68db      	ldr	r3, [r3, #12]
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7ff f96e 	bl	8015034 <vCastPointerTo_TCPSegment_t>
 8015d58:	61b8      	str	r0, [r7, #24]

			/* Move to the next item because the current item might get
			removed. */
			pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8015d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Continue if this segment does not fall within the ACK'd range. */
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8015d60:	69bb      	ldr	r3, [r7, #24]
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	4619      	mov	r1, r3
 8015d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d68:	f7ff f99c 	bl	80150a4 <xSequenceGreaterThan>
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d000      	beq.n	8015d74 <prvTCPWindowTxCheckAck+0x4c>
			{
				continue;
 8015d72:	e084      	b.n	8015e7e <prvTCPWindowTxCheckAck+0x156>
			}

			/* Is it ready? */
			if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8015d74:	69bb      	ldr	r3, [r7, #24]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	f040 808c 	bne.w	8015e98 <prvTCPWindowTxCheckAck+0x170>
			{
				/* coverity[break_stmt] : Break statement terminating the loop */
				break;
			}

			ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8015d80:	69bb      	ldr	r3, [r7, #24]
 8015d82:	689b      	ldr	r3, [r3, #8]
 8015d84:	617b      	str	r3, [r7, #20]

			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8015d86:	69bb      	ldr	r3, [r7, #24]
 8015d88:	7d9b      	ldrb	r3, [r3, #22]
 8015d8a:	f003 0302 	and.w	r3, r3, #2
 8015d8e:	b2db      	uxtb	r3, r3
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d14d      	bne.n	8015e30 <prvTCPWindowTxCheckAck+0x108>
			{
				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != pdFALSE )
 8015d94:	69bb      	ldr	r3, [r7, #24]
 8015d96:	681a      	ldr	r2, [r3, #0]
 8015d98:	697b      	ldr	r3, [r7, #20]
 8015d9a:	4413      	add	r3, r2
 8015d9c:	6879      	ldr	r1, [r7, #4]
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f7ff f980 	bl	80150a4 <xSequenceGreaterThan>
 8015da4:	4603      	mov	r3, r0
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d178      	bne.n	8015e9c <prvTCPWindowTxCheckAck+0x174>
					#endif	/* ipconfigHAS_DEBUG_PRINTF */
					break;
				}

				/* This segment is fully ACK'd, set the flag. */
				pxSegment->u.bits.bAcked = pdTRUE;
 8015daa:	69ba      	ldr	r2, [r7, #24]
 8015dac:	7d93      	ldrb	r3, [r2, #22]
 8015dae:	f043 0302 	orr.w	r3, r3, #2
 8015db2:	7593      	strb	r3, [r2, #22]

				/* Calculate the RTT only if the segment was sent-out for the
				first time and if this is the last ACK'd segment in a range. */
				if( ( pxSegment->u.bits.ucTransmitCount == 1U ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8015db4:	69bb      	ldr	r3, [r7, #24]
 8015db6:	7d1b      	ldrb	r3, [r3, #20]
 8015db8:	2b01      	cmp	r3, #1
 8015dba:	d137      	bne.n	8015e2c <prvTCPWindowTxCheckAck+0x104>
 8015dbc:	69bb      	ldr	r3, [r7, #24]
 8015dbe:	681a      	ldr	r2, [r3, #0]
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	4413      	add	r3, r2
 8015dc4:	687a      	ldr	r2, [r7, #4]
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d130      	bne.n	8015e2c <prvTCPWindowTxCheckAck+0x104>
				{
					int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8015dca:	69bb      	ldr	r3, [r7, #24]
 8015dcc:	3310      	adds	r3, #16
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f7ff f9b2 	bl	8015138 <ulTimerGetAge>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	613b      	str	r3, [r7, #16]

					if( pxWindow->lSRTT >= mS )
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ddc:	693a      	ldr	r2, [r7, #16]
 8015dde:	429a      	cmp	r2, r3
 8015de0:	dc0e      	bgt.n	8015e00 <prvTCPWindowTxCheckAck+0xd8>
					{
						/* RTT becomes smaller: adapt slowly. */
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015de6:	4613      	mov	r3, r2
 8015de8:	00db      	lsls	r3, r3, #3
 8015dea:	1a9a      	subs	r2, r3, r2
 8015dec:	693b      	ldr	r3, [r7, #16]
 8015dee:	4413      	add	r3, r2
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	da00      	bge.n	8015df6 <prvTCPWindowTxCheckAck+0xce>
 8015df4:	3307      	adds	r3, #7
 8015df6:	10db      	asrs	r3, r3, #3
 8015df8:	461a      	mov	r2, r3
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	639a      	str	r2, [r3, #56]	; 0x38
 8015dfe:	e00e      	b.n	8015e1e <prvTCPWindowTxCheckAck+0xf6>
					}
					else
					{
						/* RTT becomes larger: adapt quicker */
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015e04:	4613      	mov	r3, r2
 8015e06:	005b      	lsls	r3, r3, #1
 8015e08:	441a      	add	r2, r3
 8015e0a:	693b      	ldr	r3, [r7, #16]
 8015e0c:	4413      	add	r3, r2
 8015e0e:	005b      	lsls	r3, r3, #1
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	da00      	bge.n	8015e16 <prvTCPWindowTxCheckAck+0xee>
 8015e14:	3307      	adds	r3, #7
 8015e16:	10db      	asrs	r3, r3, #3
 8015e18:	461a      	mov	r2, r3
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	639a      	str	r2, [r3, #56]	; 0x38
					}

					/* Cap to the minimum of 50ms. */
					if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e22:	2b31      	cmp	r3, #49	; 0x31
 8015e24:	dc02      	bgt.n	8015e2c <prvTCPWindowTxCheckAck+0x104>
					{
						pxWindow->lSRTT = winSRTT_CAP_mS;
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	2232      	movs	r2, #50	; 0x32
 8015e2a:	639a      	str	r2, [r3, #56]	; 0x38
					}
				}

				/* Unlink it from the 3 queues, but do not destroy it (yet). */
				xDoUnlink = pdTRUE;
 8015e2c:	2301      	movs	r3, #1
 8015e2e:	623b      	str	r3, [r7, #32]
			}

			/* pxSegment->u.bits.bAcked is now true.  Is it located at the left
			side of the transmission queue?  If so, it may be freed. */
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	6a1b      	ldr	r3, [r3, #32]
 8015e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e36:	429a      	cmp	r2, r3
 8015e38:	d111      	bne.n	8015e5e <prvTCPWindowTxCheckAck+0x136>
			{
				if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015e3a:	4b1b      	ldr	r3, [pc, #108]	; (8015ea8 <prvTCPWindowTxCheckAck+0x180>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	2b01      	cmp	r3, #1
						ulLast - pxWindow->tx.ulFirstSequenceNumber,
						pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
				}

				/* Increase the left-hand value of the transmission window. */
				pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	6a1a      	ldr	r2, [r3, #32]
 8015e44:	697b      	ldr	r3, [r7, #20]
 8015e46:	441a      	add	r2, r3
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	621a      	str	r2, [r3, #32]

				/* This function will return the number of bytes that the tail
				of txStream may be advanced. */
				ulBytesConfirmed += ulDataLength;
 8015e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e4e:	697b      	ldr	r3, [r7, #20]
 8015e50:	4413      	add	r3, r2
 8015e52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* All segments below tx.ulCurrentSequenceNumber may be freed. */
				vTCPWindowFree( pxSegment );
 8015e54:	69b8      	ldr	r0, [r7, #24]
 8015e56:	f7ff fadd 	bl	8015414 <vTCPWindowFree>

				/* No need to unlink it any more. */
				xDoUnlink = pdFALSE;
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	623b      	str	r3, [r7, #32]
			}

			if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8015e5e:	6a3b      	ldr	r3, [r7, #32]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d008      	beq.n	8015e76 <prvTCPWindowTxCheckAck+0x14e>
 8015e64:	69bb      	ldr	r3, [r7, #24]
 8015e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d004      	beq.n	8015e76 <prvTCPWindowTxCheckAck+0x14e>
			{
				/* Remove item from its queues. */
				( void ) uxListRemove( &pxSegment->xQueueItem );
 8015e6c:	69bb      	ldr	r3, [r7, #24]
 8015e6e:	3318      	adds	r3, #24
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7f6 fa12 	bl	800c29a <uxListRemove>
			}

			ulSequenceNumber += ulDataLength;
 8015e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e78:	697b      	ldr	r3, [r7, #20]
 8015e7a:	4413      	add	r3, r2
 8015e7c:	62bb      	str	r3, [r7, #40]	; 0x28
		while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	429a      	cmp	r2, r3
 8015e84:	d00b      	beq.n	8015e9e <prvTCPWindowTxCheckAck+0x176>
 8015e86:	6879      	ldr	r1, [r7, #4]
 8015e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e8a:	f7ff f8f4 	bl	8015076 <xSequenceLessThan>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	f47f af5a 	bne.w	8015d4a <prvTCPWindowTxCheckAck+0x22>
 8015e96:	e002      	b.n	8015e9e <prvTCPWindowTxCheckAck+0x176>
				break;
 8015e98:	bf00      	nop
 8015e9a:	e000      	b.n	8015e9e <prvTCPWindowTxCheckAck+0x176>
					break;
 8015e9c:	bf00      	nop
		}

		return ulBytesConfirmed;
 8015e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	3730      	adds	r7, #48	; 0x30
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	bd80      	pop	{r7, pc}
 8015ea8:	24005344 	.word	0x24005344

08015eac <prvTCPWindowFastRetransmit>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t *pxWindow, uint32_t ulFirst )
	{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b086      	sub	sp, #24
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
 8015eb4:	6039      	str	r1, [r7, #0]
	const ListItem_t * pxIterator;
	const ListItem_t * pxEnd;
	TCPSegment_t *pxSegment;
	uint32_t ulCount = 0UL;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	613b      	str	r3, [r7, #16]

		/* A higher Tx block has been acknowledged.  Now iterate through the
		 xWaitQueue to find a possible condition for a FAST retransmission. */

		pxEnd = listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	3370      	adds	r3, #112	; 0x70
 8015ebe:	60fb      	str	r3, [r7, #12]

		pxIterator  = listGET_NEXT( pxEnd );
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	685b      	ldr	r3, [r3, #4]
 8015ec4:	617b      	str	r3, [r7, #20]

		while( pxIterator != pxEnd )
 8015ec6:	e039      	b.n	8015f3c <prvTCPWindowFastRetransmit+0x90>
		{
			/* Get the owner, which is a TCP segment. */
			pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015ec8:	697b      	ldr	r3, [r7, #20]
 8015eca:	68db      	ldr	r3, [r3, #12]
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f7ff f8b1 	bl	8015034 <vCastPointerTo_TCPSegment_t>
 8015ed2:	60b8      	str	r0, [r7, #8]

			/* Hop to the next item before the current gets unlinked. */
			pxIterator  = listGET_NEXT( pxIterator );
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	685b      	ldr	r3, [r3, #4]
 8015ed8:	617b      	str	r3, [r7, #20]

			/* Fast retransmission:
			When 3 packets with a higher sequence number have been acknowledged
			by the peer, it is very unlikely a current packet will ever arrive.
			It will be retransmitted far before the RTO. */
			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8015eda:	68bb      	ldr	r3, [r7, #8]
 8015edc:	7d9b      	ldrb	r3, [r3, #22]
 8015ede:	f003 0302 	and.w	r3, r3, #2
 8015ee2:	b2db      	uxtb	r3, r3
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d129      	bne.n	8015f3c <prvTCPWindowFastRetransmit+0x90>
			{
				if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	6839      	ldr	r1, [r7, #0]
 8015eee:	4618      	mov	r0, r3
 8015ef0:	f7ff f8c1 	bl	8015076 <xSequenceLessThan>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d020      	beq.n	8015f3c <prvTCPWindowFastRetransmit+0x90>
				{
					pxSegment->u.bits.ucDupAckCount++;
 8015efa:	68bb      	ldr	r3, [r7, #8]
 8015efc:	7d5b      	ldrb	r3, [r3, #21]
 8015efe:	3301      	adds	r3, #1
 8015f00:	b2da      	uxtb	r2, r3
 8015f02:	68bb      	ldr	r3, [r7, #8]
 8015f04:	755a      	strb	r2, [r3, #21]
					if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	7d5b      	ldrb	r3, [r3, #21]
 8015f0a:	2b03      	cmp	r3, #3
 8015f0c:	d116      	bne.n	8015f3c <prvTCPWindowFastRetransmit+0x90>
					{
						pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8015f0e:	68bb      	ldr	r3, [r7, #8]
 8015f10:	2200      	movs	r2, #0
 8015f12:	751a      	strb	r2, [r3, #20]

						/* Not clearing 'ucDupAckCount' yet as more SACK's might come in
						which might lead to a second fast rexmit. */
						if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015f14:	4b0e      	ldr	r3, [pc, #56]	; (8015f50 <prvTCPWindowFastRetransmit+0xa4>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	2b00      	cmp	r3, #0
								ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
							FreeRTOS_flush_logging( );
						}

						/* Remove it from xWaitQueue. */
						( void ) uxListRemove( &pxSegment->xQueueItem );
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	3318      	adds	r3, #24
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f7f6 f9bb 	bl	800c29a <uxListRemove>
						/* Add this segment to the priority queue so it gets
						retransmitted immediately. */
						vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8015f2a:	68bb      	ldr	r3, [r7, #8]
 8015f2c:	3318      	adds	r3, #24
 8015f2e:	4619      	mov	r1, r3
 8015f30:	4610      	mov	r0, r2
 8015f32:	f7ff f8e4 	bl	80150fe <vListInsertFifo>
						ulCount++;
 8015f36:	693b      	ldr	r3, [r7, #16]
 8015f38:	3301      	adds	r3, #1
 8015f3a:	613b      	str	r3, [r7, #16]
		while( pxIterator != pxEnd )
 8015f3c:	697a      	ldr	r2, [r7, #20]
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d1c1      	bne.n	8015ec8 <prvTCPWindowFastRetransmit+0x1c>
					}
				}
			}
		}

		return ulCount;
 8015f44:	693b      	ldr	r3, [r7, #16]
	}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3718      	adds	r7, #24
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}
 8015f4e:	bf00      	nop
 8015f50:	24005344 	.word	0x24005344

08015f54 <ulTCPWindowTxAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxAck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b084      	sub	sp, #16
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
	uint32_t ulFirstSequence, ulReturn;

		/* Receive a normal ACK. */

		ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	6a1b      	ldr	r3, [r3, #32]
 8015f62:	60bb      	str	r3, [r7, #8]

		if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8015f64:	68b9      	ldr	r1, [r7, #8]
 8015f66:	6838      	ldr	r0, [r7, #0]
 8015f68:	f7ff f86f 	bl	801504a <xSequenceLessThanOrEqual>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d002      	beq.n	8015f78 <ulTCPWindowTxAck+0x24>
		{
			ulReturn = 0UL;
 8015f72:	2300      	movs	r3, #0
 8015f74:	60fb      	str	r3, [r7, #12]
 8015f76:	e005      	b.n	8015f84 <ulTCPWindowTxAck+0x30>
		}
		else
		{
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8015f78:	683a      	ldr	r2, [r7, #0]
 8015f7a:	68b9      	ldr	r1, [r7, #8]
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f7ff fed3 	bl	8015d28 <prvTCPWindowTxCheckAck>
 8015f82:	60f8      	str	r0, [r7, #12]
		}

		return ulReturn;
 8015f84:	68fb      	ldr	r3, [r7, #12]
	}
 8015f86:	4618      	mov	r0, r3
 8015f88:	3710      	adds	r7, #16
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	bd80      	pop	{r7, pc}
	...

08015f90 <ulTCPWindowTxSack>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxSack( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b086      	sub	sp, #24
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	60f8      	str	r0, [r7, #12]
 8015f98:	60b9      	str	r1, [r7, #8]
 8015f9a:	607a      	str	r2, [r7, #4]
	uint32_t ulAckCount;
	uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	6a1b      	ldr	r3, [r3, #32]
 8015fa0:	617b      	str	r3, [r7, #20]

		/* Receive a SACK option. */
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8015fa2:	687a      	ldr	r2, [r7, #4]
 8015fa4:	68b9      	ldr	r1, [r7, #8]
 8015fa6:	68f8      	ldr	r0, [r7, #12]
 8015fa8:	f7ff febe 	bl	8015d28 <prvTCPWindowTxCheckAck>
 8015fac:	6138      	str	r0, [r7, #16]
		( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8015fae:	68b9      	ldr	r1, [r7, #8]
 8015fb0:	68f8      	ldr	r0, [r7, #12]
 8015fb2:	f7ff ff7b 	bl	8015eac <prvTCPWindowFastRetransmit>

		if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8015fb6:	4b06      	ldr	r3, [pc, #24]	; (8015fd0 <ulTCPWindowTxSack+0x40>)
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	dd03      	ble.n	8015fc6 <ulTCPWindowTxSack+0x36>
 8015fbe:	6979      	ldr	r1, [r7, #20]
 8015fc0:	68b8      	ldr	r0, [r7, #8]
 8015fc2:	f7ff f86f 	bl	80150a4 <xSequenceGreaterThan>
				ulLast - pxWindow->tx.ulFirstSequenceNumber,
				pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
			FreeRTOS_flush_logging( );
		}

		return ulAckCount;
 8015fc6:	693b      	ldr	r3, [r7, #16]
	}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3718      	adds	r7, #24
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}
 8015fd0:	24005344 	.word	0x24005344

08015fd4 <vCastPointerTo_UDPPacket_t>:
{
 8015fd4:	b480      	push	{r7}
 8015fd6:	b083      	sub	sp, #12
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
    return ( UDPPacket_t *)pvArgument;
 8015fdc:	687b      	ldr	r3, [r7, #4]
}
 8015fde:	4618      	mov	r0, r3
 8015fe0:	370c      	adds	r7, #12
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe8:	4770      	bx	lr

08015fea <vCastConstPointerTo_UDPPacket_t>:
{
 8015fea:	b480      	push	{r7}
 8015fec:	b083      	sub	sp, #12
 8015fee:	af00      	add	r7, sp, #0
 8015ff0:	6078      	str	r0, [r7, #4]
    return ( const UDPPacket_t *) pvArgument;
 8015ff2:	687b      	ldr	r3, [r7, #4]
}
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	370c      	adds	r7, #12
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ffe:	4770      	bx	lr

08016000 <vProcessGeneratedUDPPacket>:
	}
};
/*-----------------------------------------------------------*/

void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016000:	b5b0      	push	{r4, r5, r7, lr}
 8016002:	b08a      	sub	sp, #40	; 0x28
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
UDPPacket_t *pxUDPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	695b      	ldr	r3, [r3, #20]
 801600c:	60bb      	str	r3, [r7, #8]
size_t uxPayloadSize;

	/* Map the UDP packet onto the start of the frame. */
	pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	699b      	ldr	r3, [r3, #24]
 8016012:	4618      	mov	r0, r3
 8016014:	f7ff ffde 	bl	8015fd4 <vCastPointerTo_UDPPacket_t>
 8016018:	6238      	str	r0, [r7, #32]
		uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
	}
	else
#endif
	{
		uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	69db      	ldr	r3, [r3, #28]
 801601e:	3b2a      	subs	r3, #42	; 0x2a
 8016020:	61fb      	str	r3, [r7, #28]
	}

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 8016022:	6a3a      	ldr	r2, [r7, #32]
 8016024:	f107 0308 	add.w	r3, r7, #8
 8016028:	4611      	mov	r1, r2
 801602a:	4618      	mov	r0, r3
 801602c:	f7f8 fc58 	bl	800e8e0 <eARPGetCacheEntry>
 8016030:	4603      	mov	r3, r0
 8016032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if( eReturned != eCantSendPacket )
 8016036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801603a:	2b02      	cmp	r3, #2
 801603c:	f000 80a5 	beq.w	801618a <vProcessGeneratedUDPPacket+0x18a>
	{
		if( eReturned == eARPCacheHit )
 8016040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016044:	2b01      	cmp	r3, #1
 8016046:	f040 808d 	bne.w	8016164 <vProcessGeneratedUDPPacket+0x164>
				uint8_t ucSocketOptions;
			#endif
			iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

			/* Create short cuts to the data within the packet. */
			pxIPHeader = &( pxUDPPacket->xIPHeader );
 801604a:	6a3b      	ldr	r3, [r7, #32]
 801604c:	330e      	adds	r3, #14
 801604e:	61bb      	str	r3, [r7, #24]
			if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
			UDPHeader_t *pxUDPHeader;

				pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8016050:	6a3b      	ldr	r3, [r7, #32]
 8016052:	3322      	adds	r3, #34	; 0x22
 8016054:	617b      	str	r3, [r7, #20]

				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	8c1a      	ldrh	r2, [r3, #32]
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	805a      	strh	r2, [r3, #2]
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8016062:	697b      	ldr	r3, [r7, #20]
 8016064:	801a      	strh	r2, [r3, #0]
				pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8016066:	69fb      	ldr	r3, [r7, #28]
 8016068:	b29b      	uxth	r3, r3
 801606a:	3308      	adds	r3, #8
 801606c:	b29a      	uxth	r2, r3
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8016072:	697b      	ldr	r3, [r7, #20]
 8016074:	889b      	ldrh	r3, [r3, #4]
 8016076:	b29b      	uxth	r3, r3
 8016078:	021b      	lsls	r3, r3, #8
 801607a:	b21a      	sxth	r2, r3
 801607c:	697b      	ldr	r3, [r7, #20]
 801607e:	889b      	ldrh	r3, [r3, #4]
 8016080:	b29b      	uxth	r3, r3
 8016082:	0a1b      	lsrs	r3, r3, #8
 8016084:	b29b      	uxth	r3, r3
 8016086:	b21b      	sxth	r3, r3
 8016088:	4313      	orrs	r3, r2
 801608a:	b21b      	sxth	r3, r3
 801608c:	b29a      	uxth	r2, r3
 801608e:	697b      	ldr	r3, [r7, #20]
 8016090:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usChecksum = 0U;
 8016092:	697b      	ldr	r3, [r7, #20]
 8016094:	2200      	movs	r2, #0
 8016096:	719a      	strb	r2, [r3, #6]
 8016098:	2200      	movs	r2, #0
 801609a:	71da      	strb	r2, [r3, #7]
			*/

			/* Save options now, as they will be overwritten by memcpy */
			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
			{
				ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	699b      	ldr	r3, [r3, #24]
 80160a0:	799b      	ldrb	r3, [r3, #6]
 80160a2:	74fb      	strb	r3, [r7, #19]
			/*
			 * Offset the memcpy by the size of a MAC address to start at the packet's
			 * Ethernet header 'source' MAC address; the preceding 'destination' should not be altered.
			 */
			/* The Ethernet source address is at offset 6. */
			char *pxUdpSrcAddrOffset = ( char *) ( &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ] ) );
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	699b      	ldr	r3, [r3, #24]
 80160a8:	3306      	adds	r3, #6
 80160aa:	60fb      	str	r3, [r7, #12]
			( void ) memcpy( ( void * ) pxUdpSrcAddrOffset, ( const void * ) ( xDefaultPartUDPPacketHeader.ucBytes ), sizeof( xDefaultPartUDPPacketHeader ) );
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	4a3f      	ldr	r2, [pc, #252]	; (80161ac <vProcessGeneratedUDPPacket+0x1ac>)
 80160b0:	461d      	mov	r5, r3
 80160b2:	4614      	mov	r4, r2
 80160b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160b6:	6028      	str	r0, [r5, #0]
 80160b8:	6069      	str	r1, [r5, #4]
 80160ba:	60aa      	str	r2, [r5, #8]
 80160bc:	60eb      	str	r3, [r5, #12]
 80160be:	cc03      	ldmia	r4!, {r0, r1}
 80160c0:	6128      	str	r0, [r5, #16]
 80160c2:	6169      	str	r1, [r5, #20]
				pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
			}
			else
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
				pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 80160c4:	69fb      	ldr	r3, [r7, #28]
 80160c6:	b29b      	uxth	r3, r3
 80160c8:	331c      	adds	r3, #28
 80160ca:	b29a      	uxth	r2, r3
 80160cc:	69bb      	ldr	r3, [r7, #24]
 80160ce:	805a      	strh	r2, [r3, #2]
			}

			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80160d0:	69bb      	ldr	r3, [r7, #24]
 80160d2:	885b      	ldrh	r3, [r3, #2]
 80160d4:	b29b      	uxth	r3, r3
 80160d6:	021b      	lsls	r3, r3, #8
 80160d8:	b21a      	sxth	r2, r3
 80160da:	69bb      	ldr	r3, [r7, #24]
 80160dc:	885b      	ldrh	r3, [r3, #2]
 80160de:	b29b      	uxth	r3, r3
 80160e0:	0a1b      	lsrs	r3, r3, #8
 80160e2:	b29b      	uxth	r3, r3
 80160e4:	b21b      	sxth	r3, r3
 80160e6:	4313      	orrs	r3, r2
 80160e8:	b21b      	sxth	r3, r3
 80160ea:	b29a      	uxth	r2, r3
 80160ec:	69bb      	ldr	r3, [r7, #24]
 80160ee:	805a      	strh	r2, [r3, #2]
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	695a      	ldr	r2, [r3, #20]
 80160f4:	69bb      	ldr	r3, [r7, #24]
 80160f6:	611a      	str	r2, [r3, #16]
			}
			#endif

			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
			{
				pxIPHeader->usHeaderChecksum = 0U;
 80160f8:	69bb      	ldr	r3, [r7, #24]
 80160fa:	2200      	movs	r2, #0
 80160fc:	729a      	strb	r2, [r3, #10]
 80160fe:	2200      	movs	r2, #0
 8016100:	72da      	strb	r2, [r3, #11]
				pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0U, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 8016102:	69bb      	ldr	r3, [r7, #24]
 8016104:	2214      	movs	r2, #20
 8016106:	4619      	mov	r1, r3
 8016108:	2000      	movs	r0, #0
 801610a:	f7fa fb79 	bl	8010800 <usGenerateChecksum>
 801610e:	4603      	mov	r3, r0
 8016110:	461a      	mov	r2, r3
 8016112:	69bb      	ldr	r3, [r7, #24]
 8016114:	815a      	strh	r2, [r3, #10]
				pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 8016116:	69bb      	ldr	r3, [r7, #24]
 8016118:	895b      	ldrh	r3, [r3, #10]
 801611a:	b29b      	uxth	r3, r3
 801611c:	021b      	lsls	r3, r3, #8
 801611e:	b21a      	sxth	r2, r3
 8016120:	69bb      	ldr	r3, [r7, #24]
 8016122:	895b      	ldrh	r3, [r3, #10]
 8016124:	b29b      	uxth	r3, r3
 8016126:	0a1b      	lsrs	r3, r3, #8
 8016128:	b29b      	uxth	r3, r3
 801612a:	b21b      	sxth	r3, r3
 801612c:	4313      	orrs	r3, r2
 801612e:	b21b      	sxth	r3, r3
 8016130:	b29b      	uxth	r3, r3
 8016132:	43db      	mvns	r3, r3
 8016134:	b29a      	uxth	r2, r3
 8016136:	69bb      	ldr	r3, [r7, #24]
 8016138:	815a      	strh	r2, [r3, #10]

				if( ( ucSocketOptions & ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) != 0U )
 801613a:	7cfb      	ldrb	r3, [r7, #19]
 801613c:	f003 0302 	and.w	r3, r3, #2
 8016140:	2b00      	cmp	r3, #0
 8016142:	d007      	beq.n	8016154 <vProcessGeneratedUDPPacket+0x154>
				{
					( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	69db      	ldr	r3, [r3, #28]
 8016148:	2201      	movs	r2, #1
 801614a:	4619      	mov	r1, r3
 801614c:	6a38      	ldr	r0, [r7, #32]
 801614e:	f7fa fa39 	bl	80105c4 <usGenerateProtocolChecksum>
 8016152:	e01a      	b.n	801618a <vProcessGeneratedUDPPacket+0x18a>
				}
				else
				{
					pxUDPPacket->xUDPHeader.usChecksum = 0U;
 8016154:	6a3b      	ldr	r3, [r7, #32]
 8016156:	2200      	movs	r2, #0
 8016158:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 801615c:	2200      	movs	r2, #0
 801615e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8016162:	e012      	b.n	801618a <vProcessGeneratedUDPPacket+0x18a>
				}
			}
			#endif
		}
		else if( eReturned == eARPCacheMiss )
 8016164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016168:	2b00      	cmp	r3, #0
 801616a:	d10b      	bne.n	8016184 <vProcessGeneratedUDPPacket+0x184>
		{
			/* Add an entry to the ARP table with a null hardware address.
			This allows the ARP timer to know that an ARP reply is
			outstanding, and perform retransmissions if necessary. */
			vARPRefreshCacheEntry( NULL, ulIPAddress );
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	4619      	mov	r1, r3
 8016170:	2000      	movs	r0, #0
 8016172:	f7f8 fabd 	bl	800e6f0 <vARPRefreshCacheEntry>

			/* Generate an ARP for the required IP address. */
			iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8016176:	68ba      	ldr	r2, [r7, #8]
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	615a      	str	r2, [r3, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f7f8 fd23 	bl	800ebc8 <vARPGenerateRequestPacket>
 8016182:	e002      	b.n	801618a <vProcessGeneratedUDPPacket+0x18a>
		}
		else
		{
			/* The lookup indicated that an ARP request has already been
			sent out for the queried IP address. */
			eReturned = eCantSendPacket;
 8016184:	2302      	movs	r3, #2
 8016186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	if( eReturned != eCantSendPacket )
 801618a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801618e:	2b02      	cmp	r3, #2
 8016190:	d004      	beq.n	801619c <vProcessGeneratedUDPPacket+0x19c>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8016192:	2101      	movs	r1, #1
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f000 fea3 	bl	8016ee0 <xNetworkInterfaceOutput>
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
	}
}
 801619a:	e002      	b.n	80161a2 <vProcessGeneratedUDPPacket+0x1a2>
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801619c:	6878      	ldr	r0, [r7, #4]
 801619e:	f000 f98f 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
}
 80161a2:	bf00      	nop
 80161a4:	3728      	adds	r7, #40	; 0x28
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bdb0      	pop	{r4, r5, r7, pc}
 80161aa:	bf00      	nop
 80161ac:	2400001c 	.word	0x2400001c

080161b0 <xProcessReceivedUDPPacket>:
/*-----------------------------------------------------------*/

BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b088      	sub	sp, #32
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
 80161b8:	460b      	mov	r3, r1
 80161ba:	807b      	strh	r3, [r7, #2]
BaseType_t xReturn = pdPASS;
 80161bc:	2301      	movs	r3, #1
 80161be:	61fb      	str	r3, [r7, #28]
FreeRTOS_Socket_t *pxSocket;
configASSERT( pxNetworkBuffer != NULL );
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d10b      	bne.n	80161de <xProcessReceivedUDPPacket+0x2e>
 80161c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ca:	b672      	cpsid	i
 80161cc:	f383 8811 	msr	BASEPRI, r3
 80161d0:	f3bf 8f6f 	isb	sy
 80161d4:	f3bf 8f4f 	dsb	sy
 80161d8:	b662      	cpsie	i
 80161da:	613b      	str	r3, [r7, #16]
 80161dc:	e7fe      	b.n	80161dc <xProcessReceivedUDPPacket+0x2c>
configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	699b      	ldr	r3, [r3, #24]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d10b      	bne.n	80161fe <xProcessReceivedUDPPacket+0x4e>
 80161e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ea:	b672      	cpsid	i
 80161ec:	f383 8811 	msr	BASEPRI, r3
 80161f0:	f3bf 8f6f 	isb	sy
 80161f4:	f3bf 8f4f 	dsb	sy
 80161f8:	b662      	cpsie	i
 80161fa:	60fb      	str	r3, [r7, #12]
 80161fc:	e7fe      	b.n	80161fc <xProcessReceivedUDPPacket+0x4c>

/* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */
const UDPPacket_t *pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	699b      	ldr	r3, [r3, #24]
 8016202:	4618      	mov	r0, r3
 8016204:	f7ff fef1 	bl	8015fea <vCastConstPointerTo_UDPPacket_t>
 8016208:	61b8      	str	r0, [r7, #24]

	/* Caller must check for minimum packet size. */
	pxSocket = pxUDPSocketLookup( usPort );
 801620a:	887b      	ldrh	r3, [r7, #2]
 801620c:	4618      	mov	r0, r3
 801620e:	f7fb fc13 	bl	8011a38 <pxUDPSocketLookup>
 8016212:	6178      	str	r0, [r7, #20]

	if( pxSocket != NULL )
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d03c      	beq.n	8016294 <xProcessReceivedUDPPacket+0xe4>
	{

		/* When refreshing the ARP cache with received UDP packets we must be
		careful;  hundreds of broadcast messages may pass and if we're not
		handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 801621a:	69bb      	ldr	r3, [r7, #24]
 801621c:	1d9a      	adds	r2, r3, #6
 801621e:	69bb      	ldr	r3, [r7, #24]
 8016220:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8016224:	4619      	mov	r1, r3
 8016226:	4610      	mov	r0, r2
 8016228:	f7f8 fa62 	bl	800e6f0 <vARPRefreshCacheEntry>
		if( xReturn == pdPASS )	/*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
		#else
		/* xReturn is still pdPASS. */
		#endif
		{
			vTaskSuspendAll();
 801622c:	f7f6 ffe6 	bl	800d1fc <vTaskSuspendAll>
			{
				taskENTER_CRITICAL();
 8016230:	f7f8 f8ac 	bl	800e38c <vPortEnterCritical>
				{
					/* Add the network packet to the list of packets to be
					processed by the socket. */
					vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8016234:	697b      	ldr	r3, [r7, #20]
 8016236:	3338      	adds	r3, #56	; 0x38
 8016238:	687a      	ldr	r2, [r7, #4]
 801623a:	4611      	mov	r1, r2
 801623c:	4618      	mov	r0, r3
 801623e:	f7f5 ffcf 	bl	800c1e0 <vListInsertEnd>
				}
				taskEXIT_CRITICAL();
 8016242:	f7f8 f8d5 	bl	800e3f0 <vPortExitCritical>
			}
			( void ) xTaskResumeAll();
 8016246:	f7f6 ffe7 	bl	800d218 <xTaskResumeAll>

			/* Set the socket's receive event */
			if( pxSocket->xEventGroup != NULL )
 801624a:	697b      	ldr	r3, [r7, #20]
 801624c:	685b      	ldr	r3, [r3, #4]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d005      	beq.n	801625e <xProcessReceivedUDPPacket+0xae>
			{
				( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	685b      	ldr	r3, [r3, #4]
 8016256:	2101      	movs	r1, #1
 8016258:	4618      	mov	r0, r3
 801625a:	f7f5 feb3 	bl	800bfc4 <xEventGroupSetBits>
			}

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 801625e:	697b      	ldr	r3, [r7, #20]
 8016260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016262:	2b00      	cmp	r3, #0
 8016264:	d00c      	beq.n	8016280 <xProcessReceivedUDPPacket+0xd0>
 8016266:	697b      	ldr	r3, [r7, #20]
 8016268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801626a:	f003 0301 	and.w	r3, r3, #1
 801626e:	2b00      	cmp	r3, #0
 8016270:	d006      	beq.n	8016280 <xProcessReceivedUDPPacket+0xd0>
				{
					( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8016272:	697b      	ldr	r3, [r7, #20]
 8016274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	2101      	movs	r1, #1
 801627a:	4618      	mov	r0, r3
 801627c:	f7f5 fea2 	bl	800bfc4 <xEventGroupSetBits>
			}
			#endif

			#if( ipconfigUSE_DHCP == 1 )
			{
				if( xIsDHCPSocket( pxSocket ) != 0 )
 8016280:	6978      	ldr	r0, [r7, #20]
 8016282:	f7f8 fd27 	bl	800ecd4 <xIsDHCPSocket>
 8016286:	4603      	mov	r3, r0
 8016288:	2b00      	cmp	r3, #0
 801628a:	d005      	beq.n	8016298 <xProcessReceivedUDPPacket+0xe8>
				{
					( void ) xSendEventToIPTask( eDHCPEvent );
 801628c:	2005      	movs	r0, #5
 801628e:	f7f9 fd77 	bl	800fd80 <xSendEventToIPTask>
 8016292:	e001      	b.n	8016298 <xProcessReceivedUDPPacket+0xe8>
				xReturn = ( BaseType_t )ulNBNSHandlePacket( pxNetworkBuffer );
			}
			else
		#endif /* ipconfigUSE_NBNS */
			{
				xReturn = pdFAIL;
 8016294:	2300      	movs	r3, #0
 8016296:	61fb      	str	r3, [r7, #28]
			}
	}

	return xReturn;
 8016298:	69fb      	ldr	r3, [r7, #28]
}
 801629a:	4618      	mov	r0, r3
 801629c:	3720      	adds	r7, #32
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd80      	pop	{r7, pc}
	...

080162a4 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b084      	sub	sp, #16
 80162a8:	af00      	add	r7, sp, #0
BaseType_t xReturn;
uint32_t x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
 80162aa:	4b38      	ldr	r3, [pc, #224]	; (801638c <xNetworkBuffersInitialise+0xe8>)
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d15e      	bne.n	8016370 <xNetworkBuffersInitialise+0xcc>
	{
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 80162b2:	2140      	movs	r1, #64	; 0x40
 80162b4:	2040      	movs	r0, #64	; 0x40
 80162b6:	f7f6 f8fa 	bl	800c4ae <xQueueCreateCountingSemaphore>
 80162ba:	4602      	mov	r2, r0
 80162bc:	4b33      	ldr	r3, [pc, #204]	; (801638c <xNetworkBuffersInitialise+0xe8>)
 80162be:	601a      	str	r2, [r3, #0]
		configASSERT( xNetworkBufferSemaphore != NULL );
 80162c0:	4b32      	ldr	r3, [pc, #200]	; (801638c <xNetworkBuffersInitialise+0xe8>)
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d10b      	bne.n	80162e0 <xNetworkBuffersInitialise+0x3c>
 80162c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162cc:	b672      	cpsid	i
 80162ce:	f383 8811 	msr	BASEPRI, r3
 80162d2:	f3bf 8f6f 	isb	sy
 80162d6:	f3bf 8f4f 	dsb	sy
 80162da:	b662      	cpsie	i
 80162dc:	607b      	str	r3, [r7, #4]
 80162de:	e7fe      	b.n	80162de <xNetworkBuffersInitialise+0x3a>

		if( xNetworkBufferSemaphore != NULL )
 80162e0:	4b2a      	ldr	r3, [pc, #168]	; (801638c <xNetworkBuffersInitialise+0xe8>)
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d043      	beq.n	8016370 <xNetworkBuffersInitialise+0xcc>
		{
			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 80162e8:	4b28      	ldr	r3, [pc, #160]	; (801638c <xNetworkBuffersInitialise+0xe8>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	4928      	ldr	r1, [pc, #160]	; (8016390 <xNetworkBuffersInitialise+0xec>)
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7f6 fd6c 	bl	800cdcc <vQueueAddToRegistry>
				vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
				vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
			}
			#endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

			vListInitialise( &xFreeBuffersList );
 80162f4:	4827      	ldr	r0, [pc, #156]	; (8016394 <xNetworkBuffersInitialise+0xf0>)
 80162f6:	f7f5 ff46 	bl	800c186 <vListInitialise>

			/* Initialise all the network buffers.  No storage is allocated to
			the buffers yet. */
			for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80162fa:	2300      	movs	r3, #0
 80162fc:	60bb      	str	r3, [r7, #8]
 80162fe:	e031      	b.n	8016364 <xNetworkBuffersInitialise+0xc0>
			{
				/* Initialise and set the owner of the buffer list items. */
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 8016300:	4925      	ldr	r1, [pc, #148]	; (8016398 <xNetworkBuffersInitialise+0xf4>)
 8016302:	68ba      	ldr	r2, [r7, #8]
 8016304:	4613      	mov	r3, r2
 8016306:	00db      	lsls	r3, r3, #3
 8016308:	4413      	add	r3, r2
 801630a:	009b      	lsls	r3, r3, #2
 801630c:	440b      	add	r3, r1
 801630e:	3318      	adds	r3, #24
 8016310:	2200      	movs	r2, #0
 8016312:	601a      	str	r2, [r3, #0]
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8016314:	68ba      	ldr	r2, [r7, #8]
 8016316:	4613      	mov	r3, r2
 8016318:	00db      	lsls	r3, r3, #3
 801631a:	4413      	add	r3, r2
 801631c:	009b      	lsls	r3, r3, #2
 801631e:	4a1e      	ldr	r2, [pc, #120]	; (8016398 <xNetworkBuffersInitialise+0xf4>)
 8016320:	4413      	add	r3, r2
 8016322:	4618      	mov	r0, r3
 8016324:	f7f5 ff4f 	bl	800c1c6 <vListInitialiseItem>
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 8016328:	68ba      	ldr	r2, [r7, #8]
 801632a:	4613      	mov	r3, r2
 801632c:	00db      	lsls	r3, r3, #3
 801632e:	4413      	add	r3, r2
 8016330:	009b      	lsls	r3, r3, #2
 8016332:	4a19      	ldr	r2, [pc, #100]	; (8016398 <xNetworkBuffersInitialise+0xf4>)
 8016334:	1899      	adds	r1, r3, r2
 8016336:	4818      	ldr	r0, [pc, #96]	; (8016398 <xNetworkBuffersInitialise+0xf4>)
 8016338:	68ba      	ldr	r2, [r7, #8]
 801633a:	4613      	mov	r3, r2
 801633c:	00db      	lsls	r3, r3, #3
 801633e:	4413      	add	r3, r2
 8016340:	009b      	lsls	r3, r3, #2
 8016342:	4403      	add	r3, r0
 8016344:	330c      	adds	r3, #12
 8016346:	6019      	str	r1, [r3, #0]

				/* Currently, all buffers are available for use. */
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8016348:	68ba      	ldr	r2, [r7, #8]
 801634a:	4613      	mov	r3, r2
 801634c:	00db      	lsls	r3, r3, #3
 801634e:	4413      	add	r3, r2
 8016350:	009b      	lsls	r3, r3, #2
 8016352:	4a11      	ldr	r2, [pc, #68]	; (8016398 <xNetworkBuffersInitialise+0xf4>)
 8016354:	4413      	add	r3, r2
 8016356:	4619      	mov	r1, r3
 8016358:	480e      	ldr	r0, [pc, #56]	; (8016394 <xNetworkBuffersInitialise+0xf0>)
 801635a:	f7f5 ff65 	bl	800c228 <vListInsert>
			for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 801635e:	68bb      	ldr	r3, [r7, #8]
 8016360:	3301      	adds	r3, #1
 8016362:	60bb      	str	r3, [r7, #8]
 8016364:	68bb      	ldr	r3, [r7, #8]
 8016366:	2b3f      	cmp	r3, #63	; 0x3f
 8016368:	d9ca      	bls.n	8016300 <xNetworkBuffersInitialise+0x5c>
			}

			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 801636a:	4b0c      	ldr	r3, [pc, #48]	; (801639c <xNetworkBuffersInitialise+0xf8>)
 801636c:	2240      	movs	r2, #64	; 0x40
 801636e:	601a      	str	r2, [r3, #0]
		}
	}

	if( xNetworkBufferSemaphore == NULL )
 8016370:	4b06      	ldr	r3, [pc, #24]	; (801638c <xNetworkBuffersInitialise+0xe8>)
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d102      	bne.n	801637e <xNetworkBuffersInitialise+0xda>
	{
		xReturn = pdFAIL;
 8016378:	2300      	movs	r3, #0
 801637a:	60fb      	str	r3, [r7, #12]
 801637c:	e001      	b.n	8016382 <xNetworkBuffersInitialise+0xde>
	}
	else
	{
		xReturn = pdPASS;
 801637e:	2301      	movs	r3, #1
 8016380:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8016382:	68fb      	ldr	r3, [r7, #12]
}
 8016384:	4618      	mov	r0, r3
 8016386:	3710      	adds	r7, #16
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}
 801638c:	24005c60 	.word	0x24005c60
 8016390:	080186f0 	.word	0x080186f0
 8016394:	24005348 	.word	0x24005348
 8016398:	24005360 	.word	0x24005360
 801639c:	2400535c 	.word	0x2400535c

080163a0 <vReleaseNetworkBuffer>:
	return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t *pucEthernetBuffer )
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b082      	sub	sp, #8
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
	/* There is space before the Ethernet buffer in which a pointer to the
	network buffer that references this Ethernet buffer is stored.  Remove the
	space before freeing the buffer. */
	if( pucEthernetBuffer != NULL )
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d005      	beq.n	80163ba <vReleaseNetworkBuffer+0x1a>
	{
		pucEthernetBuffer -= ipBUFFER_PADDING;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	3b0a      	subs	r3, #10
 80163b2:	607b      	str	r3, [r7, #4]
		vPortFree( ( void * ) pucEthernetBuffer );
 80163b4:	6878      	ldr	r0, [r7, #4]
 80163b6:	f7f5 fbc1 	bl	800bb3c <vPortFree>
	}
}
 80163ba:	bf00      	nop
 80163bc:	3708      	adds	r7, #8
 80163be:	46bd      	mov	sp, r7
 80163c0:	bd80      	pop	{r7, pc}
	...

080163c4 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b086      	sub	sp, #24
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t *pxReturn = NULL;
 80163ce:	2300      	movs	r3, #0
 80163d0:	617b      	str	r3, [r7, #20]
size_t uxCount;

	if( xNetworkBufferSemaphore != NULL )
 80163d2:	4b38      	ldr	r3, [pc, #224]	; (80164b4 <pxGetNetworkBufferWithDescriptor+0xf0>)
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d066      	beq.n	80164a8 <pxGetNetworkBufferWithDescriptor+0xe4>
	{
		if( ( xRequestedSizeBytes != 0U ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d004      	beq.n	80163ea <pxGetNetworkBufferWithDescriptor+0x26>
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2b45      	cmp	r3, #69	; 0x45
 80163e4:	d801      	bhi.n	80163ea <pxGetNetworkBufferWithDescriptor+0x26>
		{
			/* ARP packets can replace application packets, so the storage must be
			at least large enough to hold an ARP. */
			xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 80163e6:	2346      	movs	r3, #70	; 0x46
 80163e8:	607b      	str	r3, [r7, #4]
		}

		/* Add 2 bytes to xRequestedSizeBytes and round up xRequestedSizeBytes
		to the nearest multiple of N bytes, where N equals 'sizeof( size_t )'. */
		xRequestedSizeBytes += 2U;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	3302      	adds	r3, #2
 80163ee:	607b      	str	r3, [r7, #4]
		if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1U ) ) != 0U )
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f003 0303 	and.w	r3, r3, #3
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d004      	beq.n	8016404 <pxGetNetworkBufferWithDescriptor+0x40>
		{
			xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1U ) ) + 1U;
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	f043 0303 	orr.w	r3, r3, #3
 8016400:	3301      	adds	r3, #1
 8016402:	607b      	str	r3, [r7, #4]
		}

		/* If there is a semaphore available, there is a network buffer available. */
		if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8016404:	4b2b      	ldr	r3, [pc, #172]	; (80164b4 <pxGetNetworkBufferWithDescriptor+0xf0>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	6839      	ldr	r1, [r7, #0]
 801640a:	4618      	mov	r0, r3
 801640c:	f7f6 fa68 	bl	800c8e0 <xQueueSemaphoreTake>
 8016410:	4603      	mov	r3, r0
 8016412:	2b01      	cmp	r3, #1
 8016414:	d148      	bne.n	80164a8 <pxGetNetworkBufferWithDescriptor+0xe4>
		{
			/* Protect the structure as it is accessed from tasks and interrupts. */
			taskENTER_CRITICAL();
 8016416:	f7f7 ffb9 	bl	800e38c <vPortEnterCritical>
			{
				pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 801641a:	4b27      	ldr	r3, [pc, #156]	; (80164b8 <pxGetNetworkBufferWithDescriptor+0xf4>)
 801641c:	68db      	ldr	r3, [r3, #12]
 801641e:	68db      	ldr	r3, [r3, #12]
 8016420:	617b      	str	r3, [r7, #20]
				( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8016422:	697b      	ldr	r3, [r7, #20]
 8016424:	4618      	mov	r0, r3
 8016426:	f7f5 ff38 	bl	800c29a <uxListRemove>
			}
			taskEXIT_CRITICAL();
 801642a:	f7f7 ffe1 	bl	800e3f0 <vPortExitCritical>

			/* Reading UBaseType_t, no critical section needed. */
			uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 801642e:	4b22      	ldr	r3, [pc, #136]	; (80164b8 <pxGetNetworkBufferWithDescriptor+0xf4>)
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	613b      	str	r3, [r7, #16]

			if( uxMinimumFreeNetworkBuffers > uxCount )
 8016434:	4b21      	ldr	r3, [pc, #132]	; (80164bc <pxGetNetworkBufferWithDescriptor+0xf8>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	693a      	ldr	r2, [r7, #16]
 801643a:	429a      	cmp	r2, r3
 801643c:	d202      	bcs.n	8016444 <pxGetNetworkBufferWithDescriptor+0x80>
			{
				uxMinimumFreeNetworkBuffers = uxCount;
 801643e:	4a1f      	ldr	r2, [pc, #124]	; (80164bc <pxGetNetworkBufferWithDescriptor+0xf8>)
 8016440:	693b      	ldr	r3, [r7, #16]
 8016442:	6013      	str	r3, [r2, #0]
			}

			/* Allocate storage of exactly the requested size to the buffer. */
			configASSERT( pxReturn->pucEthernetBuffer == NULL );
 8016444:	697b      	ldr	r3, [r7, #20]
 8016446:	699b      	ldr	r3, [r3, #24]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d00b      	beq.n	8016464 <pxGetNetworkBufferWithDescriptor+0xa0>
 801644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016450:	b672      	cpsid	i
 8016452:	f383 8811 	msr	BASEPRI, r3
 8016456:	f3bf 8f6f 	isb	sy
 801645a:	f3bf 8f4f 	dsb	sy
 801645e:	b662      	cpsie	i
 8016460:	60fb      	str	r3, [r7, #12]
 8016462:	e7fe      	b.n	8016462 <pxGetNetworkBufferWithDescriptor+0x9e>
			if( xRequestedSizeBytes > 0U )
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d01e      	beq.n	80164a8 <pxGetNetworkBufferWithDescriptor+0xe4>
			{
				/* Extra space is obtained so a pointer to the network buffer can
				be stored at the beginning of the buffer. */
				pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	330a      	adds	r3, #10
 801646e:	4618      	mov	r0, r3
 8016470:	f7f5 fa96 	bl	800b9a0 <pvPortMalloc>
 8016474:	4602      	mov	r2, r0
 8016476:	697b      	ldr	r3, [r7, #20]
 8016478:	619a      	str	r2, [r3, #24]

				if( pxReturn->pucEthernetBuffer == NULL )
 801647a:	697b      	ldr	r3, [r7, #20]
 801647c:	699b      	ldr	r3, [r3, #24]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d105      	bne.n	801648e <pxGetNetworkBufferWithDescriptor+0xca>
				{
					/* The attempt to allocate storage for the buffer payload failed,
					so the network buffer structure cannot be used and must be
					released. */
					vReleaseNetworkBufferAndDescriptor( pxReturn );
 8016482:	6978      	ldr	r0, [r7, #20]
 8016484:	f000 f81c 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
					pxReturn = NULL;
 8016488:	2300      	movs	r3, #0
 801648a:	617b      	str	r3, [r7, #20]
 801648c:	e00c      	b.n	80164a8 <pxGetNetworkBufferWithDescriptor+0xe4>
				{
					/* Store a pointer to the network buffer structure in the
					buffer storage area, then move the buffer pointer on past the
					stored pointer so the pointer value is not overwritten by the
					application when the buffer is used. */
					*( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 801648e:	697b      	ldr	r3, [r7, #20]
 8016490:	699b      	ldr	r3, [r3, #24]
 8016492:	697a      	ldr	r2, [r7, #20]
 8016494:	601a      	str	r2, [r3, #0]
					pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 8016496:	697b      	ldr	r3, [r7, #20]
 8016498:	699b      	ldr	r3, [r3, #24]
 801649a:	f103 020a 	add.w	r2, r3, #10
 801649e:	697b      	ldr	r3, [r7, #20]
 80164a0:	619a      	str	r2, [r3, #24]

					/* Store the actual size of the allocated buffer, which may be
					greater than the original requested size. */
					pxReturn->xDataLength = xRequestedSizeBytes;
 80164a2:	697b      	ldr	r3, [r7, #20]
 80164a4:	687a      	ldr	r2, [r7, #4]
 80164a6:	61da      	str	r2, [r3, #28]
	{
		/* No action. */
		iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
	}

	return pxReturn;
 80164a8:	697b      	ldr	r3, [r7, #20]
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3718      	adds	r7, #24
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd80      	pop	{r7, pc}
 80164b2:	bf00      	nop
 80164b4:	24005c60 	.word	0x24005c60
 80164b8:	24005348 	.word	0x24005348
 80164bc:	2400535c 	.word	0x2400535c

080164c0 <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b084      	sub	sp, #16
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
	/* Ensure the buffer is returned to the list of free buffers before the
	counting semaphore is 'given' to say a buffer is available.  Release the
	storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
	IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
	MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	699b      	ldr	r3, [r3, #24]
 80164cc:	4618      	mov	r0, r3
 80164ce:	f7ff ff67 	bl	80163a0 <vReleaseNetworkBuffer>
	pxNetworkBuffer->pucEthernetBuffer = NULL;
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	2200      	movs	r2, #0
 80164d6:	619a      	str	r2, [r3, #24]

	taskENTER_CRITICAL();
 80164d8:	f7f7 ff58 	bl	800e38c <vPortEnterCritical>
	{
		xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	691b      	ldr	r3, [r3, #16]
 80164e0:	4a0f      	ldr	r2, [pc, #60]	; (8016520 <vReleaseNetworkBufferAndDescriptor+0x60>)
 80164e2:	4293      	cmp	r3, r2
 80164e4:	d101      	bne.n	80164ea <vReleaseNetworkBufferAndDescriptor+0x2a>
 80164e6:	2301      	movs	r3, #1
 80164e8:	e000      	b.n	80164ec <vReleaseNetworkBufferAndDescriptor+0x2c>
 80164ea:	2300      	movs	r3, #0
 80164ec:	60fb      	str	r3, [r7, #12]

		if( xListItemAlreadyInFreeList == pdFALSE )
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d104      	bne.n	80164fe <vReleaseNetworkBufferAndDescriptor+0x3e>
		{
			vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	4619      	mov	r1, r3
 80164f8:	4809      	ldr	r0, [pc, #36]	; (8016520 <vReleaseNetworkBufferAndDescriptor+0x60>)
 80164fa:	f7f5 fe71 	bl	800c1e0 <vListInsertEnd>
		}
	}
	taskEXIT_CRITICAL();
 80164fe:	f7f7 ff77 	bl	800e3f0 <vPortExitCritical>

	/*
	 * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
	 * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
	 */
	if( xListItemAlreadyInFreeList == pdFALSE )
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d106      	bne.n	8016516 <vReleaseNetworkBufferAndDescriptor+0x56>
	{
		if ( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 8016508:	4b06      	ldr	r3, [pc, #24]	; (8016524 <vReleaseNetworkBufferAndDescriptor+0x64>)
 801650a:	6818      	ldr	r0, [r3, #0]
 801650c:	2300      	movs	r3, #0
 801650e:	2200      	movs	r2, #0
 8016510:	2100      	movs	r1, #0
 8016512:	f7f6 f801 	bl	800c518 <xQueueGenericSend>
	else
	{
		/* No action. */
		iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
	}
}
 8016516:	bf00      	nop
 8016518:	3710      	adds	r7, #16
 801651a:	46bd      	mov	sp, r7
 801651c:	bd80      	pop	{r7, pc}
 801651e:	bf00      	nop
 8016520:	24005348 	.word	0x24005348
 8016524:	24005c60 	.word	0x24005c60

08016528 <uxGetNumberOfFreeNetworkBuffers>:

/*
 * Returns the number of free network buffers
 */
UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8016528:	b480      	push	{r7}
 801652a:	af00      	add	r7, sp, #0
	return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 801652c:	4b03      	ldr	r3, [pc, #12]	; (801653c <uxGetNumberOfFreeNetworkBuffers+0x14>)
 801652e:	681b      	ldr	r3, [r3, #0]
}
 8016530:	4618      	mov	r0, r3
 8016532:	46bd      	mov	sp, r7
 8016534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016538:	4770      	bx	lr
 801653a:	bf00      	nop
 801653c:	24005348 	.word	0x24005348

08016540 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8016540:	b480      	push	{r7}
 8016542:	af00      	add	r7, sp, #0
	return uxMinimumFreeNetworkBuffers;
 8016544:	4b03      	ldr	r3, [pc, #12]	; (8016554 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8016546:	681b      	ldr	r3, [r3, #0]
}
 8016548:	4618      	mov	r0, r3
 801654a:	46bd      	mov	sp, r7
 801654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016550:	4770      	bx	lr
 8016552:	bf00      	nop
 8016554:	2400535c 	.word	0x2400535c

08016558 <xHas_1F_PHYSPCS>:

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t *pxPhyObject, uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8016558:	b480      	push	{r7}
 801655a:	b085      	sub	sp, #20
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
BaseType_t xResult;

	switch( ulPhyID )
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	4a08      	ldr	r2, [pc, #32]	; (8016584 <xHas_1F_PHYSPCS+0x2c>)
 8016564:	4293      	cmp	r3, r2
 8016566:	d002      	beq.n	801656e <xHas_1F_PHYSPCS+0x16>
		case PHY_ID_KSZ8081MNXIA:

		case PHY_ID_KSZ8863:
		default:
			/* Most PHY's have a 1F_PHYSPCS */
			xResult = pdTRUE;
 8016568:	2301      	movs	r3, #1
 801656a:	60fb      	str	r3, [r7, #12]
			break;
 801656c:	e002      	b.n	8016574 <xHas_1F_PHYSPCS+0x1c>
		case PHY_ID_DP83848I:
			xResult = pdFALSE;
 801656e:	2300      	movs	r3, #0
 8016570:	60fb      	str	r3, [r7, #12]
			break;
 8016572:	bf00      	nop
	}
	return xResult;
 8016574:	68fb      	ldr	r3, [r7, #12]
}
 8016576:	4618      	mov	r0, r3
 8016578:	3714      	adds	r7, #20
 801657a:	46bd      	mov	sp, r7
 801657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016580:	4770      	bx	lr
 8016582:	bf00      	nop
 8016584:	20005c90 	.word	0x20005c90

08016588 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8016588:	b480      	push	{r7}
 801658a:	b085      	sub	sp, #20
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
BaseType_t xResult;

	switch( ulPhyID )
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	4a09      	ldr	r2, [pc, #36]	; (80165b8 <xHas_19_PHYCR+0x30>)
 8016594:	4293      	cmp	r3, r2
 8016596:	d002      	beq.n	801659e <xHas_19_PHYCR+0x16>
 8016598:	4a08      	ldr	r2, [pc, #32]	; (80165bc <xHas_19_PHYCR+0x34>)
 801659a:	4293      	cmp	r3, r2
 801659c:	d102      	bne.n	80165a4 <xHas_19_PHYCR+0x1c>
	{
		case PHY_ID_LAN8742A:
		case PHY_ID_DP83848I:
			xResult = pdTRUE;
 801659e:	2301      	movs	r3, #1
 80165a0:	60fb      	str	r3, [r7, #12]
			break;
 80165a2:	e002      	b.n	80165aa <xHas_19_PHYCR+0x22>
		default:
			/* Most PHY's do not have a 19_PHYCR */
			xResult = pdFALSE;
 80165a4:	2300      	movs	r3, #0
 80165a6:	60fb      	str	r3, [r7, #12]
			break;
 80165a8:	bf00      	nop
	}
	return xResult;
 80165aa:	68fb      	ldr	r3, [r7, #12]
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	3714      	adds	r7, #20
 80165b0:	46bd      	mov	sp, r7
 80165b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b6:	4770      	bx	lr
 80165b8:	0007c130 	.word	0x0007c130
 80165bc:	20005c90 	.word	0x20005c90

080165c0 <vPhyInitialise>:
/*-----------------------------------------------------------*/

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t *pxPhyObject, xApplicationPhyReadHook_t fnPhyRead, xApplicationPhyWriteHook_t fnPhyWrite )
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b084      	sub	sp, #16
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	60f8      	str	r0, [r7, #12]
 80165c8:	60b9      	str	r1, [r7, #8]
 80165ca:	607a      	str	r2, [r7, #4]
	memset( ( void * )pxPhyObject, 0, sizeof( *pxPhyObject ) );
 80165cc:	2240      	movs	r2, #64	; 0x40
 80165ce:	2100      	movs	r1, #0
 80165d0:	68f8      	ldr	r0, [r7, #12]
 80165d2:	f000 fe78 	bl	80172c6 <memset>

	pxPhyObject->fnPhyRead = fnPhyRead;
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	68ba      	ldr	r2, [r7, #8]
 80165da:	601a      	str	r2, [r3, #0]
	pxPhyObject->fnPhyWrite = fnPhyWrite;
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	687a      	ldr	r2, [r7, #4]
 80165e0:	605a      	str	r2, [r3, #4]
}
 80165e2:	bf00      	nop
 80165e4:	3710      	adds	r7, #16
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}

080165ea <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t *pxPhyObject )
{
 80165ea:	b580      	push	{r7, lr}
 80165ec:	b086      	sub	sp, #24
 80165ee:	af00      	add	r7, sp, #0
 80165f0:	6078      	str	r0, [r7, #4]
BaseType_t xPhyAddress;

	pxPhyObject->xPortCount = 0;
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	2200      	movs	r2, #0
 80165f6:	629a      	str	r2, [r3, #40]	; 0x28

	for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 80165f8:	2300      	movs	r3, #0
 80165fa:	617b      	str	r3, [r7, #20]
 80165fc:	e038      	b.n	8016670 <xPhyDiscover+0x86>
	{
	uint32_t ulLowerID;

		pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	f107 020c 	add.w	r2, r7, #12
 8016606:	2103      	movs	r1, #3
 8016608:	6978      	ldr	r0, [r7, #20]
 801660a:	4798      	blx	r3
		/* A valid PHY id can not be all zeros or all ones. */
		if( ( ulLowerID != ( uint16_t ) ~0U )  && ( ulLowerID != ( uint16_t ) 0U ) )
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016612:	4293      	cmp	r3, r2
 8016614:	d029      	beq.n	801666a <xPhyDiscover+0x80>
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d026      	beq.n	801666a <xPhyDiscover+0x80>
		{
		uint32_t ulUpperID;
		uint32_t ulPhyID;

			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f107 0208 	add.w	r2, r7, #8
 8016624:	2102      	movs	r1, #2
 8016626:	6978      	ldr	r0, [r7, #20]
 8016628:	4798      	blx	r3
			ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 801662a:	68bb      	ldr	r3, [r7, #8]
 801662c:	041a      	lsls	r2, r3, #16
 801662e:	68f9      	ldr	r1, [r7, #12]
 8016630:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8016634:	400b      	ands	r3, r1
 8016636:	4313      	orrs	r3, r2
 8016638:	613b      	str	r3, [r7, #16]

			pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801663e:	697a      	ldr	r2, [r7, #20]
 8016640:	b2d1      	uxtb	r1, r2
 8016642:	687a      	ldr	r2, [r7, #4]
 8016644:	4413      	add	r3, r2
 8016646:	460a      	mov	r2, r1
 8016648:	761a      	strb	r2, [r3, #24]
			pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	3202      	adds	r2, #2
 8016652:	6939      	ldr	r1, [r7, #16]
 8016654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			pxPhyObject->xPortCount++;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801665c:	1c5a      	adds	r2, r3, #1
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	629a      	str	r2, [r3, #40]	; 0x28

			/* See if there is more storage space. */
			if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016666:	2b04      	cmp	r3, #4
 8016668:	d005      	beq.n	8016676 <xPhyDiscover+0x8c>
	for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	3301      	adds	r3, #1
 801666e:	617b      	str	r3, [r7, #20]
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	2b1f      	cmp	r3, #31
 8016674:	ddc3      	ble.n	80165fe <xPhyDiscover+0x14>
	if( pxPhyObject->xPortCount > 0 )
	{
		FreeRTOS_printf( ( "PHY ID %lX\n", pxPhyObject->ulPhyIDs[ 0 ] ) );
	}

	return pxPhyObject->xPortCount;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801667a:	4618      	mov	r0, r3
 801667c:	3718      	adds	r7, #24
 801667e:	46bd      	mov	sp, r7
 8016680:	bd80      	pop	{r7, pc}

08016682 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t *pxPhyObject, uint32_t ulPhyMask )
{
 8016682:	b580      	push	{r7, lr}
 8016684:	b08c      	sub	sp, #48	; 0x30
 8016686:	af00      	add	r7, sp, #0
 8016688:	6078      	str	r0, [r7, #4]
 801668a:	6039      	str	r1, [r7, #0]
TickType_t xRemainingTime;
TimeOut_t xTimer;
BaseType_t xPhyIndex;

	/* A bit-mask of PHY ports that are ready. */
	ulDoneMask = 0UL;
 801668c:	2300      	movs	r3, #0
 801668e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Set the RESET bits high. */
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016690:	2300      	movs	r3, #0
 8016692:	62bb      	str	r3, [r7, #40]	; 0x28
 8016694:	e017      	b.n	80166c6 <xPhyReset+0x44>
	{
	BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016696:	687a      	ldr	r2, [r7, #4]
 8016698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801669a:	4413      	add	r3, r2
 801669c:	3318      	adds	r3, #24
 801669e:	781b      	ldrb	r3, [r3, #0]
 80166a0:	61fb      	str	r3, [r7, #28]

		/* Read Control register. */
		pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	f107 0218 	add.w	r2, r7, #24
 80166aa:	2100      	movs	r1, #0
 80166ac:	69f8      	ldr	r0, [r7, #28]
 80166ae:	4798      	blx	r3
		pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	685b      	ldr	r3, [r3, #4]
 80166b4:	69ba      	ldr	r2, [r7, #24]
 80166b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80166ba:	2100      	movs	r1, #0
 80166bc:	69f8      	ldr	r0, [r7, #28]
 80166be:	4798      	blx	r3
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80166c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166c2:	3301      	adds	r3, #1
 80166c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80166cc:	429a      	cmp	r2, r3
 80166ce:	dbe2      	blt.n	8016696 <xPhyReset+0x14>
	}

	xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 80166d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80166d4:	617b      	str	r3, [r7, #20]
	vTaskSetTimeOutState( &xTimer );
 80166d6:	f107 030c 	add.w	r3, r7, #12
 80166da:	4618      	mov	r0, r3
 80166dc:	f7f7 f88c 	bl	800d7f8 <vTaskSetTimeOutState>

	/* The reset should last less than a second. */
	for( ;; )
	{
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80166e0:	2300      	movs	r3, #0
 80166e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80166e4:	e01b      	b.n	801671e <xPhyReset+0x9c>
		{
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80166e6:	687a      	ldr	r2, [r7, #4]
 80166e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ea:	4413      	add	r3, r2
 80166ec:	3318      	adds	r3, #24
 80166ee:	781b      	ldrb	r3, [r3, #0]
 80166f0:	623b      	str	r3, [r7, #32]

			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	f107 0218 	add.w	r2, r7, #24
 80166fa:	2100      	movs	r1, #0
 80166fc:	6a38      	ldr	r0, [r7, #32]
 80166fe:	4798      	blx	r3
			if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8016700:	69bb      	ldr	r3, [r7, #24]
 8016702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016706:	2b00      	cmp	r3, #0
 8016708:	d106      	bne.n	8016718 <xPhyReset+0x96>
			{
				FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", (int)xPhyIndex ) );
				ulDoneMask |= ( 1UL << xPhyIndex );
 801670a:	2201      	movs	r2, #1
 801670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801670e:	fa02 f303 	lsl.w	r3, r2, r3
 8016712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016714:	4313      	orrs	r3, r2
 8016716:	62fb      	str	r3, [r7, #44]	; 0x2c
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801671a:	3301      	adds	r3, #1
 801671c:	62bb      	str	r3, [r7, #40]	; 0x28
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016724:	429a      	cmp	r2, r3
 8016726:	dbde      	blt.n	80166e6 <xPhyReset+0x64>
			}
		}
		if( ulDoneMask == ulPhyMask )
 8016728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801672a:	683b      	ldr	r3, [r7, #0]
 801672c:	429a      	cmp	r2, r3
 801672e:	d00e      	beq.n	801674e <xPhyReset+0xcc>
		{
			break;
		}
		if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8016730:	f107 0214 	add.w	r2, r7, #20
 8016734:	f107 030c 	add.w	r3, r7, #12
 8016738:	4611      	mov	r1, r2
 801673a:	4618      	mov	r0, r3
 801673c:	f7f7 f89a 	bl	800d874 <xTaskCheckForTimeOut>
 8016740:	4603      	mov	r3, r0
 8016742:	2b00      	cmp	r3, #0
 8016744:	d105      	bne.n	8016752 <xPhyReset+0xd0>
		{
			FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
			break;
		}
		/* Block for a while */
		vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016746:	2032      	movs	r0, #50	; 0x32
 8016748:	f7f6 fcd8 	bl	800d0fc <vTaskDelay>
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 801674c:	e7c8      	b.n	80166e0 <xPhyReset+0x5e>
			break;
 801674e:	bf00      	nop
 8016750:	e000      	b.n	8016754 <xPhyReset+0xd2>
			break;
 8016752:	bf00      	nop
	}

	/* Clear the reset bits. */
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016754:	2300      	movs	r3, #0
 8016756:	62bb      	str	r3, [r7, #40]	; 0x28
 8016758:	e01f      	b.n	801679a <xPhyReset+0x118>
	{
		if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 801675a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801675e:	fa22 f303 	lsr.w	r3, r2, r3
 8016762:	f003 0301 	and.w	r3, r3, #1
 8016766:	2b00      	cmp	r3, #0
 8016768:	d114      	bne.n	8016794 <xPhyReset+0x112>
		{
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801676a:	687a      	ldr	r2, [r7, #4]
 801676c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801676e:	4413      	add	r3, r2
 8016770:	3318      	adds	r3, #24
 8016772:	781b      	ldrb	r3, [r3, #0]
 8016774:	627b      	str	r3, [r7, #36]	; 0x24

			/* The reset operation timed out, clear the bit manually. */
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	f107 0218 	add.w	r2, r7, #24
 801677e:	2100      	movs	r1, #0
 8016780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016782:	4798      	blx	r3
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	685b      	ldr	r3, [r3, #4]
 8016788:	69ba      	ldr	r2, [r7, #24]
 801678a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801678e:	2100      	movs	r1, #0
 8016790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016792:	4798      	blx	r3
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016796:	3301      	adds	r3, #1
 8016798:	62bb      	str	r3, [r7, #40]	; 0x28
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801679e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80167a0:	429a      	cmp	r2, r3
 80167a2:	dbda      	blt.n	801675a <xPhyReset+0xd8>
		}
	}

	vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80167a4:	2032      	movs	r0, #50	; 0x32
 80167a6:	f7f6 fca9 	bl	800d0fc <vTaskDelay>

	return ulDoneMask;
 80167aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80167ac:	4618      	mov	r0, r3
 80167ae:	3730      	adds	r7, #48	; 0x30
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bd80      	pop	{r7, pc}

080167b4 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t *pxPhyObject, const PhyProperties_t *pxPhyProperties )
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b088      	sub	sp, #32
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
 80167bc:	6039      	str	r1, [r7, #0]
uint32_t ulConfig, ulAdvertise;
BaseType_t xPhyIndex;

	if( pxPhyObject->xPortCount < 1 )
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	dc02      	bgt.n	80167cc <xPhyConfigure+0x18>
	{
		FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
		return -1;
 80167c6:	f04f 33ff 	mov.w	r3, #4294967295
 80167ca:	e0e7      	b.n	801699c <xPhyConfigure+0x1e8>
	/* The expected ID for the 'LAN8742A'  is 0x0007c130. */
	/* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
	/* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
	if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO ) )
 80167cc:	683b      	ldr	r3, [r7, #0]
 80167ce:	781b      	ldrb	r3, [r3, #0]
 80167d0:	2b03      	cmp	r3, #3
 80167d2:	d107      	bne.n	80167e4 <xPhyConfigure+0x30>
 80167d4:	683b      	ldr	r3, [r7, #0]
 80167d6:	789b      	ldrb	r3, [r3, #2]
 80167d8:	2b03      	cmp	r3, #3
 80167da:	d103      	bne.n	80167e4 <xPhyConfigure+0x30>
	{
		ulAdvertise = phyADVERTISE_ALL;
 80167dc:	f240 13e1 	movw	r3, #481	; 0x1e1
 80167e0:	61fb      	str	r3, [r7, #28]
 80167e2:	e044      	b.n	801686e <xPhyConfigure+0xba>
		/* Reset auto-negotiation capability. */
	}
	else
	{
		/* Always select protocol 802.3u. */
		ulAdvertise = phyADVERTISE_CSMA;
 80167e4:	2301      	movs	r3, #1
 80167e6:	61fb      	str	r3, [r7, #28]

		if( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO )
 80167e8:	683b      	ldr	r3, [r7, #0]
 80167ea:	781b      	ldrb	r3, [r3, #0]
 80167ec:	2b03      	cmp	r3, #3
 80167ee:	d10d      	bne.n	801680c <xPhyConfigure+0x58>
		{
			if( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_FULL )
 80167f0:	683b      	ldr	r3, [r7, #0]
 80167f2:	789b      	ldrb	r3, [r3, #2]
 80167f4:	2b02      	cmp	r3, #2
 80167f6:	d104      	bne.n	8016802 <xPhyConfigure+0x4e>
			{
				ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 80167f8:	69fb      	ldr	r3, [r7, #28]
 80167fa:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80167fe:	61fb      	str	r3, [r7, #28]
 8016800:	e035      	b.n	801686e <xPhyConfigure+0xba>
			}
			else
			{
				ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8016802:	69fb      	ldr	r3, [r7, #28]
 8016804:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8016808:	61fb      	str	r3, [r7, #28]
 801680a:	e030      	b.n	801686e <xPhyConfigure+0xba>
			}
		}
		else if( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO )
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	789b      	ldrb	r3, [r3, #2]
 8016810:	2b03      	cmp	r3, #3
 8016812:	d10d      	bne.n	8016830 <xPhyConfigure+0x7c>
		{
			if( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_10 )
 8016814:	683b      	ldr	r3, [r7, #0]
 8016816:	781b      	ldrb	r3, [r3, #0]
 8016818:	2b01      	cmp	r3, #1
 801681a:	d104      	bne.n	8016826 <xPhyConfigure+0x72>
			{
				ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 801681c:	69fb      	ldr	r3, [r7, #28]
 801681e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8016822:	61fb      	str	r3, [r7, #28]
 8016824:	e023      	b.n	801686e <xPhyConfigure+0xba>
			}
			else
			{
				ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8016826:	69fb      	ldr	r3, [r7, #28]
 8016828:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801682c:	61fb      	str	r3, [r7, #28]
 801682e:	e01e      	b.n	801686e <xPhyConfigure+0xba>
			}
		}
		else if( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_100 )
 8016830:	683b      	ldr	r3, [r7, #0]
 8016832:	781b      	ldrb	r3, [r3, #0]
 8016834:	2b02      	cmp	r3, #2
 8016836:	d10d      	bne.n	8016854 <xPhyConfigure+0xa0>
		{
			if( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_FULL )
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	789b      	ldrb	r3, [r3, #2]
 801683c:	2b02      	cmp	r3, #2
 801683e:	d104      	bne.n	801684a <xPhyConfigure+0x96>
			{
				ulAdvertise |= phyADVERTISE_100FULL;
 8016840:	69fb      	ldr	r3, [r7, #28]
 8016842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016846:	61fb      	str	r3, [r7, #28]
 8016848:	e011      	b.n	801686e <xPhyConfigure+0xba>
			}
			else
			{
				ulAdvertise |= phyADVERTISE_100HALF;
 801684a:	69fb      	ldr	r3, [r7, #28]
 801684c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016850:	61fb      	str	r3, [r7, #28]
 8016852:	e00c      	b.n	801686e <xPhyConfigure+0xba>
			}
		}
		else
		{
			if( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_FULL )
 8016854:	683b      	ldr	r3, [r7, #0]
 8016856:	789b      	ldrb	r3, [r3, #2]
 8016858:	2b02      	cmp	r3, #2
 801685a:	d104      	bne.n	8016866 <xPhyConfigure+0xb2>
			{
				ulAdvertise |= phyADVERTISE_10FULL;
 801685c:	69fb      	ldr	r3, [r7, #28]
 801685e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016862:	61fb      	str	r3, [r7, #28]
 8016864:	e003      	b.n	801686e <xPhyConfigure+0xba>
			}
			else
			{
				ulAdvertise |= phyADVERTISE_10HALF;
 8016866:	69fb      	ldr	r3, [r7, #28]
 8016868:	f043 0320 	orr.w	r3, r3, #32
 801686c:	61fb      	str	r3, [r7, #28]
			}
		}
	}

	/* Send a reset command to a set of PHY-ports. */
	xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016872:	2201      	movs	r2, #1
 8016874:	fa02 f303 	lsl.w	r3, r2, r3
 8016878:	3b01      	subs	r3, #1
 801687a:	4619      	mov	r1, r3
 801687c:	6878      	ldr	r0, [r7, #4]
 801687e:	f7ff ff00 	bl	8016682 <xPhyReset>

	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016882:	2300      	movs	r3, #0
 8016884:	61bb      	str	r3, [r7, #24]
 8016886:	e07a      	b.n	801697e <xPhyConfigure+0x1ca>
	{
	BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016888:	687a      	ldr	r2, [r7, #4]
 801688a:	69bb      	ldr	r3, [r7, #24]
 801688c:	4413      	add	r3, r2
 801688e:	3318      	adds	r3, #24
 8016890:	781b      	ldrb	r3, [r3, #0]
 8016892:	617b      	str	r3, [r7, #20]
	uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	69ba      	ldr	r2, [r7, #24]
 8016898:	3202      	adds	r2, #2
 801689a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801689e:	613b      	str	r3, [r7, #16]

		/* Write advertise register. */
		pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	685b      	ldr	r3, [r3, #4]
 80168a4:	69fa      	ldr	r2, [r7, #28]
 80168a6:	2104      	movs	r1, #4
 80168a8:	6978      	ldr	r0, [r7, #20]
 80168aa:	4798      	blx	r3
				  1           1           1        10BASE-T, Half/Full-Duplex
												   100BASE-TX, Half/Full-Duplex
		*/

		/* Read Control register. */
		pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	f107 020c 	add.w	r2, r7, #12
 80168b4:	2100      	movs	r1, #0
 80168b6:	6978      	ldr	r0, [r7, #20]
 80168b8:	4798      	blx	r3

		ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	f423 5304 	bic.w	r3, r3, #8448	; 0x2100
 80168c0:	60fb      	str	r3, [r7, #12]

		ulConfig |= phyBMCR_AN_ENABLE;
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80168c8:	60fb      	str	r3, [r7, #12]

		if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) )
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	2b02      	cmp	r3, #2
 80168d0:	d003      	beq.n	80168da <xPhyConfigure+0x126>
 80168d2:	683b      	ldr	r3, [r7, #0]
 80168d4:	781b      	ldrb	r3, [r3, #0]
 80168d6:	2b03      	cmp	r3, #3
 80168d8:	d104      	bne.n	80168e4 <xPhyConfigure+0x130>
		{
			ulConfig |= phyBMCR_SPEED_100;
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80168e0:	60fb      	str	r3, [r7, #12]
 80168e2:	e007      	b.n	80168f4 <xPhyConfigure+0x140>
		}
		else if( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_10 )
 80168e4:	683b      	ldr	r3, [r7, #0]
 80168e6:	781b      	ldrb	r3, [r3, #0]
 80168e8:	2b01      	cmp	r3, #1
 80168ea:	d103      	bne.n	80168f4 <xPhyConfigure+0x140>
		{
			ulConfig &= ~phyBMCR_SPEED_100;
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80168f2:	60fb      	str	r3, [r7, #12]
		}

		if( ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO ) )
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	789b      	ldrb	r3, [r3, #2]
 80168f8:	2b02      	cmp	r3, #2
 80168fa:	d003      	beq.n	8016904 <xPhyConfigure+0x150>
 80168fc:	683b      	ldr	r3, [r7, #0]
 80168fe:	789b      	ldrb	r3, [r3, #2]
 8016900:	2b03      	cmp	r3, #3
 8016902:	d104      	bne.n	801690e <xPhyConfigure+0x15a>
		{
			ulConfig |= phyBMCR_FULL_DUPLEX;
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801690a:	60fb      	str	r3, [r7, #12]
 801690c:	e007      	b.n	801691e <xPhyConfigure+0x16a>
		}
		else if( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_HALF )
 801690e:	683b      	ldr	r3, [r7, #0]
 8016910:	789b      	ldrb	r3, [r3, #2]
 8016912:	2b01      	cmp	r3, #1
 8016914:	d103      	bne.n	801691e <xPhyConfigure+0x16a>
		{
			ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801691c:	60fb      	str	r3, [r7, #12]
		}

		if( xHas_19_PHYCR( ulPhyID ) )
 801691e:	6938      	ldr	r0, [r7, #16]
 8016920:	f7ff fe32 	bl	8016588 <xHas_19_PHYCR>
 8016924:	4603      	mov	r3, r0
 8016926:	2b00      	cmp	r3, #0
 8016928:	d026      	beq.n	8016978 <xPhyConfigure+0x1c4>
		{
		uint32_t ulPhyControl;
			/* Read PHY Control register. */
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	f107 0208 	add.w	r2, r7, #8
 8016932:	2119      	movs	r1, #25
 8016934:	6978      	ldr	r0, [r7, #20]
 8016936:	4798      	blx	r3

			/* Clear bits which might get set: */
			ulPhyControl &= ~( PHYCR_MDIX_EN|PHYCR_MDIX_FORCE );
 8016938:	68bb      	ldr	r3, [r7, #8]
 801693a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801693e:	60bb      	str	r3, [r7, #8]

			if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	785b      	ldrb	r3, [r3, #1]
 8016944:	2b03      	cmp	r3, #3
 8016946:	d104      	bne.n	8016952 <xPhyConfigure+0x19e>
			{
				ulPhyControl |= PHYCR_MDIX_EN;
 8016948:	68bb      	ldr	r3, [r7, #8]
 801694a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801694e:	60bb      	str	r3, [r7, #8]
 8016950:	e00c      	b.n	801696c <xPhyConfigure+0x1b8>
			}
			else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8016952:	683b      	ldr	r3, [r7, #0]
 8016954:	785b      	ldrb	r3, [r3, #1]
 8016956:	2b02      	cmp	r3, #2
 8016958:	d104      	bne.n	8016964 <xPhyConfigure+0x1b0>
			{
				/* Force direct link = Use crossed RJ45 cable. */
				ulPhyControl &= ~PHYCR_MDIX_FORCE;
 801695a:	68bb      	ldr	r3, [r7, #8]
 801695c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016960:	60bb      	str	r3, [r7, #8]
 8016962:	e003      	b.n	801696c <xPhyConfigure+0x1b8>
			}
			else
			{
				/* Force crossed link = Use direct RJ45 cable. */
				ulPhyControl |= PHYCR_MDIX_FORCE;
 8016964:	68bb      	ldr	r3, [r7, #8]
 8016966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801696a:	60bb      	str	r3, [r7, #8]
			}
			/* update PHY Control Register. */
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	685b      	ldr	r3, [r3, #4]
 8016970:	68ba      	ldr	r2, [r7, #8]
 8016972:	2119      	movs	r1, #25
 8016974:	6978      	ldr	r0, [r7, #20]
 8016976:	4798      	blx	r3
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016978:	69bb      	ldr	r3, [r7, #24]
 801697a:	3301      	adds	r3, #1
 801697c:	61bb      	str	r3, [r7, #24]
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016982:	69ba      	ldr	r2, [r7, #24]
 8016984:	429a      	cmp	r2, r3
 8016986:	f6ff af7f 	blt.w	8016888 <xPhyConfigure+0xd4>

		FreeRTOS_printf( ( "+TCP: advertise: %04lX config %04lX\n", ulAdvertise, ulConfig ) );
	}

	/* Keep these values for later use. */
	pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	62da      	str	r2, [r3, #44]	; 0x2c
	pxPhyObject->ulACRValue = ulAdvertise;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	69fa      	ldr	r2, [r7, #28]
 8016998:	631a      	str	r2, [r3, #48]	; 0x30

	return 0;
 801699a:	2300      	movs	r3, #0
}
 801699c:	4618      	mov	r0, r3
 801699e:	3720      	adds	r7, #32
 80169a0:	46bd      	mov	sp, r7
 80169a2:	bd80      	pop	{r7, pc}

080169a4 <xPhyStartAutoNegotiation>:

/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t *pxPhyObject, uint32_t ulPhyMask )
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b090      	sub	sp, #64	; 0x40
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
 80169ac:	6039      	str	r1, [r7, #0]
uint32_t xPhyIndex, ulDoneMask, ulBitMask;
uint32_t ulPHYLinkStatus, ulRegValue;
TickType_t xRemainingTime;
TimeOut_t xTimer;

	if( ulPhyMask == ( uint32_t ) 0U )
 80169ae:	683b      	ldr	r3, [r7, #0]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d101      	bne.n	80169b8 <xPhyStartAutoNegotiation+0x14>
	{
		return 0;
 80169b4:	2300      	movs	r3, #0
 80169b6:	e153      	b.n	8016c60 <xPhyStartAutoNegotiation+0x2bc>
	}
	for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 80169b8:	2300      	movs	r3, #0
 80169ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80169bc:	e020      	b.n	8016a00 <xPhyStartAutoNegotiation+0x5c>
	{
		if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 80169be:	683a      	ldr	r2, [r7, #0]
 80169c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169c2:	fa22 f303 	lsr.w	r3, r2, r3
 80169c6:	f003 0301 	and.w	r3, r3, #1
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d015      	beq.n	80169fa <xPhyStartAutoNegotiation+0x56>
		{
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80169ce:	687a      	ldr	r2, [r7, #4]
 80169d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169d2:	4413      	add	r3, r2
 80169d4:	3318      	adds	r3, #24
 80169d6:	781b      	ldrb	r3, [r3, #0]
 80169d8:	623b      	str	r3, [r7, #32]

			/* Enable Auto-Negotiation. */
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	685b      	ldr	r3, [r3, #4]
 80169de:	687a      	ldr	r2, [r7, #4]
 80169e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80169e2:	2104      	movs	r1, #4
 80169e4:	6a38      	ldr	r0, [r7, #32]
 80169e6:	4798      	blx	r3
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	685b      	ldr	r3, [r3, #4]
 80169ec:	687a      	ldr	r2, [r7, #4]
 80169ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80169f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80169f4:	2100      	movs	r1, #0
 80169f6:	6a38      	ldr	r0, [r7, #32]
 80169f8:	4798      	blx	r3
	for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 80169fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169fc:	3301      	adds	r3, #1
 80169fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a04:	461a      	mov	r2, r3
 8016a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a08:	4293      	cmp	r3, r2
 8016a0a:	d3d8      	bcc.n	80169be <xPhyStartAutoNegotiation+0x1a>
		}
	}
	xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8016a0c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8016a10:	61bb      	str	r3, [r7, #24]
	vTaskSetTimeOutState( &xTimer );
 8016a12:	f107 0310 	add.w	r3, r7, #16
 8016a16:	4618      	mov	r0, r3
 8016a18:	f7f6 feee 	bl	800d7f8 <vTaskSetTimeOutState>
	ulDoneMask = 0;
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	63bb      	str	r3, [r7, #56]	; 0x38
	/* Wait until the auto-negotiation will be completed */
	for( ;; )
	{
		ulBitMask = ( uint32_t ) 1U;
 8016a20:	2301      	movs	r3, #1
 8016a22:	637b      	str	r3, [r7, #52]	; 0x34
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016a24:	2300      	movs	r3, #0
 8016a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016a28:	e025      	b.n	8016a76 <xPhyStartAutoNegotiation+0xd2>
		{
			if( ( ulPhyMask & ulBitMask ) != 0lu )
 8016a2a:	683a      	ldr	r2, [r7, #0]
 8016a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a2e:	4013      	ands	r3, r2
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d01a      	beq.n	8016a6a <xPhyStartAutoNegotiation+0xc6>
			{
				if( ( ulDoneMask & ulBitMask ) == 0lu )
 8016a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a38:	4013      	ands	r3, r2
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d115      	bne.n	8016a6a <xPhyStartAutoNegotiation+0xc6>
				{
				BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016a3e:	687a      	ldr	r2, [r7, #4]
 8016a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a42:	4413      	add	r3, r2
 8016a44:	3318      	adds	r3, #24
 8016a46:	781b      	ldrb	r3, [r3, #0]
 8016a48:	627b      	str	r3, [r7, #36]	; 0x24

					pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	f107 021c 	add.w	r2, r7, #28
 8016a52:	2101      	movs	r1, #1
 8016a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a56:	4798      	blx	r3
					if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8016a58:	69fb      	ldr	r3, [r7, #28]
 8016a5a:	f003 0320 	and.w	r3, r3, #32
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d003      	beq.n	8016a6a <xPhyStartAutoNegotiation+0xc6>
					{
						ulDoneMask |= ulBitMask;
 8016a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a66:	4313      	orrs	r3, r2
 8016a68:	63bb      	str	r3, [r7, #56]	; 0x38
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a6c:	3301      	adds	r3, #1
 8016a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a72:	005b      	lsls	r3, r3, #1
 8016a74:	637b      	str	r3, [r7, #52]	; 0x34
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a7a:	461a      	mov	r2, r3
 8016a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a7e:	4293      	cmp	r3, r2
 8016a80:	d3d3      	bcc.n	8016a2a <xPhyStartAutoNegotiation+0x86>
					}
				}
			}
		}
		if( ulPhyMask == ulDoneMask )
 8016a82:	683a      	ldr	r2, [r7, #0]
 8016a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a86:	429a      	cmp	r2, r3
 8016a88:	d00e      	beq.n	8016aa8 <xPhyStartAutoNegotiation+0x104>
		{
			break;
		}
		if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8016a8a:	f107 0218 	add.w	r2, r7, #24
 8016a8e:	f107 0310 	add.w	r3, r7, #16
 8016a92:	4611      	mov	r1, r2
 8016a94:	4618      	mov	r0, r3
 8016a96:	f7f6 feed 	bl	800d874 <xTaskCheckForTimeOut>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d105      	bne.n	8016aac <xPhyStartAutoNegotiation+0x108>
		{
			FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
			break;
		}
		vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016aa0:	2032      	movs	r0, #50	; 0x32
 8016aa2:	f7f6 fb2b 	bl	800d0fc <vTaskDelay>
		ulBitMask = ( uint32_t ) 1U;
 8016aa6:	e7bb      	b.n	8016a20 <xPhyStartAutoNegotiation+0x7c>
			break;
 8016aa8:	bf00      	nop
 8016aaa:	e000      	b.n	8016aae <xPhyStartAutoNegotiation+0x10a>
			break;
 8016aac:	bf00      	nop
	}

	if( ulDoneMask != ( uint32_t) 0U )
 8016aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	f000 80d4 	beq.w	8016c5e <xPhyStartAutoNegotiation+0x2ba>
	{
		ulBitMask = ( uint32_t ) 1U;
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	637b      	str	r3, [r7, #52]	; 0x34
		pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ac0:	43db      	mvns	r3, r3
 8016ac2:	401a      	ands	r2, r3
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	635a      	str	r2, [r3, #52]	; 0x34
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016ac8:	2300      	movs	r3, #0
 8016aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016acc:	e0c0      	b.n	8016c50 <xPhyStartAutoNegotiation+0x2ac>
		{
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016ace:	687a      	ldr	r2, [r7, #4]
 8016ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ad2:	4413      	add	r3, r2
 8016ad4:	3318      	adds	r3, #24
 8016ad6:	781b      	ldrb	r3, [r3, #0]
 8016ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016ade:	3202      	adds	r2, #2
 8016ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ae4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8016ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016aea:	4013      	ands	r3, r2
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	f000 80a8 	beq.w	8016c42 <xPhyStartAutoNegotiation+0x29e>
			{
				continue;
			}

			/* Clear the 'phyBMCR_AN_RESTART'  bit. */
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	685b      	ldr	r3, [r3, #4]
 8016af6:	687a      	ldr	r2, [r7, #4]
 8016af8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016afa:	2100      	movs	r1, #0
 8016afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016afe:	4798      	blx	r3

			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	f107 021c 	add.w	r2, r7, #28
 8016b08:	2101      	movs	r1, #1
 8016b0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016b0c:	4798      	blx	r3
			if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0 )
 8016b0e:	69fb      	ldr	r3, [r7, #28]
 8016b10:	f003 0304 	and.w	r3, r3, #4
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d00a      	beq.n	8016b2e <xPhyStartAutoNegotiation+0x18a>
			{
				ulPHYLinkStatus |= phyBMSR_LINK_STATUS;
 8016b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b1a:	f043 0304 	orr.w	r3, r3, #4
 8016b1e:	633b      	str	r3, [r7, #48]	; 0x30
				pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b26:	431a      	orrs	r2, r3
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	635a      	str	r2, [r3, #52]	; 0x34
 8016b2c:	e003      	b.n	8016b36 <xPhyStartAutoNegotiation+0x192>
			}
			else
			{
				ulPHYLinkStatus &= ~( phyBMSR_LINK_STATUS );
 8016b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b30:	f023 0304 	bic.w	r3, r3, #4
 8016b34:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8016b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b38:	4a4b      	ldr	r2, [pc, #300]	; (8016c68 <xPhyStartAutoNegotiation+0x2c4>)
 8016b3a:	4293      	cmp	r3, r2
 8016b3c:	d13b      	bne.n	8016bb6 <xPhyStartAutoNegotiation+0x212>
			{
			uint32_t ulControlStatus;

				pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus);
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	f107 020c 	add.w	r2, r7, #12
 8016b46:	211e      	movs	r1, #30
 8016b48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016b4a:	4798      	blx	r3
				switch( ulControlStatus & 0x07 )
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	f003 0307 	and.w	r3, r3, #7
 8016b52:	3b01      	subs	r3, #1
 8016b54:	2b05      	cmp	r3, #5
 8016b56:	d814      	bhi.n	8016b82 <xPhyStartAutoNegotiation+0x1de>
 8016b58:	a201      	add	r2, pc, #4	; (adr r2, 8016b60 <xPhyStartAutoNegotiation+0x1bc>)
 8016b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b5e:	bf00      	nop
 8016b60:	08016b79 	.word	0x08016b79
 8016b64:	08016b83 	.word	0x08016b83
 8016b68:	08016b83 	.word	0x08016b83
 8016b6c:	08016b83 	.word	0x08016b83
 8016b70:	08016b79 	.word	0x08016b79
 8016b74:	08016b83 	.word	0x08016b83
				case 0x01:
				case 0x05:
//	[001] = 10BASE-T half-duplex
//	[101] = 10BASE-T full-duplex
					/* 10 Mbps. */
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8016b78:	69fb      	ldr	r3, [r7, #28]
 8016b7a:	f043 0302 	orr.w	r3, r3, #2
 8016b7e:	61fb      	str	r3, [r7, #28]
					break;
 8016b80:	bf00      	nop
				case 0x06:
//	[010] = 100BASE-TX half-duplex
//	[110] = 100BASE-TX full-duplex
					break;
				}
				switch( ulControlStatus & 0x07 )
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	f003 0307 	and.w	r3, r3, #7
 8016b88:	3b01      	subs	r3, #1
 8016b8a:	2b05      	cmp	r3, #5
 8016b8c:	d83c      	bhi.n	8016c08 <xPhyStartAutoNegotiation+0x264>
 8016b8e:	a201      	add	r2, pc, #4	; (adr r2, 8016b94 <xPhyStartAutoNegotiation+0x1f0>)
 8016b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b94:	08016c09 	.word	0x08016c09
 8016b98:	08016c09 	.word	0x08016c09
 8016b9c:	08016c09 	.word	0x08016c09
 8016ba0:	08016c09 	.word	0x08016c09
 8016ba4:	08016bad 	.word	0x08016bad
 8016ba8:	08016bad 	.word	0x08016bad
				case 0x05:
				case 0x06:
//	[101] = 10BASE-T full-duplex
//	[110] = 100BASE-TX full-duplex
					/* Full duplex. */
					ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8016bac:	69fb      	ldr	r3, [r7, #28]
 8016bae:	f043 0304 	orr.w	r3, r3, #4
 8016bb2:	61fb      	str	r3, [r7, #28]
					break;
 8016bb4:	e028      	b.n	8016c08 <xPhyStartAutoNegotiation+0x264>
//	[001] = 10BASE-T half-duplex
//	[010] = 100BASE-TX half-duplex
					break;
				}
			}
			else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8016bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016bb8:	f7ff fcce 	bl	8016558 <xHas_1F_PHYSPCS>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d01b      	beq.n	8016bfa <xPhyStartAutoNegotiation+0x256>
			{
			/* 31 RW PHY Special Control Status */
			uint32_t ulControlStatus;

				pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus);
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	f107 0208 	add.w	r2, r7, #8
 8016bca:	211f      	movs	r1, #31
 8016bcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016bce:	4798      	blx	r3
				ulRegValue = 0;
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	61fb      	str	r3, [r7, #28]
				if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8016bd4:	68bb      	ldr	r3, [r7, #8]
 8016bd6:	f003 0310 	and.w	r3, r3, #16
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d003      	beq.n	8016be6 <xPhyStartAutoNegotiation+0x242>
				{
					ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8016bde:	69fb      	ldr	r3, [r7, #28]
 8016be0:	f043 0304 	orr.w	r3, r3, #4
 8016be4:	61fb      	str	r3, [r7, #28]
				}
				if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8016be6:	68bb      	ldr	r3, [r7, #8]
 8016be8:	f003 030c 	and.w	r3, r3, #12
 8016bec:	2b04      	cmp	r3, #4
 8016bee:	d10b      	bne.n	8016c08 <xPhyStartAutoNegotiation+0x264>
				{
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8016bf0:	69fb      	ldr	r3, [r7, #28]
 8016bf2:	f043 0302 	orr.w	r3, r3, #2
 8016bf6:	61fb      	str	r3, [r7, #28]
 8016bf8:	e006      	b.n	8016c08 <xPhyStartAutoNegotiation+0x264>
				}
			}
			else
			{
				/* Read the result of the auto-negotiation. */
				pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	f107 021c 	add.w	r2, r7, #28
 8016c02:	2110      	movs	r1, #16
 8016c04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c06:	4798      	blx	r3
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
				ulRegValue,
				( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
				( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
				( ( ulPHYLinkStatus |= phyBMSR_LINK_STATUS ) != 0) ? "high" : "low" ) );
			if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8016c08:	69fb      	ldr	r3, [r7, #28]
 8016c0a:	f003 0304 	and.w	r3, r3, #4
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d004      	beq.n	8016c1c <xPhyStartAutoNegotiation+0x278>
			{
				pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	2202      	movs	r2, #2
 8016c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8016c1a:	e003      	b.n	8016c24 <xPhyStartAutoNegotiation+0x280>
			}
			else
			{
				pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	2201      	movs	r2, #1
 8016c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			}

			if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8016c24:	69fb      	ldr	r3, [r7, #28]
 8016c26:	f003 0302 	and.w	r3, r3, #2
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d004      	beq.n	8016c38 <xPhyStartAutoNegotiation+0x294>
			{
				pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	2201      	movs	r2, #1
 8016c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8016c36:	e005      	b.n	8016c44 <xPhyStartAutoNegotiation+0x2a0>
			}
			else
			{
				pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2202      	movs	r2, #2
 8016c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8016c40:	e000      	b.n	8016c44 <xPhyStartAutoNegotiation+0x2a0>
				continue;
 8016c42:	bf00      	nop
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c46:	3301      	adds	r3, #1
 8016c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c4c:	005b      	lsls	r3, r3, #1
 8016c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c54:	461a      	mov	r2, r3
 8016c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c58:	4293      	cmp	r3, r2
 8016c5a:	f4ff af38 	bcc.w	8016ace <xPhyStartAutoNegotiation+0x12a>
			}
		}
	}	/* if( ulDoneMask != ( uint32_t) 0U ) */

	return 0;
 8016c5e:	2300      	movs	r3, #0
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	3740      	adds	r7, #64	; 0x40
 8016c64:	46bd      	mov	sp, r7
 8016c66:	bd80      	pop	{r7, pc}
 8016c68:	00221560 	.word	0x00221560

08016c6c <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t *pxPhyObject, BaseType_t xHadReception )
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b088      	sub	sp, #32
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
 8016c74:	6039      	str	r1, [r7, #0]
uint32_t ulStatus, ulBitMask = 1U;
 8016c76:	2301      	movs	r3, #1
 8016c78:	61fb      	str	r3, [r7, #28]
BaseType_t xPhyIndex;
BaseType_t xNeedCheck = pdFALSE;
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	617b      	str	r3, [r7, #20]

	if( xHadReception > 0 )
 8016c7e:	683b      	ldr	r3, [r7, #0]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	dd25      	ble.n	8016cd0 <xPhyCheckLinkStatus+0x64>
	{
		/* A packet was received. No need to check for the PHY status now,
		but set a timer to check it later on. */
		vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	331c      	adds	r3, #28
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f7f6 fdb5 	bl	800d7f8 <vTaskSetTimeOutState>
		pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	f643 2298 	movw	r2, #15000	; 0x3a98
 8016c94:	625a      	str	r2, [r3, #36]	; 0x24
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016c96:	2300      	movs	r3, #0
 8016c98:	61bb      	str	r3, [r7, #24]
 8016c9a:	e013      	b.n	8016cc4 <xPhyCheckLinkStatus+0x58>
		{
			if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016ca0:	69fb      	ldr	r3, [r7, #28]
 8016ca2:	4013      	ands	r3, r2
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d107      	bne.n	8016cb8 <xPhyCheckLinkStatus+0x4c>
			{
				pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016cac:	69fb      	ldr	r3, [r7, #28]
 8016cae:	431a      	orrs	r2, r3
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	635a      	str	r2, [r3, #52]	; 0x34
				FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
				xNeedCheck = pdTRUE;
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	617b      	str	r3, [r7, #20]
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016cb8:	69bb      	ldr	r3, [r7, #24]
 8016cba:	3301      	adds	r3, #1
 8016cbc:	61bb      	str	r3, [r7, #24]
 8016cbe:	69fb      	ldr	r3, [r7, #28]
 8016cc0:	005b      	lsls	r3, r3, #1
 8016cc2:	61fb      	str	r3, [r7, #28]
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cc8:	69ba      	ldr	r2, [r7, #24]
 8016cca:	429a      	cmp	r2, r3
 8016ccc:	dbe6      	blt.n	8016c9c <xPhyCheckLinkStatus+0x30>
 8016cce:	e068      	b.n	8016da2 <xPhyCheckLinkStatus+0x136>
			}
		}
	}
	else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	f103 021c 	add.w	r2, r3, #28
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	3324      	adds	r3, #36	; 0x24
 8016cda:	4619      	mov	r1, r3
 8016cdc:	4610      	mov	r0, r2
 8016cde:	f7f6 fdc9 	bl	800d874 <xTaskCheckForTimeOut>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d05c      	beq.n	8016da2 <xPhyCheckLinkStatus+0x136>
	{
		/* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
		As long as packets are received, no polling is needed.
		Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016ce8:	2300      	movs	r3, #0
 8016cea:	61bb      	str	r3, [r7, #24]
 8016cec:	e03f      	b.n	8016d6e <xPhyCheckLinkStatus+0x102>
		{
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016cee:	687a      	ldr	r2, [r7, #4]
 8016cf0:	69bb      	ldr	r3, [r7, #24]
 8016cf2:	4413      	add	r3, r2
 8016cf4:	3318      	adds	r3, #24
 8016cf6:	781b      	ldrb	r3, [r3, #0]
 8016cf8:	613b      	str	r3, [r7, #16]

			if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	f107 020c 	add.w	r2, r7, #12
 8016d02:	2101      	movs	r1, #1
 8016d04:	6938      	ldr	r0, [r7, #16]
 8016d06:	4798      	blx	r3
 8016d08:	4603      	mov	r3, r0
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d129      	bne.n	8016d62 <xPhyCheckLinkStatus+0xf6>
			{
				if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016d12:	69fb      	ldr	r3, [r7, #28]
 8016d14:	4013      	ands	r3, r2
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	bf14      	ite	ne
 8016d1a:	2301      	movne	r3, #1
 8016d1c:	2300      	moveq	r3, #0
 8016d1e:	b2da      	uxtb	r2, r3
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	f003 0304 	and.w	r3, r3, #4
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	bf14      	ite	ne
 8016d2a:	2301      	movne	r3, #1
 8016d2c:	2300      	moveq	r3, #0
 8016d2e:	b2db      	uxtb	r3, r3
 8016d30:	4053      	eors	r3, r2
 8016d32:	b2db      	uxtb	r3, r3
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d014      	beq.n	8016d62 <xPhyCheckLinkStatus+0xf6>
				{
					if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	f003 0304 	and.w	r3, r3, #4
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d006      	beq.n	8016d50 <xPhyCheckLinkStatus+0xe4>
					{
						pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016d46:	69fb      	ldr	r3, [r7, #28]
 8016d48:	431a      	orrs	r2, r3
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	635a      	str	r2, [r3, #52]	; 0x34
 8016d4e:	e006      	b.n	8016d5e <xPhyCheckLinkStatus+0xf2>
					}
					else
					{
						pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016d54:	69fb      	ldr	r3, [r7, #28]
 8016d56:	43db      	mvns	r3, r3
 8016d58:	401a      	ands	r2, r3
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	635a      	str	r2, [r3, #52]	; 0x34
					}
					FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
					xNeedCheck = pdTRUE;
 8016d5e:	2301      	movs	r3, #1
 8016d60:	617b      	str	r3, [r7, #20]
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	3301      	adds	r3, #1
 8016d66:	61bb      	str	r3, [r7, #24]
 8016d68:	69fb      	ldr	r3, [r7, #28]
 8016d6a:	005b      	lsls	r3, r3, #1
 8016d6c:	61fb      	str	r3, [r7, #28]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d72:	69ba      	ldr	r2, [r7, #24]
 8016d74:	429a      	cmp	r2, r3
 8016d76:	dbba      	blt.n	8016cee <xPhyCheckLinkStatus+0x82>
				}
			}
		}
		vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	331c      	adds	r3, #28
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f7f6 fd3b 	bl	800d7f8 <vTaskSetTimeOutState>
		if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016d86:	69fb      	ldr	r3, [r7, #28]
 8016d88:	085b      	lsrs	r3, r3, #1
 8016d8a:	4013      	ands	r3, r2
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d004      	beq.n	8016d9a <xPhyCheckLinkStatus+0x12e>
		{
			/* The link status is high, so don't poll the PHY too often. */
			pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	f643 2298 	movw	r2, #15000	; 0x3a98
 8016d96:	625a      	str	r2, [r3, #36]	; 0x24
 8016d98:	e003      	b.n	8016da2 <xPhyCheckLinkStatus+0x136>
		}
		else
		{
			/* The link status is low, polling may be done more frequently. */
			pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016da0:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
	return xNeedCheck;
 8016da2:	697b      	ldr	r3, [r7, #20]
}
 8016da4:	4618      	mov	r0, r3
 8016da6:	3720      	adds	r7, #32
 8016da8:	46bd      	mov	sp, r7
 8016daa:	bd80      	pop	{r7, pc}

08016dac <xNetworkInterfaceInitialise>:
/*******************************************************************************
                       Network Interface API Functions
*******************************************************************************/

BaseType_t xNetworkInterfaceInitialise( void )
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b086      	sub	sp, #24
 8016db0:	af02      	add	r7, sp, #8
    BaseType_t xResult;
    HAL_StatusTypeDef xHalEthInitStatus;
    uint32_t idx = 0;
 8016db2:	2300      	movs	r3, #0
 8016db4:	60bb      	str	r3, [r7, #8]

    if( xMacInitStatus == eMACInit )
 8016db6:	4b3f      	ldr	r3, [pc, #252]	; (8016eb4 <xNetworkInterfaceInitialise+0x108>)
 8016db8:	781b      	ldrb	r3, [r3, #0]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d164      	bne.n	8016e88 <xNetworkInterfaceInitialise+0xdc>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 8016dbe:	4b3e      	ldr	r3, [pc, #248]	; (8016eb8 <xNetworkInterfaceInitialise+0x10c>)
 8016dc0:	4a3e      	ldr	r2, [pc, #248]	; (8016ebc <xNetworkInterfaceInitialise+0x110>)
 8016dc2:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t *)FreeRTOS_GetMACAddress();
 8016dc4:	f7f9 fe2e 	bl	8010a24 <FreeRTOS_GetMACAddress>
 8016dc8:	4602      	mov	r2, r0
 8016dca:	4b3b      	ldr	r3, [pc, #236]	; (8016eb8 <xNetworkInterfaceInitialise+0x10c>)
 8016dcc:	605a      	str	r2, [r3, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8016dce:	4b3a      	ldr	r3, [pc, #232]	; (8016eb8 <xNetworkInterfaceInitialise+0x10c>)
 8016dd0:	2201      	movs	r2, #1
 8016dd2:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 8016dd4:	4b38      	ldr	r3, [pc, #224]	; (8016eb8 <xNetworkInterfaceInitialise+0x10c>)
 8016dd6:	4a3a      	ldr	r2, [pc, #232]	; (8016ec0 <xNetworkInterfaceInitialise+0x114>)
 8016dd8:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8016dda:	4b37      	ldr	r3, [pc, #220]	; (8016eb8 <xNetworkInterfaceInitialise+0x10c>)
 8016ddc:	4a39      	ldr	r2, [pc, #228]	; (8016ec4 <xNetworkInterfaceInitialise+0x118>)
 8016dde:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ETH_RX_BUF_SIZE;
 8016de0:	4b35      	ldr	r3, [pc, #212]	; (8016eb8 <xNetworkInterfaceInitialise+0x10c>)
 8016de2:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 8016de6:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &DMATxDscrTab, '\0', sizeof( DMATxDscrTab ) );
 8016de8:	2260      	movs	r2, #96	; 0x60
 8016dea:	2100      	movs	r1, #0
 8016dec:	4834      	ldr	r0, [pc, #208]	; (8016ec0 <xNetworkInterfaceInitialise+0x114>)
 8016dee:	f000 fa6a 	bl	80172c6 <memset>
        memset( &DMARxDscrTab, '\0', sizeof( DMARxDscrTab ) );
 8016df2:	2260      	movs	r2, #96	; 0x60
 8016df4:	2100      	movs	r1, #0
 8016df6:	4833      	ldr	r0, [pc, #204]	; (8016ec4 <xNetworkInterfaceInitialise+0x118>)
 8016df8:	f000 fa65 	bl	80172c6 <memset>

        xHalEthInitStatus = HAL_ETH_Init(&xEthHandle);
 8016dfc:	482e      	ldr	r0, [pc, #184]	; (8016eb8 <xNetworkInterfaceInitialise+0x10c>)
 8016dfe:	f7ed fe35 	bl	8004a6c <HAL_ETH_Init>
 8016e02:	4603      	mov	r3, r0
 8016e04:	71fb      	strb	r3, [r7, #7]

        /* Only for inspection by debugger. */
        ( void ) xHalEthInitStatus;

        /* Configuration for HAL_ETH_Transmit(_IT). */
        memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8016e06:	2234      	movs	r2, #52	; 0x34
 8016e08:	2100      	movs	r1, #0
 8016e0a:	482f      	ldr	r0, [pc, #188]	; (8016ec8 <xNetworkInterfaceInitialise+0x11c>)
 8016e0c:	f000 fa5b 	bl	80172c6 <memset>
        TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8016e10:	4b2d      	ldr	r3, [pc, #180]	; (8016ec8 <xNetworkInterfaceInitialise+0x11c>)
 8016e12:	2221      	movs	r2, #33	; 0x21
 8016e14:	601a      	str	r2, [r3, #0]
        TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8016e16:	4b2c      	ldr	r3, [pc, #176]	; (8016ec8 <xNetworkInterfaceInitialise+0x11c>)
 8016e18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8016e1c:	615a      	str	r2, [r3, #20]
        TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8016e1e:	4b2a      	ldr	r3, [pc, #168]	; (8016ec8 <xNetworkInterfaceInitialise+0x11c>)
 8016e20:	2200      	movs	r2, #0
 8016e22:	611a      	str	r2, [r3, #16]

        /* Assign Rx memory buffers to a DMA Rx descriptor */
        for(idx = 0; idx < ETH_RX_DESC_CNT; idx++)
 8016e24:	2300      	movs	r3, #0
 8016e26:	60bb      	str	r3, [r7, #8]
 8016e28:	e00e      	b.n	8016e48 <xNetworkInterfaceInitialise+0x9c>
        {
            HAL_ETH_DescAssignMemory(&xEthHandle, idx, Rx_Buff[idx], NULL);
 8016e2a:	68bb      	ldr	r3, [r7, #8]
 8016e2c:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 8016e30:	fb02 f303 	mul.w	r3, r2, r3
 8016e34:	4a25      	ldr	r2, [pc, #148]	; (8016ecc <xNetworkInterfaceInitialise+0x120>)
 8016e36:	441a      	add	r2, r3
 8016e38:	2300      	movs	r3, #0
 8016e3a:	68b9      	ldr	r1, [r7, #8]
 8016e3c:	481e      	ldr	r0, [pc, #120]	; (8016eb8 <xNetworkInterfaceInitialise+0x10c>)
 8016e3e:	f7ed feef 	bl	8004c20 <HAL_ETH_DescAssignMemory>
        for(idx = 0; idx < ETH_RX_DESC_CNT; idx++)
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	3301      	adds	r3, #1
 8016e46:	60bb      	str	r3, [r7, #8]
 8016e48:	68bb      	ldr	r3, [r7, #8]
 8016e4a:	2b03      	cmp	r3, #3
 8016e4c:	d9ed      	bls.n	8016e2a <xNetworkInterfaceInitialise+0x7e>
        }

        /* Configure the MDIO Clock */
        HAL_ETH_SetMDIOClockRange(&xEthHandle);
 8016e4e:	481a      	ldr	r0, [pc, #104]	; (8016eb8 <xNetworkInterfaceInitialise+0x10c>)
 8016e50:	f7ee feb6 	bl	8005bc0 <HAL_ETH_SetMDIOClockRange>

        /* Initialize the MACB and set all PHY properties */
        prvMACBProbePhy();
 8016e54:	f000 f882 	bl	8016f5c <prvMACBProbePhy>

        /* Force a negotiation with the Switch or Router and wait for LS. */
        prvEthernetUpdateConfig(pdTRUE);
 8016e58:	2001      	movs	r0, #1
 8016e5a:	f000 f897 	bl	8016f8c <prvEthernetUpdateConfig>

        /* The deferred interrupt handler task is created at the highest
            possible priority to ensure the interrupt handler can return directly
            to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
            notify the task when there is something to process. */
        if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &xEMACTaskHandle ) == pdPASS )
 8016e5e:	4b1c      	ldr	r3, [pc, #112]	; (8016ed0 <xNetworkInterfaceInitialise+0x124>)
 8016e60:	9301      	str	r3, [sp, #4]
 8016e62:	2306      	movs	r3, #6
 8016e64:	9300      	str	r3, [sp, #0]
 8016e66:	2300      	movs	r3, #0
 8016e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016e6c:	4919      	ldr	r1, [pc, #100]	; (8016ed4 <xNetworkInterfaceInitialise+0x128>)
 8016e6e:	481a      	ldr	r0, [pc, #104]	; (8016ed8 <xNetworkInterfaceInitialise+0x12c>)
 8016e70:	f7f5 fffe 	bl	800ce70 <xTaskCreate>
 8016e74:	4603      	mov	r3, r0
 8016e76:	2b01      	cmp	r3, #1
 8016e78:	d103      	bne.n	8016e82 <xNetworkInterfaceInitialise+0xd6>
        {
            /* The task was created successfully. */
            xMacInitStatus = eMACPass;
 8016e7a:	4b0e      	ldr	r3, [pc, #56]	; (8016eb4 <xNetworkInterfaceInitialise+0x108>)
 8016e7c:	2201      	movs	r2, #1
 8016e7e:	701a      	strb	r2, [r3, #0]
 8016e80:	e002      	b.n	8016e88 <xNetworkInterfaceInitialise+0xdc>
        }
        else
        {
            xMacInitStatus = eMACFailed;
 8016e82:	4b0c      	ldr	r3, [pc, #48]	; (8016eb4 <xNetworkInterfaceInitialise+0x108>)
 8016e84:	2202      	movs	r2, #2
 8016e86:	701a      	strb	r2, [r3, #0]
        }
    }/* if( xEMACTaskHandle == NULL ) */

    if( xMacInitStatus != eMACPass )
 8016e88:	4b0a      	ldr	r3, [pc, #40]	; (8016eb4 <xNetworkInterfaceInitialise+0x108>)
 8016e8a:	781b      	ldrb	r3, [r3, #0]
 8016e8c:	2b01      	cmp	r3, #1
 8016e8e:	d002      	beq.n	8016e96 <xNetworkInterfaceInitialise+0xea>
    {
        /* EMAC initialisation failed, return pdFAIL. */
        xResult = pdFAIL;
 8016e90:	2300      	movs	r3, #0
 8016e92:	60fb      	str	r3, [r7, #12]
 8016e94:	e008      	b.n	8016ea8 <xNetworkInterfaceInitialise+0xfc>
    }
    else
    {
        if( xPhyObject.ulLinkStatusMask != 0uL )
 8016e96:	4b11      	ldr	r3, [pc, #68]	; (8016edc <xNetworkInterfaceInitialise+0x130>)
 8016e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d002      	beq.n	8016ea4 <xNetworkInterfaceInitialise+0xf8>
        {
            xResult = pdPASS;
 8016e9e:	2301      	movs	r3, #1
 8016ea0:	60fb      	str	r3, [r7, #12]
 8016ea2:	e001      	b.n	8016ea8 <xNetworkInterfaceInitialise+0xfc>
        }
        else
        {
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
            and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
            xResult = pdFAIL;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	60fb      	str	r3, [r7, #12]
        }
    }

    return xResult;
 8016ea8:	68fb      	ldr	r3, [r7, #12]
}
 8016eaa:	4618      	mov	r0, r3
 8016eac:	3710      	adds	r7, #16
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	bd80      	pop	{r7, pc}
 8016eb2:	bf00      	nop
 8016eb4:	24005c68 	.word	0x24005c68
 8016eb8:	24005c6c 	.word	0x24005c6c
 8016ebc:	40028000 	.word	0x40028000
 8016ec0:	30040060 	.word	0x30040060
 8016ec4:	30040000 	.word	0x30040000
 8016ec8:	24005cdc 	.word	0x24005cdc
 8016ecc:	30040200 	.word	0x30040200
 8016ed0:	24005d10 	.word	0x24005d10
 8016ed4:	080186fc 	.word	0x080186fc
 8016ed8:	08017029 	.word	0x08017029
 8016edc:	24005d14 	.word	0x24005d14

08016ee0 <xNetworkInterfaceOutput>:

BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxNetworkBuffer, BaseType_t xReleaseAfterSend )
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b088      	sub	sp, #32
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
 8016ee8:	6039      	str	r1, [r7, #0]
    data to be sent as two separate parameters.  The start of the data is located
    by pxDescriptor->pucEthernetBuffer.  The length of the data is located
    by pxDescriptor->xDataLength. */
    BaseType_t xResult;

    memcpy( Tx_Buff, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	6999      	ldr	r1, [r3, #24]
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	69db      	ldr	r3, [r3, #28]
 8016ef2:	461a      	mov	r2, r3
 8016ef4:	4816      	ldr	r0, [pc, #88]	; (8016f50 <xNetworkInterfaceOutput+0x70>)
 8016ef6:	f000 f9c2 	bl	801727e <memcpy>

    /* TODO: Support for ipconfigUSE_LINKED_RX_MESSAGES */

    ETH_BufferTypeDef buf =
 8016efa:	4b15      	ldr	r3, [pc, #84]	; (8016f50 <xNetworkInterfaceOutput+0x70>)
 8016efc:	60fb      	str	r3, [r7, #12]
    {
            .buffer = Tx_Buff,
            .len  = pxNetworkBuffer->xDataLength,
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	69db      	ldr	r3, [r3, #28]
    ETH_BufferTypeDef buf =
 8016f02:	613b      	str	r3, [r7, #16]
 8016f04:	2300      	movs	r3, #0
 8016f06:	617b      	str	r3, [r7, #20]
            .next = NULL
    };

    TxConfig.Length = pxNetworkBuffer->xDataLength;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	69db      	ldr	r3, [r3, #28]
 8016f0c:	4a11      	ldr	r2, [pc, #68]	; (8016f54 <xNetworkInterfaceOutput+0x74>)
 8016f0e:	6053      	str	r3, [r2, #4]
    TxConfig.TxBuffer = &buf;
 8016f10:	4a10      	ldr	r2, [pc, #64]	; (8016f54 <xNetworkInterfaceOutput+0x74>)
 8016f12:	f107 030c 	add.w	r3, r7, #12
 8016f16:	6093      	str	r3, [r2, #8]

    /* TODO: Use SCB_InvalidateDCache_by_Addr 'SCB_CleanInvalidateDCache()'. */

    HAL_StatusTypeDef status;
    status = HAL_ETH_Transmit( &xEthHandle, &TxConfig, HAL_MAX_DELAY );
 8016f18:	f04f 32ff 	mov.w	r2, #4294967295
 8016f1c:	490d      	ldr	r1, [pc, #52]	; (8016f54 <xNetworkInterfaceOutput+0x74>)
 8016f1e:	480e      	ldr	r0, [pc, #56]	; (8016f58 <xNetworkInterfaceOutput+0x78>)
 8016f20:	f7ed ffbe 	bl	8004ea0 <HAL_ETH_Transmit>
 8016f24:	4603      	mov	r3, r0
 8016f26:	76fb      	strb	r3, [r7, #27]

    /* Call the standard trace macro to log the send event. */
    iptraceNETWORK_INTERFACE_TRANSMIT();

    if ( xReleaseAfterSend != pdFALSE )
 8016f28:	683b      	ldr	r3, [r7, #0]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d002      	beq.n	8016f34 <xNetworkInterfaceOutput+0x54>
    {
        /* It is assumed SendData() copies the data out of the FreeRTOS+TCP Ethernet
            buffer.  The Ethernet buffer is therefore no longer needed, and must be
            freed for re-use. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016f2e:	6878      	ldr	r0, [r7, #4]
 8016f30:	f7ff fac6 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
    }

    if (status == HAL_OK)
 8016f34:	7efb      	ldrb	r3, [r7, #27]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d102      	bne.n	8016f40 <xNetworkInterfaceOutput+0x60>
    {
        xResult = pdPASS;
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	61fb      	str	r3, [r7, #28]
 8016f3e:	e001      	b.n	8016f44 <xNetworkInterfaceOutput+0x64>
    }
    else
    {
        xResult = pdFAIL;
 8016f40:	2300      	movs	r3, #0
 8016f42:	61fb      	str	r3, [r7, #28]
    }

    return xResult;
 8016f44:	69fb      	ldr	r3, [r7, #28]
}
 8016f46:	4618      	mov	r0, r3
 8016f48:	3720      	adds	r7, #32
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	bd80      	pop	{r7, pc}
 8016f4e:	bf00      	nop
 8016f50:	30042000 	.word	0x30042000
 8016f54:	24005cdc 	.word	0x24005cdc
 8016f58:	24005c6c 	.word	0x24005c6c

08016f5c <prvMACBProbePhy>:
/*******************************************************************************
                       Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &xPhyObject,
 8016f60:	4a06      	ldr	r2, [pc, #24]	; (8016f7c <prvMACBProbePhy+0x20>)
 8016f62:	4907      	ldr	r1, [pc, #28]	; (8016f80 <prvMACBProbePhy+0x24>)
 8016f64:	4807      	ldr	r0, [pc, #28]	; (8016f84 <prvMACBProbePhy+0x28>)
 8016f66:	f7ff fb2b 	bl	80165c0 <vPhyInitialise>
                    (xApplicationPhyReadHook_t)ETH_PHY_IO_ReadReg,
                    (xApplicationPhyWriteHook_t)ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &xPhyObject );
 8016f6a:	4806      	ldr	r0, [pc, #24]	; (8016f84 <prvMACBProbePhy+0x28>)
 8016f6c:	f7ff fb3d 	bl	80165ea <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &xPhyObject, &xPHYProperties );
 8016f70:	4905      	ldr	r1, [pc, #20]	; (8016f88 <prvMACBProbePhy+0x2c>)
 8016f72:	4804      	ldr	r0, [pc, #16]	; (8016f84 <prvMACBProbePhy+0x28>)
 8016f74:	f7ff fc1e 	bl	80167b4 <xPhyConfigure>
}
 8016f78:	bf00      	nop
 8016f7a:	bd80      	pop	{r7, pc}
 8016f7c:	08017169 	.word	0x08017169
 8016f80:	08017135 	.word	0x08017135
 8016f84:	24005d14 	.word	0x24005d14
 8016f88:	080187cc 	.word	0x080187cc

08016f8c <prvEthernetUpdateConfig>:

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b09e      	sub	sp, #120	; 0x78
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex =0;
 8016f94:	2300      	movs	r3, #0
 8016f96:	677b      	str	r3, [r7, #116]	; 0x74
 8016f98:	2300      	movs	r3, #0
 8016f9a:	673b      	str	r3, [r7, #112]	; 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
            xPhyObject.ulLinkStatusMask,
            ( int )xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d103      	bne.n	8016faa <prvEthernetUpdateConfig+0x1e>
 8016fa2:	4b1f      	ldr	r3, [pc, #124]	; (8017020 <prvEthernetUpdateConfig+0x94>)
 8016fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d033      	beq.n	8017012 <prvEthernetUpdateConfig+0x86>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 8016faa:	4b1d      	ldr	r3, [pc, #116]	; (8017020 <prvEthernetUpdateConfig+0x94>)
 8016fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fae:	2201      	movs	r2, #1
 8016fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8016fb4:	3b01      	subs	r3, #1
 8016fb6:	4619      	mov	r1, r3
 8016fb8:	4819      	ldr	r0, [pc, #100]	; (8017020 <prvEthernetUpdateConfig+0x94>)
 8016fba:	f7ff fcf3 	bl	80169a4 <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
           auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8016fbe:	4b18      	ldr	r3, [pc, #96]	; (8017020 <prvEthernetUpdateConfig+0x94>)
 8016fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016fc4:	2b02      	cmp	r3, #2
 8016fc6:	d103      	bne.n	8016fd0 <prvEthernetUpdateConfig+0x44>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 8016fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016fcc:	673b      	str	r3, [r7, #112]	; 0x70
 8016fce:	e001      	b.n	8016fd4 <prvEthernetUpdateConfig+0x48>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	673b      	str	r3, [r7, #112]	; 0x70
        }

        /* Configure the MAC with the speed fixed by the
           auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8016fd4:	4b12      	ldr	r3, [pc, #72]	; (8017020 <prvEthernetUpdateConfig+0x94>)
 8016fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016fda:	2b01      	cmp	r3, #1
 8016fdc:	d102      	bne.n	8016fe4 <prvEthernetUpdateConfig+0x58>
        {
            speed = ETH_SPEED_10M;
 8016fde:	2300      	movs	r3, #0
 8016fe0:	677b      	str	r3, [r7, #116]	; 0x74
 8016fe2:	e002      	b.n	8016fea <prvEthernetUpdateConfig+0x5e>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8016fe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016fe8:	677b      	str	r3, [r7, #116]	; 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig(&xEthHandle, &MACConf);
 8016fea:	f107 030c 	add.w	r3, r7, #12
 8016fee:	4619      	mov	r1, r3
 8016ff0:	480c      	ldr	r0, [pc, #48]	; (8017024 <prvEthernetUpdateConfig+0x98>)
 8016ff2:	f7ee fbf7 	bl	80057e4 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8016ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016ff8:	627b      	str	r3, [r7, #36]	; 0x24
        MACConf.Speed = speed;
 8016ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016ffc:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig(&xEthHandle, &MACConf);
 8016ffe:	f107 030c 	add.w	r3, r7, #12
 8017002:	4619      	mov	r1, r3
 8017004:	4807      	ldr	r0, [pc, #28]	; (8017024 <prvEthernetUpdateConfig+0x98>)
 8017006:	f7ee fdc1 	bl	8005b8c <HAL_ETH_SetMACConfig>

        /* Restart MAC interface */
        HAL_ETH_Start_IT(&xEthHandle);
 801700a:	4806      	ldr	r0, [pc, #24]	; (8017024 <prvEthernetUpdateConfig+0x98>)
 801700c:	f7ed fe49 	bl	8004ca2 <HAL_ETH_Start_IT>
 8017010:	e002      	b.n	8017018 <prvEthernetUpdateConfig+0x8c>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &xEthHandle );
 8017012:	4804      	ldr	r0, [pc, #16]	; (8017024 <prvEthernetUpdateConfig+0x98>)
 8017014:	f7ed feca 	bl	8004dac <HAL_ETH_Stop_IT>
    }
}
 8017018:	bf00      	nop
 801701a:	3778      	adds	r7, #120	; 0x78
 801701c:	46bd      	mov	sp, r7
 801701e:	bd80      	pop	{r7, pc}
 8017020:	24005d14 	.word	0x24005d14
 8017024:	24005c6c 	.word	0x24005c6c

08017028 <prvEMACHandlerTask>:

static void prvEMACHandlerTask( void *pvParameters )
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b084      	sub	sp, #16
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;
    TickType_t uxPollInterval = pdMS_TO_TICKS( 1u );
 8017030:	2301      	movs	r3, #1
 8017032:	60bb      	str	r3, [r7, #8]

    ( void ) pvParameters;

    if( uxPollInterval < 1u )
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d101      	bne.n	801703e <prvEMACHandlerTask+0x16>
    {
        uxPollInterval = 1u;
 801703a:	2301      	movs	r3, #1
 801703c:	60bb      	str	r3, [r7, #8]
        has been received.  The task notification is used in a similar way to a
        counting semaphore to count Rx events, but is a lot more efficient than
        a semaphore. */

        /* ulTaskNotifyTake( pdFALSE, portMAX_DELAY ); */
        ulTaskNotifyTake( pdFALSE, uxPollInterval );
 801703e:	68ba      	ldr	r2, [r7, #8]
 8017040:	2100      	movs	r1, #0
 8017042:	2000      	movs	r0, #0
 8017044:	f7f6 ff16 	bl	800de74 <ulTaskGenericNotifyTake>

        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0 )
 8017048:	4b11      	ldr	r3, [pc, #68]	; (8017090 <prvEMACHandlerTask+0x68>)
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	f003 0301 	and.w	r3, r3, #1
 8017050:	2b00      	cmp	r3, #0
 8017052:	d011      	beq.n	8017078 <prvEMACHandlerTask+0x50>
        {
            ulISREvents &= ~EMAC_IF_RX_EVENT;
 8017054:	4b0e      	ldr	r3, [pc, #56]	; (8017090 <prvEMACHandlerTask+0x68>)
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	f023 0301 	bic.w	r3, r3, #1
 801705c:	4a0c      	ldr	r2, [pc, #48]	; (8017090 <prvEMACHandlerTask+0x68>)
 801705e:	6013      	str	r3, [r2, #0]

            xResult = prvNetworkInterfaceInput();
 8017060:	f000 f81a 	bl	8017098 <prvNetworkInterfaceInput>
 8017064:	60f8      	str	r0, [r7, #12]
            if( xResult > 0 )
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	2b00      	cmp	r3, #0
 801706a:	dd05      	ble.n	8017078 <prvEMACHandlerTask+0x50>
            {
                while( prvNetworkInterfaceInput() > 0 )
 801706c:	bf00      	nop
 801706e:	f000 f813 	bl	8017098 <prvNetworkInterfaceInput>
 8017072:	4603      	mov	r3, r0
 8017074:	2b00      	cmp	r3, #0
 8017076:	dcfa      	bgt.n	801706e <prvEMACHandlerTask+0x46>
                {
                }
            }
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != 0 )
 8017078:	68f9      	ldr	r1, [r7, #12]
 801707a:	4806      	ldr	r0, [pc, #24]	; (8017094 <prvEMACHandlerTask+0x6c>)
 801707c:	f7ff fdf6 	bl	8016c6c <xPhyCheckLinkStatus>
 8017080:	4603      	mov	r3, r0
 8017082:	2b00      	cmp	r3, #0
 8017084:	d0db      	beq.n	801703e <prvEMACHandlerTask+0x16>
        {
            /* Something has changed to a Link Status, need re-check. */
            prvEthernetUpdateConfig( pdFALSE );
 8017086:	2000      	movs	r0, #0
 8017088:	f7ff ff80 	bl	8016f8c <prvEthernetUpdateConfig>
        ulTaskNotifyTake( pdFALSE, uxPollInterval );
 801708c:	e7d7      	b.n	801703e <prvEMACHandlerTask+0x16>
 801708e:	bf00      	nop
 8017090:	24005c64 	.word	0x24005c64
 8017094:	24005d14 	.word	0x24005d14

08017098 <prvNetworkInterfaceInput>:
        }
    }
}

static BaseType_t prvNetworkInterfaceInput( void )
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b088      	sub	sp, #32
 801709c:	af00      	add	r7, sp, #0

    NetworkBufferDescriptor_t *pxBufferDescriptor;

    ETH_BufferTypeDef   data_buffer;
    uint32_t            data_length = 0;
 801709e:	2300      	movs	r3, #0
 80170a0:	60fb      	str	r3, [r7, #12]

    HAL_ETH_GetRxDataBuffer( &xEthHandle, &data_buffer );
 80170a2:	f107 0310 	add.w	r3, r7, #16
 80170a6:	4619      	mov	r1, r3
 80170a8:	4821      	ldr	r0, [pc, #132]	; (8017130 <prvNetworkInterfaceInput+0x98>)
 80170aa:	f7ee f872 	bl	8005192 <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength( &xEthHandle, &data_length );
 80170ae:	f107 030c 	add.w	r3, r7, #12
 80170b2:	4619      	mov	r1, r3
 80170b4:	481e      	ldr	r0, [pc, #120]	; (8017130 <prvNetworkInterfaceInput+0x98>)
 80170b6:	f7ee f90a 	bl	80052ce <HAL_ETH_GetRxDataLength>

    /* Allocate a network buffer descriptor that points to a buffer
        large enough to hold the received frame.  As this is the simple
        rather than efficient example the received data will just be copied
        into this buffer. */
    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( data_length, 0u );
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	2100      	movs	r1, #0
 80170be:	4618      	mov	r0, r3
 80170c0:	f7ff f980 	bl	80163c4 <pxGetNetworkBufferWithDescriptor>
 80170c4:	61f8      	str	r0, [r7, #28]

    if( pxBufferDescriptor == NULL )
 80170c6:	69fb      	ldr	r3, [r7, #28]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d101      	bne.n	80170d0 <prvNetworkInterfaceInput+0x38>
    {
        /* The event was lost because a network buffer was not available.
            Call the standard trace macro to log the occurrence. */
        iptraceETHERNET_RX_EVENT_LOST();
        return pdFALSE;
 80170cc:	2300      	movs	r3, #0
 80170ce:	e02b      	b.n	8017128 <prvNetworkInterfaceInput+0x90>
        copies the received data into a buffer passed in as the function's
        parameter.  Remember! While is is a simple robust technique -
        it is not efficient.  An example that uses a zero copy technique
        is provided further down this page. */

    memcpy( pxBufferDescriptor->pucEthernetBuffer, data_buffer.buffer, data_length );
 80170d0:	69fb      	ldr	r3, [r7, #28]
 80170d2:	699b      	ldr	r3, [r3, #24]
 80170d4:	6939      	ldr	r1, [r7, #16]
 80170d6:	68fa      	ldr	r2, [r7, #12]
 80170d8:	4618      	mov	r0, r3
 80170da:	f000 f8d0 	bl	801727e <memcpy>
    pxBufferDescriptor->xDataLength = data_length;
 80170de:	68fa      	ldr	r2, [r7, #12]
 80170e0:	69fb      	ldr	r3, [r7, #28]
 80170e2:	61da      	str	r2, [r3, #28]

    HAL_ETH_BuildRxDescriptors( &( xEthHandle ) );
 80170e4:	4812      	ldr	r0, [pc, #72]	; (8017130 <prvNetworkInterfaceInput+0x98>)
 80170e6:	f7ee f925 	bl	8005334 <HAL_ETH_BuildRxDescriptors>
    /* See if the data contained in the received Ethernet frame needs
        to be processed.  NOTE! It is preferable to do this in
        the interrupt service routine itself, which would remove the need
        to unblock this task for packets that don't need processing. */

    if( eConsiderFrameForProcessing( pxBufferDescriptor->pucEthernetBuffer ) != eProcessBuffer )
 80170ea:	69fb      	ldr	r3, [r7, #28]
 80170ec:	699b      	ldr	r3, [r3, #24]
 80170ee:	4618      	mov	r0, r3
 80170f0:	f7f8 fea8 	bl	800fe44 <eConsiderFrameForProcessing>
 80170f4:	4603      	mov	r3, r0
 80170f6:	2b01      	cmp	r3, #1
 80170f8:	d004      	beq.n	8017104 <prvNetworkInterfaceInput+0x6c>
    {
        /* The Ethernet frame can be dropped, but the Ethernet buffer must be released. */
        vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 80170fa:	69f8      	ldr	r0, [r7, #28]
 80170fc:	f7ff f9e0 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>
        return pdFALSE;
 8017100:	2300      	movs	r3, #0
 8017102:	e011      	b.n	8017128 <prvNetworkInterfaceInput+0x90>

    /* The event about to be sent to the TCP/IP is an Rx event.
        pvData is used to point to the network buffer descriptor that
        now references the received data. */

    IPStackEvent_t xRxEvent =
 8017104:	2301      	movs	r3, #1
 8017106:	713b      	strb	r3, [r7, #4]
 8017108:	69fb      	ldr	r3, [r7, #28]
 801710a:	60bb      	str	r3, [r7, #8]
            .eEventType = eNetworkRxEvent,
            .pvData  = (void *)pxBufferDescriptor
    };

    /* Send the data to the TCP/IP stack. */
    if( xSendEventStructToIPTask(&xRxEvent, 0) != pdFALSE )
 801710c:	1d3b      	adds	r3, r7, #4
 801710e:	2100      	movs	r1, #0
 8017110:	4618      	mov	r0, r3
 8017112:	f7f8 fe4b 	bl	800fdac <xSendEventStructToIPTask>
 8017116:	4603      	mov	r3, r0
 8017118:	2b00      	cmp	r3, #0
 801711a:	d104      	bne.n	8017126 <prvNetworkInterfaceInput+0x8e>
    }
    else
    {
        /* The buffer could not be sent to the IP task so the buffer
            must be released. */
        vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 801711c:	69f8      	ldr	r0, [r7, #28]
 801711e:	f7ff f9cf 	bl	80164c0 <vReleaseNetworkBufferAndDescriptor>

        /* Make a call to the standard trace macro to log the
            occurrence. */
        iptraceETHERNET_RX_EVENT_LOST();
        return pdFALSE;
 8017122:	2300      	movs	r3, #0
 8017124:	e000      	b.n	8017128 <prvNetworkInterfaceInput+0x90>
    }

    return pdTRUE;
 8017126:	2301      	movs	r3, #1
}
 8017128:	4618      	mov	r0, r3
 801712a:	3720      	adds	r7, #32
 801712c:	46bd      	mov	sp, r7
 801712e:	bd80      	pop	{r7, pc}
 8017130:	24005c6c 	.word	0x24005c6c

08017134 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
static int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b084      	sub	sp, #16
 8017138:	af00      	add	r7, sp, #0
 801713a:	60f8      	str	r0, [r7, #12]
 801713c:	60b9      	str	r1, [r7, #8]
 801713e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&xEthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	68ba      	ldr	r2, [r7, #8]
 8017144:	68f9      	ldr	r1, [r7, #12]
 8017146:	4807      	ldr	r0, [pc, #28]	; (8017164 <ETH_PHY_IO_ReadReg+0x30>)
 8017148:	f7ee faa4 	bl	8005694 <HAL_ETH_ReadPHYRegister>
 801714c:	4603      	mov	r3, r0
 801714e:	2b00      	cmp	r3, #0
 8017150:	d002      	beq.n	8017158 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8017152:	f04f 33ff 	mov.w	r3, #4294967295
 8017156:	e000      	b.n	801715a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8017158:	2300      	movs	r3, #0
}
 801715a:	4618      	mov	r0, r3
 801715c:	3710      	adds	r7, #16
 801715e:	46bd      	mov	sp, r7
 8017160:	bd80      	pop	{r7, pc}
 8017162:	bf00      	nop
 8017164:	24005c6c 	.word	0x24005c6c

08017168 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
static int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8017168:	b580      	push	{r7, lr}
 801716a:	b084      	sub	sp, #16
 801716c:	af00      	add	r7, sp, #0
 801716e:	60f8      	str	r0, [r7, #12]
 8017170:	60b9      	str	r1, [r7, #8]
 8017172:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&xEthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	68ba      	ldr	r2, [r7, #8]
 8017178:	68f9      	ldr	r1, [r7, #12]
 801717a:	4807      	ldr	r0, [pc, #28]	; (8017198 <ETH_PHY_IO_WriteReg+0x30>)
 801717c:	f7ee fade 	bl	800573c <HAL_ETH_WritePHYRegister>
 8017180:	4603      	mov	r3, r0
 8017182:	2b00      	cmp	r3, #0
 8017184:	d002      	beq.n	801718c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8017186:	f04f 33ff 	mov.w	r3, #4294967295
 801718a:	e000      	b.n	801718e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801718c:	2300      	movs	r3, #0
}
 801718e:	4618      	mov	r0, r3
 8017190:	3710      	adds	r7, #16
 8017192:	46bd      	mov	sp, r7
 8017194:	bd80      	pop	{r7, pc}
 8017196:	bf00      	nop
 8017198:	24005c6c 	.word	0x24005c6c

0801719c <ETH_IRQHandler>:
/*******************************************************************************
                       Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler(void)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	af00      	add	r7, sp, #0

    HAL_ETH_IRQHandler(&xEthHandle);
 80171a0:	4802      	ldr	r0, [pc, #8]	; (80171ac <ETH_IRQHandler+0x10>)
 80171a2:	f7ee f93d 	bl	8005420 <HAL_ETH_IRQHandler>
}
 80171a6:	bf00      	nop
 80171a8:	bd80      	pop	{r7, pc}
 80171aa:	bf00      	nop
 80171ac:	24005c6c 	.word	0x24005c6c

080171b0 <HAL_ETH_RxCpltCallback>:

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef *heth )
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b084      	sub	sp, #16
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	6078      	str	r0, [r7, #4]
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80171b8:	2300      	movs	r3, #0
 80171ba:	60fb      	str	r3, [r7, #12]

    ( void ) heth;

    /* Ethernet RX-Complete callback function, elsewhere declared as weak. */
    ulISREvents |= EMAC_IF_RX_EVENT;
 80171bc:	4b10      	ldr	r3, [pc, #64]	; (8017200 <HAL_ETH_RxCpltCallback+0x50>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	f043 0301 	orr.w	r3, r3, #1
 80171c4:	4a0e      	ldr	r2, [pc, #56]	; (8017200 <HAL_ETH_RxCpltCallback+0x50>)
 80171c6:	6013      	str	r3, [r2, #0]
    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 80171c8:	4b0e      	ldr	r3, [pc, #56]	; (8017204 <HAL_ETH_RxCpltCallback+0x54>)
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d012      	beq.n	80171f6 <HAL_ETH_RxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 80171d0:	4b0c      	ldr	r3, [pc, #48]	; (8017204 <HAL_ETH_RxCpltCallback+0x54>)
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	f107 020c 	add.w	r2, r7, #12
 80171d8:	2100      	movs	r1, #0
 80171da:	4618      	mov	r0, r3
 80171dc:	f7f6 feb6 	bl	800df4c <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d007      	beq.n	80171f6 <HAL_ETH_RxCpltCallback+0x46>
 80171e6:	4b08      	ldr	r3, [pc, #32]	; (8017208 <HAL_ETH_RxCpltCallback+0x58>)
 80171e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171ec:	601a      	str	r2, [r3, #0]
 80171ee:	f3bf 8f4f 	dsb	sy
 80171f2:	f3bf 8f6f 	isb	sy
    }
}
 80171f6:	bf00      	nop
 80171f8:	3710      	adds	r7, #16
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}
 80171fe:	bf00      	nop
 8017200:	24005c64 	.word	0x24005c64
 8017204:	24005d10 	.word	0x24005d10
 8017208:	e000ed04 	.word	0xe000ed04

0801720c <__errno>:
 801720c:	4b01      	ldr	r3, [pc, #4]	; (8017214 <__errno+0x8>)
 801720e:	6818      	ldr	r0, [r3, #0]
 8017210:	4770      	bx	lr
 8017212:	bf00      	nop
 8017214:	24000034 	.word	0x24000034

08017218 <__libc_init_array>:
 8017218:	b570      	push	{r4, r5, r6, lr}
 801721a:	4e0d      	ldr	r6, [pc, #52]	; (8017250 <__libc_init_array+0x38>)
 801721c:	4c0d      	ldr	r4, [pc, #52]	; (8017254 <__libc_init_array+0x3c>)
 801721e:	1ba4      	subs	r4, r4, r6
 8017220:	10a4      	asrs	r4, r4, #2
 8017222:	2500      	movs	r5, #0
 8017224:	42a5      	cmp	r5, r4
 8017226:	d109      	bne.n	801723c <__libc_init_array+0x24>
 8017228:	4e0b      	ldr	r6, [pc, #44]	; (8017258 <__libc_init_array+0x40>)
 801722a:	4c0c      	ldr	r4, [pc, #48]	; (801725c <__libc_init_array+0x44>)
 801722c:	f001 f9ac 	bl	8018588 <_init>
 8017230:	1ba4      	subs	r4, r4, r6
 8017232:	10a4      	asrs	r4, r4, #2
 8017234:	2500      	movs	r5, #0
 8017236:	42a5      	cmp	r5, r4
 8017238:	d105      	bne.n	8017246 <__libc_init_array+0x2e>
 801723a:	bd70      	pop	{r4, r5, r6, pc}
 801723c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017240:	4798      	blx	r3
 8017242:	3501      	adds	r5, #1
 8017244:	e7ee      	b.n	8017224 <__libc_init_array+0xc>
 8017246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801724a:	4798      	blx	r3
 801724c:	3501      	adds	r5, #1
 801724e:	e7f2      	b.n	8017236 <__libc_init_array+0x1e>
 8017250:	08018870 	.word	0x08018870
 8017254:	08018870 	.word	0x08018870
 8017258:	08018870 	.word	0x08018870
 801725c:	08018874 	.word	0x08018874

08017260 <memcmp>:
 8017260:	b530      	push	{r4, r5, lr}
 8017262:	2400      	movs	r4, #0
 8017264:	42a2      	cmp	r2, r4
 8017266:	d101      	bne.n	801726c <memcmp+0xc>
 8017268:	2000      	movs	r0, #0
 801726a:	e007      	b.n	801727c <memcmp+0x1c>
 801726c:	5d03      	ldrb	r3, [r0, r4]
 801726e:	3401      	adds	r4, #1
 8017270:	190d      	adds	r5, r1, r4
 8017272:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017276:	42ab      	cmp	r3, r5
 8017278:	d0f4      	beq.n	8017264 <memcmp+0x4>
 801727a:	1b58      	subs	r0, r3, r5
 801727c:	bd30      	pop	{r4, r5, pc}

0801727e <memcpy>:
 801727e:	b510      	push	{r4, lr}
 8017280:	1e43      	subs	r3, r0, #1
 8017282:	440a      	add	r2, r1
 8017284:	4291      	cmp	r1, r2
 8017286:	d100      	bne.n	801728a <memcpy+0xc>
 8017288:	bd10      	pop	{r4, pc}
 801728a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801728e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017292:	e7f7      	b.n	8017284 <memcpy+0x6>

08017294 <memmove>:
 8017294:	4288      	cmp	r0, r1
 8017296:	b510      	push	{r4, lr}
 8017298:	eb01 0302 	add.w	r3, r1, r2
 801729c:	d807      	bhi.n	80172ae <memmove+0x1a>
 801729e:	1e42      	subs	r2, r0, #1
 80172a0:	4299      	cmp	r1, r3
 80172a2:	d00a      	beq.n	80172ba <memmove+0x26>
 80172a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80172ac:	e7f8      	b.n	80172a0 <memmove+0xc>
 80172ae:	4283      	cmp	r3, r0
 80172b0:	d9f5      	bls.n	801729e <memmove+0xa>
 80172b2:	1881      	adds	r1, r0, r2
 80172b4:	1ad2      	subs	r2, r2, r3
 80172b6:	42d3      	cmn	r3, r2
 80172b8:	d100      	bne.n	80172bc <memmove+0x28>
 80172ba:	bd10      	pop	{r4, pc}
 80172bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80172c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80172c4:	e7f7      	b.n	80172b6 <memmove+0x22>

080172c6 <memset>:
 80172c6:	4402      	add	r2, r0
 80172c8:	4603      	mov	r3, r0
 80172ca:	4293      	cmp	r3, r2
 80172cc:	d100      	bne.n	80172d0 <memset+0xa>
 80172ce:	4770      	bx	lr
 80172d0:	f803 1b01 	strb.w	r1, [r3], #1
 80172d4:	e7f9      	b.n	80172ca <memset+0x4>
	...

080172d8 <iprintf>:
 80172d8:	b40f      	push	{r0, r1, r2, r3}
 80172da:	4b0a      	ldr	r3, [pc, #40]	; (8017304 <iprintf+0x2c>)
 80172dc:	b513      	push	{r0, r1, r4, lr}
 80172de:	681c      	ldr	r4, [r3, #0]
 80172e0:	b124      	cbz	r4, 80172ec <iprintf+0x14>
 80172e2:	69a3      	ldr	r3, [r4, #24]
 80172e4:	b913      	cbnz	r3, 80172ec <iprintf+0x14>
 80172e6:	4620      	mov	r0, r4
 80172e8:	f000 faaa 	bl	8017840 <__sinit>
 80172ec:	ab05      	add	r3, sp, #20
 80172ee:	9a04      	ldr	r2, [sp, #16]
 80172f0:	68a1      	ldr	r1, [r4, #8]
 80172f2:	9301      	str	r3, [sp, #4]
 80172f4:	4620      	mov	r0, r4
 80172f6:	f000 fdbd 	bl	8017e74 <_vfiprintf_r>
 80172fa:	b002      	add	sp, #8
 80172fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017300:	b004      	add	sp, #16
 8017302:	4770      	bx	lr
 8017304:	24000034 	.word	0x24000034

08017308 <_puts_r>:
 8017308:	b570      	push	{r4, r5, r6, lr}
 801730a:	460e      	mov	r6, r1
 801730c:	4605      	mov	r5, r0
 801730e:	b118      	cbz	r0, 8017318 <_puts_r+0x10>
 8017310:	6983      	ldr	r3, [r0, #24]
 8017312:	b90b      	cbnz	r3, 8017318 <_puts_r+0x10>
 8017314:	f000 fa94 	bl	8017840 <__sinit>
 8017318:	69ab      	ldr	r3, [r5, #24]
 801731a:	68ac      	ldr	r4, [r5, #8]
 801731c:	b913      	cbnz	r3, 8017324 <_puts_r+0x1c>
 801731e:	4628      	mov	r0, r5
 8017320:	f000 fa8e 	bl	8017840 <__sinit>
 8017324:	4b23      	ldr	r3, [pc, #140]	; (80173b4 <_puts_r+0xac>)
 8017326:	429c      	cmp	r4, r3
 8017328:	d117      	bne.n	801735a <_puts_r+0x52>
 801732a:	686c      	ldr	r4, [r5, #4]
 801732c:	89a3      	ldrh	r3, [r4, #12]
 801732e:	071b      	lsls	r3, r3, #28
 8017330:	d51d      	bpl.n	801736e <_puts_r+0x66>
 8017332:	6923      	ldr	r3, [r4, #16]
 8017334:	b1db      	cbz	r3, 801736e <_puts_r+0x66>
 8017336:	3e01      	subs	r6, #1
 8017338:	68a3      	ldr	r3, [r4, #8]
 801733a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801733e:	3b01      	subs	r3, #1
 8017340:	60a3      	str	r3, [r4, #8]
 8017342:	b9e9      	cbnz	r1, 8017380 <_puts_r+0x78>
 8017344:	2b00      	cmp	r3, #0
 8017346:	da2e      	bge.n	80173a6 <_puts_r+0x9e>
 8017348:	4622      	mov	r2, r4
 801734a:	210a      	movs	r1, #10
 801734c:	4628      	mov	r0, r5
 801734e:	f000 f8c7 	bl	80174e0 <__swbuf_r>
 8017352:	3001      	adds	r0, #1
 8017354:	d011      	beq.n	801737a <_puts_r+0x72>
 8017356:	200a      	movs	r0, #10
 8017358:	e011      	b.n	801737e <_puts_r+0x76>
 801735a:	4b17      	ldr	r3, [pc, #92]	; (80173b8 <_puts_r+0xb0>)
 801735c:	429c      	cmp	r4, r3
 801735e:	d101      	bne.n	8017364 <_puts_r+0x5c>
 8017360:	68ac      	ldr	r4, [r5, #8]
 8017362:	e7e3      	b.n	801732c <_puts_r+0x24>
 8017364:	4b15      	ldr	r3, [pc, #84]	; (80173bc <_puts_r+0xb4>)
 8017366:	429c      	cmp	r4, r3
 8017368:	bf08      	it	eq
 801736a:	68ec      	ldreq	r4, [r5, #12]
 801736c:	e7de      	b.n	801732c <_puts_r+0x24>
 801736e:	4621      	mov	r1, r4
 8017370:	4628      	mov	r0, r5
 8017372:	f000 f907 	bl	8017584 <__swsetup_r>
 8017376:	2800      	cmp	r0, #0
 8017378:	d0dd      	beq.n	8017336 <_puts_r+0x2e>
 801737a:	f04f 30ff 	mov.w	r0, #4294967295
 801737e:	bd70      	pop	{r4, r5, r6, pc}
 8017380:	2b00      	cmp	r3, #0
 8017382:	da04      	bge.n	801738e <_puts_r+0x86>
 8017384:	69a2      	ldr	r2, [r4, #24]
 8017386:	429a      	cmp	r2, r3
 8017388:	dc06      	bgt.n	8017398 <_puts_r+0x90>
 801738a:	290a      	cmp	r1, #10
 801738c:	d004      	beq.n	8017398 <_puts_r+0x90>
 801738e:	6823      	ldr	r3, [r4, #0]
 8017390:	1c5a      	adds	r2, r3, #1
 8017392:	6022      	str	r2, [r4, #0]
 8017394:	7019      	strb	r1, [r3, #0]
 8017396:	e7cf      	b.n	8017338 <_puts_r+0x30>
 8017398:	4622      	mov	r2, r4
 801739a:	4628      	mov	r0, r5
 801739c:	f000 f8a0 	bl	80174e0 <__swbuf_r>
 80173a0:	3001      	adds	r0, #1
 80173a2:	d1c9      	bne.n	8017338 <_puts_r+0x30>
 80173a4:	e7e9      	b.n	801737a <_puts_r+0x72>
 80173a6:	6823      	ldr	r3, [r4, #0]
 80173a8:	200a      	movs	r0, #10
 80173aa:	1c5a      	adds	r2, r3, #1
 80173ac:	6022      	str	r2, [r4, #0]
 80173ae:	7018      	strb	r0, [r3, #0]
 80173b0:	e7e5      	b.n	801737e <_puts_r+0x76>
 80173b2:	bf00      	nop
 80173b4:	080187f4 	.word	0x080187f4
 80173b8:	08018814 	.word	0x08018814
 80173bc:	080187d4 	.word	0x080187d4

080173c0 <puts>:
 80173c0:	4b02      	ldr	r3, [pc, #8]	; (80173cc <puts+0xc>)
 80173c2:	4601      	mov	r1, r0
 80173c4:	6818      	ldr	r0, [r3, #0]
 80173c6:	f7ff bf9f 	b.w	8017308 <_puts_r>
 80173ca:	bf00      	nop
 80173cc:	24000034 	.word	0x24000034

080173d0 <rand>:
 80173d0:	b538      	push	{r3, r4, r5, lr}
 80173d2:	4b13      	ldr	r3, [pc, #76]	; (8017420 <rand+0x50>)
 80173d4:	681c      	ldr	r4, [r3, #0]
 80173d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80173d8:	b97b      	cbnz	r3, 80173fa <rand+0x2a>
 80173da:	2018      	movs	r0, #24
 80173dc:	f000 fb1e 	bl	8017a1c <malloc>
 80173e0:	4a10      	ldr	r2, [pc, #64]	; (8017424 <rand+0x54>)
 80173e2:	4b11      	ldr	r3, [pc, #68]	; (8017428 <rand+0x58>)
 80173e4:	63a0      	str	r0, [r4, #56]	; 0x38
 80173e6:	e9c0 2300 	strd	r2, r3, [r0]
 80173ea:	4b10      	ldr	r3, [pc, #64]	; (801742c <rand+0x5c>)
 80173ec:	6083      	str	r3, [r0, #8]
 80173ee:	230b      	movs	r3, #11
 80173f0:	8183      	strh	r3, [r0, #12]
 80173f2:	2201      	movs	r2, #1
 80173f4:	2300      	movs	r3, #0
 80173f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80173fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80173fc:	480c      	ldr	r0, [pc, #48]	; (8017430 <rand+0x60>)
 80173fe:	690a      	ldr	r2, [r1, #16]
 8017400:	694b      	ldr	r3, [r1, #20]
 8017402:	4c0c      	ldr	r4, [pc, #48]	; (8017434 <rand+0x64>)
 8017404:	4350      	muls	r0, r2
 8017406:	fb04 0003 	mla	r0, r4, r3, r0
 801740a:	fba2 2304 	umull	r2, r3, r2, r4
 801740e:	4403      	add	r3, r0
 8017410:	1c54      	adds	r4, r2, #1
 8017412:	f143 0500 	adc.w	r5, r3, #0
 8017416:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801741a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801741e:	bd38      	pop	{r3, r4, r5, pc}
 8017420:	24000034 	.word	0x24000034
 8017424:	abcd330e 	.word	0xabcd330e
 8017428:	e66d1234 	.word	0xe66d1234
 801742c:	0005deec 	.word	0x0005deec
 8017430:	5851f42d 	.word	0x5851f42d
 8017434:	4c957f2d 	.word	0x4c957f2d

08017438 <sniprintf>:
 8017438:	b40c      	push	{r2, r3}
 801743a:	b530      	push	{r4, r5, lr}
 801743c:	4b17      	ldr	r3, [pc, #92]	; (801749c <sniprintf+0x64>)
 801743e:	1e0c      	subs	r4, r1, #0
 8017440:	b09d      	sub	sp, #116	; 0x74
 8017442:	681d      	ldr	r5, [r3, #0]
 8017444:	da08      	bge.n	8017458 <sniprintf+0x20>
 8017446:	238b      	movs	r3, #139	; 0x8b
 8017448:	602b      	str	r3, [r5, #0]
 801744a:	f04f 30ff 	mov.w	r0, #4294967295
 801744e:	b01d      	add	sp, #116	; 0x74
 8017450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017454:	b002      	add	sp, #8
 8017456:	4770      	bx	lr
 8017458:	f44f 7302 	mov.w	r3, #520	; 0x208
 801745c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017460:	bf14      	ite	ne
 8017462:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017466:	4623      	moveq	r3, r4
 8017468:	9304      	str	r3, [sp, #16]
 801746a:	9307      	str	r3, [sp, #28]
 801746c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017470:	9002      	str	r0, [sp, #8]
 8017472:	9006      	str	r0, [sp, #24]
 8017474:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017478:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801747a:	ab21      	add	r3, sp, #132	; 0x84
 801747c:	a902      	add	r1, sp, #8
 801747e:	4628      	mov	r0, r5
 8017480:	9301      	str	r3, [sp, #4]
 8017482:	f000 fbd5 	bl	8017c30 <_svfiprintf_r>
 8017486:	1c43      	adds	r3, r0, #1
 8017488:	bfbc      	itt	lt
 801748a:	238b      	movlt	r3, #139	; 0x8b
 801748c:	602b      	strlt	r3, [r5, #0]
 801748e:	2c00      	cmp	r4, #0
 8017490:	d0dd      	beq.n	801744e <sniprintf+0x16>
 8017492:	9b02      	ldr	r3, [sp, #8]
 8017494:	2200      	movs	r2, #0
 8017496:	701a      	strb	r2, [r3, #0]
 8017498:	e7d9      	b.n	801744e <sniprintf+0x16>
 801749a:	bf00      	nop
 801749c:	24000034 	.word	0x24000034

080174a0 <siprintf>:
 80174a0:	b40e      	push	{r1, r2, r3}
 80174a2:	b500      	push	{lr}
 80174a4:	b09c      	sub	sp, #112	; 0x70
 80174a6:	ab1d      	add	r3, sp, #116	; 0x74
 80174a8:	9002      	str	r0, [sp, #8]
 80174aa:	9006      	str	r0, [sp, #24]
 80174ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80174b0:	4809      	ldr	r0, [pc, #36]	; (80174d8 <siprintf+0x38>)
 80174b2:	9107      	str	r1, [sp, #28]
 80174b4:	9104      	str	r1, [sp, #16]
 80174b6:	4909      	ldr	r1, [pc, #36]	; (80174dc <siprintf+0x3c>)
 80174b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80174bc:	9105      	str	r1, [sp, #20]
 80174be:	6800      	ldr	r0, [r0, #0]
 80174c0:	9301      	str	r3, [sp, #4]
 80174c2:	a902      	add	r1, sp, #8
 80174c4:	f000 fbb4 	bl	8017c30 <_svfiprintf_r>
 80174c8:	9b02      	ldr	r3, [sp, #8]
 80174ca:	2200      	movs	r2, #0
 80174cc:	701a      	strb	r2, [r3, #0]
 80174ce:	b01c      	add	sp, #112	; 0x70
 80174d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80174d4:	b003      	add	sp, #12
 80174d6:	4770      	bx	lr
 80174d8:	24000034 	.word	0x24000034
 80174dc:	ffff0208 	.word	0xffff0208

080174e0 <__swbuf_r>:
 80174e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174e2:	460e      	mov	r6, r1
 80174e4:	4614      	mov	r4, r2
 80174e6:	4605      	mov	r5, r0
 80174e8:	b118      	cbz	r0, 80174f2 <__swbuf_r+0x12>
 80174ea:	6983      	ldr	r3, [r0, #24]
 80174ec:	b90b      	cbnz	r3, 80174f2 <__swbuf_r+0x12>
 80174ee:	f000 f9a7 	bl	8017840 <__sinit>
 80174f2:	4b21      	ldr	r3, [pc, #132]	; (8017578 <__swbuf_r+0x98>)
 80174f4:	429c      	cmp	r4, r3
 80174f6:	d12a      	bne.n	801754e <__swbuf_r+0x6e>
 80174f8:	686c      	ldr	r4, [r5, #4]
 80174fa:	69a3      	ldr	r3, [r4, #24]
 80174fc:	60a3      	str	r3, [r4, #8]
 80174fe:	89a3      	ldrh	r3, [r4, #12]
 8017500:	071a      	lsls	r2, r3, #28
 8017502:	d52e      	bpl.n	8017562 <__swbuf_r+0x82>
 8017504:	6923      	ldr	r3, [r4, #16]
 8017506:	b363      	cbz	r3, 8017562 <__swbuf_r+0x82>
 8017508:	6923      	ldr	r3, [r4, #16]
 801750a:	6820      	ldr	r0, [r4, #0]
 801750c:	1ac0      	subs	r0, r0, r3
 801750e:	6963      	ldr	r3, [r4, #20]
 8017510:	b2f6      	uxtb	r6, r6
 8017512:	4283      	cmp	r3, r0
 8017514:	4637      	mov	r7, r6
 8017516:	dc04      	bgt.n	8017522 <__swbuf_r+0x42>
 8017518:	4621      	mov	r1, r4
 801751a:	4628      	mov	r0, r5
 801751c:	f000 f926 	bl	801776c <_fflush_r>
 8017520:	bb28      	cbnz	r0, 801756e <__swbuf_r+0x8e>
 8017522:	68a3      	ldr	r3, [r4, #8]
 8017524:	3b01      	subs	r3, #1
 8017526:	60a3      	str	r3, [r4, #8]
 8017528:	6823      	ldr	r3, [r4, #0]
 801752a:	1c5a      	adds	r2, r3, #1
 801752c:	6022      	str	r2, [r4, #0]
 801752e:	701e      	strb	r6, [r3, #0]
 8017530:	6963      	ldr	r3, [r4, #20]
 8017532:	3001      	adds	r0, #1
 8017534:	4283      	cmp	r3, r0
 8017536:	d004      	beq.n	8017542 <__swbuf_r+0x62>
 8017538:	89a3      	ldrh	r3, [r4, #12]
 801753a:	07db      	lsls	r3, r3, #31
 801753c:	d519      	bpl.n	8017572 <__swbuf_r+0x92>
 801753e:	2e0a      	cmp	r6, #10
 8017540:	d117      	bne.n	8017572 <__swbuf_r+0x92>
 8017542:	4621      	mov	r1, r4
 8017544:	4628      	mov	r0, r5
 8017546:	f000 f911 	bl	801776c <_fflush_r>
 801754a:	b190      	cbz	r0, 8017572 <__swbuf_r+0x92>
 801754c:	e00f      	b.n	801756e <__swbuf_r+0x8e>
 801754e:	4b0b      	ldr	r3, [pc, #44]	; (801757c <__swbuf_r+0x9c>)
 8017550:	429c      	cmp	r4, r3
 8017552:	d101      	bne.n	8017558 <__swbuf_r+0x78>
 8017554:	68ac      	ldr	r4, [r5, #8]
 8017556:	e7d0      	b.n	80174fa <__swbuf_r+0x1a>
 8017558:	4b09      	ldr	r3, [pc, #36]	; (8017580 <__swbuf_r+0xa0>)
 801755a:	429c      	cmp	r4, r3
 801755c:	bf08      	it	eq
 801755e:	68ec      	ldreq	r4, [r5, #12]
 8017560:	e7cb      	b.n	80174fa <__swbuf_r+0x1a>
 8017562:	4621      	mov	r1, r4
 8017564:	4628      	mov	r0, r5
 8017566:	f000 f80d 	bl	8017584 <__swsetup_r>
 801756a:	2800      	cmp	r0, #0
 801756c:	d0cc      	beq.n	8017508 <__swbuf_r+0x28>
 801756e:	f04f 37ff 	mov.w	r7, #4294967295
 8017572:	4638      	mov	r0, r7
 8017574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017576:	bf00      	nop
 8017578:	080187f4 	.word	0x080187f4
 801757c:	08018814 	.word	0x08018814
 8017580:	080187d4 	.word	0x080187d4

08017584 <__swsetup_r>:
 8017584:	4b32      	ldr	r3, [pc, #200]	; (8017650 <__swsetup_r+0xcc>)
 8017586:	b570      	push	{r4, r5, r6, lr}
 8017588:	681d      	ldr	r5, [r3, #0]
 801758a:	4606      	mov	r6, r0
 801758c:	460c      	mov	r4, r1
 801758e:	b125      	cbz	r5, 801759a <__swsetup_r+0x16>
 8017590:	69ab      	ldr	r3, [r5, #24]
 8017592:	b913      	cbnz	r3, 801759a <__swsetup_r+0x16>
 8017594:	4628      	mov	r0, r5
 8017596:	f000 f953 	bl	8017840 <__sinit>
 801759a:	4b2e      	ldr	r3, [pc, #184]	; (8017654 <__swsetup_r+0xd0>)
 801759c:	429c      	cmp	r4, r3
 801759e:	d10f      	bne.n	80175c0 <__swsetup_r+0x3c>
 80175a0:	686c      	ldr	r4, [r5, #4]
 80175a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175a6:	b29a      	uxth	r2, r3
 80175a8:	0715      	lsls	r5, r2, #28
 80175aa:	d42c      	bmi.n	8017606 <__swsetup_r+0x82>
 80175ac:	06d0      	lsls	r0, r2, #27
 80175ae:	d411      	bmi.n	80175d4 <__swsetup_r+0x50>
 80175b0:	2209      	movs	r2, #9
 80175b2:	6032      	str	r2, [r6, #0]
 80175b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175b8:	81a3      	strh	r3, [r4, #12]
 80175ba:	f04f 30ff 	mov.w	r0, #4294967295
 80175be:	e03e      	b.n	801763e <__swsetup_r+0xba>
 80175c0:	4b25      	ldr	r3, [pc, #148]	; (8017658 <__swsetup_r+0xd4>)
 80175c2:	429c      	cmp	r4, r3
 80175c4:	d101      	bne.n	80175ca <__swsetup_r+0x46>
 80175c6:	68ac      	ldr	r4, [r5, #8]
 80175c8:	e7eb      	b.n	80175a2 <__swsetup_r+0x1e>
 80175ca:	4b24      	ldr	r3, [pc, #144]	; (801765c <__swsetup_r+0xd8>)
 80175cc:	429c      	cmp	r4, r3
 80175ce:	bf08      	it	eq
 80175d0:	68ec      	ldreq	r4, [r5, #12]
 80175d2:	e7e6      	b.n	80175a2 <__swsetup_r+0x1e>
 80175d4:	0751      	lsls	r1, r2, #29
 80175d6:	d512      	bpl.n	80175fe <__swsetup_r+0x7a>
 80175d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80175da:	b141      	cbz	r1, 80175ee <__swsetup_r+0x6a>
 80175dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80175e0:	4299      	cmp	r1, r3
 80175e2:	d002      	beq.n	80175ea <__swsetup_r+0x66>
 80175e4:	4630      	mov	r0, r6
 80175e6:	f000 fa21 	bl	8017a2c <_free_r>
 80175ea:	2300      	movs	r3, #0
 80175ec:	6363      	str	r3, [r4, #52]	; 0x34
 80175ee:	89a3      	ldrh	r3, [r4, #12]
 80175f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80175f4:	81a3      	strh	r3, [r4, #12]
 80175f6:	2300      	movs	r3, #0
 80175f8:	6063      	str	r3, [r4, #4]
 80175fa:	6923      	ldr	r3, [r4, #16]
 80175fc:	6023      	str	r3, [r4, #0]
 80175fe:	89a3      	ldrh	r3, [r4, #12]
 8017600:	f043 0308 	orr.w	r3, r3, #8
 8017604:	81a3      	strh	r3, [r4, #12]
 8017606:	6923      	ldr	r3, [r4, #16]
 8017608:	b94b      	cbnz	r3, 801761e <__swsetup_r+0x9a>
 801760a:	89a3      	ldrh	r3, [r4, #12]
 801760c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017614:	d003      	beq.n	801761e <__swsetup_r+0x9a>
 8017616:	4621      	mov	r1, r4
 8017618:	4630      	mov	r0, r6
 801761a:	f000 f9bf 	bl	801799c <__smakebuf_r>
 801761e:	89a2      	ldrh	r2, [r4, #12]
 8017620:	f012 0301 	ands.w	r3, r2, #1
 8017624:	d00c      	beq.n	8017640 <__swsetup_r+0xbc>
 8017626:	2300      	movs	r3, #0
 8017628:	60a3      	str	r3, [r4, #8]
 801762a:	6963      	ldr	r3, [r4, #20]
 801762c:	425b      	negs	r3, r3
 801762e:	61a3      	str	r3, [r4, #24]
 8017630:	6923      	ldr	r3, [r4, #16]
 8017632:	b953      	cbnz	r3, 801764a <__swsetup_r+0xc6>
 8017634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017638:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801763c:	d1ba      	bne.n	80175b4 <__swsetup_r+0x30>
 801763e:	bd70      	pop	{r4, r5, r6, pc}
 8017640:	0792      	lsls	r2, r2, #30
 8017642:	bf58      	it	pl
 8017644:	6963      	ldrpl	r3, [r4, #20]
 8017646:	60a3      	str	r3, [r4, #8]
 8017648:	e7f2      	b.n	8017630 <__swsetup_r+0xac>
 801764a:	2000      	movs	r0, #0
 801764c:	e7f7      	b.n	801763e <__swsetup_r+0xba>
 801764e:	bf00      	nop
 8017650:	24000034 	.word	0x24000034
 8017654:	080187f4 	.word	0x080187f4
 8017658:	08018814 	.word	0x08018814
 801765c:	080187d4 	.word	0x080187d4

08017660 <__sflush_r>:
 8017660:	898a      	ldrh	r2, [r1, #12]
 8017662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017666:	4605      	mov	r5, r0
 8017668:	0710      	lsls	r0, r2, #28
 801766a:	460c      	mov	r4, r1
 801766c:	d458      	bmi.n	8017720 <__sflush_r+0xc0>
 801766e:	684b      	ldr	r3, [r1, #4]
 8017670:	2b00      	cmp	r3, #0
 8017672:	dc05      	bgt.n	8017680 <__sflush_r+0x20>
 8017674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017676:	2b00      	cmp	r3, #0
 8017678:	dc02      	bgt.n	8017680 <__sflush_r+0x20>
 801767a:	2000      	movs	r0, #0
 801767c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017682:	2e00      	cmp	r6, #0
 8017684:	d0f9      	beq.n	801767a <__sflush_r+0x1a>
 8017686:	2300      	movs	r3, #0
 8017688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801768c:	682f      	ldr	r7, [r5, #0]
 801768e:	6a21      	ldr	r1, [r4, #32]
 8017690:	602b      	str	r3, [r5, #0]
 8017692:	d032      	beq.n	80176fa <__sflush_r+0x9a>
 8017694:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017696:	89a3      	ldrh	r3, [r4, #12]
 8017698:	075a      	lsls	r2, r3, #29
 801769a:	d505      	bpl.n	80176a8 <__sflush_r+0x48>
 801769c:	6863      	ldr	r3, [r4, #4]
 801769e:	1ac0      	subs	r0, r0, r3
 80176a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80176a2:	b10b      	cbz	r3, 80176a8 <__sflush_r+0x48>
 80176a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80176a6:	1ac0      	subs	r0, r0, r3
 80176a8:	2300      	movs	r3, #0
 80176aa:	4602      	mov	r2, r0
 80176ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80176ae:	6a21      	ldr	r1, [r4, #32]
 80176b0:	4628      	mov	r0, r5
 80176b2:	47b0      	blx	r6
 80176b4:	1c43      	adds	r3, r0, #1
 80176b6:	89a3      	ldrh	r3, [r4, #12]
 80176b8:	d106      	bne.n	80176c8 <__sflush_r+0x68>
 80176ba:	6829      	ldr	r1, [r5, #0]
 80176bc:	291d      	cmp	r1, #29
 80176be:	d848      	bhi.n	8017752 <__sflush_r+0xf2>
 80176c0:	4a29      	ldr	r2, [pc, #164]	; (8017768 <__sflush_r+0x108>)
 80176c2:	40ca      	lsrs	r2, r1
 80176c4:	07d6      	lsls	r6, r2, #31
 80176c6:	d544      	bpl.n	8017752 <__sflush_r+0xf2>
 80176c8:	2200      	movs	r2, #0
 80176ca:	6062      	str	r2, [r4, #4]
 80176cc:	04d9      	lsls	r1, r3, #19
 80176ce:	6922      	ldr	r2, [r4, #16]
 80176d0:	6022      	str	r2, [r4, #0]
 80176d2:	d504      	bpl.n	80176de <__sflush_r+0x7e>
 80176d4:	1c42      	adds	r2, r0, #1
 80176d6:	d101      	bne.n	80176dc <__sflush_r+0x7c>
 80176d8:	682b      	ldr	r3, [r5, #0]
 80176da:	b903      	cbnz	r3, 80176de <__sflush_r+0x7e>
 80176dc:	6560      	str	r0, [r4, #84]	; 0x54
 80176de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80176e0:	602f      	str	r7, [r5, #0]
 80176e2:	2900      	cmp	r1, #0
 80176e4:	d0c9      	beq.n	801767a <__sflush_r+0x1a>
 80176e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176ea:	4299      	cmp	r1, r3
 80176ec:	d002      	beq.n	80176f4 <__sflush_r+0x94>
 80176ee:	4628      	mov	r0, r5
 80176f0:	f000 f99c 	bl	8017a2c <_free_r>
 80176f4:	2000      	movs	r0, #0
 80176f6:	6360      	str	r0, [r4, #52]	; 0x34
 80176f8:	e7c0      	b.n	801767c <__sflush_r+0x1c>
 80176fa:	2301      	movs	r3, #1
 80176fc:	4628      	mov	r0, r5
 80176fe:	47b0      	blx	r6
 8017700:	1c41      	adds	r1, r0, #1
 8017702:	d1c8      	bne.n	8017696 <__sflush_r+0x36>
 8017704:	682b      	ldr	r3, [r5, #0]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d0c5      	beq.n	8017696 <__sflush_r+0x36>
 801770a:	2b1d      	cmp	r3, #29
 801770c:	d001      	beq.n	8017712 <__sflush_r+0xb2>
 801770e:	2b16      	cmp	r3, #22
 8017710:	d101      	bne.n	8017716 <__sflush_r+0xb6>
 8017712:	602f      	str	r7, [r5, #0]
 8017714:	e7b1      	b.n	801767a <__sflush_r+0x1a>
 8017716:	89a3      	ldrh	r3, [r4, #12]
 8017718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801771c:	81a3      	strh	r3, [r4, #12]
 801771e:	e7ad      	b.n	801767c <__sflush_r+0x1c>
 8017720:	690f      	ldr	r7, [r1, #16]
 8017722:	2f00      	cmp	r7, #0
 8017724:	d0a9      	beq.n	801767a <__sflush_r+0x1a>
 8017726:	0793      	lsls	r3, r2, #30
 8017728:	680e      	ldr	r6, [r1, #0]
 801772a:	bf08      	it	eq
 801772c:	694b      	ldreq	r3, [r1, #20]
 801772e:	600f      	str	r7, [r1, #0]
 8017730:	bf18      	it	ne
 8017732:	2300      	movne	r3, #0
 8017734:	eba6 0807 	sub.w	r8, r6, r7
 8017738:	608b      	str	r3, [r1, #8]
 801773a:	f1b8 0f00 	cmp.w	r8, #0
 801773e:	dd9c      	ble.n	801767a <__sflush_r+0x1a>
 8017740:	4643      	mov	r3, r8
 8017742:	463a      	mov	r2, r7
 8017744:	6a21      	ldr	r1, [r4, #32]
 8017746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017748:	4628      	mov	r0, r5
 801774a:	47b0      	blx	r6
 801774c:	2800      	cmp	r0, #0
 801774e:	dc06      	bgt.n	801775e <__sflush_r+0xfe>
 8017750:	89a3      	ldrh	r3, [r4, #12]
 8017752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017756:	81a3      	strh	r3, [r4, #12]
 8017758:	f04f 30ff 	mov.w	r0, #4294967295
 801775c:	e78e      	b.n	801767c <__sflush_r+0x1c>
 801775e:	4407      	add	r7, r0
 8017760:	eba8 0800 	sub.w	r8, r8, r0
 8017764:	e7e9      	b.n	801773a <__sflush_r+0xda>
 8017766:	bf00      	nop
 8017768:	20400001 	.word	0x20400001

0801776c <_fflush_r>:
 801776c:	b538      	push	{r3, r4, r5, lr}
 801776e:	690b      	ldr	r3, [r1, #16]
 8017770:	4605      	mov	r5, r0
 8017772:	460c      	mov	r4, r1
 8017774:	b1db      	cbz	r3, 80177ae <_fflush_r+0x42>
 8017776:	b118      	cbz	r0, 8017780 <_fflush_r+0x14>
 8017778:	6983      	ldr	r3, [r0, #24]
 801777a:	b90b      	cbnz	r3, 8017780 <_fflush_r+0x14>
 801777c:	f000 f860 	bl	8017840 <__sinit>
 8017780:	4b0c      	ldr	r3, [pc, #48]	; (80177b4 <_fflush_r+0x48>)
 8017782:	429c      	cmp	r4, r3
 8017784:	d109      	bne.n	801779a <_fflush_r+0x2e>
 8017786:	686c      	ldr	r4, [r5, #4]
 8017788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801778c:	b17b      	cbz	r3, 80177ae <_fflush_r+0x42>
 801778e:	4621      	mov	r1, r4
 8017790:	4628      	mov	r0, r5
 8017792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017796:	f7ff bf63 	b.w	8017660 <__sflush_r>
 801779a:	4b07      	ldr	r3, [pc, #28]	; (80177b8 <_fflush_r+0x4c>)
 801779c:	429c      	cmp	r4, r3
 801779e:	d101      	bne.n	80177a4 <_fflush_r+0x38>
 80177a0:	68ac      	ldr	r4, [r5, #8]
 80177a2:	e7f1      	b.n	8017788 <_fflush_r+0x1c>
 80177a4:	4b05      	ldr	r3, [pc, #20]	; (80177bc <_fflush_r+0x50>)
 80177a6:	429c      	cmp	r4, r3
 80177a8:	bf08      	it	eq
 80177aa:	68ec      	ldreq	r4, [r5, #12]
 80177ac:	e7ec      	b.n	8017788 <_fflush_r+0x1c>
 80177ae:	2000      	movs	r0, #0
 80177b0:	bd38      	pop	{r3, r4, r5, pc}
 80177b2:	bf00      	nop
 80177b4:	080187f4 	.word	0x080187f4
 80177b8:	08018814 	.word	0x08018814
 80177bc:	080187d4 	.word	0x080187d4

080177c0 <std>:
 80177c0:	2300      	movs	r3, #0
 80177c2:	b510      	push	{r4, lr}
 80177c4:	4604      	mov	r4, r0
 80177c6:	e9c0 3300 	strd	r3, r3, [r0]
 80177ca:	6083      	str	r3, [r0, #8]
 80177cc:	8181      	strh	r1, [r0, #12]
 80177ce:	6643      	str	r3, [r0, #100]	; 0x64
 80177d0:	81c2      	strh	r2, [r0, #14]
 80177d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80177d6:	6183      	str	r3, [r0, #24]
 80177d8:	4619      	mov	r1, r3
 80177da:	2208      	movs	r2, #8
 80177dc:	305c      	adds	r0, #92	; 0x5c
 80177de:	f7ff fd72 	bl	80172c6 <memset>
 80177e2:	4b05      	ldr	r3, [pc, #20]	; (80177f8 <std+0x38>)
 80177e4:	6263      	str	r3, [r4, #36]	; 0x24
 80177e6:	4b05      	ldr	r3, [pc, #20]	; (80177fc <std+0x3c>)
 80177e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80177ea:	4b05      	ldr	r3, [pc, #20]	; (8017800 <std+0x40>)
 80177ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80177ee:	4b05      	ldr	r3, [pc, #20]	; (8017804 <std+0x44>)
 80177f0:	6224      	str	r4, [r4, #32]
 80177f2:	6323      	str	r3, [r4, #48]	; 0x30
 80177f4:	bd10      	pop	{r4, pc}
 80177f6:	bf00      	nop
 80177f8:	080183d1 	.word	0x080183d1
 80177fc:	080183f3 	.word	0x080183f3
 8017800:	0801842b 	.word	0x0801842b
 8017804:	0801844f 	.word	0x0801844f

08017808 <_cleanup_r>:
 8017808:	4901      	ldr	r1, [pc, #4]	; (8017810 <_cleanup_r+0x8>)
 801780a:	f000 b885 	b.w	8017918 <_fwalk_reent>
 801780e:	bf00      	nop
 8017810:	0801776d 	.word	0x0801776d

08017814 <__sfmoreglue>:
 8017814:	b570      	push	{r4, r5, r6, lr}
 8017816:	1e4a      	subs	r2, r1, #1
 8017818:	2568      	movs	r5, #104	; 0x68
 801781a:	4355      	muls	r5, r2
 801781c:	460e      	mov	r6, r1
 801781e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017822:	f000 f951 	bl	8017ac8 <_malloc_r>
 8017826:	4604      	mov	r4, r0
 8017828:	b140      	cbz	r0, 801783c <__sfmoreglue+0x28>
 801782a:	2100      	movs	r1, #0
 801782c:	e9c0 1600 	strd	r1, r6, [r0]
 8017830:	300c      	adds	r0, #12
 8017832:	60a0      	str	r0, [r4, #8]
 8017834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017838:	f7ff fd45 	bl	80172c6 <memset>
 801783c:	4620      	mov	r0, r4
 801783e:	bd70      	pop	{r4, r5, r6, pc}

08017840 <__sinit>:
 8017840:	6983      	ldr	r3, [r0, #24]
 8017842:	b510      	push	{r4, lr}
 8017844:	4604      	mov	r4, r0
 8017846:	bb33      	cbnz	r3, 8017896 <__sinit+0x56>
 8017848:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801784c:	6503      	str	r3, [r0, #80]	; 0x50
 801784e:	4b12      	ldr	r3, [pc, #72]	; (8017898 <__sinit+0x58>)
 8017850:	4a12      	ldr	r2, [pc, #72]	; (801789c <__sinit+0x5c>)
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	6282      	str	r2, [r0, #40]	; 0x28
 8017856:	4298      	cmp	r0, r3
 8017858:	bf04      	itt	eq
 801785a:	2301      	moveq	r3, #1
 801785c:	6183      	streq	r3, [r0, #24]
 801785e:	f000 f81f 	bl	80178a0 <__sfp>
 8017862:	6060      	str	r0, [r4, #4]
 8017864:	4620      	mov	r0, r4
 8017866:	f000 f81b 	bl	80178a0 <__sfp>
 801786a:	60a0      	str	r0, [r4, #8]
 801786c:	4620      	mov	r0, r4
 801786e:	f000 f817 	bl	80178a0 <__sfp>
 8017872:	2200      	movs	r2, #0
 8017874:	60e0      	str	r0, [r4, #12]
 8017876:	2104      	movs	r1, #4
 8017878:	6860      	ldr	r0, [r4, #4]
 801787a:	f7ff ffa1 	bl	80177c0 <std>
 801787e:	2201      	movs	r2, #1
 8017880:	2109      	movs	r1, #9
 8017882:	68a0      	ldr	r0, [r4, #8]
 8017884:	f7ff ff9c 	bl	80177c0 <std>
 8017888:	2202      	movs	r2, #2
 801788a:	2112      	movs	r1, #18
 801788c:	68e0      	ldr	r0, [r4, #12]
 801788e:	f7ff ff97 	bl	80177c0 <std>
 8017892:	2301      	movs	r3, #1
 8017894:	61a3      	str	r3, [r4, #24]
 8017896:	bd10      	pop	{r4, pc}
 8017898:	080187d0 	.word	0x080187d0
 801789c:	08017809 	.word	0x08017809

080178a0 <__sfp>:
 80178a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178a2:	4b1b      	ldr	r3, [pc, #108]	; (8017910 <__sfp+0x70>)
 80178a4:	681e      	ldr	r6, [r3, #0]
 80178a6:	69b3      	ldr	r3, [r6, #24]
 80178a8:	4607      	mov	r7, r0
 80178aa:	b913      	cbnz	r3, 80178b2 <__sfp+0x12>
 80178ac:	4630      	mov	r0, r6
 80178ae:	f7ff ffc7 	bl	8017840 <__sinit>
 80178b2:	3648      	adds	r6, #72	; 0x48
 80178b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80178b8:	3b01      	subs	r3, #1
 80178ba:	d503      	bpl.n	80178c4 <__sfp+0x24>
 80178bc:	6833      	ldr	r3, [r6, #0]
 80178be:	b133      	cbz	r3, 80178ce <__sfp+0x2e>
 80178c0:	6836      	ldr	r6, [r6, #0]
 80178c2:	e7f7      	b.n	80178b4 <__sfp+0x14>
 80178c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80178c8:	b16d      	cbz	r5, 80178e6 <__sfp+0x46>
 80178ca:	3468      	adds	r4, #104	; 0x68
 80178cc:	e7f4      	b.n	80178b8 <__sfp+0x18>
 80178ce:	2104      	movs	r1, #4
 80178d0:	4638      	mov	r0, r7
 80178d2:	f7ff ff9f 	bl	8017814 <__sfmoreglue>
 80178d6:	6030      	str	r0, [r6, #0]
 80178d8:	2800      	cmp	r0, #0
 80178da:	d1f1      	bne.n	80178c0 <__sfp+0x20>
 80178dc:	230c      	movs	r3, #12
 80178de:	603b      	str	r3, [r7, #0]
 80178e0:	4604      	mov	r4, r0
 80178e2:	4620      	mov	r0, r4
 80178e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178e6:	4b0b      	ldr	r3, [pc, #44]	; (8017914 <__sfp+0x74>)
 80178e8:	6665      	str	r5, [r4, #100]	; 0x64
 80178ea:	e9c4 5500 	strd	r5, r5, [r4]
 80178ee:	60a5      	str	r5, [r4, #8]
 80178f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80178f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80178f8:	2208      	movs	r2, #8
 80178fa:	4629      	mov	r1, r5
 80178fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017900:	f7ff fce1 	bl	80172c6 <memset>
 8017904:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017908:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801790c:	e7e9      	b.n	80178e2 <__sfp+0x42>
 801790e:	bf00      	nop
 8017910:	080187d0 	.word	0x080187d0
 8017914:	ffff0001 	.word	0xffff0001

08017918 <_fwalk_reent>:
 8017918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801791c:	4680      	mov	r8, r0
 801791e:	4689      	mov	r9, r1
 8017920:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017924:	2600      	movs	r6, #0
 8017926:	b914      	cbnz	r4, 801792e <_fwalk_reent+0x16>
 8017928:	4630      	mov	r0, r6
 801792a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801792e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017932:	3f01      	subs	r7, #1
 8017934:	d501      	bpl.n	801793a <_fwalk_reent+0x22>
 8017936:	6824      	ldr	r4, [r4, #0]
 8017938:	e7f5      	b.n	8017926 <_fwalk_reent+0xe>
 801793a:	89ab      	ldrh	r3, [r5, #12]
 801793c:	2b01      	cmp	r3, #1
 801793e:	d907      	bls.n	8017950 <_fwalk_reent+0x38>
 8017940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017944:	3301      	adds	r3, #1
 8017946:	d003      	beq.n	8017950 <_fwalk_reent+0x38>
 8017948:	4629      	mov	r1, r5
 801794a:	4640      	mov	r0, r8
 801794c:	47c8      	blx	r9
 801794e:	4306      	orrs	r6, r0
 8017950:	3568      	adds	r5, #104	; 0x68
 8017952:	e7ee      	b.n	8017932 <_fwalk_reent+0x1a>

08017954 <__swhatbuf_r>:
 8017954:	b570      	push	{r4, r5, r6, lr}
 8017956:	460e      	mov	r6, r1
 8017958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801795c:	2900      	cmp	r1, #0
 801795e:	b096      	sub	sp, #88	; 0x58
 8017960:	4614      	mov	r4, r2
 8017962:	461d      	mov	r5, r3
 8017964:	da07      	bge.n	8017976 <__swhatbuf_r+0x22>
 8017966:	2300      	movs	r3, #0
 8017968:	602b      	str	r3, [r5, #0]
 801796a:	89b3      	ldrh	r3, [r6, #12]
 801796c:	061a      	lsls	r2, r3, #24
 801796e:	d410      	bmi.n	8017992 <__swhatbuf_r+0x3e>
 8017970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017974:	e00e      	b.n	8017994 <__swhatbuf_r+0x40>
 8017976:	466a      	mov	r2, sp
 8017978:	f000 fd90 	bl	801849c <_fstat_r>
 801797c:	2800      	cmp	r0, #0
 801797e:	dbf2      	blt.n	8017966 <__swhatbuf_r+0x12>
 8017980:	9a01      	ldr	r2, [sp, #4]
 8017982:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017986:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801798a:	425a      	negs	r2, r3
 801798c:	415a      	adcs	r2, r3
 801798e:	602a      	str	r2, [r5, #0]
 8017990:	e7ee      	b.n	8017970 <__swhatbuf_r+0x1c>
 8017992:	2340      	movs	r3, #64	; 0x40
 8017994:	2000      	movs	r0, #0
 8017996:	6023      	str	r3, [r4, #0]
 8017998:	b016      	add	sp, #88	; 0x58
 801799a:	bd70      	pop	{r4, r5, r6, pc}

0801799c <__smakebuf_r>:
 801799c:	898b      	ldrh	r3, [r1, #12]
 801799e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80179a0:	079d      	lsls	r5, r3, #30
 80179a2:	4606      	mov	r6, r0
 80179a4:	460c      	mov	r4, r1
 80179a6:	d507      	bpl.n	80179b8 <__smakebuf_r+0x1c>
 80179a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80179ac:	6023      	str	r3, [r4, #0]
 80179ae:	6123      	str	r3, [r4, #16]
 80179b0:	2301      	movs	r3, #1
 80179b2:	6163      	str	r3, [r4, #20]
 80179b4:	b002      	add	sp, #8
 80179b6:	bd70      	pop	{r4, r5, r6, pc}
 80179b8:	ab01      	add	r3, sp, #4
 80179ba:	466a      	mov	r2, sp
 80179bc:	f7ff ffca 	bl	8017954 <__swhatbuf_r>
 80179c0:	9900      	ldr	r1, [sp, #0]
 80179c2:	4605      	mov	r5, r0
 80179c4:	4630      	mov	r0, r6
 80179c6:	f000 f87f 	bl	8017ac8 <_malloc_r>
 80179ca:	b948      	cbnz	r0, 80179e0 <__smakebuf_r+0x44>
 80179cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179d0:	059a      	lsls	r2, r3, #22
 80179d2:	d4ef      	bmi.n	80179b4 <__smakebuf_r+0x18>
 80179d4:	f023 0303 	bic.w	r3, r3, #3
 80179d8:	f043 0302 	orr.w	r3, r3, #2
 80179dc:	81a3      	strh	r3, [r4, #12]
 80179de:	e7e3      	b.n	80179a8 <__smakebuf_r+0xc>
 80179e0:	4b0d      	ldr	r3, [pc, #52]	; (8017a18 <__smakebuf_r+0x7c>)
 80179e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80179e4:	89a3      	ldrh	r3, [r4, #12]
 80179e6:	6020      	str	r0, [r4, #0]
 80179e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179ec:	81a3      	strh	r3, [r4, #12]
 80179ee:	9b00      	ldr	r3, [sp, #0]
 80179f0:	6163      	str	r3, [r4, #20]
 80179f2:	9b01      	ldr	r3, [sp, #4]
 80179f4:	6120      	str	r0, [r4, #16]
 80179f6:	b15b      	cbz	r3, 8017a10 <__smakebuf_r+0x74>
 80179f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179fc:	4630      	mov	r0, r6
 80179fe:	f000 fd5f 	bl	80184c0 <_isatty_r>
 8017a02:	b128      	cbz	r0, 8017a10 <__smakebuf_r+0x74>
 8017a04:	89a3      	ldrh	r3, [r4, #12]
 8017a06:	f023 0303 	bic.w	r3, r3, #3
 8017a0a:	f043 0301 	orr.w	r3, r3, #1
 8017a0e:	81a3      	strh	r3, [r4, #12]
 8017a10:	89a3      	ldrh	r3, [r4, #12]
 8017a12:	431d      	orrs	r5, r3
 8017a14:	81a5      	strh	r5, [r4, #12]
 8017a16:	e7cd      	b.n	80179b4 <__smakebuf_r+0x18>
 8017a18:	08017809 	.word	0x08017809

08017a1c <malloc>:
 8017a1c:	4b02      	ldr	r3, [pc, #8]	; (8017a28 <malloc+0xc>)
 8017a1e:	4601      	mov	r1, r0
 8017a20:	6818      	ldr	r0, [r3, #0]
 8017a22:	f000 b851 	b.w	8017ac8 <_malloc_r>
 8017a26:	bf00      	nop
 8017a28:	24000034 	.word	0x24000034

08017a2c <_free_r>:
 8017a2c:	b538      	push	{r3, r4, r5, lr}
 8017a2e:	4605      	mov	r5, r0
 8017a30:	2900      	cmp	r1, #0
 8017a32:	d045      	beq.n	8017ac0 <_free_r+0x94>
 8017a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a38:	1f0c      	subs	r4, r1, #4
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	bfb8      	it	lt
 8017a3e:	18e4      	addlt	r4, r4, r3
 8017a40:	f000 fd60 	bl	8018504 <__malloc_lock>
 8017a44:	4a1f      	ldr	r2, [pc, #124]	; (8017ac4 <_free_r+0x98>)
 8017a46:	6813      	ldr	r3, [r2, #0]
 8017a48:	4610      	mov	r0, r2
 8017a4a:	b933      	cbnz	r3, 8017a5a <_free_r+0x2e>
 8017a4c:	6063      	str	r3, [r4, #4]
 8017a4e:	6014      	str	r4, [r2, #0]
 8017a50:	4628      	mov	r0, r5
 8017a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a56:	f000 bd56 	b.w	8018506 <__malloc_unlock>
 8017a5a:	42a3      	cmp	r3, r4
 8017a5c:	d90c      	bls.n	8017a78 <_free_r+0x4c>
 8017a5e:	6821      	ldr	r1, [r4, #0]
 8017a60:	1862      	adds	r2, r4, r1
 8017a62:	4293      	cmp	r3, r2
 8017a64:	bf04      	itt	eq
 8017a66:	681a      	ldreq	r2, [r3, #0]
 8017a68:	685b      	ldreq	r3, [r3, #4]
 8017a6a:	6063      	str	r3, [r4, #4]
 8017a6c:	bf04      	itt	eq
 8017a6e:	1852      	addeq	r2, r2, r1
 8017a70:	6022      	streq	r2, [r4, #0]
 8017a72:	6004      	str	r4, [r0, #0]
 8017a74:	e7ec      	b.n	8017a50 <_free_r+0x24>
 8017a76:	4613      	mov	r3, r2
 8017a78:	685a      	ldr	r2, [r3, #4]
 8017a7a:	b10a      	cbz	r2, 8017a80 <_free_r+0x54>
 8017a7c:	42a2      	cmp	r2, r4
 8017a7e:	d9fa      	bls.n	8017a76 <_free_r+0x4a>
 8017a80:	6819      	ldr	r1, [r3, #0]
 8017a82:	1858      	adds	r0, r3, r1
 8017a84:	42a0      	cmp	r0, r4
 8017a86:	d10b      	bne.n	8017aa0 <_free_r+0x74>
 8017a88:	6820      	ldr	r0, [r4, #0]
 8017a8a:	4401      	add	r1, r0
 8017a8c:	1858      	adds	r0, r3, r1
 8017a8e:	4282      	cmp	r2, r0
 8017a90:	6019      	str	r1, [r3, #0]
 8017a92:	d1dd      	bne.n	8017a50 <_free_r+0x24>
 8017a94:	6810      	ldr	r0, [r2, #0]
 8017a96:	6852      	ldr	r2, [r2, #4]
 8017a98:	605a      	str	r2, [r3, #4]
 8017a9a:	4401      	add	r1, r0
 8017a9c:	6019      	str	r1, [r3, #0]
 8017a9e:	e7d7      	b.n	8017a50 <_free_r+0x24>
 8017aa0:	d902      	bls.n	8017aa8 <_free_r+0x7c>
 8017aa2:	230c      	movs	r3, #12
 8017aa4:	602b      	str	r3, [r5, #0]
 8017aa6:	e7d3      	b.n	8017a50 <_free_r+0x24>
 8017aa8:	6820      	ldr	r0, [r4, #0]
 8017aaa:	1821      	adds	r1, r4, r0
 8017aac:	428a      	cmp	r2, r1
 8017aae:	bf04      	itt	eq
 8017ab0:	6811      	ldreq	r1, [r2, #0]
 8017ab2:	6852      	ldreq	r2, [r2, #4]
 8017ab4:	6062      	str	r2, [r4, #4]
 8017ab6:	bf04      	itt	eq
 8017ab8:	1809      	addeq	r1, r1, r0
 8017aba:	6021      	streq	r1, [r4, #0]
 8017abc:	605c      	str	r4, [r3, #4]
 8017abe:	e7c7      	b.n	8017a50 <_free_r+0x24>
 8017ac0:	bd38      	pop	{r3, r4, r5, pc}
 8017ac2:	bf00      	nop
 8017ac4:	24005d54 	.word	0x24005d54

08017ac8 <_malloc_r>:
 8017ac8:	b570      	push	{r4, r5, r6, lr}
 8017aca:	1ccd      	adds	r5, r1, #3
 8017acc:	f025 0503 	bic.w	r5, r5, #3
 8017ad0:	3508      	adds	r5, #8
 8017ad2:	2d0c      	cmp	r5, #12
 8017ad4:	bf38      	it	cc
 8017ad6:	250c      	movcc	r5, #12
 8017ad8:	2d00      	cmp	r5, #0
 8017ada:	4606      	mov	r6, r0
 8017adc:	db01      	blt.n	8017ae2 <_malloc_r+0x1a>
 8017ade:	42a9      	cmp	r1, r5
 8017ae0:	d903      	bls.n	8017aea <_malloc_r+0x22>
 8017ae2:	230c      	movs	r3, #12
 8017ae4:	6033      	str	r3, [r6, #0]
 8017ae6:	2000      	movs	r0, #0
 8017ae8:	bd70      	pop	{r4, r5, r6, pc}
 8017aea:	f000 fd0b 	bl	8018504 <__malloc_lock>
 8017aee:	4a21      	ldr	r2, [pc, #132]	; (8017b74 <_malloc_r+0xac>)
 8017af0:	6814      	ldr	r4, [r2, #0]
 8017af2:	4621      	mov	r1, r4
 8017af4:	b991      	cbnz	r1, 8017b1c <_malloc_r+0x54>
 8017af6:	4c20      	ldr	r4, [pc, #128]	; (8017b78 <_malloc_r+0xb0>)
 8017af8:	6823      	ldr	r3, [r4, #0]
 8017afa:	b91b      	cbnz	r3, 8017b04 <_malloc_r+0x3c>
 8017afc:	4630      	mov	r0, r6
 8017afe:	f000 fc57 	bl	80183b0 <_sbrk_r>
 8017b02:	6020      	str	r0, [r4, #0]
 8017b04:	4629      	mov	r1, r5
 8017b06:	4630      	mov	r0, r6
 8017b08:	f000 fc52 	bl	80183b0 <_sbrk_r>
 8017b0c:	1c43      	adds	r3, r0, #1
 8017b0e:	d124      	bne.n	8017b5a <_malloc_r+0x92>
 8017b10:	230c      	movs	r3, #12
 8017b12:	6033      	str	r3, [r6, #0]
 8017b14:	4630      	mov	r0, r6
 8017b16:	f000 fcf6 	bl	8018506 <__malloc_unlock>
 8017b1a:	e7e4      	b.n	8017ae6 <_malloc_r+0x1e>
 8017b1c:	680b      	ldr	r3, [r1, #0]
 8017b1e:	1b5b      	subs	r3, r3, r5
 8017b20:	d418      	bmi.n	8017b54 <_malloc_r+0x8c>
 8017b22:	2b0b      	cmp	r3, #11
 8017b24:	d90f      	bls.n	8017b46 <_malloc_r+0x7e>
 8017b26:	600b      	str	r3, [r1, #0]
 8017b28:	50cd      	str	r5, [r1, r3]
 8017b2a:	18cc      	adds	r4, r1, r3
 8017b2c:	4630      	mov	r0, r6
 8017b2e:	f000 fcea 	bl	8018506 <__malloc_unlock>
 8017b32:	f104 000b 	add.w	r0, r4, #11
 8017b36:	1d23      	adds	r3, r4, #4
 8017b38:	f020 0007 	bic.w	r0, r0, #7
 8017b3c:	1ac3      	subs	r3, r0, r3
 8017b3e:	d0d3      	beq.n	8017ae8 <_malloc_r+0x20>
 8017b40:	425a      	negs	r2, r3
 8017b42:	50e2      	str	r2, [r4, r3]
 8017b44:	e7d0      	b.n	8017ae8 <_malloc_r+0x20>
 8017b46:	428c      	cmp	r4, r1
 8017b48:	684b      	ldr	r3, [r1, #4]
 8017b4a:	bf16      	itet	ne
 8017b4c:	6063      	strne	r3, [r4, #4]
 8017b4e:	6013      	streq	r3, [r2, #0]
 8017b50:	460c      	movne	r4, r1
 8017b52:	e7eb      	b.n	8017b2c <_malloc_r+0x64>
 8017b54:	460c      	mov	r4, r1
 8017b56:	6849      	ldr	r1, [r1, #4]
 8017b58:	e7cc      	b.n	8017af4 <_malloc_r+0x2c>
 8017b5a:	1cc4      	adds	r4, r0, #3
 8017b5c:	f024 0403 	bic.w	r4, r4, #3
 8017b60:	42a0      	cmp	r0, r4
 8017b62:	d005      	beq.n	8017b70 <_malloc_r+0xa8>
 8017b64:	1a21      	subs	r1, r4, r0
 8017b66:	4630      	mov	r0, r6
 8017b68:	f000 fc22 	bl	80183b0 <_sbrk_r>
 8017b6c:	3001      	adds	r0, #1
 8017b6e:	d0cf      	beq.n	8017b10 <_malloc_r+0x48>
 8017b70:	6025      	str	r5, [r4, #0]
 8017b72:	e7db      	b.n	8017b2c <_malloc_r+0x64>
 8017b74:	24005d54 	.word	0x24005d54
 8017b78:	24005d58 	.word	0x24005d58

08017b7c <__ssputs_r>:
 8017b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b80:	688e      	ldr	r6, [r1, #8]
 8017b82:	429e      	cmp	r6, r3
 8017b84:	4682      	mov	sl, r0
 8017b86:	460c      	mov	r4, r1
 8017b88:	4690      	mov	r8, r2
 8017b8a:	4699      	mov	r9, r3
 8017b8c:	d837      	bhi.n	8017bfe <__ssputs_r+0x82>
 8017b8e:	898a      	ldrh	r2, [r1, #12]
 8017b90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017b94:	d031      	beq.n	8017bfa <__ssputs_r+0x7e>
 8017b96:	6825      	ldr	r5, [r4, #0]
 8017b98:	6909      	ldr	r1, [r1, #16]
 8017b9a:	1a6f      	subs	r7, r5, r1
 8017b9c:	6965      	ldr	r5, [r4, #20]
 8017b9e:	2302      	movs	r3, #2
 8017ba0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ba4:	fb95 f5f3 	sdiv	r5, r5, r3
 8017ba8:	f109 0301 	add.w	r3, r9, #1
 8017bac:	443b      	add	r3, r7
 8017bae:	429d      	cmp	r5, r3
 8017bb0:	bf38      	it	cc
 8017bb2:	461d      	movcc	r5, r3
 8017bb4:	0553      	lsls	r3, r2, #21
 8017bb6:	d530      	bpl.n	8017c1a <__ssputs_r+0x9e>
 8017bb8:	4629      	mov	r1, r5
 8017bba:	f7ff ff85 	bl	8017ac8 <_malloc_r>
 8017bbe:	4606      	mov	r6, r0
 8017bc0:	b950      	cbnz	r0, 8017bd8 <__ssputs_r+0x5c>
 8017bc2:	230c      	movs	r3, #12
 8017bc4:	f8ca 3000 	str.w	r3, [sl]
 8017bc8:	89a3      	ldrh	r3, [r4, #12]
 8017bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bce:	81a3      	strh	r3, [r4, #12]
 8017bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8017bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bd8:	463a      	mov	r2, r7
 8017bda:	6921      	ldr	r1, [r4, #16]
 8017bdc:	f7ff fb4f 	bl	801727e <memcpy>
 8017be0:	89a3      	ldrh	r3, [r4, #12]
 8017be2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bea:	81a3      	strh	r3, [r4, #12]
 8017bec:	6126      	str	r6, [r4, #16]
 8017bee:	6165      	str	r5, [r4, #20]
 8017bf0:	443e      	add	r6, r7
 8017bf2:	1bed      	subs	r5, r5, r7
 8017bf4:	6026      	str	r6, [r4, #0]
 8017bf6:	60a5      	str	r5, [r4, #8]
 8017bf8:	464e      	mov	r6, r9
 8017bfa:	454e      	cmp	r6, r9
 8017bfc:	d900      	bls.n	8017c00 <__ssputs_r+0x84>
 8017bfe:	464e      	mov	r6, r9
 8017c00:	4632      	mov	r2, r6
 8017c02:	4641      	mov	r1, r8
 8017c04:	6820      	ldr	r0, [r4, #0]
 8017c06:	f7ff fb45 	bl	8017294 <memmove>
 8017c0a:	68a3      	ldr	r3, [r4, #8]
 8017c0c:	1b9b      	subs	r3, r3, r6
 8017c0e:	60a3      	str	r3, [r4, #8]
 8017c10:	6823      	ldr	r3, [r4, #0]
 8017c12:	441e      	add	r6, r3
 8017c14:	6026      	str	r6, [r4, #0]
 8017c16:	2000      	movs	r0, #0
 8017c18:	e7dc      	b.n	8017bd4 <__ssputs_r+0x58>
 8017c1a:	462a      	mov	r2, r5
 8017c1c:	f000 fc74 	bl	8018508 <_realloc_r>
 8017c20:	4606      	mov	r6, r0
 8017c22:	2800      	cmp	r0, #0
 8017c24:	d1e2      	bne.n	8017bec <__ssputs_r+0x70>
 8017c26:	6921      	ldr	r1, [r4, #16]
 8017c28:	4650      	mov	r0, sl
 8017c2a:	f7ff feff 	bl	8017a2c <_free_r>
 8017c2e:	e7c8      	b.n	8017bc2 <__ssputs_r+0x46>

08017c30 <_svfiprintf_r>:
 8017c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c34:	461d      	mov	r5, r3
 8017c36:	898b      	ldrh	r3, [r1, #12]
 8017c38:	061f      	lsls	r7, r3, #24
 8017c3a:	b09d      	sub	sp, #116	; 0x74
 8017c3c:	4680      	mov	r8, r0
 8017c3e:	460c      	mov	r4, r1
 8017c40:	4616      	mov	r6, r2
 8017c42:	d50f      	bpl.n	8017c64 <_svfiprintf_r+0x34>
 8017c44:	690b      	ldr	r3, [r1, #16]
 8017c46:	b96b      	cbnz	r3, 8017c64 <_svfiprintf_r+0x34>
 8017c48:	2140      	movs	r1, #64	; 0x40
 8017c4a:	f7ff ff3d 	bl	8017ac8 <_malloc_r>
 8017c4e:	6020      	str	r0, [r4, #0]
 8017c50:	6120      	str	r0, [r4, #16]
 8017c52:	b928      	cbnz	r0, 8017c60 <_svfiprintf_r+0x30>
 8017c54:	230c      	movs	r3, #12
 8017c56:	f8c8 3000 	str.w	r3, [r8]
 8017c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8017c5e:	e0c8      	b.n	8017df2 <_svfiprintf_r+0x1c2>
 8017c60:	2340      	movs	r3, #64	; 0x40
 8017c62:	6163      	str	r3, [r4, #20]
 8017c64:	2300      	movs	r3, #0
 8017c66:	9309      	str	r3, [sp, #36]	; 0x24
 8017c68:	2320      	movs	r3, #32
 8017c6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c6e:	2330      	movs	r3, #48	; 0x30
 8017c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c74:	9503      	str	r5, [sp, #12]
 8017c76:	f04f 0b01 	mov.w	fp, #1
 8017c7a:	4637      	mov	r7, r6
 8017c7c:	463d      	mov	r5, r7
 8017c7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017c82:	b10b      	cbz	r3, 8017c88 <_svfiprintf_r+0x58>
 8017c84:	2b25      	cmp	r3, #37	; 0x25
 8017c86:	d13e      	bne.n	8017d06 <_svfiprintf_r+0xd6>
 8017c88:	ebb7 0a06 	subs.w	sl, r7, r6
 8017c8c:	d00b      	beq.n	8017ca6 <_svfiprintf_r+0x76>
 8017c8e:	4653      	mov	r3, sl
 8017c90:	4632      	mov	r2, r6
 8017c92:	4621      	mov	r1, r4
 8017c94:	4640      	mov	r0, r8
 8017c96:	f7ff ff71 	bl	8017b7c <__ssputs_r>
 8017c9a:	3001      	adds	r0, #1
 8017c9c:	f000 80a4 	beq.w	8017de8 <_svfiprintf_r+0x1b8>
 8017ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ca2:	4453      	add	r3, sl
 8017ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ca6:	783b      	ldrb	r3, [r7, #0]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	f000 809d 	beq.w	8017de8 <_svfiprintf_r+0x1b8>
 8017cae:	2300      	movs	r3, #0
 8017cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8017cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017cb8:	9304      	str	r3, [sp, #16]
 8017cba:	9307      	str	r3, [sp, #28]
 8017cbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017cc0:	931a      	str	r3, [sp, #104]	; 0x68
 8017cc2:	462f      	mov	r7, r5
 8017cc4:	2205      	movs	r2, #5
 8017cc6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017cca:	4850      	ldr	r0, [pc, #320]	; (8017e0c <_svfiprintf_r+0x1dc>)
 8017ccc:	f7e8 fb10 	bl	80002f0 <memchr>
 8017cd0:	9b04      	ldr	r3, [sp, #16]
 8017cd2:	b9d0      	cbnz	r0, 8017d0a <_svfiprintf_r+0xda>
 8017cd4:	06d9      	lsls	r1, r3, #27
 8017cd6:	bf44      	itt	mi
 8017cd8:	2220      	movmi	r2, #32
 8017cda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017cde:	071a      	lsls	r2, r3, #28
 8017ce0:	bf44      	itt	mi
 8017ce2:	222b      	movmi	r2, #43	; 0x2b
 8017ce4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017ce8:	782a      	ldrb	r2, [r5, #0]
 8017cea:	2a2a      	cmp	r2, #42	; 0x2a
 8017cec:	d015      	beq.n	8017d1a <_svfiprintf_r+0xea>
 8017cee:	9a07      	ldr	r2, [sp, #28]
 8017cf0:	462f      	mov	r7, r5
 8017cf2:	2000      	movs	r0, #0
 8017cf4:	250a      	movs	r5, #10
 8017cf6:	4639      	mov	r1, r7
 8017cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017cfc:	3b30      	subs	r3, #48	; 0x30
 8017cfe:	2b09      	cmp	r3, #9
 8017d00:	d94d      	bls.n	8017d9e <_svfiprintf_r+0x16e>
 8017d02:	b1b8      	cbz	r0, 8017d34 <_svfiprintf_r+0x104>
 8017d04:	e00f      	b.n	8017d26 <_svfiprintf_r+0xf6>
 8017d06:	462f      	mov	r7, r5
 8017d08:	e7b8      	b.n	8017c7c <_svfiprintf_r+0x4c>
 8017d0a:	4a40      	ldr	r2, [pc, #256]	; (8017e0c <_svfiprintf_r+0x1dc>)
 8017d0c:	1a80      	subs	r0, r0, r2
 8017d0e:	fa0b f000 	lsl.w	r0, fp, r0
 8017d12:	4318      	orrs	r0, r3
 8017d14:	9004      	str	r0, [sp, #16]
 8017d16:	463d      	mov	r5, r7
 8017d18:	e7d3      	b.n	8017cc2 <_svfiprintf_r+0x92>
 8017d1a:	9a03      	ldr	r2, [sp, #12]
 8017d1c:	1d11      	adds	r1, r2, #4
 8017d1e:	6812      	ldr	r2, [r2, #0]
 8017d20:	9103      	str	r1, [sp, #12]
 8017d22:	2a00      	cmp	r2, #0
 8017d24:	db01      	blt.n	8017d2a <_svfiprintf_r+0xfa>
 8017d26:	9207      	str	r2, [sp, #28]
 8017d28:	e004      	b.n	8017d34 <_svfiprintf_r+0x104>
 8017d2a:	4252      	negs	r2, r2
 8017d2c:	f043 0302 	orr.w	r3, r3, #2
 8017d30:	9207      	str	r2, [sp, #28]
 8017d32:	9304      	str	r3, [sp, #16]
 8017d34:	783b      	ldrb	r3, [r7, #0]
 8017d36:	2b2e      	cmp	r3, #46	; 0x2e
 8017d38:	d10c      	bne.n	8017d54 <_svfiprintf_r+0x124>
 8017d3a:	787b      	ldrb	r3, [r7, #1]
 8017d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8017d3e:	d133      	bne.n	8017da8 <_svfiprintf_r+0x178>
 8017d40:	9b03      	ldr	r3, [sp, #12]
 8017d42:	1d1a      	adds	r2, r3, #4
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	9203      	str	r2, [sp, #12]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	bfb8      	it	lt
 8017d4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d50:	3702      	adds	r7, #2
 8017d52:	9305      	str	r3, [sp, #20]
 8017d54:	4d2e      	ldr	r5, [pc, #184]	; (8017e10 <_svfiprintf_r+0x1e0>)
 8017d56:	7839      	ldrb	r1, [r7, #0]
 8017d58:	2203      	movs	r2, #3
 8017d5a:	4628      	mov	r0, r5
 8017d5c:	f7e8 fac8 	bl	80002f0 <memchr>
 8017d60:	b138      	cbz	r0, 8017d72 <_svfiprintf_r+0x142>
 8017d62:	2340      	movs	r3, #64	; 0x40
 8017d64:	1b40      	subs	r0, r0, r5
 8017d66:	fa03 f000 	lsl.w	r0, r3, r0
 8017d6a:	9b04      	ldr	r3, [sp, #16]
 8017d6c:	4303      	orrs	r3, r0
 8017d6e:	3701      	adds	r7, #1
 8017d70:	9304      	str	r3, [sp, #16]
 8017d72:	7839      	ldrb	r1, [r7, #0]
 8017d74:	4827      	ldr	r0, [pc, #156]	; (8017e14 <_svfiprintf_r+0x1e4>)
 8017d76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d7a:	2206      	movs	r2, #6
 8017d7c:	1c7e      	adds	r6, r7, #1
 8017d7e:	f7e8 fab7 	bl	80002f0 <memchr>
 8017d82:	2800      	cmp	r0, #0
 8017d84:	d038      	beq.n	8017df8 <_svfiprintf_r+0x1c8>
 8017d86:	4b24      	ldr	r3, [pc, #144]	; (8017e18 <_svfiprintf_r+0x1e8>)
 8017d88:	bb13      	cbnz	r3, 8017dd0 <_svfiprintf_r+0x1a0>
 8017d8a:	9b03      	ldr	r3, [sp, #12]
 8017d8c:	3307      	adds	r3, #7
 8017d8e:	f023 0307 	bic.w	r3, r3, #7
 8017d92:	3308      	adds	r3, #8
 8017d94:	9303      	str	r3, [sp, #12]
 8017d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d98:	444b      	add	r3, r9
 8017d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8017d9c:	e76d      	b.n	8017c7a <_svfiprintf_r+0x4a>
 8017d9e:	fb05 3202 	mla	r2, r5, r2, r3
 8017da2:	2001      	movs	r0, #1
 8017da4:	460f      	mov	r7, r1
 8017da6:	e7a6      	b.n	8017cf6 <_svfiprintf_r+0xc6>
 8017da8:	2300      	movs	r3, #0
 8017daa:	3701      	adds	r7, #1
 8017dac:	9305      	str	r3, [sp, #20]
 8017dae:	4619      	mov	r1, r3
 8017db0:	250a      	movs	r5, #10
 8017db2:	4638      	mov	r0, r7
 8017db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017db8:	3a30      	subs	r2, #48	; 0x30
 8017dba:	2a09      	cmp	r2, #9
 8017dbc:	d903      	bls.n	8017dc6 <_svfiprintf_r+0x196>
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d0c8      	beq.n	8017d54 <_svfiprintf_r+0x124>
 8017dc2:	9105      	str	r1, [sp, #20]
 8017dc4:	e7c6      	b.n	8017d54 <_svfiprintf_r+0x124>
 8017dc6:	fb05 2101 	mla	r1, r5, r1, r2
 8017dca:	2301      	movs	r3, #1
 8017dcc:	4607      	mov	r7, r0
 8017dce:	e7f0      	b.n	8017db2 <_svfiprintf_r+0x182>
 8017dd0:	ab03      	add	r3, sp, #12
 8017dd2:	9300      	str	r3, [sp, #0]
 8017dd4:	4622      	mov	r2, r4
 8017dd6:	4b11      	ldr	r3, [pc, #68]	; (8017e1c <_svfiprintf_r+0x1ec>)
 8017dd8:	a904      	add	r1, sp, #16
 8017dda:	4640      	mov	r0, r8
 8017ddc:	f3af 8000 	nop.w
 8017de0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017de4:	4681      	mov	r9, r0
 8017de6:	d1d6      	bne.n	8017d96 <_svfiprintf_r+0x166>
 8017de8:	89a3      	ldrh	r3, [r4, #12]
 8017dea:	065b      	lsls	r3, r3, #25
 8017dec:	f53f af35 	bmi.w	8017c5a <_svfiprintf_r+0x2a>
 8017df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017df2:	b01d      	add	sp, #116	; 0x74
 8017df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017df8:	ab03      	add	r3, sp, #12
 8017dfa:	9300      	str	r3, [sp, #0]
 8017dfc:	4622      	mov	r2, r4
 8017dfe:	4b07      	ldr	r3, [pc, #28]	; (8017e1c <_svfiprintf_r+0x1ec>)
 8017e00:	a904      	add	r1, sp, #16
 8017e02:	4640      	mov	r0, r8
 8017e04:	f000 f9c2 	bl	801818c <_printf_i>
 8017e08:	e7ea      	b.n	8017de0 <_svfiprintf_r+0x1b0>
 8017e0a:	bf00      	nop
 8017e0c:	08018834 	.word	0x08018834
 8017e10:	0801883a 	.word	0x0801883a
 8017e14:	0801883e 	.word	0x0801883e
 8017e18:	00000000 	.word	0x00000000
 8017e1c:	08017b7d 	.word	0x08017b7d

08017e20 <__sfputc_r>:
 8017e20:	6893      	ldr	r3, [r2, #8]
 8017e22:	3b01      	subs	r3, #1
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	b410      	push	{r4}
 8017e28:	6093      	str	r3, [r2, #8]
 8017e2a:	da08      	bge.n	8017e3e <__sfputc_r+0x1e>
 8017e2c:	6994      	ldr	r4, [r2, #24]
 8017e2e:	42a3      	cmp	r3, r4
 8017e30:	db01      	blt.n	8017e36 <__sfputc_r+0x16>
 8017e32:	290a      	cmp	r1, #10
 8017e34:	d103      	bne.n	8017e3e <__sfputc_r+0x1e>
 8017e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e3a:	f7ff bb51 	b.w	80174e0 <__swbuf_r>
 8017e3e:	6813      	ldr	r3, [r2, #0]
 8017e40:	1c58      	adds	r0, r3, #1
 8017e42:	6010      	str	r0, [r2, #0]
 8017e44:	7019      	strb	r1, [r3, #0]
 8017e46:	4608      	mov	r0, r1
 8017e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e4c:	4770      	bx	lr

08017e4e <__sfputs_r>:
 8017e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e50:	4606      	mov	r6, r0
 8017e52:	460f      	mov	r7, r1
 8017e54:	4614      	mov	r4, r2
 8017e56:	18d5      	adds	r5, r2, r3
 8017e58:	42ac      	cmp	r4, r5
 8017e5a:	d101      	bne.n	8017e60 <__sfputs_r+0x12>
 8017e5c:	2000      	movs	r0, #0
 8017e5e:	e007      	b.n	8017e70 <__sfputs_r+0x22>
 8017e60:	463a      	mov	r2, r7
 8017e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e66:	4630      	mov	r0, r6
 8017e68:	f7ff ffda 	bl	8017e20 <__sfputc_r>
 8017e6c:	1c43      	adds	r3, r0, #1
 8017e6e:	d1f3      	bne.n	8017e58 <__sfputs_r+0xa>
 8017e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017e74 <_vfiprintf_r>:
 8017e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e78:	460c      	mov	r4, r1
 8017e7a:	b09d      	sub	sp, #116	; 0x74
 8017e7c:	4617      	mov	r7, r2
 8017e7e:	461d      	mov	r5, r3
 8017e80:	4606      	mov	r6, r0
 8017e82:	b118      	cbz	r0, 8017e8c <_vfiprintf_r+0x18>
 8017e84:	6983      	ldr	r3, [r0, #24]
 8017e86:	b90b      	cbnz	r3, 8017e8c <_vfiprintf_r+0x18>
 8017e88:	f7ff fcda 	bl	8017840 <__sinit>
 8017e8c:	4b7c      	ldr	r3, [pc, #496]	; (8018080 <_vfiprintf_r+0x20c>)
 8017e8e:	429c      	cmp	r4, r3
 8017e90:	d158      	bne.n	8017f44 <_vfiprintf_r+0xd0>
 8017e92:	6874      	ldr	r4, [r6, #4]
 8017e94:	89a3      	ldrh	r3, [r4, #12]
 8017e96:	0718      	lsls	r0, r3, #28
 8017e98:	d55e      	bpl.n	8017f58 <_vfiprintf_r+0xe4>
 8017e9a:	6923      	ldr	r3, [r4, #16]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d05b      	beq.n	8017f58 <_vfiprintf_r+0xe4>
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ea4:	2320      	movs	r3, #32
 8017ea6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017eaa:	2330      	movs	r3, #48	; 0x30
 8017eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017eb0:	9503      	str	r5, [sp, #12]
 8017eb2:	f04f 0b01 	mov.w	fp, #1
 8017eb6:	46b8      	mov	r8, r7
 8017eb8:	4645      	mov	r5, r8
 8017eba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017ebe:	b10b      	cbz	r3, 8017ec4 <_vfiprintf_r+0x50>
 8017ec0:	2b25      	cmp	r3, #37	; 0x25
 8017ec2:	d154      	bne.n	8017f6e <_vfiprintf_r+0xfa>
 8017ec4:	ebb8 0a07 	subs.w	sl, r8, r7
 8017ec8:	d00b      	beq.n	8017ee2 <_vfiprintf_r+0x6e>
 8017eca:	4653      	mov	r3, sl
 8017ecc:	463a      	mov	r2, r7
 8017ece:	4621      	mov	r1, r4
 8017ed0:	4630      	mov	r0, r6
 8017ed2:	f7ff ffbc 	bl	8017e4e <__sfputs_r>
 8017ed6:	3001      	adds	r0, #1
 8017ed8:	f000 80c2 	beq.w	8018060 <_vfiprintf_r+0x1ec>
 8017edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ede:	4453      	add	r3, sl
 8017ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8017ee2:	f898 3000 	ldrb.w	r3, [r8]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	f000 80ba 	beq.w	8018060 <_vfiprintf_r+0x1ec>
 8017eec:	2300      	movs	r3, #0
 8017eee:	f04f 32ff 	mov.w	r2, #4294967295
 8017ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ef6:	9304      	str	r3, [sp, #16]
 8017ef8:	9307      	str	r3, [sp, #28]
 8017efa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017efe:	931a      	str	r3, [sp, #104]	; 0x68
 8017f00:	46a8      	mov	r8, r5
 8017f02:	2205      	movs	r2, #5
 8017f04:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017f08:	485e      	ldr	r0, [pc, #376]	; (8018084 <_vfiprintf_r+0x210>)
 8017f0a:	f7e8 f9f1 	bl	80002f0 <memchr>
 8017f0e:	9b04      	ldr	r3, [sp, #16]
 8017f10:	bb78      	cbnz	r0, 8017f72 <_vfiprintf_r+0xfe>
 8017f12:	06d9      	lsls	r1, r3, #27
 8017f14:	bf44      	itt	mi
 8017f16:	2220      	movmi	r2, #32
 8017f18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017f1c:	071a      	lsls	r2, r3, #28
 8017f1e:	bf44      	itt	mi
 8017f20:	222b      	movmi	r2, #43	; 0x2b
 8017f22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017f26:	782a      	ldrb	r2, [r5, #0]
 8017f28:	2a2a      	cmp	r2, #42	; 0x2a
 8017f2a:	d02a      	beq.n	8017f82 <_vfiprintf_r+0x10e>
 8017f2c:	9a07      	ldr	r2, [sp, #28]
 8017f2e:	46a8      	mov	r8, r5
 8017f30:	2000      	movs	r0, #0
 8017f32:	250a      	movs	r5, #10
 8017f34:	4641      	mov	r1, r8
 8017f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f3a:	3b30      	subs	r3, #48	; 0x30
 8017f3c:	2b09      	cmp	r3, #9
 8017f3e:	d969      	bls.n	8018014 <_vfiprintf_r+0x1a0>
 8017f40:	b360      	cbz	r0, 8017f9c <_vfiprintf_r+0x128>
 8017f42:	e024      	b.n	8017f8e <_vfiprintf_r+0x11a>
 8017f44:	4b50      	ldr	r3, [pc, #320]	; (8018088 <_vfiprintf_r+0x214>)
 8017f46:	429c      	cmp	r4, r3
 8017f48:	d101      	bne.n	8017f4e <_vfiprintf_r+0xda>
 8017f4a:	68b4      	ldr	r4, [r6, #8]
 8017f4c:	e7a2      	b.n	8017e94 <_vfiprintf_r+0x20>
 8017f4e:	4b4f      	ldr	r3, [pc, #316]	; (801808c <_vfiprintf_r+0x218>)
 8017f50:	429c      	cmp	r4, r3
 8017f52:	bf08      	it	eq
 8017f54:	68f4      	ldreq	r4, [r6, #12]
 8017f56:	e79d      	b.n	8017e94 <_vfiprintf_r+0x20>
 8017f58:	4621      	mov	r1, r4
 8017f5a:	4630      	mov	r0, r6
 8017f5c:	f7ff fb12 	bl	8017584 <__swsetup_r>
 8017f60:	2800      	cmp	r0, #0
 8017f62:	d09d      	beq.n	8017ea0 <_vfiprintf_r+0x2c>
 8017f64:	f04f 30ff 	mov.w	r0, #4294967295
 8017f68:	b01d      	add	sp, #116	; 0x74
 8017f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f6e:	46a8      	mov	r8, r5
 8017f70:	e7a2      	b.n	8017eb8 <_vfiprintf_r+0x44>
 8017f72:	4a44      	ldr	r2, [pc, #272]	; (8018084 <_vfiprintf_r+0x210>)
 8017f74:	1a80      	subs	r0, r0, r2
 8017f76:	fa0b f000 	lsl.w	r0, fp, r0
 8017f7a:	4318      	orrs	r0, r3
 8017f7c:	9004      	str	r0, [sp, #16]
 8017f7e:	4645      	mov	r5, r8
 8017f80:	e7be      	b.n	8017f00 <_vfiprintf_r+0x8c>
 8017f82:	9a03      	ldr	r2, [sp, #12]
 8017f84:	1d11      	adds	r1, r2, #4
 8017f86:	6812      	ldr	r2, [r2, #0]
 8017f88:	9103      	str	r1, [sp, #12]
 8017f8a:	2a00      	cmp	r2, #0
 8017f8c:	db01      	blt.n	8017f92 <_vfiprintf_r+0x11e>
 8017f8e:	9207      	str	r2, [sp, #28]
 8017f90:	e004      	b.n	8017f9c <_vfiprintf_r+0x128>
 8017f92:	4252      	negs	r2, r2
 8017f94:	f043 0302 	orr.w	r3, r3, #2
 8017f98:	9207      	str	r2, [sp, #28]
 8017f9a:	9304      	str	r3, [sp, #16]
 8017f9c:	f898 3000 	ldrb.w	r3, [r8]
 8017fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8017fa2:	d10e      	bne.n	8017fc2 <_vfiprintf_r+0x14e>
 8017fa4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8017faa:	d138      	bne.n	801801e <_vfiprintf_r+0x1aa>
 8017fac:	9b03      	ldr	r3, [sp, #12]
 8017fae:	1d1a      	adds	r2, r3, #4
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	9203      	str	r2, [sp, #12]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	bfb8      	it	lt
 8017fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8017fbc:	f108 0802 	add.w	r8, r8, #2
 8017fc0:	9305      	str	r3, [sp, #20]
 8017fc2:	4d33      	ldr	r5, [pc, #204]	; (8018090 <_vfiprintf_r+0x21c>)
 8017fc4:	f898 1000 	ldrb.w	r1, [r8]
 8017fc8:	2203      	movs	r2, #3
 8017fca:	4628      	mov	r0, r5
 8017fcc:	f7e8 f990 	bl	80002f0 <memchr>
 8017fd0:	b140      	cbz	r0, 8017fe4 <_vfiprintf_r+0x170>
 8017fd2:	2340      	movs	r3, #64	; 0x40
 8017fd4:	1b40      	subs	r0, r0, r5
 8017fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8017fda:	9b04      	ldr	r3, [sp, #16]
 8017fdc:	4303      	orrs	r3, r0
 8017fde:	f108 0801 	add.w	r8, r8, #1
 8017fe2:	9304      	str	r3, [sp, #16]
 8017fe4:	f898 1000 	ldrb.w	r1, [r8]
 8017fe8:	482a      	ldr	r0, [pc, #168]	; (8018094 <_vfiprintf_r+0x220>)
 8017fea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017fee:	2206      	movs	r2, #6
 8017ff0:	f108 0701 	add.w	r7, r8, #1
 8017ff4:	f7e8 f97c 	bl	80002f0 <memchr>
 8017ff8:	2800      	cmp	r0, #0
 8017ffa:	d037      	beq.n	801806c <_vfiprintf_r+0x1f8>
 8017ffc:	4b26      	ldr	r3, [pc, #152]	; (8018098 <_vfiprintf_r+0x224>)
 8017ffe:	bb1b      	cbnz	r3, 8018048 <_vfiprintf_r+0x1d4>
 8018000:	9b03      	ldr	r3, [sp, #12]
 8018002:	3307      	adds	r3, #7
 8018004:	f023 0307 	bic.w	r3, r3, #7
 8018008:	3308      	adds	r3, #8
 801800a:	9303      	str	r3, [sp, #12]
 801800c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801800e:	444b      	add	r3, r9
 8018010:	9309      	str	r3, [sp, #36]	; 0x24
 8018012:	e750      	b.n	8017eb6 <_vfiprintf_r+0x42>
 8018014:	fb05 3202 	mla	r2, r5, r2, r3
 8018018:	2001      	movs	r0, #1
 801801a:	4688      	mov	r8, r1
 801801c:	e78a      	b.n	8017f34 <_vfiprintf_r+0xc0>
 801801e:	2300      	movs	r3, #0
 8018020:	f108 0801 	add.w	r8, r8, #1
 8018024:	9305      	str	r3, [sp, #20]
 8018026:	4619      	mov	r1, r3
 8018028:	250a      	movs	r5, #10
 801802a:	4640      	mov	r0, r8
 801802c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018030:	3a30      	subs	r2, #48	; 0x30
 8018032:	2a09      	cmp	r2, #9
 8018034:	d903      	bls.n	801803e <_vfiprintf_r+0x1ca>
 8018036:	2b00      	cmp	r3, #0
 8018038:	d0c3      	beq.n	8017fc2 <_vfiprintf_r+0x14e>
 801803a:	9105      	str	r1, [sp, #20]
 801803c:	e7c1      	b.n	8017fc2 <_vfiprintf_r+0x14e>
 801803e:	fb05 2101 	mla	r1, r5, r1, r2
 8018042:	2301      	movs	r3, #1
 8018044:	4680      	mov	r8, r0
 8018046:	e7f0      	b.n	801802a <_vfiprintf_r+0x1b6>
 8018048:	ab03      	add	r3, sp, #12
 801804a:	9300      	str	r3, [sp, #0]
 801804c:	4622      	mov	r2, r4
 801804e:	4b13      	ldr	r3, [pc, #76]	; (801809c <_vfiprintf_r+0x228>)
 8018050:	a904      	add	r1, sp, #16
 8018052:	4630      	mov	r0, r6
 8018054:	f3af 8000 	nop.w
 8018058:	f1b0 3fff 	cmp.w	r0, #4294967295
 801805c:	4681      	mov	r9, r0
 801805e:	d1d5      	bne.n	801800c <_vfiprintf_r+0x198>
 8018060:	89a3      	ldrh	r3, [r4, #12]
 8018062:	065b      	lsls	r3, r3, #25
 8018064:	f53f af7e 	bmi.w	8017f64 <_vfiprintf_r+0xf0>
 8018068:	9809      	ldr	r0, [sp, #36]	; 0x24
 801806a:	e77d      	b.n	8017f68 <_vfiprintf_r+0xf4>
 801806c:	ab03      	add	r3, sp, #12
 801806e:	9300      	str	r3, [sp, #0]
 8018070:	4622      	mov	r2, r4
 8018072:	4b0a      	ldr	r3, [pc, #40]	; (801809c <_vfiprintf_r+0x228>)
 8018074:	a904      	add	r1, sp, #16
 8018076:	4630      	mov	r0, r6
 8018078:	f000 f888 	bl	801818c <_printf_i>
 801807c:	e7ec      	b.n	8018058 <_vfiprintf_r+0x1e4>
 801807e:	bf00      	nop
 8018080:	080187f4 	.word	0x080187f4
 8018084:	08018834 	.word	0x08018834
 8018088:	08018814 	.word	0x08018814
 801808c:	080187d4 	.word	0x080187d4
 8018090:	0801883a 	.word	0x0801883a
 8018094:	0801883e 	.word	0x0801883e
 8018098:	00000000 	.word	0x00000000
 801809c:	08017e4f 	.word	0x08017e4f

080180a0 <_printf_common>:
 80180a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180a4:	4691      	mov	r9, r2
 80180a6:	461f      	mov	r7, r3
 80180a8:	688a      	ldr	r2, [r1, #8]
 80180aa:	690b      	ldr	r3, [r1, #16]
 80180ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80180b0:	4293      	cmp	r3, r2
 80180b2:	bfb8      	it	lt
 80180b4:	4613      	movlt	r3, r2
 80180b6:	f8c9 3000 	str.w	r3, [r9]
 80180ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80180be:	4606      	mov	r6, r0
 80180c0:	460c      	mov	r4, r1
 80180c2:	b112      	cbz	r2, 80180ca <_printf_common+0x2a>
 80180c4:	3301      	adds	r3, #1
 80180c6:	f8c9 3000 	str.w	r3, [r9]
 80180ca:	6823      	ldr	r3, [r4, #0]
 80180cc:	0699      	lsls	r1, r3, #26
 80180ce:	bf42      	ittt	mi
 80180d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80180d4:	3302      	addmi	r3, #2
 80180d6:	f8c9 3000 	strmi.w	r3, [r9]
 80180da:	6825      	ldr	r5, [r4, #0]
 80180dc:	f015 0506 	ands.w	r5, r5, #6
 80180e0:	d107      	bne.n	80180f2 <_printf_common+0x52>
 80180e2:	f104 0a19 	add.w	sl, r4, #25
 80180e6:	68e3      	ldr	r3, [r4, #12]
 80180e8:	f8d9 2000 	ldr.w	r2, [r9]
 80180ec:	1a9b      	subs	r3, r3, r2
 80180ee:	42ab      	cmp	r3, r5
 80180f0:	dc28      	bgt.n	8018144 <_printf_common+0xa4>
 80180f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80180f6:	6822      	ldr	r2, [r4, #0]
 80180f8:	3300      	adds	r3, #0
 80180fa:	bf18      	it	ne
 80180fc:	2301      	movne	r3, #1
 80180fe:	0692      	lsls	r2, r2, #26
 8018100:	d42d      	bmi.n	801815e <_printf_common+0xbe>
 8018102:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018106:	4639      	mov	r1, r7
 8018108:	4630      	mov	r0, r6
 801810a:	47c0      	blx	r8
 801810c:	3001      	adds	r0, #1
 801810e:	d020      	beq.n	8018152 <_printf_common+0xb2>
 8018110:	6823      	ldr	r3, [r4, #0]
 8018112:	68e5      	ldr	r5, [r4, #12]
 8018114:	f8d9 2000 	ldr.w	r2, [r9]
 8018118:	f003 0306 	and.w	r3, r3, #6
 801811c:	2b04      	cmp	r3, #4
 801811e:	bf08      	it	eq
 8018120:	1aad      	subeq	r5, r5, r2
 8018122:	68a3      	ldr	r3, [r4, #8]
 8018124:	6922      	ldr	r2, [r4, #16]
 8018126:	bf0c      	ite	eq
 8018128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801812c:	2500      	movne	r5, #0
 801812e:	4293      	cmp	r3, r2
 8018130:	bfc4      	itt	gt
 8018132:	1a9b      	subgt	r3, r3, r2
 8018134:	18ed      	addgt	r5, r5, r3
 8018136:	f04f 0900 	mov.w	r9, #0
 801813a:	341a      	adds	r4, #26
 801813c:	454d      	cmp	r5, r9
 801813e:	d11a      	bne.n	8018176 <_printf_common+0xd6>
 8018140:	2000      	movs	r0, #0
 8018142:	e008      	b.n	8018156 <_printf_common+0xb6>
 8018144:	2301      	movs	r3, #1
 8018146:	4652      	mov	r2, sl
 8018148:	4639      	mov	r1, r7
 801814a:	4630      	mov	r0, r6
 801814c:	47c0      	blx	r8
 801814e:	3001      	adds	r0, #1
 8018150:	d103      	bne.n	801815a <_printf_common+0xba>
 8018152:	f04f 30ff 	mov.w	r0, #4294967295
 8018156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801815a:	3501      	adds	r5, #1
 801815c:	e7c3      	b.n	80180e6 <_printf_common+0x46>
 801815e:	18e1      	adds	r1, r4, r3
 8018160:	1c5a      	adds	r2, r3, #1
 8018162:	2030      	movs	r0, #48	; 0x30
 8018164:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018168:	4422      	add	r2, r4
 801816a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801816e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018172:	3302      	adds	r3, #2
 8018174:	e7c5      	b.n	8018102 <_printf_common+0x62>
 8018176:	2301      	movs	r3, #1
 8018178:	4622      	mov	r2, r4
 801817a:	4639      	mov	r1, r7
 801817c:	4630      	mov	r0, r6
 801817e:	47c0      	blx	r8
 8018180:	3001      	adds	r0, #1
 8018182:	d0e6      	beq.n	8018152 <_printf_common+0xb2>
 8018184:	f109 0901 	add.w	r9, r9, #1
 8018188:	e7d8      	b.n	801813c <_printf_common+0x9c>
	...

0801818c <_printf_i>:
 801818c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018190:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018194:	460c      	mov	r4, r1
 8018196:	7e09      	ldrb	r1, [r1, #24]
 8018198:	b085      	sub	sp, #20
 801819a:	296e      	cmp	r1, #110	; 0x6e
 801819c:	4617      	mov	r7, r2
 801819e:	4606      	mov	r6, r0
 80181a0:	4698      	mov	r8, r3
 80181a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80181a4:	f000 80b3 	beq.w	801830e <_printf_i+0x182>
 80181a8:	d822      	bhi.n	80181f0 <_printf_i+0x64>
 80181aa:	2963      	cmp	r1, #99	; 0x63
 80181ac:	d036      	beq.n	801821c <_printf_i+0x90>
 80181ae:	d80a      	bhi.n	80181c6 <_printf_i+0x3a>
 80181b0:	2900      	cmp	r1, #0
 80181b2:	f000 80b9 	beq.w	8018328 <_printf_i+0x19c>
 80181b6:	2958      	cmp	r1, #88	; 0x58
 80181b8:	f000 8083 	beq.w	80182c2 <_printf_i+0x136>
 80181bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80181c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80181c4:	e032      	b.n	801822c <_printf_i+0xa0>
 80181c6:	2964      	cmp	r1, #100	; 0x64
 80181c8:	d001      	beq.n	80181ce <_printf_i+0x42>
 80181ca:	2969      	cmp	r1, #105	; 0x69
 80181cc:	d1f6      	bne.n	80181bc <_printf_i+0x30>
 80181ce:	6820      	ldr	r0, [r4, #0]
 80181d0:	6813      	ldr	r3, [r2, #0]
 80181d2:	0605      	lsls	r5, r0, #24
 80181d4:	f103 0104 	add.w	r1, r3, #4
 80181d8:	d52a      	bpl.n	8018230 <_printf_i+0xa4>
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	6011      	str	r1, [r2, #0]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	da03      	bge.n	80181ea <_printf_i+0x5e>
 80181e2:	222d      	movs	r2, #45	; 0x2d
 80181e4:	425b      	negs	r3, r3
 80181e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80181ea:	486f      	ldr	r0, [pc, #444]	; (80183a8 <_printf_i+0x21c>)
 80181ec:	220a      	movs	r2, #10
 80181ee:	e039      	b.n	8018264 <_printf_i+0xd8>
 80181f0:	2973      	cmp	r1, #115	; 0x73
 80181f2:	f000 809d 	beq.w	8018330 <_printf_i+0x1a4>
 80181f6:	d808      	bhi.n	801820a <_printf_i+0x7e>
 80181f8:	296f      	cmp	r1, #111	; 0x6f
 80181fa:	d020      	beq.n	801823e <_printf_i+0xb2>
 80181fc:	2970      	cmp	r1, #112	; 0x70
 80181fe:	d1dd      	bne.n	80181bc <_printf_i+0x30>
 8018200:	6823      	ldr	r3, [r4, #0]
 8018202:	f043 0320 	orr.w	r3, r3, #32
 8018206:	6023      	str	r3, [r4, #0]
 8018208:	e003      	b.n	8018212 <_printf_i+0x86>
 801820a:	2975      	cmp	r1, #117	; 0x75
 801820c:	d017      	beq.n	801823e <_printf_i+0xb2>
 801820e:	2978      	cmp	r1, #120	; 0x78
 8018210:	d1d4      	bne.n	80181bc <_printf_i+0x30>
 8018212:	2378      	movs	r3, #120	; 0x78
 8018214:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018218:	4864      	ldr	r0, [pc, #400]	; (80183ac <_printf_i+0x220>)
 801821a:	e055      	b.n	80182c8 <_printf_i+0x13c>
 801821c:	6813      	ldr	r3, [r2, #0]
 801821e:	1d19      	adds	r1, r3, #4
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	6011      	str	r1, [r2, #0]
 8018224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801822c:	2301      	movs	r3, #1
 801822e:	e08c      	b.n	801834a <_printf_i+0x1be>
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	6011      	str	r1, [r2, #0]
 8018234:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018238:	bf18      	it	ne
 801823a:	b21b      	sxthne	r3, r3
 801823c:	e7cf      	b.n	80181de <_printf_i+0x52>
 801823e:	6813      	ldr	r3, [r2, #0]
 8018240:	6825      	ldr	r5, [r4, #0]
 8018242:	1d18      	adds	r0, r3, #4
 8018244:	6010      	str	r0, [r2, #0]
 8018246:	0628      	lsls	r0, r5, #24
 8018248:	d501      	bpl.n	801824e <_printf_i+0xc2>
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	e002      	b.n	8018254 <_printf_i+0xc8>
 801824e:	0668      	lsls	r0, r5, #25
 8018250:	d5fb      	bpl.n	801824a <_printf_i+0xbe>
 8018252:	881b      	ldrh	r3, [r3, #0]
 8018254:	4854      	ldr	r0, [pc, #336]	; (80183a8 <_printf_i+0x21c>)
 8018256:	296f      	cmp	r1, #111	; 0x6f
 8018258:	bf14      	ite	ne
 801825a:	220a      	movne	r2, #10
 801825c:	2208      	moveq	r2, #8
 801825e:	2100      	movs	r1, #0
 8018260:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018264:	6865      	ldr	r5, [r4, #4]
 8018266:	60a5      	str	r5, [r4, #8]
 8018268:	2d00      	cmp	r5, #0
 801826a:	f2c0 8095 	blt.w	8018398 <_printf_i+0x20c>
 801826e:	6821      	ldr	r1, [r4, #0]
 8018270:	f021 0104 	bic.w	r1, r1, #4
 8018274:	6021      	str	r1, [r4, #0]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d13d      	bne.n	80182f6 <_printf_i+0x16a>
 801827a:	2d00      	cmp	r5, #0
 801827c:	f040 808e 	bne.w	801839c <_printf_i+0x210>
 8018280:	4665      	mov	r5, ip
 8018282:	2a08      	cmp	r2, #8
 8018284:	d10b      	bne.n	801829e <_printf_i+0x112>
 8018286:	6823      	ldr	r3, [r4, #0]
 8018288:	07db      	lsls	r3, r3, #31
 801828a:	d508      	bpl.n	801829e <_printf_i+0x112>
 801828c:	6923      	ldr	r3, [r4, #16]
 801828e:	6862      	ldr	r2, [r4, #4]
 8018290:	429a      	cmp	r2, r3
 8018292:	bfde      	ittt	le
 8018294:	2330      	movle	r3, #48	; 0x30
 8018296:	f805 3c01 	strble.w	r3, [r5, #-1]
 801829a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801829e:	ebac 0305 	sub.w	r3, ip, r5
 80182a2:	6123      	str	r3, [r4, #16]
 80182a4:	f8cd 8000 	str.w	r8, [sp]
 80182a8:	463b      	mov	r3, r7
 80182aa:	aa03      	add	r2, sp, #12
 80182ac:	4621      	mov	r1, r4
 80182ae:	4630      	mov	r0, r6
 80182b0:	f7ff fef6 	bl	80180a0 <_printf_common>
 80182b4:	3001      	adds	r0, #1
 80182b6:	d14d      	bne.n	8018354 <_printf_i+0x1c8>
 80182b8:	f04f 30ff 	mov.w	r0, #4294967295
 80182bc:	b005      	add	sp, #20
 80182be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182c2:	4839      	ldr	r0, [pc, #228]	; (80183a8 <_printf_i+0x21c>)
 80182c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80182c8:	6813      	ldr	r3, [r2, #0]
 80182ca:	6821      	ldr	r1, [r4, #0]
 80182cc:	1d1d      	adds	r5, r3, #4
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	6015      	str	r5, [r2, #0]
 80182d2:	060a      	lsls	r2, r1, #24
 80182d4:	d50b      	bpl.n	80182ee <_printf_i+0x162>
 80182d6:	07ca      	lsls	r2, r1, #31
 80182d8:	bf44      	itt	mi
 80182da:	f041 0120 	orrmi.w	r1, r1, #32
 80182de:	6021      	strmi	r1, [r4, #0]
 80182e0:	b91b      	cbnz	r3, 80182ea <_printf_i+0x15e>
 80182e2:	6822      	ldr	r2, [r4, #0]
 80182e4:	f022 0220 	bic.w	r2, r2, #32
 80182e8:	6022      	str	r2, [r4, #0]
 80182ea:	2210      	movs	r2, #16
 80182ec:	e7b7      	b.n	801825e <_printf_i+0xd2>
 80182ee:	064d      	lsls	r5, r1, #25
 80182f0:	bf48      	it	mi
 80182f2:	b29b      	uxthmi	r3, r3
 80182f4:	e7ef      	b.n	80182d6 <_printf_i+0x14a>
 80182f6:	4665      	mov	r5, ip
 80182f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80182fc:	fb02 3311 	mls	r3, r2, r1, r3
 8018300:	5cc3      	ldrb	r3, [r0, r3]
 8018302:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018306:	460b      	mov	r3, r1
 8018308:	2900      	cmp	r1, #0
 801830a:	d1f5      	bne.n	80182f8 <_printf_i+0x16c>
 801830c:	e7b9      	b.n	8018282 <_printf_i+0xf6>
 801830e:	6813      	ldr	r3, [r2, #0]
 8018310:	6825      	ldr	r5, [r4, #0]
 8018312:	6961      	ldr	r1, [r4, #20]
 8018314:	1d18      	adds	r0, r3, #4
 8018316:	6010      	str	r0, [r2, #0]
 8018318:	0628      	lsls	r0, r5, #24
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	d501      	bpl.n	8018322 <_printf_i+0x196>
 801831e:	6019      	str	r1, [r3, #0]
 8018320:	e002      	b.n	8018328 <_printf_i+0x19c>
 8018322:	066a      	lsls	r2, r5, #25
 8018324:	d5fb      	bpl.n	801831e <_printf_i+0x192>
 8018326:	8019      	strh	r1, [r3, #0]
 8018328:	2300      	movs	r3, #0
 801832a:	6123      	str	r3, [r4, #16]
 801832c:	4665      	mov	r5, ip
 801832e:	e7b9      	b.n	80182a4 <_printf_i+0x118>
 8018330:	6813      	ldr	r3, [r2, #0]
 8018332:	1d19      	adds	r1, r3, #4
 8018334:	6011      	str	r1, [r2, #0]
 8018336:	681d      	ldr	r5, [r3, #0]
 8018338:	6862      	ldr	r2, [r4, #4]
 801833a:	2100      	movs	r1, #0
 801833c:	4628      	mov	r0, r5
 801833e:	f7e7 ffd7 	bl	80002f0 <memchr>
 8018342:	b108      	cbz	r0, 8018348 <_printf_i+0x1bc>
 8018344:	1b40      	subs	r0, r0, r5
 8018346:	6060      	str	r0, [r4, #4]
 8018348:	6863      	ldr	r3, [r4, #4]
 801834a:	6123      	str	r3, [r4, #16]
 801834c:	2300      	movs	r3, #0
 801834e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018352:	e7a7      	b.n	80182a4 <_printf_i+0x118>
 8018354:	6923      	ldr	r3, [r4, #16]
 8018356:	462a      	mov	r2, r5
 8018358:	4639      	mov	r1, r7
 801835a:	4630      	mov	r0, r6
 801835c:	47c0      	blx	r8
 801835e:	3001      	adds	r0, #1
 8018360:	d0aa      	beq.n	80182b8 <_printf_i+0x12c>
 8018362:	6823      	ldr	r3, [r4, #0]
 8018364:	079b      	lsls	r3, r3, #30
 8018366:	d413      	bmi.n	8018390 <_printf_i+0x204>
 8018368:	68e0      	ldr	r0, [r4, #12]
 801836a:	9b03      	ldr	r3, [sp, #12]
 801836c:	4298      	cmp	r0, r3
 801836e:	bfb8      	it	lt
 8018370:	4618      	movlt	r0, r3
 8018372:	e7a3      	b.n	80182bc <_printf_i+0x130>
 8018374:	2301      	movs	r3, #1
 8018376:	464a      	mov	r2, r9
 8018378:	4639      	mov	r1, r7
 801837a:	4630      	mov	r0, r6
 801837c:	47c0      	blx	r8
 801837e:	3001      	adds	r0, #1
 8018380:	d09a      	beq.n	80182b8 <_printf_i+0x12c>
 8018382:	3501      	adds	r5, #1
 8018384:	68e3      	ldr	r3, [r4, #12]
 8018386:	9a03      	ldr	r2, [sp, #12]
 8018388:	1a9b      	subs	r3, r3, r2
 801838a:	42ab      	cmp	r3, r5
 801838c:	dcf2      	bgt.n	8018374 <_printf_i+0x1e8>
 801838e:	e7eb      	b.n	8018368 <_printf_i+0x1dc>
 8018390:	2500      	movs	r5, #0
 8018392:	f104 0919 	add.w	r9, r4, #25
 8018396:	e7f5      	b.n	8018384 <_printf_i+0x1f8>
 8018398:	2b00      	cmp	r3, #0
 801839a:	d1ac      	bne.n	80182f6 <_printf_i+0x16a>
 801839c:	7803      	ldrb	r3, [r0, #0]
 801839e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80183a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80183a6:	e76c      	b.n	8018282 <_printf_i+0xf6>
 80183a8:	08018845 	.word	0x08018845
 80183ac:	08018856 	.word	0x08018856

080183b0 <_sbrk_r>:
 80183b0:	b538      	push	{r3, r4, r5, lr}
 80183b2:	4c06      	ldr	r4, [pc, #24]	; (80183cc <_sbrk_r+0x1c>)
 80183b4:	2300      	movs	r3, #0
 80183b6:	4605      	mov	r5, r0
 80183b8:	4608      	mov	r0, r1
 80183ba:	6023      	str	r3, [r4, #0]
 80183bc:	f7e9 fb1c 	bl	80019f8 <_sbrk>
 80183c0:	1c43      	adds	r3, r0, #1
 80183c2:	d102      	bne.n	80183ca <_sbrk_r+0x1a>
 80183c4:	6823      	ldr	r3, [r4, #0]
 80183c6:	b103      	cbz	r3, 80183ca <_sbrk_r+0x1a>
 80183c8:	602b      	str	r3, [r5, #0]
 80183ca:	bd38      	pop	{r3, r4, r5, pc}
 80183cc:	24006564 	.word	0x24006564

080183d0 <__sread>:
 80183d0:	b510      	push	{r4, lr}
 80183d2:	460c      	mov	r4, r1
 80183d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183d8:	f000 f8bc 	bl	8018554 <_read_r>
 80183dc:	2800      	cmp	r0, #0
 80183de:	bfab      	itete	ge
 80183e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80183e2:	89a3      	ldrhlt	r3, [r4, #12]
 80183e4:	181b      	addge	r3, r3, r0
 80183e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80183ea:	bfac      	ite	ge
 80183ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80183ee:	81a3      	strhlt	r3, [r4, #12]
 80183f0:	bd10      	pop	{r4, pc}

080183f2 <__swrite>:
 80183f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183f6:	461f      	mov	r7, r3
 80183f8:	898b      	ldrh	r3, [r1, #12]
 80183fa:	05db      	lsls	r3, r3, #23
 80183fc:	4605      	mov	r5, r0
 80183fe:	460c      	mov	r4, r1
 8018400:	4616      	mov	r6, r2
 8018402:	d505      	bpl.n	8018410 <__swrite+0x1e>
 8018404:	2302      	movs	r3, #2
 8018406:	2200      	movs	r2, #0
 8018408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801840c:	f000 f868 	bl	80184e0 <_lseek_r>
 8018410:	89a3      	ldrh	r3, [r4, #12]
 8018412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801841a:	81a3      	strh	r3, [r4, #12]
 801841c:	4632      	mov	r2, r6
 801841e:	463b      	mov	r3, r7
 8018420:	4628      	mov	r0, r5
 8018422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018426:	f000 b817 	b.w	8018458 <_write_r>

0801842a <__sseek>:
 801842a:	b510      	push	{r4, lr}
 801842c:	460c      	mov	r4, r1
 801842e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018432:	f000 f855 	bl	80184e0 <_lseek_r>
 8018436:	1c43      	adds	r3, r0, #1
 8018438:	89a3      	ldrh	r3, [r4, #12]
 801843a:	bf15      	itete	ne
 801843c:	6560      	strne	r0, [r4, #84]	; 0x54
 801843e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018446:	81a3      	strheq	r3, [r4, #12]
 8018448:	bf18      	it	ne
 801844a:	81a3      	strhne	r3, [r4, #12]
 801844c:	bd10      	pop	{r4, pc}

0801844e <__sclose>:
 801844e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018452:	f000 b813 	b.w	801847c <_close_r>
	...

08018458 <_write_r>:
 8018458:	b538      	push	{r3, r4, r5, lr}
 801845a:	4c07      	ldr	r4, [pc, #28]	; (8018478 <_write_r+0x20>)
 801845c:	4605      	mov	r5, r0
 801845e:	4608      	mov	r0, r1
 8018460:	4611      	mov	r1, r2
 8018462:	2200      	movs	r2, #0
 8018464:	6022      	str	r2, [r4, #0]
 8018466:	461a      	mov	r2, r3
 8018468:	f7e9 fa6c 	bl	8001944 <_write>
 801846c:	1c43      	adds	r3, r0, #1
 801846e:	d102      	bne.n	8018476 <_write_r+0x1e>
 8018470:	6823      	ldr	r3, [r4, #0]
 8018472:	b103      	cbz	r3, 8018476 <_write_r+0x1e>
 8018474:	602b      	str	r3, [r5, #0]
 8018476:	bd38      	pop	{r3, r4, r5, pc}
 8018478:	24006564 	.word	0x24006564

0801847c <_close_r>:
 801847c:	b538      	push	{r3, r4, r5, lr}
 801847e:	4c06      	ldr	r4, [pc, #24]	; (8018498 <_close_r+0x1c>)
 8018480:	2300      	movs	r3, #0
 8018482:	4605      	mov	r5, r0
 8018484:	4608      	mov	r0, r1
 8018486:	6023      	str	r3, [r4, #0]
 8018488:	f7e9 fa82 	bl	8001990 <_close>
 801848c:	1c43      	adds	r3, r0, #1
 801848e:	d102      	bne.n	8018496 <_close_r+0x1a>
 8018490:	6823      	ldr	r3, [r4, #0]
 8018492:	b103      	cbz	r3, 8018496 <_close_r+0x1a>
 8018494:	602b      	str	r3, [r5, #0]
 8018496:	bd38      	pop	{r3, r4, r5, pc}
 8018498:	24006564 	.word	0x24006564

0801849c <_fstat_r>:
 801849c:	b538      	push	{r3, r4, r5, lr}
 801849e:	4c07      	ldr	r4, [pc, #28]	; (80184bc <_fstat_r+0x20>)
 80184a0:	2300      	movs	r3, #0
 80184a2:	4605      	mov	r5, r0
 80184a4:	4608      	mov	r0, r1
 80184a6:	4611      	mov	r1, r2
 80184a8:	6023      	str	r3, [r4, #0]
 80184aa:	f7e9 fa7d 	bl	80019a8 <_fstat>
 80184ae:	1c43      	adds	r3, r0, #1
 80184b0:	d102      	bne.n	80184b8 <_fstat_r+0x1c>
 80184b2:	6823      	ldr	r3, [r4, #0]
 80184b4:	b103      	cbz	r3, 80184b8 <_fstat_r+0x1c>
 80184b6:	602b      	str	r3, [r5, #0]
 80184b8:	bd38      	pop	{r3, r4, r5, pc}
 80184ba:	bf00      	nop
 80184bc:	24006564 	.word	0x24006564

080184c0 <_isatty_r>:
 80184c0:	b538      	push	{r3, r4, r5, lr}
 80184c2:	4c06      	ldr	r4, [pc, #24]	; (80184dc <_isatty_r+0x1c>)
 80184c4:	2300      	movs	r3, #0
 80184c6:	4605      	mov	r5, r0
 80184c8:	4608      	mov	r0, r1
 80184ca:	6023      	str	r3, [r4, #0]
 80184cc:	f7e9 fa7c 	bl	80019c8 <_isatty>
 80184d0:	1c43      	adds	r3, r0, #1
 80184d2:	d102      	bne.n	80184da <_isatty_r+0x1a>
 80184d4:	6823      	ldr	r3, [r4, #0]
 80184d6:	b103      	cbz	r3, 80184da <_isatty_r+0x1a>
 80184d8:	602b      	str	r3, [r5, #0]
 80184da:	bd38      	pop	{r3, r4, r5, pc}
 80184dc:	24006564 	.word	0x24006564

080184e0 <_lseek_r>:
 80184e0:	b538      	push	{r3, r4, r5, lr}
 80184e2:	4c07      	ldr	r4, [pc, #28]	; (8018500 <_lseek_r+0x20>)
 80184e4:	4605      	mov	r5, r0
 80184e6:	4608      	mov	r0, r1
 80184e8:	4611      	mov	r1, r2
 80184ea:	2200      	movs	r2, #0
 80184ec:	6022      	str	r2, [r4, #0]
 80184ee:	461a      	mov	r2, r3
 80184f0:	f7e9 fa75 	bl	80019de <_lseek>
 80184f4:	1c43      	adds	r3, r0, #1
 80184f6:	d102      	bne.n	80184fe <_lseek_r+0x1e>
 80184f8:	6823      	ldr	r3, [r4, #0]
 80184fa:	b103      	cbz	r3, 80184fe <_lseek_r+0x1e>
 80184fc:	602b      	str	r3, [r5, #0]
 80184fe:	bd38      	pop	{r3, r4, r5, pc}
 8018500:	24006564 	.word	0x24006564

08018504 <__malloc_lock>:
 8018504:	4770      	bx	lr

08018506 <__malloc_unlock>:
 8018506:	4770      	bx	lr

08018508 <_realloc_r>:
 8018508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801850a:	4607      	mov	r7, r0
 801850c:	4614      	mov	r4, r2
 801850e:	460e      	mov	r6, r1
 8018510:	b921      	cbnz	r1, 801851c <_realloc_r+0x14>
 8018512:	4611      	mov	r1, r2
 8018514:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018518:	f7ff bad6 	b.w	8017ac8 <_malloc_r>
 801851c:	b922      	cbnz	r2, 8018528 <_realloc_r+0x20>
 801851e:	f7ff fa85 	bl	8017a2c <_free_r>
 8018522:	4625      	mov	r5, r4
 8018524:	4628      	mov	r0, r5
 8018526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018528:	f000 f826 	bl	8018578 <_malloc_usable_size_r>
 801852c:	42a0      	cmp	r0, r4
 801852e:	d20f      	bcs.n	8018550 <_realloc_r+0x48>
 8018530:	4621      	mov	r1, r4
 8018532:	4638      	mov	r0, r7
 8018534:	f7ff fac8 	bl	8017ac8 <_malloc_r>
 8018538:	4605      	mov	r5, r0
 801853a:	2800      	cmp	r0, #0
 801853c:	d0f2      	beq.n	8018524 <_realloc_r+0x1c>
 801853e:	4631      	mov	r1, r6
 8018540:	4622      	mov	r2, r4
 8018542:	f7fe fe9c 	bl	801727e <memcpy>
 8018546:	4631      	mov	r1, r6
 8018548:	4638      	mov	r0, r7
 801854a:	f7ff fa6f 	bl	8017a2c <_free_r>
 801854e:	e7e9      	b.n	8018524 <_realloc_r+0x1c>
 8018550:	4635      	mov	r5, r6
 8018552:	e7e7      	b.n	8018524 <_realloc_r+0x1c>

08018554 <_read_r>:
 8018554:	b538      	push	{r3, r4, r5, lr}
 8018556:	4c07      	ldr	r4, [pc, #28]	; (8018574 <_read_r+0x20>)
 8018558:	4605      	mov	r5, r0
 801855a:	4608      	mov	r0, r1
 801855c:	4611      	mov	r1, r2
 801855e:	2200      	movs	r2, #0
 8018560:	6022      	str	r2, [r4, #0]
 8018562:	461a      	mov	r2, r3
 8018564:	f7e9 f9d0 	bl	8001908 <_read>
 8018568:	1c43      	adds	r3, r0, #1
 801856a:	d102      	bne.n	8018572 <_read_r+0x1e>
 801856c:	6823      	ldr	r3, [r4, #0]
 801856e:	b103      	cbz	r3, 8018572 <_read_r+0x1e>
 8018570:	602b      	str	r3, [r5, #0]
 8018572:	bd38      	pop	{r3, r4, r5, pc}
 8018574:	24006564 	.word	0x24006564

08018578 <_malloc_usable_size_r>:
 8018578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801857c:	1f18      	subs	r0, r3, #4
 801857e:	2b00      	cmp	r3, #0
 8018580:	bfbc      	itt	lt
 8018582:	580b      	ldrlt	r3, [r1, r0]
 8018584:	18c0      	addlt	r0, r0, r3
 8018586:	4770      	bx	lr

08018588 <_init>:
 8018588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801858a:	bf00      	nop
 801858c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801858e:	bc08      	pop	{r3}
 8018590:	469e      	mov	lr, r3
 8018592:	4770      	bx	lr

08018594 <_fini>:
 8018594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018596:	bf00      	nop
 8018598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801859a:	bc08      	pop	{r3}
 801859c:	469e      	mov	lr, r3
 801859e:	4770      	bx	lr
